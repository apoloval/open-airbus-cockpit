#line 1 "exception-test.cpp"



















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/auto_unit_test.hpp"

















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/unit_test.hpp"


















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/test_tools.hpp"


















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/predicate_result.hpp"


















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/class_properties.hpp"



















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/config.hpp"


















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config.hpp"






















#line 24 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/user.hpp"



























































































 











 







 









 


#line 27 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config.hpp"
#line 28 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config.hpp"



#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/select_compiler_config.hpp"



















#line 21 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/select_compiler_config.hpp"



#line 25 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/select_compiler_config.hpp"



#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/select_compiler_config.hpp"



#line 33 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/select_compiler_config.hpp"



#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/select_compiler_config.hpp"



#line 41 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/select_compiler_config.hpp"



#line 45 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/select_compiler_config.hpp"



#line 49 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/select_compiler_config.hpp"



#line 53 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/select_compiler_config.hpp"



#line 57 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/select_compiler_config.hpp"



#line 61 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/select_compiler_config.hpp"



#line 65 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/select_compiler_config.hpp"



#line 69 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/select_compiler_config.hpp"



#line 73 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/select_compiler_config.hpp"



#line 77 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/select_compiler_config.hpp"



#line 81 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/select_compiler_config.hpp"



#line 85 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/select_compiler_config.hpp"



#line 89 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/select_compiler_config.hpp"



#line 93 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/select_compiler_config.hpp"



#line 97 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/select_compiler_config.hpp"



#line 101 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/select_compiler_config.hpp"











#line 113 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/select_compiler_config.hpp"
#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config.hpp"
#line 33 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/compiler/visualc.hpp"































#line 33 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/compiler/visualc.hpp"


#pragma warning( disable : 4503 ) 






#line 43 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/compiler/visualc.hpp"











#line 55 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/compiler/visualc.hpp"








































#line 96 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/compiler/visualc.hpp"









#line 106 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/compiler/visualc.hpp"




#line 111 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/compiler/visualc.hpp"



#line 115 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/compiler/visualc.hpp"




#line 120 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/compiler/visualc.hpp"























#line 144 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/compiler/visualc.hpp"





#line 150 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/compiler/visualc.hpp"





#line 156 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/compiler/visualc.hpp"






#line 163 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/compiler/visualc.hpp"




#line 168 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/compiler/visualc.hpp"


#line 171 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/compiler/visualc.hpp"






#line 178 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/compiler/visualc.hpp"


#line 181 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/compiler/visualc.hpp"









#line 191 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/compiler/visualc.hpp"
















#line 208 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/compiler/visualc.hpp"



#line 212 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/compiler/visualc.hpp"






#line 219 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/compiler/visualc.hpp"












#line 232 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/compiler/visualc.hpp"





#line 238 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/compiler/visualc.hpp"







#line 246 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/compiler/visualc.hpp"
















#line 263 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/compiler/visualc.hpp"


#line 266 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/compiler/visualc.hpp"





































#line 304 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/compiler/visualc.hpp"



#line 308 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/compiler/visualc.hpp"

#line 310 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/compiler/visualc.hpp"

#line 312 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/compiler/visualc.hpp"

#line 314 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/compiler/visualc.hpp"

#line 316 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/compiler/visualc.hpp"

#line 318 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/compiler/visualc.hpp"

#line 320 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/compiler/visualc.hpp"

#line 322 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/compiler/visualc.hpp"



#line 326 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/compiler/visualc.hpp"
#line 327 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/compiler/visualc.hpp"


#line 330 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/compiler/visualc.hpp"









#line 340 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/compiler/visualc.hpp"
#line 36 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config.hpp"
#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config.hpp"



#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/select_stdlib_config.hpp"

















#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\cstddef"

#pragma once


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"

#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xkeycheck.h"

#pragma once






 
















































































#line 91 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xkeycheck.h"

  


















































































#line 252 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xkeycheck.h"
 #line 253 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xkeycheck.h"

#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xkeycheck.h"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xkeycheck.h"
#line 258 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xkeycheck.h"





#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"


















#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"




#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"
#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"

























#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"



#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"










#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\sal.h"













#pragma once







































































































































#line 151 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\sal.h"



#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\sal.h"






































#line 194 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\sal.h"


#line 197 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\sal.h"

#line 199 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\sal.h"





#line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\sal.h"



#line 209 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\sal.h"






#line 216 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\sal.h"











#line 228 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\sal.h"








#line 237 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\sal.h"
#line 238 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\sal.h"































































































































































































































































































































































































































































































#pragma region Input Buffer SAL 1 compatibility macros




































































































































































































































































































































































































































































                                                




                                                

















































































































































































































































































































#pragma endregion Input Buffer SAL 1 compatibility macros

















































































#line 1564 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\sal.h"






























#line 1595 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\sal.h"
























#line 1620 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\sal.h"












#line 1633 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\sal.h"






































#line 1672 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\sal.h"


























































































































#line 1795 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\sal.h"






































































































#line 1898 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\sal.h"








































































































































































#line 2067 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\sal.h"





































































































#line 2169 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\sal.h"



















































































































































































































#line 2381 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\sal.h"
extern "C" {




#line 2387 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\sal.h"



































































































































































































































#line 2615 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\sal.h"
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    
    
    
    

    
    

#line 2654 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\sal.h"









































































































































































































































#line 2888 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\sal.h"









#line 2898 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\sal.h"


    
    
#line 2903 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\sal.h"






#line 2910 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\sal.h"
#line 2911 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\sal.h"






#line 2918 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\sal.h"
#line 2919 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\sal.h"











#line 2931 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\sal.h"

































#line 2965 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\sal.h"






















}
#line 2989 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\sal.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\ConcurrencySal.h"


















#pragma once


extern "C" {
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\ConcurrencySal.h"
















































































































































































































































#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\ConcurrencySal.h"



#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\ConcurrencySal.h"


















































































#line 352 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\ConcurrencySal.h"


}
#line 356 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\ConcurrencySal.h"

#line 358 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\ConcurrencySal.h"
#line 2991 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\sal.h"


#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"




#pragma pack(push,8)

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vadefs.h"












#pragma once






#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vadefs.h"







#pragma pack(push,8)


extern "C" {
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vadefs.h"










#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vadefs.h"
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vadefs.h"





typedef __w64 unsigned int   uintptr_t;
#line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vadefs.h"

#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vadefs.h"





typedef char *  va_list;
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vadefs.h"

#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vadefs.h"





#line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vadefs.h"







#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vadefs.h"


#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vadefs.h"













#line 94 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vadefs.h"












































#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vadefs.h"


}
#line 143 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vadefs.h"

#pragma pack(pop)

#line 147 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vadefs.h"
#line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"


extern "C" {
#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"





#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"




#line 90 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"




#line 95 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"







#line 103 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"



















#line 123 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"


#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"

#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"
#line 129 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"
#line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"




















#line 151 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"









#line 161 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"
#line 162 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"

#line 164 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"










#line 175 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"

#line 177 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"
#line 178 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"





#line 184 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"

#line 186 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"




#line 191 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"

#line 193 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"

#line 195 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"
#line 196 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"





#line 202 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"

#line 204 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"
#line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"




#line 210 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"

#line 212 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"
#line 213 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"




#line 218 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"

#line 220 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"
  
#line 222 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"
#line 223 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"










#line 234 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"
#line 235 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"






#line 242 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"
#line 243 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"






#line 250 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"

















#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"




#line 273 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"








#line 282 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"






#line 289 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"
#line 290 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"





#line 296 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"






#line 303 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"
#line 304 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"






#line 311 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"
#line 312 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"




#line 317 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"


#line 320 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"

#line 322 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"
#line 323 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"
#line 324 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"





#line 330 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"










#line 341 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"

#line 343 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"
#line 344 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"
#line 345 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"








#line 354 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"





#line 360 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"






#line 367 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"
#line 368 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"

#line 370 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"
















#line 387 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"
#line 388 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"



#line 392 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"






#line 399 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"
#line 400 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"






#line 407 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"






#line 414 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"

#line 416 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"
#line 417 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"




  




#line 427 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"
#line 428 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"



  
  




#line 438 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"
#line 439 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"




   


#line 447 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"




#line 452 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"
#line 453 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"



  




#line 462 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"
#line 463 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"



  




#line 472 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"
#line 473 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"



#line 477 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"





#line 483 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"




#line 488 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"

#line 490 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"
#line 491 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"





typedef __w64 unsigned int   size_t;
#line 498 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"

#line 500 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"



typedef size_t rsize_t;

#line 506 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"
#line 507 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"





typedef __w64 int            intptr_t;
#line 514 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"

#line 516 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"














typedef __w64 int            ptrdiff_t;
#line 532 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"

#line 534 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"







typedef unsigned short wint_t;
typedef unsigned short wctype_t;

#line 545 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"


















typedef int errno_t;
#line 565 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"


typedef __w64 long __time32_t;   

#line 570 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"


typedef __int64 __time64_t;     

#line 575 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"





typedef __time64_t time_t;      
#line 582 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"

#line 584 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"







#line 592 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"
#line 593 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"



#line 597 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"

#line 599 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"




#line 604 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"

#line 606 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"
#line 607 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"





#line 613 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"



#line 617 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"




#line 622 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"

#line 624 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"
#line 625 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"












  void __cdecl _invalid_parameter_noinfo(void);
  __declspec(noreturn) void __cdecl _invalid_parameter_noinfo_noreturn(void);
#line 640 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"

 __declspec(noreturn)
void __cdecl _invoke_watson(  const wchar_t *,   const wchar_t *,   const wchar_t *, unsigned int, uintptr_t);






 








  
#line 660 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"
#line 661 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"


































#line 696 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"


































































































































































#line 859 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"
#line 860 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1926 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"















































































































































#line 2070 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"
#line 2071 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"

struct threadlocaleinfostruct;
struct threadmbcinfostruct;
typedef struct threadlocaleinfostruct * pthreadlocinfo;
typedef struct threadmbcinfostruct * pthreadmbcinfo;
struct __lc_time_data;

typedef struct localeinfo_struct
{
    pthreadlocinfo locinfo;
    pthreadmbcinfo mbcinfo;
} _locale_tstruct, *_locale_t;


typedef struct localerefcount {
        char *locale;
        wchar_t *wlocale;
        int *refcount;
        int *wrefcount;
} locrefcount;

typedef struct threadlocaleinfostruct {
        int refcount;
        unsigned int lc_codepage;
        unsigned int lc_collate_cp;
        unsigned int lc_time_cp;
        locrefcount lc_category[6];
        int lc_clike;
        int mb_cur_max;
        int * lconv_intl_refcount;
        int * lconv_num_refcount;
        int * lconv_mon_refcount;
        struct lconv * lconv;
        int * ctype1_refcount;
        unsigned short * ctype1;
        const unsigned short * pctype;
        const unsigned char * pclmap;
        const unsigned char * pcumap;
        struct __lc_time_data * lc_time_curr;
        wchar_t * locale_name[6];
} threadlocinfo;

#line 2114 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"


}
#line 2118 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"



#line 2122 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"

#line 2124 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"



#line 2128 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"

#line 2130 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"



#line 2134 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"

#line 2136 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"






#line 2143 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"



#line 2147 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"

#pragma pack(pop)

#line 2151 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"

#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"

#pragma pack(push,8)



































#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"

#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"




























#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"

#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"
#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"

		





#line 89 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"
#line 90 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"

		


		




		

 
  

 

#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"

 
  
 #line 111 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"



 
  
 #line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"










































	
	






		


			
		#line 172 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"
	#line 173 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"

	
	




		

#line 183 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"
			
		#line 185 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"
	#line 186 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"

	
	

#line 191 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"

#line 193 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"
		
	#line 195 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"

#line 197 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"






	
		#pragma detect_mismatch("_MSC_VER", "1800")
	#line 206 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"

	
		#pragma detect_mismatch("_ITERATOR_DEBUG_LEVEL", "0")
	#line 210 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"

	
		
			#pragma detect_mismatch("RuntimeLibrary", "MT_StaticRelease")
		





#line 221 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"
	#line 222 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"
#line 223 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"
#line 224 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"








	
		
	

#line 237 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"
#line 238 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"




#line 243 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"




#line 248 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"

#line 250 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"
#line 251 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"



#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"









#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"


 
#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"

 
 

 









 









 









 
































#line 339 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"





#line 345 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"
 
 
#line 348 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"

 
 

 #line 353 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"











#line 365 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\use_ansi.h"













#pragma once








#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\use_ansi.h"














    
    
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\use_ansi.h"



#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\use_ansi.h"
    

    

#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\use_ansi.h"
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\use_ansi.h"



    
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\use_ansi.h"

#pragma comment(lib, "libcpmt" "" "")






#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\use_ansi.h"

#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\use_ansi.h"

#line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\use_ansi.h"
#line 367 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"



#line 371 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"







#line 379 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"


 















 
  

#line 401 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"
   
  #line 403 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"
 #line 404 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"

 












 
















 
  

#line 439 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"
   
  #line 441 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"
 #line 442 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"

 
  

#line 447 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"
   
  #line 449 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"
 #line 450 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"


 
  





#line 460 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"

   


#line 465 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"
    
   #line 467 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"

  #line 469 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"
 #line 470 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"

 

#line 474 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"

 
  

#line 479 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"
   


     
   #line 484 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"
  #line 485 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"
 #line 486 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"

 


























  
   
  #line 517 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"
 #line 518 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"

		

 
  
  
  




  
  
  

  







   
   
   
  #line 545 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"

  
  
  
  

 












#line 565 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"

 
namespace std {
typedef bool _Bool;
}
 #line 571 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"

		





		






typedef __int64 _Longlong;
typedef unsigned __int64 _ULonglong;

		







 
#line 598 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"

		
 
#line 602 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"
 
  
typedef unsigned short char16_t;
typedef unsigned int char32_t;
 #line 607 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"
 #line 608 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"

		
		






 
namespace std {
enum _Uninitialized
	{	
	_Noinit
	};

		

#pragma warning(push)
#pragma warning(disable:4412)
class  _Lockit
	{	
public:
 

  
















#line 651 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"
	__thiscall _Lockit();	
	explicit __thiscall _Lockit(int);	
	__thiscall ~_Lockit() throw ();	
  #line 655 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"

    static  void __cdecl _Lockit_ctor(int);
    static  void __cdecl _Lockit_dtor(int);

private:
    static  void __cdecl _Lockit_ctor(_Lockit *);
    static  void __cdecl _Lockit_ctor(_Lockit *, int);
    static  void __cdecl _Lockit_dtor(_Lockit *);

	 _Lockit(const _Lockit&);				
	_Lockit&  operator=(const _Lockit&);	

	int _Locktype;

  











#line 682 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"
	};

 



































































  



  


  



  


  
 #line 768 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"

class  _Init_locks
	{	
public:
 
      










#line 785 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"
    __thiscall _Init_locks();
	__thiscall ~_Init_locks() throw ();
  #line 788 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"

private:
    static  void __cdecl _Init_locks_ctor(_Init_locks *);
    static  void __cdecl _Init_locks_dtor(_Init_locks *);

 







#line 802 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"
	};

#pragma warning(pop)
}
 #line 807 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"





		

 void __cdecl _Atexit(void (__cdecl *)(void));

typedef int _Mbstatet;
typedef unsigned long _Uint32t;




 
 

 
 #pragma pack(pop)
#line 828 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"
#line 829 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\yvals.h"





#line 6 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\cstddef"







 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stddef.h"














#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"







































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stddef.h"


extern "C" {
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stddef.h"







#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stddef.h"
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stddef.h"


namespace std { typedef decltype(__nullptr) nullptr_t; }
using ::std::nullptr_t;
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stddef.h"




 extern int * __cdecl _errno(void);


errno_t __cdecl _set_errno(  int _Value);
errno_t __cdecl _get_errno(  int * _Value);
#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stddef.h"








#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stddef.h"









#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stddef.h"

 extern unsigned long  __cdecl __threadid(void);

 extern uintptr_t __cdecl __threadhandle(void);


}
#line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stddef.h"

#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stddef.h"
#line 14 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\cstddef"
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\cstddef"

 
namespace std {
using :: ptrdiff_t; using :: size_t;
}
 #line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\cstddef"

 
namespace std {
typedef double max_align_t;	
}
 #line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\cstddef"
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\cstddef"





#line 19 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/select_stdlib_config.hpp"


#line 22 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/select_stdlib_config.hpp"







#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/select_stdlib_config.hpp"







#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/no_tr1/utility.hpp"


















#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/no_tr1/utility.hpp"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\utility"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xstddef"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"















#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"







































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\limits.h"














#pragma once

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"







































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\limits.h"















#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\limits.h"









































#line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\limits.h"






#line 83 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\limits.h"
#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\limits.h"




#line 89 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\limits.h"
#line 90 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\limits.h"


#line 93 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\limits.h"
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"





#pragma pack(push,8)


extern "C" {
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"



















typedef int (__cdecl * _onexit_t)(void);



#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"



#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"




#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"


#line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"






typedef struct _div_t {
        int quot;
        int rem;
} div_t;

typedef struct _ldiv_t {
        long quot;
        long rem;
} ldiv_t;

typedef struct _lldiv_t {
        long long quot;
        long long rem;
} lldiv_t;


#line 92 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"










#pragma pack(4)
typedef struct {
    unsigned char ld[10];
} _LDOUBLE;
#pragma pack()













#line 121 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"

typedef struct {
        double x;
} _CRT_DOUBLE;

typedef struct {
    float f;
} _CRT_FLOAT;





typedef struct {
        


        long double x;
} _LONGDOUBLE;



#pragma pack(4)
typedef struct {
    unsigned char ld12[12];
} _LDBL12;
#pragma pack()


#line 151 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"



















 extern int __mb_cur_max;



#line 175 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"
 int __cdecl ___mb_cur_max_func(void);
 int __cdecl ___mb_cur_max_l_func(_locale_t);
#line 178 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"





































typedef void (__cdecl *_purecall_handler)(void);


 _purecall_handler __cdecl _set_purecall_handler(  _purecall_handler _Handler);
 _purecall_handler __cdecl _get_purecall_handler(void);
#line 221 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"


extern "C++"
{




#line 230 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"
}
#line 232 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"



typedef void (__cdecl *_invalid_parameter_handler)(const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t);


 _invalid_parameter_handler __cdecl _set_invalid_parameter_handler(  _invalid_parameter_handler _Handler);
 _invalid_parameter_handler __cdecl _get_invalid_parameter_handler(void);
#line 241 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"











 unsigned long * __cdecl __doserrno(void);


errno_t __cdecl _set_doserrno(  unsigned long _Value);
errno_t __cdecl _get_doserrno(  unsigned long * _Value);


 __declspec(deprecated("This function or variable may be unsafe. Consider using " "strerror" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) char ** __cdecl __sys_errlist(void);


 __declspec(deprecated("This function or variable may be unsafe. Consider using " "strerror" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) int * __cdecl __sys_nerr(void);




















#line 284 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"




 extern int __argc;          
 extern char ** __argv;      
 extern wchar_t ** __wargv;  







#line 299 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"

#line 301 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"





 extern char ** _environ;    
 extern wchar_t ** _wenviron;    

#line 310 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_pgmptr" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  extern char * _pgmptr;      
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_wpgmptr" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  extern wchar_t * _wpgmptr;  
























#line 338 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"

errno_t __cdecl _get_pgmptr(  char ** _Value);
errno_t __cdecl _get_wpgmptr(  wchar_t ** _Value);



#line 345 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_fmode" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  extern int _fmode;          



#line 351 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"
#line 352 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"

 errno_t __cdecl _set_fmode(  int _Mode);
 errno_t __cdecl _get_fmode(  int * _PMode);





#line 361 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"
extern "C++"
{
template <typename _CountofType, size_t _SizeOfArray>
char (*__countof_helper( _CountofType (&_Array)[_SizeOfArray]))[_SizeOfArray];

}
#line 368 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"
#line 369 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"







 __declspec(noreturn) void __cdecl exit(  int _Code);

 __declspec(noreturn) void __cdecl _exit(  int _Code);
 __declspec(noreturn) void __cdecl abort(void);
#line 381 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"

 unsigned int __cdecl _set_abort_behavior(  unsigned int _Flags,   unsigned int _Mask);

int       __cdecl abs(  int _X);
long      __cdecl labs(  long _X);
long long __cdecl llabs(  long long _X);

        __int64    __cdecl _abs64(__int64);




















#line 410 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"















#line 426 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"
        int    __cdecl atexit(void (__cdecl *)(void));
#line 428 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"
   double  __cdecl atof(  const char *_String);
   double  __cdecl _atof_l(  const char *_String,   _locale_t _Locale);
    int    __cdecl atoi(  const char *_Str);
   int    __cdecl _atoi_l(  const char *_Str,   _locale_t _Locale);
   long   __cdecl atol(  const char *_Str);
   long   __cdecl _atol_l(  const char *_Str,   _locale_t _Locale);
   long long __cdecl atoll(  const char *_Str);
   long long __cdecl _atoll_l(  const char *_Str,   _locale_t _Locale);



   void * __cdecl bsearch_s(  const void * _Key,   const void * _Base,
          rsize_t _NumOfElements,   rsize_t _SizeOfElements,
          int (__cdecl * _PtFuncCompare)(void *, const void *, const void *), void * _Context);
#line 443 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"
   void * __cdecl bsearch(  const void * _Key,   const void * _Base,
          size_t _NumOfElements,   size_t _SizeOfElements,
          int (__cdecl * _PtFuncCompare)(const void *, const void *));


 void __cdecl qsort_s(  void * _Base,
          rsize_t _NumOfElements,   rsize_t _SizeOfElements,
          int (__cdecl * _PtFuncCompare)(void *, const void *, const void *), void *_Context);
#line 452 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"
 void __cdecl qsort(  void * _Base,
          size_t _NumOfElements,   size_t _SizeOfElements,
          int (__cdecl * _PtFuncCompare)(const void *, const void *));
#line 456 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"
          unsigned short __cdecl _byteswap_ushort(  unsigned short _Short);
          unsigned long  __cdecl _byteswap_ulong (  unsigned long _Long);
          unsigned __int64 __cdecl _byteswap_uint64(  unsigned __int64 _Int64);
   div_t  __cdecl div(  int _Numerator,   int _Denominator);


   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_dupenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) char * __cdecl getenv(  const char * _VarName);

  errno_t __cdecl getenv_s(  size_t * _ReturnSize,   char * _DstBuf,   rsize_t _DstSize,   const char * _VarName);
#line 466 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"
extern "C++" { template <size_t _Size> inline errno_t __cdecl getenv_s(  size_t * _ReturnSize, char (&_Dest)[_Size],   const char * _VarName) throw() { return getenv_s(_ReturnSize, _Dest, _Size, _VarName); } }



#line 471 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"

  errno_t __cdecl _dupenv_s(    char **_PBuffer,   size_t * _PBufferSizeInBytes,   const char * _VarName);



#line 477 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"
#line 478 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"

  errno_t __cdecl _itoa_s(  int _Value,   char * _DstBuf,   size_t _Size,   int _Radix);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _itoa_s(  int _Value, char (&_Dest)[_Size],   int _Radix) throw() { return _itoa_s(_Value, _Dest, _Size, _Radix); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_itoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char * __cdecl _itoa( int _Value,   char *_Dest,  int _Radix);
  errno_t __cdecl _i64toa_s(  __int64 _Val,   char * _DstBuf,   size_t _Size,   int _Radix);
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_i64toa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) char * __cdecl _i64toa(  __int64 _Val,     char * _DstBuf,   int _Radix);
  errno_t __cdecl _ui64toa_s(  unsigned __int64 _Val,   char * _DstBuf,   size_t _Size,   int _Radix);
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ui64toa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) char * __cdecl _ui64toa(  unsigned __int64 _Val,     char * _DstBuf,   int _Radix);
   __int64 __cdecl _atoi64(  const char * _String);
   __int64 __cdecl _atoi64_l(  const char * _String,   _locale_t _Locale);
   __int64 __cdecl _strtoi64(  const char * _String,     char ** _EndPtr,   int _Radix);
   __int64 __cdecl _strtoi64_l(  const char * _String,     char ** _EndPtr,   int _Radix,   _locale_t _Locale);
   unsigned __int64 __cdecl _strtoui64(  const char * _String,     char ** _EndPtr,   int _Radix);
   unsigned __int64 __cdecl _strtoui64_l(  const char * _String,     char ** _EndPtr,   int  _Radix,   _locale_t _Locale);
   ldiv_t __cdecl ldiv(  long _Numerator,   long _Denominator);
   lldiv_t __cdecl lldiv(  long long _Numerator,   long long _Denominator);

extern "C++"
{
    inline long abs(long _X) throw()
    {
        return labs(_X);
    }
    inline long long abs(long long _X) throw()
    {
        return llabs(_X);
    }
    inline ldiv_t div(long _A1, long _A2) throw()
    {
        return ldiv(_A1, _A2);
    }
    inline lldiv_t div(long long _A1, long long _A2) throw()
    {
        return lldiv(_A1, _A2);
    }
}
#line 515 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"
  errno_t __cdecl _ltoa_s(  long _Val,   char * _DstBuf,   size_t _Size,   int _Radix);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _ltoa_s(  long _Value, char (&_Dest)[_Size],   int _Radix) throw() { return _ltoa_s(_Value, _Dest, _Size, _Radix); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ltoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char * __cdecl _ltoa( long _Value,   char *_Dest,  int _Radix);
   int    __cdecl mblen(    const char * _Ch,   size_t _MaxCount);
   int    __cdecl _mblen_l(    const char * _Ch,   size_t _MaxCount,   _locale_t _Locale);
   size_t __cdecl _mbstrlen(  const char * _Str);
   size_t __cdecl _mbstrlen_l(  const char *_Str,   _locale_t _Locale);
   size_t __cdecl _mbstrnlen(  const char *_Str,   size_t _MaxCount);
   size_t __cdecl _mbstrnlen_l(  const char *_Str,   size_t _MaxCount,   _locale_t _Locale);
 int    __cdecl mbtowc(    wchar_t * _DstCh,     const char * _SrcCh,   size_t _SrcSizeInBytes);
 int    __cdecl _mbtowc_l(    wchar_t * _DstCh,     const char * _SrcCh,   size_t _SrcSizeInBytes,   _locale_t _Locale);
  errno_t __cdecl mbstowcs_s(  size_t * _PtNumOfCharConverted,   wchar_t * _DstBuf,   size_t _SizeInWords,   const char * _SrcBuf,   size_t _MaxCount );
extern "C++" { template <size_t _Size> inline errno_t __cdecl mbstowcs_s(  size_t * _PtNumOfCharConverted,   wchar_t (&_Dest)[_Size],   const char * _Source,   size_t _MaxCount) throw() { return mbstowcs_s(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "mbstowcs_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  size_t __cdecl mbstowcs( wchar_t *_Dest,  const char * _Source,  size_t _MaxCount);

  errno_t __cdecl _mbstowcs_s_l(  size_t * _PtNumOfCharConverted,   wchar_t * _DstBuf,   size_t _SizeInWords,   const char * _SrcBuf,   size_t _MaxCount,   _locale_t _Locale);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _mbstowcs_s_l(  size_t * _PtNumOfCharConverted, wchar_t (&_Dest)[_Size],   const char * _Source,   size_t _MaxCount,   _locale_t _Locale) throw() { return _mbstowcs_s_l(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_mbstowcs_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  size_t __cdecl _mbstowcs_l(  wchar_t *_Dest,   const char * _Source,   size_t _MaxCount,   _locale_t _Locale);

   int    __cdecl rand(void);


#line 538 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"

  int    __cdecl _set_error_mode(  int _Mode);

 void   __cdecl srand(  unsigned int _Seed);
   double __cdecl strtod(  const char * _Str,     char ** _EndPtr);
   double __cdecl _strtod_l(  const char * _Str,     char ** _EndPtr,   _locale_t _Locale);
   long   __cdecl strtol(  const char * _Str,     char ** _EndPtr,   int _Radix );
   long   __cdecl _strtol_l(  const char *_Str,     char **_EndPtr,   int _Radix,   _locale_t _Locale);
   long long  __cdecl strtoll(  const char * _Str,     char ** _EndPtr,   int _Radix );
   long long  __cdecl _strtoll_l(  const char * _Str,     char ** _EndPtr,   int _Radix,   _locale_t _Locale );
   unsigned long __cdecl strtoul(  const char * _Str,     char ** _EndPtr,   int _Radix);
   unsigned long __cdecl _strtoul_l(const char * _Str,     char **_EndPtr,   int _Radix,   _locale_t _Locale);
   unsigned long long __cdecl strtoull(  const char * _Str,     char ** _EndPtr,   int _Radix);
   unsigned long long __cdecl _strtoull_l(  const char * _Str,     char ** _EndPtr,   int _Radix,   _locale_t _Locale);
   long double __cdecl strtold(  const char * _Str,     char ** _EndPtr);
   long double __cdecl _strtold_l(  const char * _Str,     char ** _EndPtr,   _locale_t _Locale);
   float __cdecl strtof(  const char * _Str,     char ** _EndPtr);
   float __cdecl _strtof_l(  const char * _Str,     char ** _EndPtr,   _locale_t _Locale);




 int __cdecl system(  const char * _Command);
#line 562 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"
#line 563 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"

  errno_t __cdecl _ultoa_s(  unsigned long _Val,   char * _DstBuf,   size_t _Size,   int _Radix);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _ultoa_s(  unsigned long _Value, char (&_Dest)[_Size],   int _Radix) throw() { return _ultoa_s(_Value, _Dest, _Size, _Radix); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ultoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char * __cdecl _ultoa( unsigned long _Value,   char *_Dest,  int _Radix);
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "wctomb_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) int    __cdecl wctomb(  char * _MbCh,   wchar_t _WCh);
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wctomb_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) int    __cdecl _wctomb_l(    char * _MbCh,   wchar_t _WCh,   _locale_t _Locale);

  errno_t __cdecl wctomb_s(  int * _SizeConverted,   char * _MbCh,   rsize_t _SizeInBytes,   wchar_t _WCh);
#line 572 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"
  errno_t __cdecl _wctomb_s_l(  int * _SizeConverted,   char * _MbCh,   size_t _SizeInBytes,   wchar_t _WCh,   _locale_t _Locale);
  errno_t __cdecl wcstombs_s(  size_t * _PtNumOfCharConverted,   char * _Dst,   size_t _DstSizeInBytes,   const wchar_t * _Src,   size_t _MaxCountInBytes);
extern "C++" { template <size_t _Size> inline errno_t __cdecl wcstombs_s(  size_t * _PtNumOfCharConverted,   char (&_Dest)[_Size],   const wchar_t * _Source,   size_t _MaxCount) throw() { return wcstombs_s(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcstombs_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  size_t __cdecl wcstombs( char *_Dest,  const wchar_t * _Source,  size_t _MaxCount);
  errno_t __cdecl _wcstombs_s_l(  size_t * _PtNumOfCharConverted,   char * _Dst,   size_t _DstSizeInBytes,   const wchar_t * _Src,   size_t _MaxCountInBytes,   _locale_t _Locale);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcstombs_s_l(  size_t * _PtNumOfCharConverted,   char (&_Dest)[_Size],   const wchar_t * _Source,   size_t _MaxCount,   _locale_t _Locale) throw() { return _wcstombs_s_l(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcstombs_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  size_t __cdecl _wcstombs_l(  char *_Dest,   const wchar_t * _Source,   size_t _MaxCount,   _locale_t _Locale);

























#line 605 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"


































#line 640 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"
        __declspec(noalias) __declspec(restrict)    void * __cdecl calloc(   size_t _Count,    size_t _Size);
                     __declspec(noalias)                                                                             void   __cdecl free(    void * _Memory);
        __declspec(noalias) __declspec(restrict)                              void * __cdecl malloc(   size_t _Size);
 
       __declspec(noalias) __declspec(restrict)                           void * __cdecl realloc(    void * _Memory,    size_t _NewSize);
 
       __declspec(noalias) __declspec(restrict)                       void * __cdecl _recalloc(    void * _Memory,    size_t _Count,    size_t _Size);
                     __declspec(noalias)                                                                             void   __cdecl _aligned_free(    void * _Memory);
       __declspec(noalias) __declspec(restrict)                              void * __cdecl _aligned_malloc(   size_t _Size,   size_t _Alignment);
       __declspec(noalias) __declspec(restrict)                              void * __cdecl _aligned_offset_malloc(   size_t _Size,   size_t _Alignment,   size_t _Offset);
 
       __declspec(noalias) __declspec(restrict)                              void * __cdecl _aligned_realloc(    void * _Memory,    size_t _NewSize,   size_t _Alignment);
 
       __declspec(noalias) __declspec(restrict)                       void * __cdecl _aligned_recalloc(    void * _Memory,    size_t _Count,    size_t _Size,   size_t _Alignment);
 
       __declspec(noalias) __declspec(restrict)                              void * __cdecl _aligned_offset_realloc(    void * _Memory,    size_t _NewSize,   size_t _Alignment,   size_t _Offset);
 
       __declspec(noalias) __declspec(restrict)                       void * __cdecl _aligned_offset_recalloc(    void * _Memory,    size_t _Count,    size_t _Size,   size_t _Alignment,   size_t _Offset);
                                                    size_t __cdecl _aligned_msize(  void * _Memory,   size_t _Alignment,   size_t _Offset);


















#line 678 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"

#line 680 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"





  errno_t __cdecl _itow_s (  int _Val,   wchar_t * _DstBuf,   size_t _SizeInWords,   int _Radix);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _itow_s(  int _Value, wchar_t (&_Dest)[_Size],   int _Radix) throw() { return _itow_s(_Value, _Dest, _Size, _Radix); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_itow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t * __cdecl _itow( int _Value,   wchar_t *_Dest,  int _Radix);
  errno_t __cdecl _ltow_s (  long _Val,   wchar_t * _DstBuf,   size_t _SizeInWords,   int _Radix);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _ltow_s(  long _Value, wchar_t (&_Dest)[_Size],   int _Radix) throw() { return _ltow_s(_Value, _Dest, _Size, _Radix); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ltow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t * __cdecl _ltow( long _Value,   wchar_t *_Dest,  int _Radix);
  errno_t __cdecl _ultow_s (  unsigned long _Val,   wchar_t * _DstBuf,   size_t _SizeInWords,   int _Radix);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _ultow_s(  unsigned long _Value, wchar_t (&_Dest)[_Size],   int _Radix) throw() { return _ultow_s(_Value, _Dest, _Size, _Radix); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ultow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t * __cdecl _ultow( unsigned long _Value,   wchar_t *_Dest,  int _Radix);
   double __cdecl wcstod(  const wchar_t * _Str,     wchar_t ** _EndPtr);
   double __cdecl _wcstod_l(  const wchar_t *_Str,     wchar_t ** _EndPtr,   _locale_t _Locale);
   long   __cdecl wcstol(  const wchar_t *_Str,     wchar_t ** _EndPtr, int _Radix);
   long   __cdecl _wcstol_l(  const wchar_t *_Str,     wchar_t **_EndPtr, int _Radix,   _locale_t _Locale);
   long long  __cdecl wcstoll(  const wchar_t *_Str,     wchar_t **_EndPtr, int _Radix);
   long long  __cdecl _wcstoll_l(  const wchar_t *_Str,     wchar_t **_EndPtr, int _Radix,   _locale_t _Locale);
   unsigned long __cdecl wcstoul(  const wchar_t *_Str,     wchar_t ** _EndPtr, int _Radix);
   unsigned long __cdecl _wcstoul_l(  const wchar_t *_Str,     wchar_t **_EndPtr, int _Radix,   _locale_t _Locale);
   unsigned long long __cdecl wcstoull(  const wchar_t *_Str,     wchar_t ** _EndPtr, int _Radix);
   unsigned long long __cdecl _wcstoull_l(  const wchar_t *_Str,     wchar_t ** _EndPtr, int _Radix,   _locale_t _Locale);
   long double __cdecl wcstold(  const wchar_t * _Str,     wchar_t ** _EndPtr);
   long double __cdecl _wcstold_l(  const wchar_t * _Str,     wchar_t ** _EndPtr,   _locale_t _Locale);
   float __cdecl wcstof(  const wchar_t * _Str,     wchar_t ** _EndPtr);
   float __cdecl _wcstof_l(  const wchar_t * _Str,     wchar_t ** _EndPtr,   _locale_t _Locale);



   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wdupenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) wchar_t * __cdecl _wgetenv(  const wchar_t * _VarName);
  errno_t __cdecl _wgetenv_s(  size_t * _ReturnSize,   wchar_t * _DstBuf,   size_t _DstSizeInWords,   const wchar_t * _VarName);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wgetenv_s(  size_t * _ReturnSize, wchar_t (&_Dest)[_Size],   const wchar_t * _VarName) throw() { return _wgetenv_s(_ReturnSize, _Dest, _Size, _VarName); } }




#line 719 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"

  errno_t __cdecl _wdupenv_s(    wchar_t **_Buffer,   size_t *_BufferSizeInWords,   const wchar_t *_VarName);



#line 725 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"



 int __cdecl _wsystem(  const wchar_t * _Command);
#line 730 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"

#line 732 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"

   double __cdecl _wtof(  const wchar_t *_Str);
   double __cdecl _wtof_l(  const wchar_t *_Str,   _locale_t _Locale);
   int __cdecl _wtoi(  const wchar_t *_Str);
   int __cdecl _wtoi_l(  const wchar_t *_Str,   _locale_t _Locale);
   long __cdecl _wtol(  const wchar_t *_Str);
   long __cdecl _wtol_l(  const wchar_t *_Str,   _locale_t _Locale);
   long long __cdecl _wtoll(  const wchar_t *_Str);
   long long __cdecl _wtoll_l(  const wchar_t *_Str,   _locale_t _Locale);

  errno_t __cdecl _i64tow_s(  __int64 _Val,   wchar_t * _DstBuf,   size_t _SizeInWords,   int _Radix);
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_i64tow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) wchar_t * __cdecl _i64tow(  __int64 _Val,     wchar_t * _DstBuf,   int _Radix);
  errno_t __cdecl _ui64tow_s(  unsigned __int64 _Val,   wchar_t * _DstBuf,   size_t _SizeInWords,   int _Radix);
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ui64tow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) wchar_t * __cdecl _ui64tow(  unsigned __int64 _Val,     wchar_t * _DstBuf,   int _Radix);
   __int64   __cdecl _wtoi64(  const wchar_t *_Str);
   __int64   __cdecl _wtoi64_l(  const wchar_t *_Str,   _locale_t _Locale);
   __int64   __cdecl _wcstoi64(  const wchar_t * _Str,     wchar_t ** _EndPtr,   int _Radix);
   __int64   __cdecl _wcstoi64_l(  const wchar_t * _Str,     wchar_t ** _EndPtr,   int _Radix,   _locale_t _Locale);
   unsigned __int64  __cdecl _wcstoui64(  const wchar_t * _Str,     wchar_t ** _EndPtr,   int _Radix);
   unsigned __int64  __cdecl _wcstoui64_l(  const wchar_t *_Str ,     wchar_t ** _EndPtr,   int _Radix,   _locale_t _Locale);


#line 755 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"













#line 769 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"

   char * __cdecl _fullpath(  char * _FullPath,   const char * _Path,   size_t _SizeInBytes);





#line 777 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"

  errno_t __cdecl _ecvt_s(  char * _DstBuf,   size_t _Size,   double _Val,   int _NumOfDights,   int * _PtDec,   int * _PtSign);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _ecvt_s(char (&_Dest)[_Size],   double _Value,   int _NumOfDigits,   int * _PtDec,   int * _PtSign) throw() { return _ecvt_s(_Dest, _Size, _Value, _NumOfDigits, _PtDec, _PtSign); } }
   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ecvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) char * __cdecl _ecvt(  double _Val,   int _NumOfDigits,   int * _PtDec,   int * _PtSign);
  errno_t __cdecl _fcvt_s(  char * _DstBuf,   size_t _Size,   double _Val,   int _NumOfDec,   int * _PtDec,   int * _PtSign);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _fcvt_s(char (&_Dest)[_Size],   double _Value,   int _NumOfDigits,   int * _PtDec,   int * _PtSign) throw() { return _fcvt_s(_Dest, _Size, _Value, _NumOfDigits, _PtDec, _PtSign); } }
   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) char * __cdecl _fcvt(  double _Val,   int _NumOfDec,   int * _PtDec,   int * _PtSign);
 errno_t __cdecl _gcvt_s(  char * _DstBuf,   size_t _Size,   double _Val,   int _NumOfDigits);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _gcvt_s(char (&_Dest)[_Size],   double _Value,   int _NumOfDigits) throw() { return _gcvt_s(_Dest, _Size, _Value, _NumOfDigits); } }
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_gcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) char * __cdecl _gcvt(  double _Val,   int _NumOfDigits,     char * _DstBuf);

   int __cdecl _atodbl(  _CRT_DOUBLE * _Result,   char * _Str);
   int __cdecl _atoldbl(  _LDOUBLE * _Result,   char * _Str);
   int __cdecl _atoflt(  _CRT_FLOAT * _Result,   const char * _Str);
   int __cdecl _atodbl_l(  _CRT_DOUBLE * _Result,   char * _Str,   _locale_t _Locale);
   int __cdecl _atoldbl_l(  _LDOUBLE * _Result,   char * _Str,   _locale_t _Locale);
   int __cdecl _atoflt_l(  _CRT_FLOAT * _Result,   const char * _Str,   _locale_t _Locale);
          unsigned long __cdecl _lrotl(  unsigned long _Val,   int _Shift);
          unsigned long __cdecl _lrotr(  unsigned long _Val,   int _Shift);
  errno_t   __cdecl _makepath_s(  char * _PathResult,   size_t _SizeInWords,   const char * _Drive,   const char * _Dir,   const char * _Filename,
          const char * _Ext);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _makepath_s(char (&_Path)[_Size],   const char * _Drive,   const char * _Dir,   const char * _Filename,   const char * _Ext) throw() { return _makepath_s(_Path, _Size, _Drive, _Dir, _Filename, _Ext); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_makepath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  void __cdecl _makepath(  char *_Path,  const char * _Drive,  const char * _Dir,  const char * _Filename,  const char * _Ext);












#line 813 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"












#line 826 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"
        _onexit_t __cdecl _onexit(  _onexit_t _Func);
#line 828 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"



 void __cdecl perror(  const char * _ErrMsg);
#line 833 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"

#pragma warning (push)
#pragma warning (disable:6540) 


   int    __cdecl _putenv(  const char * _EnvString);
  errno_t __cdecl _putenv_s(  const char * _Name,   const char * _Value);
#line 841 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"

        unsigned int __cdecl _rotl(  unsigned int _Val,   int _Shift);
        unsigned __int64 __cdecl _rotl64(  unsigned __int64 _Val,   int _Shift);
        unsigned int __cdecl _rotr(  unsigned int _Val,   int _Shift);
        unsigned __int64 __cdecl _rotr64(  unsigned __int64 _Val,   int _Shift);
#pragma warning (pop)


 errno_t __cdecl _searchenv_s(  const char * _Filename,   const char * _EnvVar,   char * _ResultPath,   size_t _SizeInBytes);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _searchenv_s(  const char * _Filename,   const char * _EnvVar, char (&_ResultPath)[_Size]) throw() { return _searchenv_s(_Filename, _EnvVar, _ResultPath, _Size); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_searchenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  void __cdecl _searchenv( const char * _Filename,  const char * _EnvVar,   char *_ResultPath);
#line 853 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_splitpath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  void   __cdecl _splitpath(  const char * _FullPath,     char * _Drive,     char * _Dir,     char * _Filename,     char * _Ext);
  errno_t  __cdecl _splitpath_s(  const char * _FullPath,
                  char * _Drive,   size_t _DriveSize,
                  char * _Dir,   size_t _DirSize,
                  char * _Filename,   size_t _FilenameSize,
                  char * _Ext,   size_t _ExtSize);
extern "C++" { template <size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize> inline errno_t __cdecl _splitpath_s(  const char *_Dest,   char (&_Drive)[_DriveSize],   char (&_Dir)[_DirSize],   char (&_Name)[_NameSize],   char (&_Ext)[_ExtSize]) throw() { return _splitpath_s(_Dest, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize); } }

 void   __cdecl _swab(    char * _Buf1,     char * _Buf2, int _SizeInBytes);








#line 872 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"

   wchar_t * __cdecl _wfullpath(  wchar_t * _FullPath,   const wchar_t * _Path,   size_t _SizeInWords);



#line 878 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"

  errno_t __cdecl _wmakepath_s(  wchar_t * _PathResult,   size_t _SIZE,   const wchar_t * _Drive,   const wchar_t * _Dir,   const wchar_t * _Filename,
          const wchar_t * _Ext);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wmakepath_s(wchar_t (&_ResultPath)[_Size],   const wchar_t * _Drive,   const wchar_t * _Dir,   const wchar_t * _Filename,   const wchar_t * _Ext) throw() { return _wmakepath_s(_ResultPath, _Size, _Drive, _Dir, _Filename, _Ext); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wmakepath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  void __cdecl _wmakepath(  wchar_t *_ResultPath,  const wchar_t * _Drive,  const wchar_t * _Dir,  const wchar_t * _Filename,  const wchar_t * _Ext);


 void __cdecl _wperror(  const wchar_t * _ErrMsg);
#line 887 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"


   int    __cdecl _wputenv(  const wchar_t * _EnvString);
  errno_t __cdecl _wputenv_s(  const wchar_t * _Name,   const wchar_t * _Value);
 errno_t __cdecl _wsearchenv_s(  const wchar_t * _Filename,   const wchar_t * _EnvVar,   wchar_t * _ResultPath,   size_t _SizeInWords);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wsearchenv_s(  const wchar_t * _Filename,   const wchar_t * _EnvVar, wchar_t (&_ResultPath)[_Size]) throw() { return _wsearchenv_s(_Filename, _EnvVar, _ResultPath, _Size); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsearchenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  void __cdecl _wsearchenv( const wchar_t * _Filename,  const wchar_t * _EnvVar,   wchar_t *_ResultPath);
#line 895 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsplitpath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  void   __cdecl _wsplitpath(  const wchar_t * _FullPath,     wchar_t * _Drive,     wchar_t * _Dir,     wchar_t * _Filename,     wchar_t * _Ext);
 errno_t __cdecl _wsplitpath_s(  const wchar_t * _FullPath,
                  wchar_t * _Drive,   size_t _DriveSize,
                  wchar_t * _Dir,   size_t _DirSize,
                  wchar_t * _Filename,   size_t _FilenameSize,
                  wchar_t * _Ext,   size_t _ExtSize);
extern "C++" { template <size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize> inline errno_t __cdecl _wsplitpath_s(  const wchar_t *_Path,   wchar_t (&_Drive)[_DriveSize],   wchar_t (&_Dir)[_DirSize],   wchar_t (&_Name)[_NameSize],   wchar_t (&_Ext)[_ExtSize]) throw() { return _wsplitpath_s(_Path, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize); } }


#line 906 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"



__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "SetErrorMode" " instead. See online help for details."))  void __cdecl _seterrormode(  int _Mode);
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "Beep" " instead. See online help for details."))  void __cdecl _beep(  unsigned _Frequency,   unsigned _Duration);
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "Sleep" " instead. See online help for details."))  void __cdecl _sleep(  unsigned long _Duration);
#line 913 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"

















#line 931 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"

#pragma warning(push)
#pragma warning(disable: 4141) 
  __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_ecvt" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ecvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char * __cdecl ecvt(  double _Val,   int _NumOfDigits,   int * _PtDec,   int * _PtSign);
  __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_fcvt" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char * __cdecl fcvt(  double _Val,   int _NumOfDec,   int * _PtDec,   int * _PtSign);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_gcvt" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))           char * __cdecl gcvt(  double _Val,   int _NumOfDigits,     char * _DstBuf);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_itoa" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_itoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))           char * __cdecl itoa(  int _Val,     char * _DstBuf,   int _Radix);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_ltoa" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ltoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))           char * __cdecl ltoa(  long _Val,     char * _DstBuf,   int _Radix);


  __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_putenv" ". See online help for details."))  int    __cdecl putenv(  const char * _EnvString);
#line 943 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"

__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_swab" ". See online help for details."))                                                                            void   __cdecl swab(  char * _Buf1,  char * _Buf2,   int _SizeInBytes);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_ultoa" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ultoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))         char * __cdecl ultoa(  unsigned long _Val,     char * _Dstbuf,   int _Radix);
#pragma warning(pop)
_onexit_t __cdecl onexit(  _onexit_t _Func);


#line 951 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"


}

#line 956 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"

#pragma pack(pop)

#line 960 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdlib.h"

#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xstddef"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\initializer_list"

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

namespace std {
		
template<class _Elem>
	class initializer_list
	{	
public:
	typedef _Elem value_type;
	typedef const _Elem& reference;
	typedef const _Elem& const_reference;
	typedef size_t size_type;

	typedef const _Elem* iterator;
	typedef const _Elem* const_iterator;

	initializer_list() throw ()
		: _First(0), _Last(0)
		{	
		}

	initializer_list(const _Elem *_First_arg,
		const _Elem *_Last_arg) throw ()
		: _First(_First_arg), _Last(_Last_arg)
		{	
		}

	const _Elem *begin() const throw ()
		{	
		return (_First);
		}

	const _Elem *end() const throw ()
		{	
		return (_Last);
		}

	size_t size() const throw ()
		{	
		return ((size_t)(_Last - _First));
		}

private:
	const _Elem *_First;
	const _Elem *_Last;
	};

		
template<class _Elem> inline
	const _Elem *begin(initializer_list<_Elem> _Ilist) throw ()
	{	
	return (_Ilist.begin());
	}

		
template<class _Elem> inline
	const _Elem *end(initializer_list<_Elem> _Ilist) throw ()
	{	
	return (_Ilist.end());
	}
}

 
 #pragma warning(pop)
 #pragma pack(pop)
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\initializer_list"
#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\initializer_list"





#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xstddef"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xtr1common"

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

namespace std {
	
template<class _T1,
	class _Ret>
	struct unary_function;

	
template<class _T1,
	class _T2,
	class _Ret>
	struct binary_function;

	
struct _Nil
	{	
	};
static _Nil _Nil_obj;

	
template<class _Ty,
	_Ty _Val>
	struct integral_constant
	{	
	static const _Ty value = _Val;

	typedef _Ty value_type;
	typedef integral_constant<_Ty, _Val> type;

	operator value_type() const
		{	
		return (value);
		}
	};

typedef integral_constant<bool, true> true_type;
typedef integral_constant<bool, false> false_type;

	
template<bool>
	struct _Cat_base
		: false_type
	{	
	};

template<>
	struct _Cat_base<true>
		: true_type
	{	
	};

	
template<bool _Test,
	class _Ty = void>
	struct enable_if
	{	
	};

template<class _Ty>
	struct enable_if<true, _Ty>
	{	
	typedef _Ty type;
	};

	
template<bool _Test,
	class _Ty1,
	class _Ty2>
	struct conditional
	{	
	typedef _Ty2 type;
	};

template<class _Ty1,
	class _Ty2>
	struct conditional<true, _Ty1, _Ty2>
	{	
	typedef _Ty1 type;
	};

	
template<class _Ty1, class _Ty2>
	struct is_same
		: false_type
	{	
	};

template<class _Ty1>
	struct is_same<_Ty1, _Ty1>
		: true_type
	{	
	};

	
template<class _Ty>
	struct remove_const
	{	
	typedef _Ty type;
	};

template<class _Ty>
	struct remove_const<const _Ty>
	{	
	typedef _Ty type;
	};

template<class _Ty>
	struct remove_const<const _Ty[]>
	{	
	typedef _Ty type[];
	};

template<class _Ty, unsigned int _Nx>
	struct remove_const<const _Ty[_Nx]>
	{	
	typedef _Ty type[_Nx];
	};

	
template<class _Ty>
	struct remove_volatile
	{	
	typedef _Ty type;
	};

template<class _Ty>
	struct remove_volatile<volatile _Ty>
	{	
	typedef _Ty type;
	};

template<class _Ty>
	struct remove_volatile<volatile _Ty[]>
	{	
	typedef _Ty type[];
	};

template<class _Ty, unsigned int _Nx>
	struct remove_volatile<volatile _Ty[_Nx]>
	{	
	typedef _Ty type[_Nx];
	};

	
template<class _Ty>
	struct remove_cv
	{	
	typedef typename remove_const<typename remove_volatile<_Ty>::type>::type
		type;
	};

	
template<class _Ty>
	struct _Is_integral
		: false_type
	{	
	};

template<>
	struct _Is_integral<bool>
		: true_type
	{	
	};

template<>
	struct _Is_integral<char>
		: true_type
	{	
	};

template<>
	struct _Is_integral<unsigned char>
		: true_type
	{	
	};

template<>
	struct _Is_integral<signed char>
		: true_type
	{	
	};

 
template<>
	struct _Is_integral<wchar_t>
		: true_type
	{	
	};
 #line 201 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xtr1common"

template<>
	struct _Is_integral<unsigned short>
		: true_type
	{	
	};

template<>
	struct _Is_integral<signed short>
		: true_type
	{	
	};

template<>
	struct _Is_integral<unsigned int>
		: true_type
	{	
	};

template<>
	struct _Is_integral<signed int>
		: true_type
	{	
	};

template<>
	struct _Is_integral<unsigned long>
		: true_type
	{	
	};

template<>
	struct _Is_integral<signed long>
		: true_type
	{	
	};

 











#line 251 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xtr1common"

 
template<>
	struct _Is_integral<__int64>
		: true_type
	{	
	};

template<>
	struct _Is_integral<unsigned __int64>
		: true_type
	{	
	};
 #line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xtr1common"

	
template<class _Ty>
	struct is_integral
		: _Is_integral<typename remove_cv<_Ty>::type>
	{	
	};

	
template<class _Ty>
	struct _Is_floating_point
		: false_type
	{	
	};

template<>
	struct _Is_floating_point<float>
		: true_type
	{	
	};

template<>
	struct _Is_floating_point<double>
		: true_type
	{	
	};

template<>
	struct _Is_floating_point<long double>
		: true_type
	{	
	};

	
template<class _Ty>
	struct is_floating_point
		: _Is_floating_point<typename remove_cv<_Ty>::type>
	{	
	};

template<class _Ty>
	struct _Is_numeric
		: _Cat_base<is_integral<_Ty>::value
			|| is_floating_point<_Ty>::value>
	{	
	};

	
template<class _Ty>
	struct remove_reference
	{	
	typedef _Ty type;
	};

template<class _Ty>
	struct remove_reference<_Ty&>
	{	
	typedef _Ty type;
	};

template<class _Ty>
	struct remove_reference<_Ty&&>
	{	
	typedef _Ty type;
	};

	
template<class _Tgt,
	class _Src>
	struct _Copy_cv
	{	
	typedef typename remove_reference<_Tgt>::type _Tgtx;
	typedef _Tgtx& type;
	};

template<class _Tgt,
	class _Src>
	struct _Copy_cv<_Tgt, const _Src>
	{	
	typedef typename remove_reference<_Tgt>::type _Tgtx;
	typedef const _Tgtx& type;
	};

template<class _Tgt,
	class _Src>
	struct _Copy_cv<_Tgt, volatile _Src>
	{	
	typedef typename remove_reference<_Tgt>::type _Tgtx;
	typedef volatile _Tgtx& type;
	};

template<class _Tgt,
	class _Src>
	struct _Copy_cv<_Tgt, const volatile _Src>
	{	
	typedef typename remove_reference<_Tgt>::type _Tgtx;
	typedef const volatile _Tgtx& type;
	};

template<class _Tgt,
	class _Src>
	struct _Copy_cv<_Tgt, _Src&>
	{	
	typedef typename _Copy_cv<_Tgt, _Src>::type type;
	};

	
struct _Wrap_int
	{	
	_Wrap_int(int)
		{	
		}
	};

template<class _Ty>
	struct _Identity
	{	
	typedef _Ty type;
	};


































		
template<class _Ty>
	struct _Has_result_type
		{ template<class _Uty> static auto _Fn(int, _Identity<typename _Uty::result_type> * = 0, _Identity<typename _Uty::result_type> * = 0, _Identity<typename _Uty::result_type> * = 0) -> true_type; template<class _Uty> static auto _Fn(_Wrap_int) -> false_type; typedef decltype(_Fn<_Ty>(0)) type; };
}
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 427 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xtr1common"
#line 428 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xtr1common"





#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xstddef"

 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 
  
  
  
 #line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xstddef"

namespace std {
		
 
 
 #line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xstddef"

 
 
 
 
 

 
 

  
  

  











#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xstddef"
   
   
  #line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xstddef"

 




















#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xstddef"

		


		
 
 

		
template<class _Ty> inline
	_Ty *addressof(_Ty& _Val) throw ()
	{	
	return (reinterpret_cast<_Ty *>(
		(&const_cast<char&>(
		reinterpret_cast<const volatile char&>(_Val)))));
	}

		

template<bool,
	class _Ty1,
	class _Ty2>
	struct _If
	{	
	typedef _Ty2 type;
	};

template<class _Ty1,
	class _Ty2>
	struct _If<true, _Ty1, _Ty2>
	{	
	typedef _Ty1 type;
	};

template<class _Ty>
	struct _Always_false
	{	
	static const bool value = false;
	};

		
		
template<class _Arg,
	class _Result>
	struct unary_function
	{	
	typedef _Arg argument_type;
	typedef _Result result_type;
	};

		
template<class _Arg1,
	class _Arg2,
	class _Result>
	struct binary_function
	{	
	typedef _Arg1 first_argument_type;
	typedef _Arg2 second_argument_type;
	typedef _Result result_type;
	};

		
template<class _Ty = void>
	struct plus
		: public binary_function<_Ty, _Ty, _Ty>
	{	
	_Ty operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left + _Right);
		}
	};

		
template<class _Ty = void>
	struct minus
		: public binary_function<_Ty, _Ty, _Ty>
	{	
	_Ty operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left - _Right);
		}
	};

		
template<class _Ty = void>
	struct multiplies
		: public binary_function<_Ty, _Ty, _Ty>
	{	
	_Ty operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left * _Right);
		}
	};

		
template<class _Ty = void>
	struct equal_to
		: public binary_function<_Ty, _Ty, bool>
	{	
	bool operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left == _Right);
		}
	};

		
template<class _Ty = void>
	struct less
		: public binary_function<_Ty, _Ty, bool>
	{	
	bool operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left < _Right);
		}
	};

		
template<>
	struct plus<void>
	{	
	template<class _Ty1,
		class _Ty2>
		auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			+ static_cast<_Ty2&&>(_Right))
		{	
		return (static_cast<_Ty1&&>(_Left)
			+ static_cast<_Ty2&&>(_Right));
		}
	};

		
template<>
	struct minus<void>
	{	
	template<class _Ty1,
		class _Ty2>
		auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			- static_cast<_Ty2&&>(_Right))
		{	
		return (static_cast<_Ty1&&>(_Left)
			- static_cast<_Ty2&&>(_Right));
		}
	};

		
template<>
	struct multiplies<void>
	{	
	template<class _Ty1,
		class _Ty2>
		auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			* static_cast<_Ty2&&>(_Right))
		{	
		return (static_cast<_Ty1&&>(_Left)
			* static_cast<_Ty2&&>(_Right));
		}
	};

		
template<>
	struct equal_to<void>
	{	
	template<class _Ty1,
		class _Ty2>
		auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			== static_cast<_Ty2&&>(_Right))
		{	
		return (static_cast<_Ty1&&>(_Left)
			== static_cast<_Ty2&&>(_Right));
		}
	};

		
template<>
	struct less<void>
	{	
	template<class _Ty1,
		class _Ty2>
		auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			< static_cast<_Ty2&&>(_Right))
		{	
		return (static_cast<_Ty1&&>(_Left)
			< static_cast<_Ty2&&>(_Right));
		}
	};


}



namespace std {
	
inline size_t _Hash_seq(const unsigned char *_First, size_t _Count)
	{	
 




#line 287 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xstddef"
	static_assert(sizeof(size_t) == 4, "This code is for 32-bit size_t.");
	const size_t _FNV_offset_basis = 2166136261U;
	const size_t _FNV_prime = 16777619U;
 #line 291 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xstddef"

	size_t _Val = _FNV_offset_basis;
	for (size_t _Next = 0; _Next < _Count; ++_Next)
		{	
		_Val ^= (size_t)_First[_Next];
		_Val *= _FNV_prime;
		}

 



#line 304 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xstddef"
	static_assert(sizeof(size_t) == 4, "This code is for 32-bit size_t.");
 #line 306 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xstddef"

	return (_Val);
	}

	
template<class _Kty>
	struct _Bitwise_hash
		: public unary_function<_Kty, size_t>
	{	
	size_t operator()(const _Kty& _Keyval) const
		{	
		return (_Hash_seq((const unsigned char *)&_Keyval, sizeof (_Kty)));
		}
	};

	
template<class _Kty>
	struct hash
		: public _Bitwise_hash<_Kty>
	{	
	static const bool _Value = __is_enum(_Kty);
	static_assert(_Value,
		"The C++ Standard doesn't provide a hash for this type.");
	};
template<>
	struct hash<bool>
		: public _Bitwise_hash<bool>
	{	
	};

template<>
	struct hash<char>
		: public _Bitwise_hash<char>
	{	
	};

template<>
	struct hash<signed char>
		: public _Bitwise_hash<signed char>
	{	
	};

template<>
	struct hash<unsigned char>
		: public _Bitwise_hash<unsigned char>
	{	
	};

 











#line 367 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xstddef"

 
template<>
	struct hash<wchar_t>
		: public _Bitwise_hash<wchar_t>
	{	
	};
 #line 375 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xstddef"

template<>
	struct hash<short>
		: public _Bitwise_hash<short>
	{	
	};

template<>
	struct hash<unsigned short>
		: public _Bitwise_hash<unsigned short>
	{	
	};

template<>
	struct hash<int>
		: public _Bitwise_hash<int>
	{	
	};

template<>
	struct hash<unsigned int>
		: public _Bitwise_hash<unsigned int>
	{	
	};

template<>
	struct hash<long>
		: public _Bitwise_hash<long>
	{	
	};

template<>
	struct hash<unsigned long>
		: public _Bitwise_hash<unsigned long>
	{	
	};

template<>
	struct hash<long long>
		: public _Bitwise_hash<long long>
	{	
	};

template<>
	struct hash<unsigned long long>
		: public _Bitwise_hash<unsigned long long>
	{	
	};

template<>
	struct hash<float>
		: public _Bitwise_hash<float>
	{	
	typedef float _Kty;
	typedef _Bitwise_hash<_Kty> _Mybase;

	size_t operator()(const _Kty& _Keyval) const
		{	
		return (_Mybase::operator()(
			_Keyval == 0 ? 0 : _Keyval)); 
		}
	};

template<>
	struct hash<double>
		: public _Bitwise_hash<double>
	{	
	typedef double _Kty;
	typedef _Bitwise_hash<_Kty> _Mybase;

	size_t operator()(const _Kty& _Keyval) const
		{	
		return (_Mybase::operator()(
			_Keyval == 0 ? 0 : _Keyval)); 
		}
	};

template<>
	struct hash<long double>
		: public _Bitwise_hash<long double>
	{	
	typedef long double _Kty;
	typedef _Bitwise_hash<_Kty> _Mybase;

	size_t operator()(const _Kty& _Keyval) const
		{	
		return (_Mybase::operator()(
			_Keyval == 0 ? 0 : _Keyval)); 
		}
	};

template<class _Ty>
	struct hash<_Ty *>
		: public _Bitwise_hash<_Ty *>
	{	
	};
}
#line 473 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xstddef"

namespace std {
namespace tr1 {	
using ::std:: hash;
}	
}

  














#line 496 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xstddef"

 

  




















  #line 521 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xstddef"

 















#line 539 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xstddef"




























 
 #pragma warning(pop)
 #pragma pack(pop)
#line 571 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xstddef"
#line 572 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xstddef"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\utility"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\iosfwd"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\cstdio"

#pragma once










 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"














#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"







































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"





#pragma pack(push,8)


extern "C" {
#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"
































struct _iobuf {
        char *_ptr;
        int   _cnt;
        char *_base;
        int   _flag;
        int   _file;
        int   _charbuf;
        int   _bufsiz;
        char *_tmpfname;
        };
typedef struct _iobuf FILE;

#line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"



















#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"

















#line 114 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"























 FILE * __cdecl __iob_func(void);
#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"





typedef __int64 fpos_t;

#line 147 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"






#line 154 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"





















   int __cdecl _filbuf(  FILE * _File );
  int __cdecl _flsbuf(  int _Ch,   FILE * _File);

   FILE * __cdecl _fsopen(  const char * _Filename,   const char * _Mode,   int _ShFlag);

 void __cdecl clearerr(  FILE * _File);

  errno_t __cdecl clearerr_s(  FILE * _File );
#line 184 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"
  int __cdecl fclose(  FILE * _File);
  int __cdecl _fcloseall(void);

   FILE * __cdecl _fdopen(  int _FileHandle,   const char * _Mode);

   int __cdecl feof(  FILE * _File);
   int __cdecl ferror(  FILE * _File);
  int __cdecl fflush(  FILE * _File);
  int __cdecl fgetc(  FILE * _File);
  int __cdecl _fgetchar(void);
  int __cdecl fgetpos(  FILE * _File ,   fpos_t * _Pos);
  char * __cdecl fgets(  char * _Buf,   int _MaxCount,   FILE * _File);

   int __cdecl _fileno(  FILE * _File);




#line 203 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"

   char * __cdecl _tempnam(  const char * _DirName,   const char * _FilePrefix);



#line 209 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"

  int __cdecl _flushall(void);
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "fopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  FILE * __cdecl fopen(  const char * _Filename,   const char * _Mode);

  errno_t __cdecl fopen_s(  FILE ** _File,   const char * _Filename,   const char * _Mode);
#line 215 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"
  int __cdecl fprintf(  FILE * _File,     const char * _Format, ...);

  int __cdecl fprintf_s(  FILE * _File,     const char * _Format, ...);
#line 219 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"
  int __cdecl fputc(  int _Ch,   FILE * _File);
  int __cdecl _fputchar(  int _Ch);
  int __cdecl fputs(  const char * _Str,   FILE * _File);
  size_t __cdecl fread(  void * _DstBuf,   size_t _ElementSize,   size_t _Count,   FILE * _File);

  size_t __cdecl fread_s(  void * _DstBuf,   size_t _DstSize,   size_t _ElementSize,   size_t _Count,   FILE * _File);
#line 226 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "freopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  FILE * __cdecl freopen(  const char * _Filename,   const char * _Mode,   FILE * _File);

  errno_t __cdecl freopen_s(  FILE ** _File,   const char * _Filename,   const char * _Mode,   FILE * _OldFile);
#line 230 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "fscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  int __cdecl fscanf(  FILE * _File,     const char * _Format, ...);
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  int __cdecl _fscanf_l(  FILE * _File,     const char * _Format,   _locale_t _Locale, ...);
#pragma warning(push)
#pragma warning(disable:6530)

  int __cdecl fscanf_s(  FILE * _File,     const char * _Format, ...);
#line 237 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"
  int __cdecl _fscanf_s_l(  FILE * _File,     const char * _Format,   _locale_t _Locale, ...);
#pragma warning(pop)
  int __cdecl fsetpos(  FILE * _File,   const fpos_t * _Pos);
  int __cdecl fseek(  FILE * _File,   long _Offset,   int _Origin);
   long __cdecl ftell(  FILE * _File);

  int __cdecl _fseeki64(  FILE * _File,   __int64 _Offset,   int _Origin);
   __int64 __cdecl _ftelli64(  FILE * _File);

  size_t __cdecl fwrite(  const void * _Str,   size_t _Size,   size_t _Count,   FILE * _File);
   int __cdecl getc(  FILE * _File);
   int __cdecl getchar(void);
   int __cdecl _getmaxstdio(void);

 char * __cdecl gets_s(  char * _Buf,   rsize_t _Size);
#line 253 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"
extern "C++" { template <size_t _Size> inline char * __cdecl gets_s(char (&_Buffer)[_Size]) throw() { return gets_s(_Buffer, _Size); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "gets_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char * __cdecl gets(  char *_Buffer);
  int __cdecl _getw(  FILE * _File);





  int __cdecl _pclose(  FILE * _File);
   FILE * __cdecl _popen(  const char * _Command,   const char * _Mode);
#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"
  int __cdecl printf(    const char * _Format, ...);

  int __cdecl printf_s(    const char * _Format, ...);
#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"
  int __cdecl putc(  int _Ch,   FILE * _File);
  int __cdecl putchar(  int _Ch);
  int __cdecl puts(  const char * _Str);
  int __cdecl _putw(  int _Word,   FILE * _File);


 int __cdecl remove(  const char * _Filename);
   int __cdecl rename(  const char * _OldFilename,   const char * _NewFilename);
 int __cdecl _unlink(  const char * _Filename);

__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_unlink" ". See online help for details."))  int __cdecl unlink(  const char * _Filename);
#line 280 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"
#line 281 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"
 void __cdecl rewind(  FILE * _File);
  int __cdecl _rmtmp(void);
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "scanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  int __cdecl scanf(    const char * _Format, ...);
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_scanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  int __cdecl _scanf_l(    const char * _Format,   _locale_t _Locale, ...);
#pragma warning(push)
#pragma warning(disable:6530)

  int __cdecl scanf_s(    const char * _Format, ...);
#line 290 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"
  int __cdecl _scanf_s_l(    const char * _Format,   _locale_t _Locale, ...);
#pragma warning(pop)
__declspec(deprecated("This function or variable may be unsafe. Consider using " "setvbuf" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  void __cdecl setbuf(  FILE * _File,     char * _Buffer);
  int __cdecl _setmaxstdio(  int _Max);
  unsigned int __cdecl _set_output_format(  unsigned int _Format);
  unsigned int __cdecl _get_output_format(void);
  int __cdecl setvbuf(  FILE * _File,   char * _Buf,   int _Mode,   size_t _Size);
  int __cdecl _snprintf_s(  char * _DstBuf,   size_t _SizeInBytes,   size_t _MaxCount,     const char * _Format, ...);
extern "C++" { __pragma(warning(push)); __pragma(warning(disable: 4793)); template <size_t _Size> inline int __cdecl _snprintf_s(  char (&_Dest)[_Size],   size_t _MaxCount,     const char * _Format, ...) throw() { va_list _ArgList; ( _ArgList = (va_list)( &reinterpret_cast<const char &>(_Format) ) + ( (sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1) ) ); return _vsnprintf_s(_Dest, _Size, _MaxCount, _Format, _ArgList); } __pragma(warning(pop)); }

  int __cdecl sprintf_s(  char * _DstBuf,   size_t _SizeInBytes,     const char * _Format, ...);
#line 302 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"
extern "C++" { __pragma(warning(push)); __pragma(warning(disable: 4793)); template <size_t _Size> inline int __cdecl sprintf_s(  char (&_Dest)[_Size],     const char * _Format, ...) throw() { va_list _ArgList; ( _ArgList = (va_list)( &reinterpret_cast<const char &>(_Format) ) + ( (sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1) ) ); return vsprintf_s(_Dest, _Size, _Format, _ArgList); } __pragma(warning(pop)); }
   int __cdecl _scprintf(    const char * _Format, ...);
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "sscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  int __cdecl sscanf(  const char * _Src,     const char * _Format, ...);
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_sscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  int __cdecl _sscanf_l(  const char * _Src,     const char * _Format,   _locale_t _Locale, ...);
#pragma warning(push)
#pragma warning(disable:6530)

  int __cdecl sscanf_s(  const char * _Src,     const char * _Format, ...);
#line 311 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"
  int __cdecl _sscanf_s_l(  const char * _Src,     const char * _Format,   _locale_t _Locale, ...);
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  int __cdecl _snscanf(    const char * _Src,   size_t _MaxCount,     const char * _Format, ...);
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  int __cdecl _snscanf_l(    const char * _Src,   size_t _MaxCount,     const char * _Format,   _locale_t _Locale, ...);
  int __cdecl _snscanf_s(    const char * _Src,   size_t _MaxCount,     const char * _Format, ...);
  int __cdecl _snscanf_s_l(    const char * _Src,   size_t _MaxCount,     const char * _Format,   _locale_t _Locale, ...);
#pragma warning(pop)
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "tmpfile_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  FILE * __cdecl tmpfile(void);

  errno_t __cdecl tmpfile_s(    FILE ** _File);
  errno_t __cdecl tmpnam_s(  char * _Buf,   rsize_t _Size);
#line 322 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"
extern "C++" { template <size_t _Size> inline errno_t __cdecl tmpnam_s(  char (&_Buf)[_Size]) throw() { return tmpnam_s(_Buf, _Size); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "tmpnam_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char * __cdecl tmpnam(  char *_Buffer);
  int __cdecl ungetc(  int _Ch,   FILE * _File);
  int __cdecl vfprintf(  FILE * _File,     const char * _Format, va_list _ArgList);
  int __cdecl vfscanf(  FILE * _File,     const char * _Format, va_list _ArgList);

  int __cdecl vfprintf_s(  FILE * _File,     const char * _Format, va_list _ArgList);
  int __cdecl vfscanf_s(  FILE * _File,     const char * _Format, va_list _ArgList);
#line 331 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"
  int __cdecl vprintf(    const char * _Format, va_list _ArgList);
  int __cdecl vscanf(    const char * _Format, va_list _ArgList);

  int __cdecl vprintf_s(    const char * _Format, va_list _ArgList);
  int __cdecl vscanf_s(    const char * _Format, va_list _ArgList);
#line 337 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "vsnprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  int __cdecl vsnprintf(  char * _DstBuf,   size_t _MaxCount,     const char * _Format, va_list _ArgList);

  int __cdecl vsnprintf_s(  char * _DstBuf,   size_t _DstSize,   size_t _MaxCount,     const char * _Format, va_list _ArgList);
extern "C++" { template <size_t _Size> inline int __cdecl vsnprintf_s(  char (&_Dest)[_Size],   size_t _MaxCount,     const char * _Format, va_list _Args) throw() { return vsnprintf_s(_Dest, _Size, _MaxCount, _Format, _Args); } }
#line 342 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"
  int __cdecl _vsnprintf_s(  char * _DstBuf,   size_t _SizeInBytes,   size_t _MaxCount,     const char * _Format, va_list _ArgList);
extern "C++" { template <size_t _Size> inline int __cdecl _vsnprintf_s(  char (&_Dest)[_Size],   size_t _MaxCount,     const char * _Format, va_list _Args) throw() { return _vsnprintf_s(_Dest, _Size, _MaxCount, _Format, _Args); } }
#pragma warning(push)
#pragma warning(disable:4793)
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_snprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  int __cdecl _snprintf(    char *_Dest,   size_t _Count,     const char * _Format, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  int __cdecl _vsnprintf(    char *_Dest,   size_t _Count,     const char * _Format, va_list _Args);
#pragma warning(pop)

 int __cdecl vsprintf_s(  char * _DstBuf,   size_t _SizeInBytes,     const char * _Format, va_list _ArgList);
extern "C++" { template <size_t _Size> inline int __cdecl vsprintf_s(  char (&_Dest)[_Size],     const char * _Format, va_list _Args) throw() { return vsprintf_s(_Dest, _Size, _Format, _Args); } }
  int __cdecl vsscanf_s(const char * _Src,     const char * _Format, va_list _ArgList);
extern "C++" { template <size_t _Size> inline int __cdecl vsscanf_s(  const char (&_Src)[_Size],     const char * _Format, va_list _Args) throw() { return vsscanf_s(_Src, _Size, _Format, _Args); } }
#line 354 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"
#pragma warning(push)
#pragma warning(disable:4793)
__declspec(deprecated("This function or variable may be unsafe. Consider using " "sprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  int __cdecl sprintf(  char *_Dest,  const char * _Format, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "vsprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  int __cdecl vsprintf(  char *_Dest,  const char * _Format, va_list _Args);
  int __cdecl vsscanf(const char * _srcBuf,     const char * _Format, va_list _ArgList);
#pragma warning(pop)
   int __cdecl _vscprintf(    const char * _Format, va_list _ArgList);
  int __cdecl _snprintf_c(  char * _DstBuf,   size_t _MaxCount,     const char * _Format, ...);
  int __cdecl _vsnprintf_c(  char *_DstBuf,   size_t _MaxCount,     const char * _Format, va_list _ArgList);

  int __cdecl _fprintf_p(  FILE * _File,     const char * _Format, ...);
  int __cdecl _printf_p(    const char * _Format, ...);
  int __cdecl _sprintf_p(  char * _Dst,   size_t _MaxCount,     const char * _Format, ...);
  int __cdecl _vfprintf_p(  FILE * _File,     const char * _Format, va_list _ArgList);
  int __cdecl _vprintf_p(    const char * _Format, va_list _ArgList);
  int __cdecl _vsprintf_p(  char * _Dst,   size_t _MaxCount,     const char * _Format, va_list _ArgList);
   int __cdecl _scprintf_p(    const char * _Format, ...);
   int __cdecl _vscprintf_p(    const char * _Format, va_list _ArgList);
 int __cdecl _set_printf_count_output(  int _Value);
 int __cdecl _get_printf_count_output(void);

  int __cdecl _printf_l(    const char * _Format,   _locale_t _Locale, ...);
  int __cdecl _printf_p_l(    const char * _Format,   _locale_t _Locale, ...);
  int __cdecl _printf_s_l(    const char * _Format,   _locale_t _Locale, ...);
  int __cdecl _vprintf_l(    const char * _Format,   _locale_t _Locale, va_list _ArgList);
  int __cdecl _vprintf_p_l(    const char * _Format,   _locale_t _Locale, va_list _ArgList);
  int __cdecl _vprintf_s_l(    const char * _Format,   _locale_t _Locale, va_list _ArgList);

  int __cdecl _fprintf_l(  FILE * _File,     const char * _Format,   _locale_t _Locale, ...);
  int __cdecl _fprintf_p_l(  FILE * _File,     const char * _Format,   _locale_t _Locale, ...);
  int __cdecl _fprintf_s_l(  FILE * _File,     const char * _Format,   _locale_t _Locale, ...);
  int __cdecl _vfprintf_l(  FILE * _File,   const char * _Format,   _locale_t _Locale, va_list _ArgList);
  int __cdecl _vfprintf_p_l(  FILE * _File,   const char * _Format,   _locale_t _Locale, va_list _ArgList);
  int __cdecl _vfprintf_s_l(  FILE * _File,   const char * _Format,   _locale_t _Locale, va_list _ArgList);

 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_sprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  int __cdecl _sprintf_l(    char * _DstBuf,     const char * _Format,   _locale_t _Locale, ...);
  int __cdecl _sprintf_p_l(  char * _DstBuf,   size_t _MaxCount,     const char * _Format,   _locale_t _Locale, ...);
  int __cdecl _sprintf_s_l(  char * _DstBuf,   size_t _DstSize,     const char * _Format,   _locale_t _Locale, ...);
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  int __cdecl _vsprintf_l(    char * _DstBuf,   const char * _Format,   _locale_t, va_list _ArgList);
  int __cdecl _vsprintf_p_l(  char * _DstBuf,   size_t _MaxCount,     const char* _Format,   _locale_t _Locale,  va_list _ArgList);
  int __cdecl _vsprintf_s_l(  char * _DstBuf,   size_t _DstSize,     const char * _Format,   _locale_t _Locale, va_list _ArgList);

  int __cdecl _scprintf_l(    const char * _Format,   _locale_t _Locale, ...);
  int __cdecl _scprintf_p_l(    const char * _Format,   _locale_t _Locale, ...);
  int __cdecl _vscprintf_l(    const char * _Format,   _locale_t _Locale, va_list _ArgList);
  int __cdecl _vscprintf_p_l(    const char * _Format,   _locale_t _Locale, va_list _ArgList);

 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  int __cdecl _snprintf_l(  char * _DstBuf,   size_t _MaxCount,     const char * _Format,   _locale_t _Locale, ...);
  int __cdecl _snprintf_c_l(  char * _DstBuf,   size_t _MaxCount,     const char * _Format,   _locale_t _Locale, ...);
  int __cdecl _snprintf_s_l(  char * _DstBuf,   size_t _DstSize,   size_t _MaxCount,     const char * _Format,   _locale_t _Locale, ...);
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  int __cdecl _vsnprintf_l(  char * _DstBuf,   size_t _MaxCount,     const char * _Format,   _locale_t _Locale, va_list _ArgList);
  int __cdecl _vsnprintf_c_l(  char * _DstBuf,   size_t _MaxCount, const char *,   _locale_t _Locale, va_list _ArgList);
  int __cdecl _vsnprintf_s_l(  char * _DstBuf,   size_t _DstSize,   size_t _MaxCount,     const char* _Format,  _locale_t _Locale, va_list _ArgList);







#line 414 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"

   FILE * __cdecl _wfsopen(  const wchar_t * _Filename,   const wchar_t * _Mode,   int _ShFlag);

  wint_t __cdecl fgetwc(  FILE * _File);
  wint_t __cdecl _fgetwchar(void);
  wint_t __cdecl fputwc(  wchar_t _Ch,   FILE * _File);
  wint_t __cdecl _fputwchar(  wchar_t _Ch);
   wint_t __cdecl getwc(  FILE * _File);
   wint_t __cdecl getwchar(void);
  wint_t __cdecl putwc(  wchar_t _Ch,   FILE * _File);
  wint_t __cdecl putwchar(  wchar_t _Ch);
  wint_t __cdecl ungetwc(  wint_t _Ch,   FILE * _File);

  wchar_t * __cdecl fgetws(  wchar_t * _Dst,   int _SizeInWords,   FILE * _File);
  int __cdecl fputws(  const wchar_t * _Str,   FILE * _File);
  wchar_t * __cdecl _getws_s(  wchar_t * _Str,   size_t _SizeInWords);
extern "C++" { template <size_t _Size> inline wchar_t * __cdecl _getws_s(  wchar_t (&_String)[_Size]) throw() { return _getws_s(_String, _Size); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_getws_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t * __cdecl _getws(  wchar_t *_String);
  int __cdecl _putws(  const wchar_t * _Str);

  int __cdecl fwprintf(  FILE * _File,     const wchar_t * _Format, ...);

  int __cdecl fwprintf_s(  FILE * _File,     const wchar_t * _Format, ...);
#line 438 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"
  int __cdecl wprintf(    const wchar_t * _Format, ...);

  int __cdecl wprintf_s(    const wchar_t * _Format, ...);
#line 442 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"
   int __cdecl _scwprintf(    const wchar_t * _Format, ...);
  int __cdecl vfwprintf(  FILE * _File,     const wchar_t * _Format, va_list _ArgList);
  int __cdecl vfwscanf(  FILE * _File,     const wchar_t * _Format, va_list _ArgList);

  int __cdecl vfwprintf_s(  FILE * _File,     const wchar_t * _Format, va_list _ArgList);
  int __cdecl vfwscanf_s(  FILE * _File,     const wchar_t * _Format, va_list _ArgList);
#line 449 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"
  int __cdecl vwprintf(    const wchar_t * _Format, va_list _ArgList);
  int __cdecl vwscanf(    const wchar_t * _Format, va_list _ArgList);

  int __cdecl vwprintf_s(    const wchar_t * _Format, va_list _ArgList);
  int __cdecl vwscanf_s(    const wchar_t * _Format, va_list _ArgList);
#line 455 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"


 int __cdecl swprintf_s(  wchar_t * _Dst,   size_t _SizeInWords,     const wchar_t * _Format, ...);
#line 459 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"
extern "C++" { __pragma(warning(push)); __pragma(warning(disable: 4793)); template <size_t _Size> inline int __cdecl swprintf_s(  wchar_t (&_Dest)[_Size],     const wchar_t * _Format, ...) throw() { va_list _ArgList; ( _ArgList = (va_list)( &reinterpret_cast<const char &>(_Format) ) + ( (sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1) ) ); return vswprintf_s(_Dest, _Size, _Format, _ArgList); } __pragma(warning(pop)); }

 int __cdecl vswprintf_s(  wchar_t * _Dst,   size_t _SizeInWords,     const wchar_t * _Format, va_list _ArgList);
  int __cdecl vswscanf_s(const wchar_t * _Src,     const wchar_t * _Format, va_list _ArgList);
#line 464 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"
extern "C++" { template <size_t _Size> inline int __cdecl vswprintf_s(  wchar_t (&_Dest)[_Size],     const wchar_t * _Format, va_list _Args) throw() { return vswprintf_s(_Dest, _Size, _Format, _Args); } }
extern "C++" { template <size_t _Size> inline int __cdecl vswscanf_s(  wchar_t (&_Dest)[_Size],     const wchar_t * _Format, va_list _Args) throw() { return vswscanf_s(_Dest, _Size, _Format, _Args); } }
  int __cdecl vswscanf(const wchar_t * _srcBuf,     const wchar_t * _Format, va_list _ArgList);

  int __cdecl _swprintf_c(  wchar_t * _DstBuf,   size_t _SizeInWords,     const wchar_t * _Format, ...);
  int __cdecl _vswprintf_c(  wchar_t * _DstBuf,   size_t _SizeInWords,     const wchar_t * _Format, va_list _ArgList);

  int __cdecl _snwprintf_s(  wchar_t * _DstBuf,   size_t _SizeInWords,   size_t _MaxCount,     const wchar_t * _Format, ...);
extern "C++" { __pragma(warning(push)); __pragma(warning(disable: 4793)); template <size_t _Size> inline int __cdecl _snwprintf_s(  wchar_t (&_Dest)[_Size],   size_t _Count,     const wchar_t * _Format, ...) throw() { va_list _ArgList; ( _ArgList = (va_list)( &reinterpret_cast<const char &>(_Format) ) + ( (sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1) ) ); return _vsnwprintf_s(_Dest, _Size, _Count, _Format, _ArgList); } __pragma(warning(pop)); }
  int __cdecl _vsnwprintf_s(  wchar_t * _DstBuf,   size_t _SizeInWords,   size_t _MaxCount,     const wchar_t * _Format, va_list _ArgList);
extern "C++" { template <size_t _Size> inline int __cdecl _vsnwprintf_s(  wchar_t (&_Dest)[_Size],   size_t _Count,     const wchar_t * _Format, va_list _Args) throw() { return _vsnwprintf_s(_Dest, _Size, _Count, _Format, _Args); } }
#pragma warning(push)
#pragma warning(disable:4793)
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_snwprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  int __cdecl _snwprintf(    wchar_t *_Dest,   size_t _Count,     const wchar_t * _Format, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnwprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  int __cdecl _vsnwprintf(    wchar_t *_Dest,   size_t _Count,     const wchar_t * _Format, va_list _Args);
#pragma warning(pop)

  int __cdecl _fwprintf_p(  FILE * _File,     const wchar_t * _Format, ...);
  int __cdecl _wprintf_p(    const wchar_t * _Format, ...);
  int __cdecl _vfwprintf_p(  FILE * _File,     const wchar_t * _Format, va_list _ArgList);
  int __cdecl _vwprintf_p(    const wchar_t * _Format, va_list _ArgList);
  int __cdecl _swprintf_p(  wchar_t * _DstBuf,   size_t _MaxCount,     const wchar_t * _Format, ...);
  int __cdecl _vswprintf_p(  wchar_t * _DstBuf,   size_t _MaxCount,     const wchar_t * _Format, va_list _ArgList);
   int __cdecl _scwprintf_p(    const wchar_t * _Format, ...);
   int __cdecl _vscwprintf_p(    const wchar_t * _Format, va_list _ArgList);

  int __cdecl _wprintf_l(    const wchar_t * _Format,   _locale_t _Locale, ...);
  int __cdecl _wprintf_p_l(    const wchar_t * _Format,   _locale_t _Locale, ...);
  int __cdecl _wprintf_s_l(    const wchar_t * _Format,   _locale_t _Locale, ...);
  int __cdecl _vwprintf_l(    const wchar_t * _Format,   _locale_t _Locale, va_list _ArgList);
  int __cdecl _vwprintf_p_l(    const wchar_t * _Format,   _locale_t _Locale, va_list _ArgList);
  int __cdecl _vwprintf_s_l(    const wchar_t * _Format,   _locale_t _Locale, va_list _ArgList);

  int __cdecl _fwprintf_l(  FILE * _File,     const wchar_t * _Format,   _locale_t _Locale, ...);
  int __cdecl _fwprintf_p_l(  FILE * _File,     const wchar_t * _Format,   _locale_t _Locale, ...);
  int __cdecl _fwprintf_s_l(  FILE * _File,     const wchar_t * _Format,   _locale_t _Locale, ...);
  int __cdecl _vfwprintf_l(  FILE * _File,     const wchar_t * _Format,   _locale_t _Locale, va_list _ArgList);
  int __cdecl _vfwprintf_p_l(  FILE * _File,     const wchar_t * _Format,   _locale_t _Locale, va_list _ArgList);
  int __cdecl _vfwprintf_s_l(  FILE * _File,     const wchar_t * _Format,   _locale_t _Locale, va_list _ArgList);

  int __cdecl _swprintf_c_l(  wchar_t * _DstBuf,   size_t _MaxCount,     const wchar_t * _Format,   _locale_t _Locale, ...);
  int __cdecl _swprintf_p_l(  wchar_t * _DstBuf,   size_t _MaxCount,     const wchar_t * _Format,   _locale_t _Locale, ...);
  int __cdecl _swprintf_s_l(  wchar_t * _DstBuf,   size_t _DstSize,     const wchar_t * _Format,   _locale_t _Locale, ...);
  int __cdecl _vswprintf_c_l(  wchar_t * _DstBuf,   size_t _MaxCount,     const wchar_t * _Format,   _locale_t _Locale, va_list _ArgList);
  int __cdecl _vswprintf_p_l(  wchar_t * _DstBuf,   size_t _MaxCount,     const wchar_t * _Format,   _locale_t _Locale, va_list _ArgList);
  int __cdecl _vswprintf_s_l(  wchar_t * _DstBuf,   size_t _DstSize,     const wchar_t * _Format,   _locale_t _Locale, va_list _ArgList);

   int __cdecl _scwprintf_l(    const wchar_t * _Format,   _locale_t _Locale, ...);
   int __cdecl _scwprintf_p_l(    const wchar_t * _Format,   _locale_t _Locale, ...);
   int __cdecl _vscwprintf_p_l(    const wchar_t * _Format,   _locale_t _Locale, va_list _ArgList);

 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snwprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  int __cdecl _snwprintf_l(  wchar_t * _DstBuf,   size_t _MaxCount,     const wchar_t * _Format,   _locale_t _Locale, ...);
  int __cdecl _snwprintf_s_l(  wchar_t * _DstBuf,   size_t _DstSize,   size_t _MaxCount,     const wchar_t * _Format,   _locale_t _Locale, ...);
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnwprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  int __cdecl _vsnwprintf_l(  wchar_t * _DstBuf,   size_t _MaxCount,     const wchar_t * _Format,   _locale_t _Locale, va_list _ArgList);
  int __cdecl _vsnwprintf_s_l(  wchar_t * _DstBuf,   size_t _DstSize,   size_t _MaxCount,     const wchar_t * _Format,   _locale_t _Locale, va_list _ArgList);










#line 529 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"


#pragma warning(push)
#pragma warning(disable:4141 4996 4793)
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_swprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS."))  int __cdecl _swprintf(    wchar_t *_Dest,     const wchar_t * _Format, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "vswprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS."))  int __cdecl _vswprintf(    wchar_t *_Dest,     const wchar_t * _Format, va_list _Args);
__declspec(deprecated("This function or variable may be unsafe. Consider using " "__swprintf_l_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS."))  int __cdecl __swprintf_l(    wchar_t *_Dest,     const wchar_t * _Format, _locale_t _Plocinfo, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vswprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS."))  int __cdecl __vswprintf_l(    wchar_t *_Dest,     const wchar_t * _Format, _locale_t _Plocinfo, va_list _Args);
#pragma warning(pop)


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\swprintf.inl"












#pragma once







#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\swprintf.inl"










#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\swprintf.inl"

#pragma warning( push )
#pragma warning( disable : 4793 4412 )
static __inline int swprintf(    wchar_t * _String, size_t _Count,     const wchar_t * _Format, ...)
{
    va_list _Arglist;
    int _Ret;
    ( _Arglist = (va_list)( &reinterpret_cast<const char &>(_Format) ) + ( (sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1) ) );
    _Ret = _vswprintf_c_l(_String, _Count, _Format, 0, _Arglist);
    ( _Arglist = (va_list)0 );
    return _Ret;
}
#pragma warning( pop )

#pragma warning( push )
#pragma warning( disable : 4412 )
static __inline int __cdecl vswprintf(    wchar_t * _String, size_t _Count,     const wchar_t * _Format, va_list _Ap)
{
    return _vswprintf_c_l(_String, _Count, _Format, 0, _Ap);
}
#pragma warning( pop )


#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\swprintf.inl"

#pragma warning( push )
#pragma warning( disable : 4793 4412 )
static __inline int _swprintf_l(    wchar_t * _String, size_t _Count,     const wchar_t * _Format, _locale_t _Plocinfo, ...)
{
    va_list _Arglist;
    int _Ret;
    ( _Arglist = (va_list)( &reinterpret_cast<const char &>(_Plocinfo) ) + ( (sizeof(_Plocinfo) + sizeof(int) - 1) & ~(sizeof(int) - 1) ) );
    _Ret = _vswprintf_c_l(_String, _Count, _Format, _Plocinfo, _Arglist);
    ( _Arglist = (va_list)0 );
    return _Ret;
}
#pragma warning( pop )

#pragma warning( push )
#pragma warning( disable : 4412 )
static __inline int __cdecl _vswprintf_l(    wchar_t * _String, size_t _Count,     const wchar_t * _Format, _locale_t _Plocinfo, va_list _Ap)
{
    return _vswprintf_c_l(_String, _Count, _Format, _Plocinfo, _Ap);
}
#pragma warning( pop )


#pragma warning( push )
#pragma warning( disable : 4996 )

#pragma warning( push )
#pragma warning( disable : 4793 4141 )
extern "C++" __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "swprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __inline int swprintf(    wchar_t * _String,     const wchar_t * _Format, ...)
{
    va_list _Arglist;
    ( _Arglist = (va_list)( &reinterpret_cast<const char &>(_Format) ) + ( (sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1) ) );
    int _Ret = _vswprintf(_String, _Format, _Arglist);
    ( _Arglist = (va_list)0 );
    return _Ret;
}
#pragma warning( pop )

#pragma warning( push )
#pragma warning( disable : 4141 )
extern "C++" __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "vswprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __inline int __cdecl vswprintf(    wchar_t * _String,     const wchar_t * _Format, va_list _Ap)
{
    return _vswprintf(_String, _Format, _Ap);
}
#pragma warning( pop )

#pragma warning( push )
#pragma warning( disable : 4793 4141 )
extern "C++" __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_swprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __inline int _swprintf_l(    wchar_t * _String,     const wchar_t * _Format, _locale_t _Plocinfo, ...)
{
    va_list _Arglist;
    ( _Arglist = (va_list)( &reinterpret_cast<const char &>(_Plocinfo) ) + ( (sizeof(_Plocinfo) + sizeof(int) - 1) & ~(sizeof(int) - 1) ) );
    int _Ret = __vswprintf_l(_String, _Format, _Plocinfo, _Arglist);
    ( _Arglist = (va_list)0 );
    return _Ret;
}
#pragma warning( pop )

#pragma warning( push )
#pragma warning( disable : 4141 )
extern "C++" __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vswprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __inline int __cdecl _vswprintf_l(    wchar_t * _String,     const wchar_t * _Format, _locale_t _Plocinfo, va_list _Ap)
{
    return __vswprintf_l(_String, _Format, _Plocinfo, _Ap);
}
#pragma warning( pop )

#pragma warning( pop )

#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\swprintf.inl"

#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\swprintf.inl"
#line 129 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\swprintf.inl"

#line 539 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"
#line 540 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"













#line 554 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"

   wchar_t * __cdecl _wtempnam(  const wchar_t * _Directory,   const wchar_t * _FilePrefix);



#line 560 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"

   int __cdecl _vscwprintf(    const wchar_t * _Format, va_list _ArgList);
   int __cdecl _vscwprintf_l(    const wchar_t * _Format,   _locale_t _Locale, va_list _ArgList);
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "fwscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  int __cdecl fwscanf(  FILE * _File,     const wchar_t * _Format, ...);
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  int __cdecl _fwscanf_l(  FILE * _File,     const wchar_t * _Format,   _locale_t _Locale, ...);
#pragma warning(push)
#pragma warning(disable:6530)

  int __cdecl fwscanf_s(  FILE * _File,     const wchar_t * _Format, ...);
#line 570 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"
  int __cdecl _fwscanf_s_l(  FILE * _File,     const wchar_t * _Format,   _locale_t _Locale, ...);
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "swscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  int __cdecl swscanf(  const wchar_t * _Src,     const wchar_t * _Format, ...);
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_swscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  int __cdecl _swscanf_l(  const wchar_t * _Src,     const wchar_t * _Format,   _locale_t _Locale, ...);

  int __cdecl swscanf_s(  const wchar_t *_Src,     const wchar_t * _Format, ...);
#line 576 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"
  int __cdecl _swscanf_s_l(  const wchar_t * _Src,     const wchar_t * _Format,   _locale_t _Locale, ...);
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snwscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  int __cdecl _snwscanf(    const wchar_t * _Src,   size_t _MaxCount,     const wchar_t * _Format, ...);
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  int __cdecl _snwscanf_l(    const wchar_t * _Src,   size_t _MaxCount,     const wchar_t * _Format,   _locale_t _Locale, ...);
  int __cdecl _snwscanf_s(    const wchar_t * _Src,   size_t _MaxCount,     const wchar_t * _Format, ...);
  int __cdecl _snwscanf_s_l(    const wchar_t * _Src,   size_t _MaxCount,     const wchar_t * _Format,   _locale_t _Locale, ...);
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "wscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  int __cdecl wscanf(    const wchar_t * _Format, ...);
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  int __cdecl _wscanf_l(    const wchar_t * _Format,   _locale_t _Locale, ...);

  int __cdecl wscanf_s(    const wchar_t * _Format, ...);
#line 586 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"
  int __cdecl _wscanf_s_l(    const wchar_t * _Format,   _locale_t _Locale, ...);
#pragma warning(pop)

   FILE * __cdecl _wfdopen(  int _FileHandle ,   const wchar_t * _Mode);
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wfopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  FILE * __cdecl _wfopen(  const wchar_t * _Filename,   const wchar_t * _Mode);
  errno_t __cdecl _wfopen_s(  FILE ** _File,   const wchar_t * _Filename,   const wchar_t * _Mode);
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wfreopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  FILE * __cdecl _wfreopen(  const wchar_t * _Filename,   const wchar_t * _Mode,   FILE * _OldFile);
  errno_t __cdecl _wfreopen_s(  FILE ** _File,   const wchar_t * _Filename,   const wchar_t * _Mode,   FILE * _OldFile);






   FILE * __cdecl _wpopen(  const wchar_t *_Command,   const wchar_t * _Mode);
#line 602 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"
 int __cdecl _wremove(  const wchar_t * _Filename);
  errno_t __cdecl _wtmpnam_s(  wchar_t * _DstBuf,   size_t _SizeInWords);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wtmpnam_s(  wchar_t (&_Buffer)[_Size]) throw() { return _wtmpnam_s(_Buffer, _Size); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wtmpnam_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t * __cdecl _wtmpnam(  wchar_t *_Buffer);

  wint_t __cdecl _fgetwc_nolock(  FILE * _File);
  wint_t __cdecl _fputwc_nolock(  wchar_t _Ch,   FILE * _File);
  wint_t __cdecl _ungetwc_nolock(  wint_t _Ch,   FILE * _File);





#line 616 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"




#line 621 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"
inline   wint_t __cdecl getwchar()
        {return (fgetwc((&__iob_func()[0]))); }   
inline  wint_t __cdecl putwchar(  wchar_t _C)
        {return (fputwc(_C, (&__iob_func()[1]))); }       
#line 626 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"










#line 637 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"


#line 640 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"


#line 643 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"















#line 659 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"











 void __cdecl _lock_file(  FILE * _File);
 void __cdecl _unlock_file(  FILE * _File);

  int __cdecl _fclose_nolock(  FILE * _File);
  int __cdecl _fflush_nolock(  FILE * _File);
  size_t __cdecl _fread_nolock(  void * _DstBuf,   size_t _ElementSize,   size_t _Count,   FILE * _File);
  size_t __cdecl _fread_nolock_s(  void * _DstBuf,   size_t _DstSize,   size_t _ElementSize,   size_t _Count,   FILE * _File);
  int __cdecl _fseek_nolock(  FILE * _File,   long _Offset,   int _Origin);
   long __cdecl _ftell_nolock(  FILE * _File);
  int __cdecl _fseeki64_nolock(  FILE * _File,   __int64 _Offset,   int _Origin);
   __int64 __cdecl _ftelli64_nolock(  FILE * _File);
  size_t __cdecl _fwrite_nolock(  const void * _DstBuf,   size_t _Size,   size_t _Count,   FILE * _File);
  int __cdecl _ungetc_nolock(  int _Ch,   FILE * _File);












#line 696 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"











#line 708 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"

__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_tempnam" ". See online help for details."))  char * __cdecl tempnam(  const char * _Directory,   const char * _FilePrefix);



#line 714 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"

 __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_fcloseall" ". See online help for details."))  int __cdecl fcloseall(void);
  __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_fdopen" ". See online help for details."))  FILE * __cdecl fdopen(  int _FileHandle,   const char * _Format);
 __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_fgetchar" ". See online help for details."))  int __cdecl fgetchar(void);
  __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_fileno" ". See online help for details."))  int __cdecl fileno(  FILE * _File);
 __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_flushall" ". See online help for details."))  int __cdecl flushall(void);
 __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_fputchar" ". See online help for details."))  int __cdecl fputchar(  int _Ch);
  __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_getw" ". See online help for details."))  int __cdecl getw(  FILE * _File);
 __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_putw" ". See online help for details."))  int __cdecl putw(  int _Ch,   FILE * _File);
  __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_rmtmp" ". See online help for details."))  int __cdecl rmtmp(void);

#line 726 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"


}
#line 730 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"

#pragma pack(pop)

#line 734 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdio.h"

#line 14 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\cstdio"
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\cstdio"


 
 
 
 
 
 
 

 
 
 
 

  

typedef FILE _iobuf;

 
namespace std {
using :: _iobuf;

using :: size_t; using :: fpos_t; using :: FILE;
using :: clearerr; using :: fclose; using :: feof;
using :: ferror; using :: fflush; using :: fgetc;
using :: fgetpos; using :: fgets; using :: fopen;
using :: fprintf; using :: fputc; using :: fputs;
using :: fread; using :: freopen; using :: fscanf;
using :: fseek; using :: fsetpos; using :: ftell;
using :: fwrite; using :: getc; using :: getchar;
using :: gets; using :: perror;
using :: putc; using :: putchar;
using :: printf; using :: puts; using :: remove;
using :: rename; using :: rewind; using :: scanf;
using :: setbuf; using :: setvbuf; using :: sprintf;
using :: sscanf; using :: tmpfile; using :: tmpnam;
using :: ungetc; using :: vfprintf; using :: vprintf;
using :: vsprintf;
}
 #line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\cstdio"
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\cstdio"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\iosfwd"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\cstring"

#pragma once










 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\string.h"














#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"







































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\string.h"


extern "C" {
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\string.h"




#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\string.h"

















 void *  __cdecl _memccpy(   void * _Dst,   const void * _Src,   int _Val,   size_t _MaxCount);
   const void *  __cdecl memchr(   const void * _Buf ,   int _Val,   size_t _MaxCount);
   int     __cdecl _memicmp(  const void * _Buf1,   const void * _Buf2,   size_t _Size);
   int     __cdecl _memicmp_l(  const void * _Buf1,   const void * _Buf2,   size_t _Size,   _locale_t _Locale);
  int     __cdecl memcmp(  const void * _Buf1,   const void * _Buf2,   size_t _Size);

 

void *  __cdecl memcpy(  void * _Dst,   const void * _Src,   size_t _Size);

 errno_t  __cdecl memcpy_s(  void * _Dst,   rsize_t _DstSize,   const void * _Src,   rsize_t _MaxCount);





















#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\string.h"










#line 91 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\string.h"
#line 92 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\string.h"
         
        
        void *  __cdecl memset(  void * _Dst,   int _Val,   size_t _Size);



__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_memccpy" ". See online help for details."))  void * __cdecl memccpy(  void * _Dst,   const void * _Src,   int _Val,   size_t _Size);
  __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_memicmp" ". See online help for details."))  int __cdecl memicmp(  const void * _Buf1,   const void * _Buf2,   size_t _Size);
#line 101 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\string.h"

#line 103 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\string.h"
#line 104 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\string.h"

  errno_t __cdecl _strset_s(  char * _Dst,   size_t _DstSize,   int _Value);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strset_s(  char (&_Dest)[_Size],   int _Value) throw() { return _strset_s(_Dest, _Size, _Value); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char * __cdecl _strset( char *_Dest,  int _Value);

  errno_t __cdecl strcpy_s(  char * _Dst,   rsize_t _SizeInBytes,   const char * _Src);
#line 111 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\string.h"
extern "C++" { template <size_t _Size> inline errno_t __cdecl strcpy_s(  char (&_Dest)[_Size],   const char * _Source) throw() { return strcpy_s(_Dest, _Size, _Source); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "strcpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char * __cdecl strcpy( char *_Dest,  const char * _Source);

  errno_t __cdecl strcat_s(  char * _Dst,   rsize_t _SizeInBytes,   const char * _Src);
#line 116 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\string.h"
extern "C++" { template <size_t _Size> inline errno_t __cdecl strcat_s(char (&_Dest)[_Size],   const char * _Source) throw() { return strcat_s(_Dest, _Size, _Source); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "strcat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char * __cdecl strcat( char *_Dest,  const char * _Source);
#line 120 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\string.h"
  int     __cdecl strcmp(  const char * _Str1,   const char * _Str2);
  size_t  __cdecl strlen(  const char * _Str);
  


size_t  __cdecl strnlen(  const char * _Str,   size_t _MaxCount);

  static __inline


size_t  __cdecl strnlen_s(  const char * _Str,   size_t _MaxCount)
{
    return (_Str==0) ? 0 : strnlen(_Str, _MaxCount);
}
#line 135 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\string.h"

  errno_t __cdecl memmove_s(  void * _Dst,   rsize_t _DstSize,   const void * _Src,   rsize_t _MaxCount);
#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\string.h"

  void *  __cdecl memmove(  void * _Dst,   const void * _Src,   size_t _Size);




#line 145 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\string.h"

   char *  __cdecl _strdup(  const char * _Src);



#line 151 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\string.h"

   const char *  __cdecl strchr(  const char * _Str,   int _Val);
   int     __cdecl _stricmp(   const char * _Str1,    const char * _Str2);
   int     __cdecl _strcmpi(   const char * _Str1,    const char * _Str2);
   int     __cdecl _stricmp_l(   const char * _Str1,    const char * _Str2,   _locale_t _Locale);
   int     __cdecl strcoll(   const char * _Str1,    const  char * _Str2);
   int     __cdecl _strcoll_l(   const char * _Str1,    const char * _Str2,   _locale_t _Locale);
   int     __cdecl _stricoll(   const char * _Str1,    const char * _Str2);
   int     __cdecl _stricoll_l(   const char * _Str1,    const char * _Str2,   _locale_t _Locale);
   int     __cdecl _strncoll  (  const char * _Str1,   const char * _Str2,   size_t _MaxCount);
   int     __cdecl _strncoll_l(  const char * _Str1,   const char * _Str2,   size_t _MaxCount,   _locale_t _Locale);
   int     __cdecl _strnicoll (  const char * _Str1,   const char * _Str2,   size_t _MaxCount);
   int     __cdecl _strnicoll_l(  const char * _Str1,   const char * _Str2,   size_t _MaxCount,   _locale_t _Locale);
   size_t  __cdecl strcspn(   const char * _Str,    const char * _Control);
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_strerror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char *  __cdecl _strerror(  const char * _ErrMsg);
  errno_t __cdecl _strerror_s(  char * _Buf,   size_t _SizeInBytes,   const char * _ErrMsg);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strerror_s(char (&_Buffer)[_Size],   const char * _ErrorMessage) throw() { return _strerror_s(_Buffer, _Size, _ErrorMessage); } }
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "strerror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char *  __cdecl strerror(  int);

  errno_t __cdecl strerror_s(  char * _Buf,   size_t _SizeInBytes,   int _ErrNum);
#line 172 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\string.h"
extern "C++" { template <size_t _Size> inline errno_t __cdecl strerror_s(char (&_Buffer)[_Size],   int _ErrorMessage) throw() { return strerror_s(_Buffer, _Size, _ErrorMessage); } }
  errno_t __cdecl _strlwr_s(  char * _Str,   size_t _Size);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strlwr_s(  char (&_String)[_Size]) throw() { return _strlwr_s(_String, _Size); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strlwr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char * __cdecl _strlwr( char *_String);
  errno_t __cdecl _strlwr_s_l(  char * _Str,   size_t _Size,   _locale_t _Locale);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strlwr_s_l(  char (&_String)[_Size],   _locale_t _Locale) throw() { return _strlwr_s_l(_String, _Size, _Locale); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strlwr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char * __cdecl _strlwr_l(  char *_String,   _locale_t _Locale);

  errno_t __cdecl strncat_s(  char * _Dst,   rsize_t _SizeInBytes,   const char * _Src,   rsize_t _MaxCount);
#line 182 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\string.h"
extern "C++" { template <size_t _Size> inline errno_t __cdecl strncat_s(  char (&_Dest)[_Size],   const char * _Source,   size_t _Count) throw() { return strncat_s(_Dest, _Size, _Source, _Count); } }
#pragma warning(push)
#pragma warning(disable:6059)

__declspec(deprecated("This function or variable may be unsafe. Consider using " "strncat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char * __cdecl strncat(  char *_Dest,   const char * _Source,   size_t _Count);
#pragma warning(pop)
   int     __cdecl strncmp(  const char * _Str1,   const char * _Str2,   size_t _MaxCount);
   int     __cdecl _strnicmp(  const char * _Str1,   const char * _Str2,   size_t _MaxCount);
   int     __cdecl _strnicmp_l(  const char * _Str1,   const char * _Str2,   size_t _MaxCount,   _locale_t _Locale);

  errno_t __cdecl strncpy_s(  char * _Dst,   rsize_t _SizeInBytes,   const char * _Src,   rsize_t _MaxCount);
#line 194 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\string.h"
extern "C++" { template <size_t _Size> inline errno_t __cdecl strncpy_s(char (&_Dest)[_Size],   const char * _Source,   size_t _Count) throw() { return strncpy_s(_Dest, _Size, _Source, _Count); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "strncpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char * __cdecl strncpy(    char *_Dest,   const char * _Source,   size_t _Count);
  errno_t __cdecl _strnset_s(  char * _Str,   size_t _SizeInBytes,   int _Val,   size_t _MaxCount);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strnset_s(  char (&_Dest)[_Size],   int _Val,   size_t _Count) throw() { return _strnset_s(_Dest, _Size, _Val, _Count); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strnset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char * __cdecl _strnset(  char *_Dest,   int _Val,   size_t _Count);
   const char *  __cdecl strpbrk(  const char * _Str,   const char * _Control);
   const char *  __cdecl strrchr(  const char * _Str,   int _Ch);
 char *  __cdecl _strrev(  char * _Str);
   size_t  __cdecl strspn(  const char * _Str,   const char * _Control);
     const char *  __cdecl strstr(  const char * _Str,   const char * _SubStr);
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "strtok_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char *  __cdecl strtok(  char * _Str,   const char * _Delim);

   char *  __cdecl strtok_s(  char * _Str,   const char * _Delim,     char ** _Context);
#line 208 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\string.h"
  errno_t __cdecl _strupr_s(  char * _Str,   size_t _Size);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strupr_s(  char (&_String)[_Size]) throw() { return _strupr_s(_String, _Size); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strupr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char * __cdecl _strupr( char *_String);
  errno_t __cdecl _strupr_s_l(  char * _Str,   size_t _Size, _locale_t _Locale);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strupr_s_l(  char (&_String)[_Size], _locale_t _Locale) throw() { return _strupr_s_l(_String, _Size, _Locale); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strupr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char * __cdecl _strupr_l(  char *_String,   _locale_t _Locale);
  size_t  __cdecl strxfrm (    char * _Dst,   const char * _Src,   size_t _MaxCount);
  size_t  __cdecl _strxfrm_l(    char * _Dst,   const char * _Src,   size_t _MaxCount,   _locale_t _Locale);


extern "C++" {


  inline char * __cdecl strchr(  char * _Str,   int _Ch)
        { return (char*)strchr((const char*)_Str, _Ch); }
  inline char * __cdecl strpbrk(  char * _Str,   const char * _Control)
        { return (char*)strpbrk((const char*)_Str, _Control); }
  inline char * __cdecl strrchr(  char * _Str,   int _Ch)
        { return (char*)strrchr((const char*)_Str, _Ch); }
    inline char * __cdecl strstr(  char * _Str,   const char * _SubStr)
        { return (char*)strstr((const char*)_Str, _SubStr); }
#line 230 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\string.h"


  inline void * __cdecl memchr(  void * _Pv,   int _C,   size_t _N)
        { return (void*)memchr((const void*)_Pv, _C, _N); }
#line 235 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\string.h"
}
#line 237 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\string.h"






#line 244 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\string.h"

  __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strdup" ". See online help for details."))  char * __cdecl strdup(  const char * _Src);



#line 250 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\string.h"


  __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strcmpi" ". See online help for details."))  int __cdecl strcmpi(  const char * _Str1,   const char * _Str2);
  __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_stricmp" ". See online help for details."))  int __cdecl stricmp(  const char * _Str1,   const char * _Str2);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strlwr" ". See online help for details."))  char * __cdecl strlwr(  char * _Str);
  __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strnicmp" ". See online help for details."))  int __cdecl strnicmp(  const char * _Str1,   const char * _Str,   size_t _MaxCount);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strnset" ". See online help for details."))  char * __cdecl strnset(  char * _Str,   int _Val,   size_t _MaxCount);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strrev" ". See online help for details."))  char * __cdecl strrev(  char * _Str);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strset" ". See online help for details."))         char * __cdecl strset(  char * _Str,   int _Val);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strupr" ". See online help for details."))  char * __cdecl strupr(  char * _Str);

#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\string.h"









#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\string.h"

   wchar_t * __cdecl _wcsdup(  const wchar_t * _Str);



#line 278 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\string.h"


  errno_t __cdecl wcscat_s(  wchar_t * _Dst,   rsize_t _SizeInWords,   const wchar_t * _Src);
#line 282 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\string.h"
extern "C++" { template <size_t _Size> inline errno_t __cdecl wcscat_s(wchar_t (&_Dest)[_Size],   const wchar_t * _Source) throw() { return wcscat_s(_Dest, _Size, _Source); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcscat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t * __cdecl wcscat( wchar_t *_Dest,  const wchar_t * _Source);
#line 286 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\string.h"
 

 const wchar_t * __cdecl wcschr(  const wchar_t * _Str, wchar_t _Ch);
   int __cdecl wcscmp(  const wchar_t * _Str1,   const wchar_t * _Str2);

  errno_t __cdecl wcscpy_s(  wchar_t * _Dst,   rsize_t _SizeInWords,   const wchar_t * _Src);
#line 293 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\string.h"
extern "C++" { template <size_t _Size> inline errno_t __cdecl wcscpy_s(wchar_t (&_Dest)[_Size],   const wchar_t * _Source) throw() { return wcscpy_s(_Dest, _Size, _Source); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcscpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t * __cdecl wcscpy( wchar_t *_Dest,  const wchar_t * _Source);
   size_t __cdecl wcscspn(  const wchar_t * _Str,   const wchar_t * _Control);
   size_t __cdecl wcslen(  const wchar_t * _Str);
  


size_t __cdecl wcsnlen(  const wchar_t * _Src,   size_t _MaxCount);

  static __inline


size_t __cdecl wcsnlen_s(  const wchar_t * _Src,   size_t _MaxCount)
{
    return (_Src == 0) ? 0 : wcsnlen(_Src, _MaxCount);
}
#line 310 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\string.h"

  errno_t __cdecl wcsncat_s(  wchar_t * _Dst,   rsize_t _SizeInWords,   const wchar_t * _Src,   rsize_t _MaxCount);
#line 313 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\string.h"
extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsncat_s(  wchar_t (&_Dest)[_Size],   const wchar_t * _Source,   size_t _Count) throw() { return wcsncat_s(_Dest, _Size, _Source, _Count); } }
#pragma warning(push)
#pragma warning(disable:6059)
__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcsncat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t * __cdecl wcsncat(  wchar_t *_Dest,   const wchar_t * _Source,   size_t _Count);
#pragma warning(pop)
   int __cdecl wcsncmp(  const wchar_t * _Str1,   const wchar_t * _Str2,   size_t _MaxCount);

  errno_t __cdecl wcsncpy_s(  wchar_t * _Dst,   rsize_t _SizeInWords,   const wchar_t * _Src,   rsize_t _MaxCount);
#line 322 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\string.h"
extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsncpy_s(wchar_t (&_Dest)[_Size],   const wchar_t * _Source,   size_t _Count) throw() { return wcsncpy_s(_Dest, _Size, _Source, _Count); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcsncpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t * __cdecl wcsncpy(    wchar_t *_Dest,   const wchar_t * _Source,   size_t _Count);
   const wchar_t * __cdecl wcspbrk(  const wchar_t * _Str,   const wchar_t * _Control);
   const wchar_t * __cdecl wcsrchr(  const wchar_t * _Str,   wchar_t _Ch);
   size_t __cdecl wcsspn(  const wchar_t * _Str,   const wchar_t * _Control);
   

 const wchar_t * __cdecl wcsstr(  const wchar_t * _Str,   const wchar_t * _SubStr);
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "wcstok_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t * __cdecl wcstok(  wchar_t * _Str,   const wchar_t * _Delim);

   wchar_t * __cdecl wcstok_s(  wchar_t * _Str,   const wchar_t * _Delim,     wchar_t ** _Context);
#line 334 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\string.h"
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcserror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t * __cdecl _wcserror(  int _ErrNum);
  errno_t __cdecl _wcserror_s(  wchar_t * _Buf,   size_t _SizeInWords,   int _ErrNum);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcserror_s(wchar_t (&_Buffer)[_Size],   int _Error) throw() { return _wcserror_s(_Buffer, _Size, _Error); } }
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "__wcserror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t * __cdecl __wcserror(  const wchar_t * _Str);
  errno_t __cdecl __wcserror_s(  wchar_t * _Buffer,   size_t _SizeInWords,   const wchar_t * _ErrMsg);
extern "C++" { template <size_t _Size> inline errno_t __cdecl __wcserror_s(wchar_t (&_Buffer)[_Size],   const wchar_t * _ErrorMessage) throw() { return __wcserror_s(_Buffer, _Size, _ErrorMessage); } }

   int __cdecl _wcsicmp(  const wchar_t * _Str1,   const wchar_t * _Str2);
   int __cdecl _wcsicmp_l(  const wchar_t * _Str1,   const wchar_t * _Str2,   _locale_t _Locale);
   int __cdecl _wcsnicmp(  const wchar_t * _Str1,   const wchar_t * _Str2,   size_t _MaxCount);
   int __cdecl _wcsnicmp_l(  const wchar_t * _Str1,   const wchar_t * _Str2,   size_t _MaxCount,   _locale_t _Locale);
  errno_t __cdecl _wcsnset_s(  wchar_t * _Dst,   size_t _SizeInWords,   wchar_t _Val,   size_t _MaxCount);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsnset_s(  wchar_t (&_Dst)[_Size], wchar_t _Val,   size_t _MaxCount) throw() { return _wcsnset_s(_Dst, _Size, _Val, _MaxCount); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsnset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t * __cdecl _wcsnset(  wchar_t *_Str, wchar_t _Val,   size_t _MaxCount);
 wchar_t * __cdecl _wcsrev(  wchar_t * _Str);
  errno_t __cdecl _wcsset_s(  wchar_t * _Dst,   size_t _SizeInWords,   wchar_t _Value);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsset_s(  wchar_t (&_Str)[_Size], wchar_t _Val) throw() { return _wcsset_s(_Str, _Size, _Val); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t * __cdecl _wcsset(  wchar_t *_Str, wchar_t _Val);

  errno_t __cdecl _wcslwr_s(  wchar_t * _Str,   size_t _SizeInWords);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcslwr_s(  wchar_t (&_String)[_Size]) throw() { return _wcslwr_s(_String, _Size); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcslwr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t * __cdecl _wcslwr( wchar_t *_String);
  errno_t __cdecl _wcslwr_s_l(  wchar_t * _Str,   size_t _SizeInWords,   _locale_t _Locale);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcslwr_s_l(  wchar_t (&_String)[_Size],   _locale_t _Locale) throw() { return _wcslwr_s_l(_String, _Size, _Locale); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcslwr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t * __cdecl _wcslwr_l(  wchar_t *_String,   _locale_t _Locale);
  errno_t __cdecl _wcsupr_s(  wchar_t * _Str,   size_t _Size);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsupr_s(  wchar_t (&_String)[_Size]) throw() { return _wcsupr_s(_String, _Size); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsupr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t * __cdecl _wcsupr( wchar_t *_String);
  errno_t __cdecl _wcsupr_s_l(  wchar_t * _Str,   size_t _Size,   _locale_t _Locale);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsupr_s_l(  wchar_t (&_String)[_Size],   _locale_t _Locale) throw() { return _wcsupr_s_l(_String, _Size, _Locale); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsupr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t * __cdecl _wcsupr_l(  wchar_t *_String,   _locale_t _Locale);
  size_t __cdecl wcsxfrm(    wchar_t * _Dst,   const wchar_t * _Src,   size_t _MaxCount);
  size_t __cdecl _wcsxfrm_l(    wchar_t * _Dst,   const wchar_t *_Src,   size_t _MaxCount,   _locale_t _Locale);
   int __cdecl wcscoll(  const wchar_t * _Str1,   const wchar_t * _Str2);
   int __cdecl _wcscoll_l(  const wchar_t * _Str1,   const wchar_t * _Str2,   _locale_t _Locale);
   int __cdecl _wcsicoll(  const wchar_t * _Str1,   const wchar_t * _Str2);
   int __cdecl _wcsicoll_l(  const wchar_t * _Str1,   const wchar_t *_Str2,   _locale_t _Locale);
   int __cdecl _wcsncoll(  const wchar_t * _Str1,   const wchar_t * _Str2,   size_t _MaxCount);
   int __cdecl _wcsncoll_l(  const wchar_t * _Str1,   const wchar_t * _Str2,   size_t _MaxCount,   _locale_t _Locale);
   int __cdecl _wcsnicoll(  const wchar_t * _Str1,   const wchar_t * _Str2,   size_t _MaxCount);
   int __cdecl _wcsnicoll_l(  const wchar_t * _Str1,   const wchar_t * _Str2,   size_t _MaxCount,   _locale_t _Locale);




extern "C++" {
 

        inline wchar_t * __cdecl wcschr(  wchar_t *_Str, wchar_t _Ch)
        {return ((wchar_t *)wcschr((const wchar_t *)_Str, _Ch)); }
  inline wchar_t * __cdecl wcspbrk(  wchar_t *_Str,   const wchar_t *_Control)
        {return ((wchar_t *)wcspbrk((const wchar_t *)_Str, _Control)); }
  inline wchar_t * __cdecl wcsrchr(  wchar_t *_Str,   wchar_t _Ch)
        {return ((wchar_t *)wcsrchr((const wchar_t *)_Str, _Ch)); }
   

        inline wchar_t * __cdecl wcsstr(  wchar_t *_Str,   const wchar_t *_SubStr)
        {return ((wchar_t *)wcsstr((const wchar_t *)_Str, _SubStr)); }
}
#line 394 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\string.h"
#line 395 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\string.h"






#line 402 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\string.h"

  __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsdup" ". See online help for details."))  wchar_t * __cdecl wcsdup(  const wchar_t * _Str);



#line 408 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\string.h"





  __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsicmp" ". See online help for details."))  int __cdecl wcsicmp(  const wchar_t * _Str1,   const wchar_t * _Str2);
  __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsnicmp" ". See online help for details."))  int __cdecl wcsnicmp(  const wchar_t * _Str1,   const wchar_t * _Str2,   size_t _MaxCount);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsnset" ". See online help for details."))  wchar_t * __cdecl wcsnset(  wchar_t * _Str,   wchar_t _Val,   size_t _MaxCount);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsrev" ". See online help for details."))  wchar_t * __cdecl wcsrev(  wchar_t * _Str);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsset" ". See online help for details."))  wchar_t * __cdecl wcsset(  wchar_t * _Str, wchar_t _Val);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcslwr" ". See online help for details."))  wchar_t * __cdecl wcslwr(  wchar_t * _Str);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsupr" ". See online help for details."))  wchar_t * __cdecl wcsupr(  wchar_t * _Str);
  __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsicoll" ". See online help for details."))  int __cdecl wcsicoll(  const wchar_t * _Str1,   const wchar_t * _Str2);

#line 423 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\string.h"


#line 426 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\string.h"








}
#line 436 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\string.h"

#line 438 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\string.h"

#line 14 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\cstring"
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\cstring"

 
namespace std {
using :: size_t; using :: memchr; using :: memcmp;

using :: memcpy; using :: memmove; using :: memset;
using :: strcat; using :: strchr; using :: strcmp;
using :: strcoll; using :: strcpy; using :: strcspn;
using :: strerror; using :: strlen; using :: strncat;
using :: strncmp; using :: strncpy; using :: strpbrk;
using :: strrchr; using :: strspn; using :: strstr;
using :: strtok; using :: strxfrm;
}
 #line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\cstring"
#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\cstring"





#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\iosfwd"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\cwchar"

#pragma once










 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wchar.h"

















#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"







































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wchar.h"

#pragma pack(push,8)


extern "C" {
#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wchar.h"































































typedef unsigned long _fsize_t; 

#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wchar.h"



struct _wfinddata32_t {
        unsigned    attrib;
        __time32_t  time_create;    
        __time32_t  time_access;    
        __time32_t  time_write;
        _fsize_t    size;
        wchar_t     name[260];
};

struct _wfinddata32i64_t {
        unsigned    attrib;
        __time32_t  time_create;    
        __time32_t  time_access;    
        __time32_t  time_write;
        __int64     size;
        wchar_t     name[260];
};

struct _wfinddata64i32_t {
        unsigned    attrib;
        __time64_t  time_create;    
        __time64_t  time_access;    
        __time64_t  time_write;
        _fsize_t    size;
        wchar_t     name[260];
};

struct _wfinddata64_t {
        unsigned    attrib;
        __time64_t  time_create;    
        __time64_t  time_access;    
        __time64_t  time_write;
        __int64     size;
        wchar_t     name[260];
};



















#line 154 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wchar.h"


#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wchar.h"





































#line 195 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wchar.h"

#line 197 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wchar.h"
#line 198 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wchar.h"

 const unsigned short * __cdecl __pctype_func(void);

 extern const unsigned short *_pctype;


#line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wchar.h"
#line 206 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wchar.h"
#line 207 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wchar.h"





 extern const unsigned short _wctype[];
#line 214 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wchar.h"








 const wctype_t * __cdecl __pwctype_func(void);

 extern const wctype_t *_pwctype;


#line 228 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wchar.h"
#line 229 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wchar.h"
#line 230 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wchar.h"







                                
















   int __cdecl iswalpha(  wint_t _C);
   int __cdecl _iswalpha_l(  wint_t _C,   _locale_t _Locale);
   int __cdecl iswupper(  wint_t _C);
   int __cdecl _iswupper_l(  wint_t _C,   _locale_t _Locale);
   int __cdecl iswlower(  wint_t _C);
   int __cdecl _iswlower_l(  wint_t _C,   _locale_t _Locale);
   int __cdecl iswdigit(  wint_t _C);
   int __cdecl _iswdigit_l(  wint_t _C,   _locale_t _Locale);
   int __cdecl iswxdigit(  wint_t _C);
   int __cdecl _iswxdigit_l(  wint_t _C,   _locale_t _Locale);
   int __cdecl iswspace(  wint_t _C);
   int __cdecl _iswspace_l(  wint_t _C,   _locale_t _Locale);
   int __cdecl iswpunct(  wint_t _C);
   int __cdecl _iswpunct_l(  wint_t _C,   _locale_t _Locale);
   int __cdecl iswblank(  wint_t _C);
   int __cdecl _iswblank_l(  wint_t _C,   _locale_t _Locale);
   int __cdecl iswalnum(  wint_t _C);
   int __cdecl _iswalnum_l(  wint_t _C,   _locale_t _Locale);
   int __cdecl iswprint(  wint_t _C);
   int __cdecl _iswprint_l(  wint_t _C,   _locale_t _Locale);
   int __cdecl iswgraph(  wint_t _C);
   int __cdecl _iswgraph_l(  wint_t _C,   _locale_t _Locale);
   int __cdecl iswcntrl(  wint_t _C);
   int __cdecl _iswcntrl_l(  wint_t _C,   _locale_t _Locale);
   int __cdecl iswascii(  wint_t _C);


   int __cdecl isleadbyte(  int _C);
   int __cdecl _isleadbyte_l(  int _C,   _locale_t _Locale);
#line 284 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wchar.h"

   wint_t __cdecl towupper(  wint_t _C);
   wint_t __cdecl _towupper_l(  wint_t _C,   _locale_t _Locale);
   wint_t __cdecl towlower(  wint_t _C);
   wint_t __cdecl _towlower_l(  wint_t _C,   _locale_t _Locale);
   int __cdecl iswctype(  wint_t _C,   wctype_t _Type);
   int __cdecl _iswctype_l(  wint_t _C,   wctype_t _Type,   _locale_t _Locale);

   int __cdecl __iswcsymf(  wint_t _C);
   int __cdecl _iswcsymf_l(  wint_t _C,   _locale_t _Locale);
   int __cdecl __iswcsym(  wint_t _C);
   int __cdecl _iswcsym_l(  wint_t _C,   _locale_t _Locale);


__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "iswctype" " instead. See online help for details."))  int __cdecl is_wctype(  wint_t _C,   wctype_t _Type);
#line 300 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wchar.h"



#line 304 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wchar.h"












#line 317 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wchar.h"

     wchar_t * __cdecl _wgetcwd(  wchar_t * _DstBuf,   int _SizeInWords);
     wchar_t * __cdecl _wgetdcwd(  int _Drive,   wchar_t * _DstBuf,   int _SizeInWords);





#line 326 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wchar.h"

   int __cdecl _wchdir(  const wchar_t * _Path);

#line 330 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wchar.h"

   int __cdecl _wmkdir(  const wchar_t * _Path);
   int __cdecl _wrmdir(  const wchar_t * _Path);


#line 336 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wchar.h"



   int __cdecl _waccess(  const wchar_t * _Filename,   int _AccessMode);
  errno_t __cdecl _waccess_s(  const wchar_t * _Filename,   int _AccessMode);
   int __cdecl _wchmod(  const wchar_t * _Filename,   int _Mode);
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  int __cdecl _wcreat(  const wchar_t * _Filename,   int _PermissionMode);
   intptr_t __cdecl _wfindfirst32(  const wchar_t * _Filename,   struct _wfinddata32_t * _FindData);
   int __cdecl _wfindnext32(  intptr_t _FindHandle,   struct _wfinddata32_t * _FindData);
 int __cdecl _wunlink(  const wchar_t * _Filename);
   int __cdecl _wrename(  const wchar_t * _OldFilename,   const wchar_t * _NewFilename);
 errno_t __cdecl _wmktemp_s(  wchar_t * _TemplateName,   size_t _SizeInWords);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wmktemp_s(wchar_t (&_TemplateName)[_Size]) throw() { return _wmktemp_s(_TemplateName, _Size); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wmktemp_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t * __cdecl _wmktemp( wchar_t *_TemplateName);

   intptr_t __cdecl _wfindfirst32i64(  const wchar_t * _Filename,   struct _wfinddata32i64_t * _FindData);
   intptr_t __cdecl _wfindfirst64i32(  const wchar_t * _Filename,   struct _wfinddata64i32_t * _FindData);
   intptr_t __cdecl _wfindfirst64(  const wchar_t * _Filename,   struct _wfinddata64_t * _FindData);
   int __cdecl _wfindnext32i64(  intptr_t _FindHandle,   struct _wfinddata32i64_t * _FindData);
   int __cdecl _wfindnext64i32(  intptr_t _FindHandle,   struct _wfinddata64i32_t * _FindData);
   int __cdecl _wfindnext64(  intptr_t _FindHandle,   struct _wfinddata64_t * _FindData);

  errno_t __cdecl _wsopen_s(  int * _FileHandle,   const wchar_t * _Filename,   int _OpenFlag,   int _ShareFlag,   int _PermissionFlag);






#line 366 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wchar.h"


extern "C++" __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  int __cdecl _wopen(  const wchar_t * _Filename,   int _OpenFlag,   int _PermissionMode = 0);
extern "C++" __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  int __cdecl _wsopen(  const wchar_t * _Filename,   int _OpenFlag,   int _ShareFlag, int _PermissionMode = 0);

#line 372 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wchar.h"


#line 375 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wchar.h"





  wchar_t * __cdecl _wsetlocale(  int _Category,   const wchar_t * _Locale);
  _locale_t __cdecl _wcreate_locale(  int _Category,   const wchar_t * _Locale);


#line 385 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wchar.h"







 intptr_t __cdecl _wexecl(  const wchar_t * _Filename,   const wchar_t * _ArgList, ...);
 intptr_t __cdecl _wexecle(  const wchar_t * _Filename,   const wchar_t * _ArgList, ...);
 intptr_t __cdecl _wexeclp(  const wchar_t * _Filename,   const wchar_t * _ArgList, ...);
 intptr_t __cdecl _wexeclpe(  const wchar_t * _Filename,   const wchar_t * _ArgList, ...);
 intptr_t __cdecl _wexecv(  const wchar_t * _Filename,   const wchar_t * const * _ArgList);
 intptr_t __cdecl _wexecve(  const wchar_t * _Filename,   const wchar_t * const * _ArgList,
          const wchar_t * const * _Env);
 intptr_t __cdecl _wexecvp(  const wchar_t * _Filename,   const wchar_t * const * _ArgList);
 intptr_t __cdecl _wexecvpe(  const wchar_t * _Filename,   const wchar_t * const * _ArgList,
          const wchar_t * const * _Env);
 intptr_t __cdecl _wspawnl(  int _Mode,   const wchar_t * _Filename,   const wchar_t * _ArgList, ...);
 intptr_t __cdecl _wspawnle(  int _Mode,   const wchar_t * _Filename,   const wchar_t * _ArgList, ...);
 intptr_t __cdecl _wspawnlp(  int _Mode,   const wchar_t * _Filename,   const wchar_t * _ArgList, ...);
 intptr_t __cdecl _wspawnlpe(  int _Mode,   const wchar_t * _Filename,   const wchar_t * _ArgList, ...);
 intptr_t __cdecl _wspawnv(  int _Mode,   const wchar_t * _Filename,   const wchar_t * const * _ArgList);
 intptr_t __cdecl _wspawnve(  int _Mode,   const wchar_t * _Filename,   const wchar_t * const * _ArgList,
          const wchar_t * const * _Env);
 intptr_t __cdecl _wspawnvp(  int _Mode,   const wchar_t * _Filename,   const wchar_t * const * _ArgList);
 intptr_t __cdecl _wspawnvpe(  int _Mode,   const wchar_t * _Filename,   const wchar_t * const * _ArgList,
          const wchar_t * const * _Env);






#line 419 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wchar.h"

#line 421 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wchar.h"







#line 429 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wchar.h"



































#line 465 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wchar.h"

#line 467 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wchar.h"






typedef unsigned short _ino_t;      


typedef unsigned short ino_t;
#line 478 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wchar.h"

#line 480 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wchar.h"


typedef unsigned int _dev_t;        


typedef unsigned int dev_t;
#line 487 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wchar.h"

#line 489 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wchar.h"


typedef long _off_t;                


typedef long off_t;
#line 496 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wchar.h"

#line 498 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wchar.h"



struct _stat32 {
        _dev_t     st_dev;
        _ino_t     st_ino;
        unsigned short st_mode;
        short      st_nlink;
        short      st_uid;
        short      st_gid;
        _dev_t     st_rdev;
        _off_t     st_size;
        __time32_t st_atime;
        __time32_t st_mtime;
        __time32_t st_ctime;
        };



struct stat {
        _dev_t     st_dev;
        _ino_t     st_ino;
        unsigned short st_mode;
        short      st_nlink;
        short      st_uid;
        short      st_gid;
        _dev_t     st_rdev;
        _off_t     st_size;
        time_t st_atime;
        time_t st_mtime;
        time_t st_ctime;
        };

#line 532 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wchar.h"

struct _stat32i64 {
        _dev_t     st_dev;
        _ino_t     st_ino;
        unsigned short st_mode;
        short      st_nlink;
        short      st_uid;
        short      st_gid;
        _dev_t     st_rdev;
        __int64    st_size;
        __time32_t st_atime;
        __time32_t st_mtime;
        __time32_t st_ctime;
        };

struct _stat64i32 {
        _dev_t     st_dev;
        _ino_t     st_ino;
        unsigned short st_mode;
        short      st_nlink;
        short      st_uid;
        short      st_gid;
        _dev_t     st_rdev;
        _off_t     st_size;
        __time64_t st_atime;
        __time64_t st_mtime;
        __time64_t st_ctime;
        };

struct _stat64 {
        _dev_t     st_dev;
        _ino_t     st_ino;
        unsigned short st_mode;
        short      st_nlink;
        short      st_uid;
        short      st_gid;
        _dev_t     st_rdev;
        __int64    st_size;
        __time64_t st_atime;
        __time64_t st_mtime;
        __time64_t st_ctime;
        };























#line 598 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wchar.h"



#line 602 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wchar.h"





 int __cdecl _wstat32(  const wchar_t * _Name,   struct _stat32 * _Stat);

 int __cdecl _wstat32i64(  const wchar_t * _Name,   struct _stat32i64 * _Stat);
 int __cdecl _wstat64i32(  const wchar_t * _Name,   struct _stat64i32 * _Stat);
 int __cdecl _wstat64(  const wchar_t * _Name,   struct _stat64 * _Stat);


#line 615 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wchar.h"












  errno_t __cdecl _cgetws_s(  wchar_t * _Buffer, size_t _SizeInWords,   size_t * _SizeRead);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _cgetws_s(  wchar_t (&_Buffer)[_Size], size_t * _SizeRead) throw() { return _cgetws_s(_Buffer, _Size, _SizeRead); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_cgetws_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t * __cdecl _cgetws(  wchar_t *_Buffer);
   wint_t __cdecl _getwch(void);
   wint_t __cdecl _getwche(void);
   wint_t __cdecl _putwch(wchar_t _WCh);
   wint_t __cdecl _ungetwch(wint_t _WCh);
  int __cdecl _cputws(  const wchar_t * _String);
  int __cdecl _cwprintf(    const wchar_t * _Format, ...);
  int __cdecl _cwprintf_s(    const wchar_t * _Format, ...);
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_cwscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  int __cdecl _cwscanf(    const wchar_t * _Format, ...);
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_cwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  int __cdecl _cwscanf_l(    const wchar_t * _Format,   _locale_t _Locale, ...);
  int __cdecl _cwscanf_s(    const wchar_t * _Format, ...);
  int __cdecl _cwscanf_s_l(    const wchar_t * _Format,   _locale_t _Locale, ...);
  int __cdecl _vcwprintf(    const wchar_t *_Format, va_list _ArgList);
  int __cdecl _vcwprintf_s(    const wchar_t *_Format, va_list _ArgList);

  int __cdecl _cwprintf_p(    const wchar_t * _Format, ...);
  int __cdecl _vcwprintf_p(    const wchar_t*  _Format, va_list _ArgList);

 int __cdecl _cwprintf_l(    const wchar_t * _Format,   _locale_t _Locale, ...);
 int __cdecl _cwprintf_s_l(    const wchar_t * _Format,   _locale_t _Locale, ...);
 int __cdecl _vcwprintf_l(    const wchar_t *_Format,   _locale_t _Locale, va_list _ArgList);
 int __cdecl _vcwprintf_s_l(    const wchar_t * _Format,   _locale_t _Locale, va_list _ArgList);
 int __cdecl _cwprintf_p_l(    const wchar_t * _Format,   _locale_t _Locale, ...);
 int __cdecl _vcwprintf_p_l(    const wchar_t * _Format,   _locale_t _Locale, va_list _ArgList);

 wint_t __cdecl _putwch_nolock(wchar_t _WCh);
  wint_t __cdecl _getwch_nolock(void);
  wint_t __cdecl _getwche_nolock(void);
 wint_t __cdecl _ungetwch_nolock(wint_t _WCh);


#line 661 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wchar.h"

#line 663 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wchar.h"



























































































































































































































































































































































































































































































































struct tm {
        int tm_sec;     
        int tm_min;     
        int tm_hour;    
        int tm_mday;    
        int tm_mon;     
        int tm_year;    
        int tm_wday;    
        int tm_yday;    
        int tm_isdst;   
        };

#line 1183 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wchar.h"





__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wasctime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t * __cdecl _wasctime(  const struct tm * _Tm);
 errno_t __cdecl _wasctime_s(    wchar_t *_Buf,   size_t _SizeInWords,   const struct tm * _Tm);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wasctime_s(  wchar_t (&_Buffer)[_Size],   const struct tm * _Time) throw() { return _wasctime_s(_Buffer, _Size, _Time); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wctime32_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t * __cdecl _wctime32(  const __time32_t *_Time);
 errno_t __cdecl _wctime32_s(    wchar_t* _Buf,   size_t _SizeInWords,   const __time32_t * _Time);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wctime32_s(  wchar_t (&_Buffer)[_Size],   const __time32_t * _Time) throw() { return _wctime32_s(_Buffer, _Size, _Time); } }

 size_t __cdecl wcsftime(  wchar_t * _Buf,   size_t _SizeInWords,     const wchar_t * _Format,    const struct tm * _Tm);
 size_t __cdecl _wcsftime_l(  wchar_t * _Buf,   size_t _SizeInWords,     const wchar_t *_Format,   const struct tm *_Tm,   _locale_t _Locale);

 errno_t __cdecl _wstrdate_s(    wchar_t * _Buf,   size_t _SizeInWords);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wstrdate_s(  wchar_t (&_Buffer)[_Size]) throw() { return _wstrdate_s(_Buffer, _Size); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wstrdate_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t * __cdecl _wstrdate( wchar_t *_Buffer);

 errno_t __cdecl _wstrtime_s(    wchar_t * _Buf,   size_t _SizeInWords);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wstrtime_s(  wchar_t (&_Buffer)[_Size]) throw() { return _wstrtime_s(_Buffer, _Size); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wstrtime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t * __cdecl _wstrtime( wchar_t *_Buffer);

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wctime64_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t * __cdecl _wctime64(  const __time64_t * _Time);
 errno_t __cdecl _wctime64_s(    wchar_t* _Buf,   size_t _SizeInWords,   const __time64_t *_Time);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wctime64_s(  wchar_t (&_Buffer)[_Size],   const __time64_t * _Time) throw() { return _wctime64_s(_Buffer, _Size, _Time); } }


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wtime.inl"












#pragma once







#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wtime.inl"





#pragma warning(push)
#pragma warning(disable:4996)















static __inline wchar_t * __cdecl _wctime(const time_t * _Time)
{
#pragma warning( push )
#pragma warning( disable : 4996 )
    return _wctime64(_Time);
#pragma warning( pop )
}

static __inline errno_t __cdecl _wctime_s(      wchar_t *_Buffer, size_t _SizeInWords, const time_t * _Time)
{
    return _wctime64_s(_Buffer, _SizeInWords, _Time);
}
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wtime.inl"

#pragma warning(pop)

#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wtime.inl"
#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wtime.inl"
#line 1213 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wchar.h"
#line 1214 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wchar.h"


#line 1217 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wchar.h"


typedef int mbstate_t;
typedef wchar_t _Wint_t;

 wint_t __cdecl btowc(int);
 size_t __cdecl mbrlen(    const char * _Ch,   size_t _SizeInBytes,
                                mbstate_t * _State);
 size_t __cdecl mbrtowc(    wchar_t * _DstCh,     const char * _SrcCh,
                                 size_t _SizeInBytes,   mbstate_t * _State);
 errno_t __cdecl mbsrtowcs_s(  size_t* _Retval,   wchar_t * _Dst,   size_t _Size,     const char ** _PSrc,   size_t _N,   mbstate_t * _State);
extern "C++" { template <size_t _Size> inline errno_t __cdecl mbsrtowcs_s(  size_t * _Retval,   wchar_t (&_Dest)[_Size],     const char ** _PSource,   size_t _Count,   mbstate_t * _State) throw() { return mbsrtowcs_s(_Retval, _Dest, _Size, _PSource, _Count, _State); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "mbsrtowcs_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  size_t __cdecl mbsrtowcs(  wchar_t *_Dest,  const char ** _PSrc,  size_t _Count,  mbstate_t * _State);

 errno_t __cdecl wcrtomb_s(  size_t * _Retval,   char * _Dst,
          size_t _SizeInBytes,   wchar_t _Ch,   mbstate_t * _State);
extern "C++" { template <size_t _Size> inline errno_t __cdecl wcrtomb_s(  size_t * _Retval,   char (&_Dest)[_Size],   wchar_t _Source,   mbstate_t * _State) throw() { return wcrtomb_s(_Retval, _Dest, _Size, _Source, _State); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcrtomb_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  size_t __cdecl wcrtomb(  char *_Dest,  wchar_t _Source,  mbstate_t * _State);
 errno_t __cdecl wcsrtombs_s(  size_t * _Retval,   char * _Dst,
          size_t _SizeInBytes,     const wchar_t ** _Src,   size_t _Size,   mbstate_t * _State);
extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsrtombs_s(  size_t * _Retval,   char (&_Dest)[_Size],     const wchar_t ** _PSrc,   size_t _Count,   mbstate_t * _State) throw() { return wcsrtombs_s(_Retval, _Dest, _Size, _PSrc, _Count, _State); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcsrtombs_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  size_t __cdecl wcsrtombs(  char *_Dest,  const wchar_t ** _PSource,  size_t _Count,  mbstate_t * _State);
 int __cdecl wctob(  wint_t _WCh);




  void *  __cdecl memmove(  void * _Dst,   const void * _Src,   size_t _Size);

 

void *  __cdecl memcpy(  void * _Dst,   const void * _Src,   size_t _Size);

 errno_t __cdecl memcpy_s(  void * _Dst,   rsize_t _DstSize,   const void * _Src,   rsize_t _MaxCount);
 errno_t __cdecl memmove_s(  void * _Dst,   rsize_t _DstSize,   const void * _Src,   rsize_t _MaxCount);
#line 1253 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wchar.h"
__inline int __cdecl fwide(  FILE * _F, int _M)
        {(void)_F; return (_M); }
__inline int __cdecl mbsinit(  const mbstate_t *_P)
        {return (_P == 0 || *_P == 0); }
__inline const wchar_t * __cdecl wmemchr(  const wchar_t *_S,   wchar_t _C,   size_t _N)
        {for (; 0 < _N; ++_S, --_N)
                if (*_S == _C)
                        return (const wchar_t *)(_S);
        return (0); }
__inline int __cdecl wmemcmp(  const wchar_t *_S1,   const wchar_t *_S2,   size_t _N)
        {for (; 0 < _N; ++_S1, ++_S2, --_N)
                if (*_S1 != *_S2)
                        return (*_S1 < *_S2 ? -1 : +1);
        return (0); }

 

__inline  wchar_t * __cdecl wmemcpy(  wchar_t *_S1,   const wchar_t *_S2,   size_t _N)
        {
#pragma warning( push )
#pragma warning( disable : 4996 6386 )
            return (wchar_t *)memcpy(_S1, _S2, _N*sizeof(wchar_t));
#pragma warning( pop )
        }

__inline  wchar_t * __cdecl wmemmove(  wchar_t *_S1,   const wchar_t *_S2,   size_t _N)
        {
#pragma warning( push )
#pragma warning( disable : 4996 6386 )
#pragma warning( disable : 6387)
                        
            return (wchar_t *)memmove(_S1, _S2, _N*sizeof(wchar_t));
#pragma warning( pop )
        }


errno_t __cdecl wmemcpy_s(  wchar_t *_S1,   rsize_t _N1,   const wchar_t *_S2, rsize_t _N);
errno_t __cdecl wmemmove_s(  wchar_t *_S1,   rsize_t _N1,   const wchar_t *_S2,   rsize_t _N);
#line 1292 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wchar.h"

 

__inline wchar_t * __cdecl wmemset(  wchar_t *_S,   wchar_t _C,   size_t _N)
        {
            wchar_t *_Su = _S;
            for (; 0 < _N; ++_Su, --_N)
            {
                *_Su = _C;
            }
            return (_S);
        }


extern "C++" {
inline wchar_t * __cdecl wmemchr(  wchar_t *_S,   wchar_t _C,   size_t _N)
        { return (wchar_t *)wmemchr((const wchar_t *)_S, _C, _N); }
}
#line 1311 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wchar.h"
#line 1312 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wchar.h"


}       
#line 1316 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wchar.h"

#pragma pack(pop)

#line 1320 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wchar.h"

#line 14 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\cwchar"
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\cwchar"

typedef mbstate_t _Mbstatet;

 
namespace std {
using :: _Mbstatet;

using :: mbstate_t; using :: size_t;
using :: tm; using :: wint_t;

using :: btowc; using :: fgetwc; using :: fgetws; using :: fputwc;
using :: fputws; using :: fwide; using :: fwprintf;
using :: fwscanf; using :: getwc; using :: getwchar;
using :: mbrlen; using :: mbrtowc; using :: mbsrtowcs;
using :: mbsinit; using :: putwc; using :: putwchar;
using :: swprintf; using :: swscanf; using :: ungetwc;
using :: vfwprintf; using :: vswprintf; using :: vwprintf;
using :: wcrtomb; using :: wprintf; using :: wscanf;
using :: wcsrtombs; using :: wcstol; using :: wcscat;
using :: wcschr; using :: wcscmp; using :: wcscoll;
using :: wcscpy; using :: wcscspn; using :: wcslen;
using :: wcsncat; using :: wcsncmp; using :: wcsncpy;
using :: wcspbrk; using :: wcsrchr; using :: wcsspn;

using :: wcstod; using :: wcstoul; using :: wcsstr;

using :: wcstok; using :: wcsxfrm; using :: wctob;
using :: wmemchr; using :: wmemcmp; using :: wmemcpy;
using :: wmemmove; using :: wmemset; using :: wcsftime;
}
 #line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\cwchar"
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\cwchar"





#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\iosfwd"


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdbg.h"












#pragma once

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"







































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdbg.h"




#pragma pack(push,8)














extern "C" {
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdbg.h"

 





typedef void *_HFILE; 























#line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdbg.h"


typedef int (__cdecl * _CRT_REPORT_HOOK)(int, char *, int *);
typedef int (__cdecl * _CRT_REPORT_HOOKW)(int, wchar_t *, int *);



#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdbg.h"




#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdbg.h"




 





 










typedef int (__cdecl * _CRT_ALLOC_HOOK)(int, void *, size_t, int, long, const unsigned char *, int);


#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdbg.h"


#line 110 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdbg.h"

 





































 














typedef void (__cdecl * _CRT_DUMP_CLIENT)(void *, size_t);


#line 168 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdbg.h"


#line 171 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdbg.h"

struct _CrtMemBlockHeader;
typedef struct _CrtMemState
{
        struct _CrtMemBlockHeader * pBlockHeader;
        size_t lCounts[5];
        size_t lSizes[5];
        size_t lHighWaterCount;
        size_t lTotalCount;
} _CrtMemState;


 











#line 196 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdbg.h"



 













#line 214 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdbg.h"



#line 218 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdbg.h"



#line 222 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdbg.h"



#line 226 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdbg.h"





















































































































































































































































































































































































































































































































































































































































































































































































































#line 1016 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdbg.h"


}



extern "C++" {



 








#pragma warning(suppress: 4985)
    void * __cdecl operator new[](size_t _Size);


    void * __cdecl operator new(
        size_t _Size,
        int,
        const char *,
        int
        );

#pragma warning(suppress: 4985)
    void * __cdecl operator new[](
        size_t _Size,
        int,
        const char *,
        int
        );

void __cdecl operator delete[](void *);
void __cdecl operator delete(void * _P, int, const char *, int);
void __cdecl operator delete[](void * _P, int, const char *, int);

#line 1059 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdbg.h"




















































#line 1112 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdbg.h"

}

#line 1116 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdbg.h"

#line 1118 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdbg.h"


#pragma pack(pop)

#line 1123 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdbg.h"

#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\iosfwd"

 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

namespace std {
		

typedef _Longlong streamoff;
typedef _Longlong streamsize;

  
  

  



extern   const streamoff _BADOFF;
  #line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\iosfwd"

		
template<class _Statetype>
	class fpos
	{	
	typedef fpos<_Statetype> _Myt;

public:
	 fpos(streamoff _Off = 0)
		: _Myoff(_Off), _Fpos(0), _Mystate()
		{	
		}

	 fpos(_Statetype _State, fpos_t _Fileposition)
		: _Myoff(0), _Fpos(_Fileposition), _Mystate(_State)
		{	
		}

	_Statetype  state() const
		{	
		return (_Mystate);
		}

	void  state(_Statetype _State)
		{	
		_Mystate = _State;
		}

	fpos_t  seekpos() const
		{	
		return (_Fpos);
		}

	 operator streamoff() const
		{	
		return ((streamoff)(_Myoff + ((long long)(_Fpos))));
		}

	streamoff  operator-(const _Myt& _Right) const
		{	
		return ((streamoff)*this - (streamoff)_Right);
		}

	_Myt&  operator+=(streamoff _Off)
		{	
		_Myoff += _Off;
		return (*this);
		}

	_Myt&  operator-=(streamoff _Off)
		{	
		_Myoff -= _Off;
		return (*this);
		}

	_Myt  operator+(streamoff _Off) const
		{	
		_Myt _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Myt  operator-(streamoff _Off) const
		{	
		_Myt _Tmp = *this;
		return (_Tmp -= _Off);
		}

	bool  operator==(const _Myt& _Right) const
		{	
		return ((streamoff)*this == (streamoff)_Right);
		}

	bool  operator==(streamoff _Right) const
		{	
		return ((streamoff)*this == _Right);
		}

	bool  operator!=(const _Myt& _Right) const
		{	
		return (!(*this == _Right));
		}

private:
	streamoff _Myoff;	
	fpos_t _Fpos;	
	_Statetype _Mystate;	
	};

 

 
 

typedef fpos<_Mbstatet> streampos;

typedef streampos wstreampos;

		
template<class _Elem,
	class _Int_type>
	struct _Char_traits
	{	
	typedef _Elem char_type;
	typedef _Int_type int_type;
	typedef streampos pos_type;
	typedef streamoff off_type;
	typedef _Mbstatet state_type;

	static int __cdecl compare(
		  const _Elem *_First1,
		  const _Elem *_First2, size_t _Count)
		{	
		for (; 0 < _Count; --_Count, ++_First1, ++_First2)
			if (!eq(*_First1, *_First2))
				return (lt(*_First1, *_First2) ? -1 : +1);
		return (0);
		}

	static size_t __cdecl length(  const _Elem *_First)
		{	
		size_t _Count;
		for (_Count = 0; !eq(*_First, _Elem()); ++_First)
			++_Count;
		return (_Count);
		}

	static _Elem *__cdecl copy(
		  _Elem *_First1,
		  const _Elem *_First2, size_t _Count)
		{	
		_Elem *_Next = _First1;
		for (; 0 < _Count; --_Count, ++_Next, ++_First2)
			assign(*_Next, *_First2);
		return (_First1);
		}

	static _Elem *__cdecl _Copy_s(
		  _Elem *_First1, size_t _Dest_size,
		  const _Elem *_First2, size_t _Count)
		{	
		{ if (!(_Count <= _Dest_size)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); return (0); } };
		return (copy(_First1, _First2, _Count));
		}

	static const _Elem *__cdecl find(
		  const _Elem *_First,
		size_t _Count, const _Elem& _Ch)
		{	
		for (; 0 < _Count; --_Count, ++_First)
			if (eq(*_First, _Ch))
				return (_First);
		return (0);
		}

	static _Elem *__cdecl move(
		  _Elem *_First1,
		  const _Elem *_First2, size_t _Count)
		{	
		_Elem *_Next = _First1;
		if (_First2 < _Next && _Next < _First2 + _Count)
			for (_Next += _Count, _First2 += _Count; 0 < _Count; --_Count)
				assign(*--_Next, *--_First2);
		else
			for (; 0 < _Count; --_Count, ++_Next, ++_First2)
				assign(*_Next, *_First2);
		return (_First1);
		}

	static _Elem *__cdecl assign(
		  _Elem *_First,
		size_t _Count, _Elem _Ch)
		{	
		_Elem *_Next = _First;
		for (; 0 < _Count; --_Count, ++_Next)
			assign(*_Next, _Ch);
		return (_First);
		}

	static void __cdecl assign(_Elem& _Left, const _Elem& _Right) throw ()
		{	
		_Left = _Right;
		}

	static bool __cdecl eq(const _Elem& _Left,
		const _Elem& _Right) throw ()
		{	
		return (_Left == _Right);
		}

	static bool __cdecl lt(const _Elem& _Left,
		const _Elem& _Right) throw ()
		{	
		return (_Left < _Right);
		}

	static _Elem __cdecl to_char_type(
		const int_type& _Meta) throw ()
		{	
		return ((_Elem)_Meta);
		}

	static int_type __cdecl to_int_type(
		const _Elem& _Ch) throw ()
		{	
		return ((int_type)_Ch);
		}

	static bool __cdecl eq_int_type(const int_type& _Left,
		const int_type& _Right) throw ()
		{	
		return (_Left == _Right);
		}

	static int_type __cdecl not_eof(
		const int_type& _Meta) throw ()
		{	
		return (_Meta != eof() ? (int_type)_Meta : (int_type)!eof());
		}

	static int_type __cdecl eof() throw ()
		{	
		return ((int_type)(-1));
		}
	};

		
template<class _Elem>
	struct char_traits
		: public _Char_traits<_Elem, long>
	{	
	};

 

















#line 284 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\iosfwd"

		
template<>
	struct char_traits<wchar_t>
	{	
	typedef wchar_t _Elem;
	typedef _Elem char_type;	
	typedef wint_t int_type;
	typedef streampos pos_type;
	typedef streamoff off_type;
	typedef _Mbstatet state_type;

	static int __cdecl compare(const _Elem *_First1, const _Elem *_First2,
		size_t _Count)
		{	
		return (_Count == 0 ? 0
			: :: wmemcmp(_First1, _First2, _Count));
		}

	static size_t __cdecl length(const _Elem *_First)
		{	
		return (*_First == 0 ? 0
			: :: wcslen(_First));
		}

	static _Elem *__cdecl copy(_Elem *_First1, const _Elem *_First2,
		size_t _Count)
		{	
		return (_Count == 0 ? _First1
			: (_Elem *):: wmemcpy(_First1, _First2, _Count));
		}

	static _Elem *__cdecl _Copy_s(
		  _Elem *_First1, size_t _Size_in_words,
		  const _Elem *_First2, size_t _Count)
		{	
		if (0 < _Count)
			::wmemcpy_s((_First1), (_Size_in_words), (_First2), (_Count));
		return (_First1);
		}

	static const _Elem *__cdecl find(const _Elem *_First, size_t _Count,
		const _Elem& _Ch)
		{	
		return (_Count == 0 ? (const _Elem *)0
			: (const _Elem *):: wmemchr(_First, _Ch, _Count));
		}

	static _Elem *__cdecl move(_Elem *_First1, const _Elem *_First2,
		size_t _Count)
		{	
		return (_Count == 0 ? _First1
			: (_Elem *):: wmemmove(_First1, _First2, _Count));
		}

	static _Elem *__cdecl assign(_Elem *_First, size_t _Count,
		_Elem _Ch)
		{	
		return ((_Elem *):: wmemset(_First, _Ch, _Count));
		}

	static void __cdecl assign(_Elem& _Left, const _Elem& _Right) throw ()
		{	
		_Left = _Right;
		}

	static bool __cdecl eq(const _Elem& _Left,
		const _Elem& _Right) throw ()
		{	
		return (_Left == _Right);
		}

	static bool __cdecl lt(const _Elem& _Left,
		const _Elem& _Right) throw ()
		{	
		return (_Left < _Right);
		}

	static _Elem __cdecl to_char_type(
		const int_type& _Meta) throw ()
		{	
		return (_Meta);
		}

	static int_type __cdecl to_int_type(
		const _Elem& _Ch) throw ()
		{	
		return (_Ch);
		}

	static bool __cdecl eq_int_type(const int_type& _Left,
		const int_type& _Right) throw ()
		{	
		return (_Left == _Right);
		}

	static int_type __cdecl not_eof(
		const int_type& _Meta) throw ()
		{	
		return (_Meta != eof() ? _Meta : !eof());
		}

	static int_type __cdecl eof() throw ()
		{	
		return ((wint_t)(0xFFFF));
		}
	};

 
		
template<>
	struct char_traits<unsigned short>
	{	
	typedef unsigned short _Elem;
	typedef _Elem char_type;	
	typedef wint_t int_type;
	typedef streampos pos_type;
	typedef streamoff off_type;
	typedef _Mbstatet state_type;

	static int __cdecl compare(const _Elem *_First1, const _Elem *_First2,
		size_t _Count)
		{	
		return (_Count == 0 ? 0
			: :: wmemcmp((const wchar_t *)_First1,
				(const wchar_t *)_First2, _Count));
		}

	static size_t __cdecl length(const _Elem *_First)
		{	
		return (*_First == 0 ? 0
			: :: wcslen((const wchar_t *)_First));
		}

	static _Elem *__cdecl copy(_Elem *_First1, const _Elem *_First2,
		size_t _Count)
		{	
		return (_Count == 0 ? _First1
			: (_Elem *):: wmemcpy((wchar_t *)_First1,
				(const wchar_t *)_First2, _Count));
		}

	static _Elem *__cdecl _Copy_s(
		  _Elem *_First1, size_t _Size_in_words,
		  const _Elem *_First2, size_t _Count)
		{	
		if (0 < _Count)
			::wmemcpy_s(((wchar_t *)_First1), (_Size_in_words), ((const wchar_t *)_First2), (_Count));
#line 433 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\iosfwd"
		return (_First1);
		}

	static const _Elem *__cdecl find(const _Elem *_First, size_t _Count,
		const _Elem& _Ch)
		{	
		return (_Count == 0 ? (const _Elem *)0
			: (const _Elem *):: wmemchr((const wchar_t *)_First,
				_Ch, _Count));
		}

	static _Elem *__cdecl move(_Elem *_First1, const _Elem *_First2,
		size_t _Count)
		{	
		return (_Count == 0 ? _First1
			: (_Elem *):: wmemmove((wchar_t *)_First1,
				(const wchar_t *)_First2, _Count));
		}

	static _Elem *__cdecl assign(_Elem *_First, size_t _Count,
		_Elem _Ch)
		{	
		return ((_Elem *):: wmemset((wchar_t *)_First, _Ch, _Count));
		}

	static void __cdecl assign(_Elem& _Left, const _Elem& _Right) throw ()
		{	
		_Left = _Right;
		}

	static bool __cdecl eq(const _Elem& _Left,
		const _Elem& _Right) throw ()
		{	
		return (_Left == _Right);
		}

	static bool __cdecl lt(const _Elem& _Left,
		const _Elem& _Right) throw ()
		{	
		return (_Left < _Right);
		}

	static _Elem __cdecl to_char_type(const int_type& _Meta) throw ()
		{	
		return (_Meta);
		}

	static int_type __cdecl to_int_type(const _Elem& _Ch) throw ()
		{	
		return (_Ch);
		}

	static bool __cdecl eq_int_type(const int_type& _Left,
		const int_type& _Right) throw ()
		{	
		return (_Left == _Right);
		}

	static int_type __cdecl not_eof(const int_type& _Meta) throw ()
		{	
		return (_Meta != eof() ? _Meta : !eof());
		}

	static int_type __cdecl eof() throw ()
		{	
		return ((wint_t)(0xFFFF));
		}
	};
 #line 502 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\iosfwd"

		
template<> struct char_traits<char>
	{	
	typedef char _Elem;
	typedef _Elem char_type;
	typedef int int_type;
	typedef streampos pos_type;
	typedef streamoff off_type;
	typedef _Mbstatet state_type;

	static int __cdecl compare(const _Elem *_First1, const _Elem *_First2,
		size_t _Count)
		{	
		return (_Count == 0 ? 0
			: :: memcmp(_First1, _First2, _Count));
		}

	static size_t __cdecl length(const _Elem *_First)
		{	
		return (*_First == 0 ? 0
			: :: strlen(_First));
		}

	static _Elem *__cdecl copy(_Elem *_First1, const _Elem *_First2,
		size_t _Count)
		{	
		return (_Count == 0 ? _First1
			: (_Elem *):: memcpy(_First1, _First2, _Count));
		}

	static _Elem *__cdecl _Copy_s(
		  _Elem *_First1, size_t _Size_in_bytes,
		  const _Elem *_First2, size_t _Count)
		{	
		if (0 < _Count)
			::memcpy_s((_First1), (_Size_in_bytes), (_First2), (_Count));
		return (_First1);
		}

	static const _Elem *__cdecl find(const _Elem *_First, size_t _Count,
		const _Elem& _Ch)
		{	
		return (_Count == 0 ? (const _Elem *)0
			: (const _Elem *):: memchr(_First, _Ch, _Count));
		}

	static _Elem *__cdecl move(_Elem *_First1, const _Elem *_First2,
		size_t _Count)
		{	
		return (_Count == 0 ? _First1
			: (_Elem *):: memmove(_First1, _First2, _Count));
		}

	static _Elem *__cdecl assign(_Elem *_First, size_t _Count,
		_Elem _Ch)
		{	
		return ((_Elem *):: memset(_First, _Ch, _Count));
		}

	static void __cdecl assign(_Elem& _Left, const _Elem& _Right) throw ()
		{	
		_Left = _Right;
		}

	static bool __cdecl eq(const _Elem& _Left,
		const _Elem& _Right) throw ()
		{	
		return (_Left == _Right);
		}

	static bool __cdecl lt(const _Elem& _Left,
		const _Elem& _Right) throw ()
		{	
		return ((unsigned char)_Left < (unsigned char)_Right);
		}

	static _Elem __cdecl to_char_type(
		const int_type& _Meta) throw ()
		{	
		return ((_Elem)_Meta);
		}

	static int_type __cdecl to_int_type(
		const _Elem& _Ch) throw ()
		{	
		return ((unsigned char)_Ch);
		}

	static bool __cdecl eq_int_type(const int_type& _Left,
		const int_type& _Right) throw ()
		{	
		return (_Left == _Right);
		}

	static int_type __cdecl not_eof(
		const int_type& _Meta) throw ()
		{	
		return (_Meta != eof() ? _Meta : !eof());
		}

	static int_type __cdecl eof() throw ()
		{	
		return ((-1));
		}
	};

		
template<class _Ty>
	class allocator;
class ios_base;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class basic_ios;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class istreambuf_iterator;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class ostreambuf_iterator;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class basic_streambuf;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class basic_istream;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class basic_ostream;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class basic_iostream;
template<class _Elem,
	class _Traits = char_traits<_Elem>,
	class _Alloc = allocator<_Elem> >
	class basic_stringbuf;
template<class _Elem,
	class _Traits = char_traits<_Elem>,
	class _Alloc = allocator<_Elem> >
	class basic_istringstream;
template<class _Elem,
	class _Traits = char_traits<_Elem>,
	class _Alloc = allocator<_Elem> >
	class basic_ostringstream;
template<class _Elem,
	class _Traits = char_traits<_Elem>,
	class _Alloc = allocator<_Elem> >
	class basic_stringstream;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class basic_filebuf;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class basic_ifstream;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class basic_ofstream;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class basic_fstream;

 








#line 673 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\iosfwd"

		
typedef basic_ios<char, char_traits<char> > ios;
typedef basic_streambuf<char, char_traits<char> > streambuf;
typedef basic_istream<char, char_traits<char> > istream;
typedef basic_ostream<char, char_traits<char> > ostream;
typedef basic_iostream<char, char_traits<char> > iostream;
typedef basic_stringbuf<char, char_traits<char>,
	allocator<char> > stringbuf;
typedef basic_istringstream<char, char_traits<char>,
	allocator<char> > istringstream;
typedef basic_ostringstream<char, char_traits<char>,
	allocator<char> > ostringstream;
typedef basic_stringstream<char, char_traits<char>,
	allocator<char> > stringstream;
typedef basic_filebuf<char, char_traits<char> > filebuf;
typedef basic_ifstream<char, char_traits<char> > ifstream;
typedef basic_ofstream<char, char_traits<char> > ofstream;
typedef basic_fstream<char, char_traits<char> > fstream;

		
typedef basic_ios<wchar_t, char_traits<wchar_t> > wios;
typedef basic_streambuf<wchar_t, char_traits<wchar_t> >
	wstreambuf;
typedef basic_istream<wchar_t, char_traits<wchar_t> > wistream;
typedef basic_ostream<wchar_t, char_traits<wchar_t> > wostream;
typedef basic_iostream<wchar_t, char_traits<wchar_t> > wiostream;
typedef basic_stringbuf<wchar_t, char_traits<wchar_t>,
	allocator<wchar_t> > wstringbuf;
typedef basic_istringstream<wchar_t, char_traits<wchar_t>,
	allocator<wchar_t> > wistringstream;
typedef basic_ostringstream<wchar_t, char_traits<wchar_t>,
	allocator<wchar_t> > wostringstream;
typedef basic_stringstream<wchar_t, char_traits<wchar_t>,
	allocator<wchar_t> > wstringstream;
typedef basic_filebuf<wchar_t, char_traits<wchar_t> > wfilebuf;
typedef basic_ifstream<wchar_t, char_traits<wchar_t> > wifstream;
typedef basic_ofstream<wchar_t, char_traits<wchar_t> > wofstream;
typedef basic_fstream<wchar_t, char_traits<wchar_t> > wfstream;

 





















 










#line 747 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\iosfwd"
}

 
 #pragma warning(pop)
 #pragma pack(pop)
#line 753 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\iosfwd"
#line 754 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\iosfwd"





#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\utility"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\type_traits"

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 
 
 #pragma warning(disable: 4180 4296)

	

 		
  

  

  

  

  


  

  

  

  

  

  


  

  

  

  

  

  

  

  

  

  

  


		



namespace std {
	
template<class _Ty>
	struct _Ptr_traits
	{	
	};

template<class _Ty>
	struct _Ptr_traits<_Ty *>
	{	
	static const bool _Is_const = false;
	static const bool _Is_volatile = false;
	};

template<class _Ty>
	struct _Ptr_traits<const _Ty *>
	{	
	static const bool _Is_const = true;
	static const bool _Is_volatile = false;
	};

template<class _Ty>
	struct _Ptr_traits<volatile _Ty *>
	{	
	static const bool _Is_const = false;
	static const bool _Is_volatile = true;
	};

template<class _Ty>
	struct _Ptr_traits<const volatile _Ty *>
	{	
	static const bool _Is_const = true;
	static const bool _Is_volatile = true;
	};

template<class _Ty>
	struct _Is_funptr
		: false_type
	{	
	};

template<class _Ty>
	struct _Is_memfunptr
		: false_type
	{	
	};









template<class _Ret, class... _Types> struct _Is_funptr<_Ret (__cdecl *)(_Types...)> : true_type { }; template<class _Ret, class... _Types> struct _Is_funptr<_Ret (__stdcall *)(_Types...)> : true_type { }; template<class _Ret, class... _Types> struct _Is_funptr<_Ret (__fastcall *)(_Types...)> : true_type { };











template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) > : true_type { }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) > : true_type { }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) > : true_type { }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) > : true_type { }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) const> : true_type { }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const> : true_type { }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) const> : true_type { }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) const> : true_type { }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) volatile> : true_type { }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) volatile> : true_type { }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) volatile> : true_type { }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) volatile> : true_type { }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) const volatile> : true_type { }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const volatile> : true_type { }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) const volatile> : true_type { }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) const volatile> : true_type { };


template<class _Ret,
	class... _Types>
	struct _Is_funptr<_Ret (*)(_Types..., ...)>
		: true_type
	{	
	};










template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) > : true_type { }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const> : true_type { }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) volatile> : true_type { }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const volatile> : true_type { };


	
	
template<class _Ty>
	struct add_const
	{	
	typedef const _Ty type;
	};

	
template<class _Ty>
	struct add_volatile
	{	
	typedef volatile _Ty type;
	};

	
template<class _Ty>
	struct add_cv
	{	
	typedef const volatile _Ty type;
	};

	
template<class _Ty>
	struct add_reference
	{	
	typedef _Ty& type;
	};








template<> struct add_reference< void> { typedef  void type; }; template<> struct add_reference<const void> { typedef const void type; }; template<> struct add_reference<volatile void> { typedef volatile void type; }; template<> struct add_reference<const volatile void> { typedef const volatile void type; };


	
template<class _Ty>
	struct add_lvalue_reference
	{	
	typedef typename add_reference<_Ty>::type type;
	};

	

template<class _Ty>
	struct add_rvalue_reference
	{	
	typedef _Ty&& type;
	};








template<> struct add_rvalue_reference< void> { typedef  void type; }; template<> struct add_rvalue_reference<const void> { typedef const void type; }; template<> struct add_rvalue_reference<volatile void> { typedef volatile void type; }; template<> struct add_rvalue_reference<const volatile void> { typedef const volatile void type; };


	
template<class _Ty>
	typename add_rvalue_reference<_Ty>::type
		declval() throw ();

	
template<class _Ty>
	struct remove_extent
	{	
	typedef _Ty type;
	};

template<class _Ty, unsigned int _Ix>
	struct remove_extent<_Ty[_Ix]>
	{	
	typedef _Ty type;
	};

template<class _Ty>
	struct remove_extent<_Ty[]>
	{	
	typedef _Ty type;
	};

	
template<class _Ty>
	struct remove_all_extents
	{	
	typedef _Ty type;
	};

template<class _Ty, unsigned int _Ix>
	struct remove_all_extents<_Ty[_Ix]>
	{	
	typedef typename remove_all_extents<_Ty>::type type;
	};

template<class _Ty>
	struct remove_all_extents<_Ty[]>
	{	
	typedef typename remove_all_extents<_Ty>::type type;
	};

	
template<class _Ty>
	struct remove_pointer
	{	
	typedef _Ty type;
	};








template<class _Ty> struct remove_pointer<_Ty *> { typedef _Ty type; }; template<class _Ty> struct remove_pointer<_Ty *const> { typedef _Ty type; }; template<class _Ty> struct remove_pointer<_Ty *volatile> { typedef _Ty type; }; template<class _Ty> struct remove_pointer<_Ty *const volatile> { typedef _Ty type; };


	
template<class _Ty>
	struct add_pointer
	{	
	typedef typename remove_reference<_Ty>::type *type;
	};

	
	
template<class _Ty>
	struct _Is_void
		: false_type
	{	
	};

template<>
	struct _Is_void<void>
		: true_type
	{	
	};

template<class _Ty>
	struct is_void
		: _Is_void<typename remove_cv<_Ty>::type>
	{	
	};

	
template<class _Ty>
	struct is_array
		: false_type
	{	
	};

template<class _Ty, size_t _Nx>
	struct is_array<_Ty[_Nx]>
		: true_type
	{	
	};

template<class _Ty>
	struct is_array<_Ty[]>
		: true_type
	{	
	};

	
template<class _Ty>
	struct is_lvalue_reference
		: false_type
	{	
	};

template<class _Ty>
	struct is_lvalue_reference<_Ty&>
		: true_type
	{	
	};

	
template<class _Ty>
	struct is_rvalue_reference
		: false_type
	{	
	};

template<class _Ty>
	struct is_rvalue_reference<_Ty&&>
		: true_type
	{	
	};

	
template<class _Ty>
	struct is_reference
		: _Cat_base<is_lvalue_reference<_Ty>::value
		|| is_rvalue_reference<_Ty>::value>
	{	
	};


	
template<class _Ty>
	struct _Is_member_object_pointer
		: false_type
	{	
	};

template<class _Ty1, class _Ty2>
	struct _Is_member_object_pointer<_Ty1 _Ty2::*>
		: _Cat_base<!_Is_memfunptr<_Ty1 _Ty2::*>::value>
	{	
	};

template<class _Ty>
	struct is_member_object_pointer
		: _Is_member_object_pointer<typename remove_cv<_Ty>::type>
	{	
	};

	
template<class _Ty>
	struct is_member_function_pointer
		: _Cat_base<_Is_memfunptr<typename remove_cv<_Ty>::type>::value>
	{	
	};

	
template<class _Ty>
	struct _Is_pointer
		: false_type
	{	
	};

template<class _Ty>
	struct _Is_pointer<_Ty *>
		: _Cat_base<!is_member_object_pointer<_Ty *>::value
		&& !is_member_function_pointer<_Ty *>::value>
	{	
	};

template<class _Ty>
	struct is_pointer
		: _Is_pointer<typename remove_cv<_Ty>::type>
	{	
	};

	

template<class _Ty>
	struct _Is_nullptr_t
		: _Cat_base<is_same<typename remove_cv<_Ty>::type, nullptr_t>::value>
	{	
	};

	
template<class _Ty>
	struct is_union : _Cat_base<__is_union(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_class : _Cat_base<__is_class(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_function
		: _Cat_base<_Is_funptr<typename remove_cv<_Ty>::type *>::value>
	{	
	};

template<class _Ty>
	struct is_function<_Ty&>
		: false_type
	{	
	};

template<class _Ty>
	struct is_function<_Ty&&>
		: false_type
	{	
	};

	
template<class _Ty>
	struct is_arithmetic
		: _Cat_base<is_integral<_Ty>::value
		|| is_floating_point<_Ty>::value>
	{	
	};

	
template<class _Ty>
	struct is_fundamental
		: _Cat_base<is_arithmetic<_Ty>::value
		|| is_void<_Ty>::value
		|| _Is_nullptr_t<_Ty>::value>
	{	
	};

	
template<class _Ty>
	struct is_object
		: _Cat_base<!is_function<_Ty>::value
		&& !is_reference<_Ty>::value
		&& !is_void<_Ty>::value>
	{	
	};

	

template<class _From, class _To>
	struct is_convertible
		: _Cat_base<__is_convertible_to(_From, _To)>
	{	
	};

	
template<class _Ty>
	struct is_enum
		: _Cat_base<__is_enum(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_compound
		: _Cat_base<!is_fundamental<_Ty>::value>
	{	
	};

	
template<class _Ty>
	struct is_member_pointer
		: _Cat_base<is_member_object_pointer<_Ty>::value
		|| is_member_function_pointer<_Ty>::value>
	{	
	};

	
template<class _Ty>
	struct is_scalar
		: _Cat_base<is_arithmetic<_Ty>::value
		|| is_enum<_Ty>::value
		|| is_pointer<_Ty>::value
		|| is_member_pointer<_Ty>::value
		|| _Is_nullptr_t<_Ty>::value>
	{	
	};

	
template<class _Ty>
	struct is_const
		: _Cat_base<_Ptr_traits<_Ty *>::_Is_const
		&& !is_function<_Ty>::value>
	{	
	};

template<class _Ty, unsigned int _Nx>
	struct is_const<_Ty[_Nx]>
		: false_type
	{	
	};

template<class _Ty, unsigned int _Nx>
	struct is_const<const _Ty[_Nx]>
		: true_type
	{	
	};

template<class _Ty>
	struct is_const<_Ty&>
		: false_type
	{	
	};

template<class _Ty>
	struct is_const<_Ty&&>
		: false_type
	{	
	};

	
template<class _Ty>
	struct is_volatile
		: _Cat_base<_Ptr_traits<_Ty *>::_Is_volatile
		&& !is_function<_Ty>::value>
	{	
	};

template<class _Ty>
	struct is_volatile<_Ty&>
		: false_type
	{	
	};

template<class _Ty>
	struct is_volatile<_Ty&&>
		: false_type
	{	
	};

	
template<class _Ty>
	struct _Is_pod : _Cat_base<is_scalar<_Ty>::value || __has_trivial_constructor(_Ty) && __is_pod(_Ty)>
	{	
	};

template<class _Ty>
	struct is_pod
		: _Is_pod<typename remove_all_extents<_Ty>::type>
	{	
	};

	
template<class _Ty>
	struct is_empty : _Cat_base<__is_empty(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_polymorphic : _Cat_base<__is_polymorphic(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_abstract : _Cat_base<__is_abstract(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_standard_layout : _Cat_base<__is_standard_layout(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_literal_type : _Cat_base<__is_literal_type(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_trivial : _Cat_base<__is_trivial(_Ty)>
	{	
	};

	
template<class _Ty>
	struct has_virtual_destructor
		: _Cat_base<__has_virtual_destructor(_Ty)>
	{	
	};

		
	


template<class _Ty,
	class... _Args>
	struct is_constructible
		: _Cat_base<__is_constructible(_Ty, _Args...)>
	{	
	};


	

template<class _Ty>
	struct is_copy_constructible
		: is_constructible<
			_Ty,
			typename add_lvalue_reference<
				typename add_const<_Ty>::type
			>::type
		>::type
	{	
	};

	
template<class _Ty>
	struct has_copy_constructor
		: is_copy_constructible<_Ty>::type
	{	
	};

	
template<class _Ty>
	struct is_default_constructible
		: is_constructible<_Ty>::type
	{	
	};

	
template<class _Ty>
	struct has_default_constructor
		: is_default_constructible<_Ty>::type
	{	
	};

	
template<class _Ty>
	struct is_move_constructible
		: is_constructible<

			_Ty,

			typename add_rvalue_reference<_Ty>::type
		>::type
	{	
	};

	
template<class _Ty>
	struct has_move_constructor
		: is_move_constructible<_Ty>::type
	{	
	};

	

template<class _To,
	class _From>
	struct _Is_assignable
	{	
	template<class _Dest,
		class _Src>
		static auto _Fn(int)
			-> decltype((::std:: declval<_Dest>() = ::std:: declval<_Src>()),
				true_type());

	template<class _Dest,
		class _Src>
		static auto _Fn(_Wrap_int)
			-> false_type;

	typedef decltype(_Fn<_To, _From>(0)) type;
	};

template<class _To,
	class _From>
	struct is_assignable
		: _Is_assignable<_To, _From>::type

	{	
	};

	

template<class _Ty>
	struct is_copy_assignable
		: is_assignable<
			typename add_lvalue_reference<_Ty>::type,
			typename add_lvalue_reference<
				typename add_const<_Ty>::type
			>::type
		>::type
	{	
	};

	
template<class _Ty>
	struct has_copy_assign
		: is_copy_assignable<_Ty>::type
	{	
	};

	

template<class _Ty>
	struct is_move_assignable
		: is_assignable<
			typename add_lvalue_reference<_Ty>::type,
			typename add_rvalue_reference<_Ty>::type
		>::type
	{	
	};

template<class _Ty>
	struct has_move_assign
		: is_move_assignable<_Ty>::type
	{	
	};

	
template<class _Ty>
	struct _Is_destructible
		: _Cat_base<__is_destructible(_Ty)>
	{	
	};

template<>
	struct _Is_destructible<void>
		: false_type
	{	
	};

template<class _Ty>
	struct is_destructible
		: _Is_destructible<typename remove_cv<_Ty>::type>
	{	
	};

		
	


template<class _Ty,
	class... _Args>
	struct is_trivially_constructible
		: _Cat_base<__is_trivially_constructible(_Ty, _Args...)>
	{	
	};


	
template<class _Ty>
	struct is_trivially_copy_constructible

		: is_trivially_constructible<
			_Ty,
			typename add_lvalue_reference<
				typename add_const<_Ty>::type
			>::type
		>::type

	{	
	};

	
template<class _Ty>
	struct is_trivially_copyable
		: is_trivially_copy_constructible<_Ty>::type
	{	
	};

	
template<class _Ty>
	struct has_trivial_copy_constructor
		: is_trivially_copy_constructible<_Ty>::type
	{	
	};

	
template<class _Ty>
	struct is_trivially_default_constructible
		: is_trivially_constructible<_Ty>::type
	{	
	};

	
template<class _Ty>
	struct has_trivial_default_constructor
		: is_trivially_default_constructible<_Ty>::type
	{	
	};

	
template<class _Ty>
	struct is_trivially_move_constructible

		: is_trivially_constructible<
			_Ty,
			typename add_rvalue_reference<_Ty>::type
		>::type

	{	
	};

	
template<class _Ty>
	struct has_trivial_move_constructor
		: is_trivially_move_constructible<_Ty>::type
	{	
	};

	
template<class _To,
	class _From>
	struct is_trivially_assignable

		: _Cat_base<__is_trivially_assignable(_To, _From)>

	{	
	};

	
template<class _Ty>
	struct is_trivially_copy_assignable

		: is_trivially_assignable<
			typename add_lvalue_reference<_Ty>::type,
			typename add_lvalue_reference<
				typename add_const<_Ty>::type
			>::type
		>::type

	{	
	};

	
template<class _Ty>
	struct has_trivial_copy_assign
		: is_trivially_copy_assignable<_Ty>::type
	{	
	};

	
template<class _Ty>
	struct is_trivially_move_assignable

		: is_trivially_assignable<
			typename add_lvalue_reference<_Ty>::type,
			typename add_rvalue_reference<_Ty>::type
		>::type

	{	
	};

	
template<class _Ty>
	struct has_trivial_move_assign
		: is_trivially_move_assignable<_Ty>::type
	{	
	};

	
template<class _Ty>
	struct is_trivially_destructible
		: _Cat_base<is_pod<typename remove_reference<_Ty>::type>::value || __has_trivial_destructor(typename remove_reference<_Ty>::type)>
	{	
	};

		
	


template<class _Ty,
	class... _Args>
	struct is_nothrow_constructible
		: _Cat_base<__is_nothrow_constructible(_Ty, _Args...)>
	{	
	};


	

template<class _Ty>
	struct is_nothrow_copy_constructible
		: is_nothrow_constructible<
			_Ty,
			typename add_lvalue_reference<
				typename add_const<_Ty>::type
			>::type
		>::type
	{	
	};

	
template<class _Ty>
	struct has_nothrow_copy_constructor

		: is_nothrow_copy_constructible<_Ty>::type

	{	
	};

	
template<class _Ty>
	struct is_nothrow_default_constructible
		: is_nothrow_constructible<_Ty>::type
	{	
	};

	
template<class _Ty>
	struct has_nothrow_default_constructor
		: is_nothrow_default_constructible<_Ty>::type
	{	
	};

	

template<class _Ty>
	struct is_nothrow_move_constructible
		: is_nothrow_constructible<
			_Ty,
			typename add_rvalue_reference<_Ty>::type
		>::type
	{	
	};

	
template<class _Ty>
	struct has_nothrow_move_constructor
		: is_nothrow_move_constructible<_Ty>::type
	{	
	};

	
template<class _To,
	class _From>
	struct is_nothrow_assignable

		: _Cat_base<__is_nothrow_assignable(_To, _From)>

	{	
	};

	
template<class _Ty>
	struct is_nothrow_copy_assignable

		: is_nothrow_assignable<
			typename add_lvalue_reference<_Ty>::type,
			typename add_lvalue_reference<
				typename add_const<_Ty>::type
			>::type
		>::type

	{	
	};

	
template<class _Ty>
	struct has_nothrow_copy_assign
		: is_nothrow_copy_assignable<_Ty>::type
	{	
	};

	
template<class _Ty>
	struct is_nothrow_move_assignable

		: is_nothrow_assignable<
			typename add_lvalue_reference<_Ty>::type,
			typename add_rvalue_reference<_Ty>::type
		>::type

	{	
	};

	
template<class _Ty>
	struct has_nothrow_move_assign
		: is_nothrow_move_assignable<_Ty>::type
	{	
	};

	
template<class _Ty>
	struct _Is_nothrow_destructible

		: _Cat_base<__is_nothrow_destructible(_Ty)>

	{	
	};

template<>
	struct _Is_nothrow_destructible<void>
		: false_type
	{	
	};

template<class _Ty>
	struct is_nothrow_destructible
		: _Is_nothrow_destructible<typename remove_cv<_Ty>::type>
	{	
	};

	
template<class _Ty>
	struct has_trivial_constructor

		: is_trivially_default_constructible<_Ty>::type

	{	
	};

	
template<class _Ty>
	struct has_trivial_copy

		: is_trivially_copy_constructible<_Ty>::type

	{	
	};

	
template<class _Ty>
	struct has_trivial_assign

		: is_trivially_copy_assignable<_Ty>::type

	{	
	};

	
template<class _Ty>
	struct has_trivial_destructor

		: is_trivially_destructible<_Ty>::type

	{	
	};

	
template<class _Ty>
	struct has_nothrow_constructor

		: is_nothrow_default_constructible<_Ty>::type

	{	
	};

	
template<class _Ty>
	struct has_nothrow_copy

		: is_nothrow_copy_constructible<_Ty>::type

	{	
	};

	
template<class _Ty>
	struct has_nothrow_assign

		: is_nothrow_copy_assignable<_Ty>::type

	{	
	};

	
template<class _Ty>
	struct _Has_signed_vals
		: _Cat_base<(typename remove_cv<_Ty>::type)(-1)
		< (typename remove_cv<_Ty>::type)(0)>
	{	
	};

template<class _Ty>
	struct is_signed
		: _Cat_base<is_floating_point<_Ty>::value || (is_integral<_Ty>::value
		&& _Has_signed_vals<
			typename _If<is_integral<_Ty>::value, _Ty, int>::type>::value)>
	{	
	};

	
template<class _Ty>
	struct is_unsigned
		: _Cat_base<is_integral<_Ty>::value
		&& !_Has_signed_vals<
			typename _If<is_integral<_Ty>::value, _Ty, int>::type>::value>
	{	
	};

	
template<class _Ty>
	struct _Change_sign
	{	
	static_assert(
		((is_integral<_Ty>::value || is_enum<_Ty>::value)
			&& !is_same<_Ty, bool>::value),
		"make_signed<T>/make_unsigned<T> require that T shall be a (possibly "
		"cv-qualified) integral type or enumeration but not a bool type.");

	typedef
		typename _If<is_same<_Ty, signed char>::value
			|| is_same<_Ty, unsigned char     >::value, signed char,
		typename _If<is_same<_Ty, short       >::value
			|| is_same<_Ty, unsigned short    >::value, short,
		typename _If<is_same<_Ty, int         >::value
			|| is_same<_Ty, unsigned int      >::value, int,
		typename _If<is_same<_Ty, long        >::value
			|| is_same<_Ty, unsigned long     >::value, long,
		typename _If<is_same<_Ty, long long   >::value
			|| is_same<_Ty, unsigned long long>::value, long long,
		typename _If<sizeof (_Ty) == sizeof (signed char), signed char,
		typename _If<sizeof (_Ty) == sizeof (short      ), short,
		typename _If<sizeof (_Ty) == sizeof (int        ), int,
		typename _If<sizeof (_Ty) == sizeof (long       ), long,
			long long
		>::type>::type>::type>::type>::type>::type>::type>::type>::type
			_Signed;

	typedef
		typename _If<is_same<_Signed, signed char>::value, unsigned char,
		typename _If<is_same<_Signed, short      >::value, unsigned short,
		typename _If<is_same<_Signed, int        >::value, unsigned int,
		typename _If<is_same<_Signed, long       >::value, unsigned long,
			unsigned long long
		>::type>::type>::type>::type
			_Unsigned;
	};

template<class _Ty>
	struct _Change_sign<const _Ty>
	{	
	typedef const typename _Change_sign<_Ty>::_Signed _Signed;
	typedef const typename _Change_sign<_Ty>::_Unsigned _Unsigned;
	};

template<class _Ty>
	struct _Change_sign<volatile _Ty>
	{	
	typedef volatile typename _Change_sign<_Ty>::_Signed _Signed;
	typedef volatile typename _Change_sign<_Ty>::_Unsigned _Unsigned;
	};

template<class _Ty>
	struct _Change_sign<const volatile _Ty>
	{	
	typedef const volatile typename _Change_sign<_Ty>::_Signed _Signed;
	typedef const volatile typename _Change_sign<_Ty>::_Unsigned _Unsigned;
	};

	
template<class _Ty>
	struct make_signed
	{	
	typedef typename _Change_sign<_Ty>::_Signed type;
	};

	
template<class _Ty>
	struct make_unsigned
	{	
	typedef typename _Change_sign<_Ty>::_Unsigned type;
	};

	
 
template<class _Ty>
	struct _Get_align
	{	
	_Ty _Elt0;
	char _Elt1;
	_Ty _Elt2;

	_Get_align();	
	};


 #line 1213 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\type_traits"

template<class _Ty>
	struct alignment_of
		: integral_constant<size_t, (sizeof (_Get_align<typename remove_reference<_Ty>::type>) - 2 * sizeof (typename remove_reference<_Ty>::type))>
	{	
	};

	




template<class _Ty,
	size_t _Len>
	union _Align_type
	{	
	_Ty _Val;
	char _Pad[_Len];
	};

template<size_t _Len,
	size_t _Align,
	class _Ty,
	bool _Ok>
	struct _Aligned;

template<size_t _Len,
	size_t _Align,
	class _Ty>
	struct _Aligned<_Len, _Align, _Ty, true>
	{	
	typedef _Align_type<_Ty, _Len> type;
	};

template<size_t _Len,
	size_t _Align>
	struct _Aligned<_Len, _Align, double, false>
	{	
	typedef _Align_type<max_align_t, _Len> type;
	};

template<size_t _Len,
	size_t _Align>
	struct _Aligned<_Len, _Align, int, false>
	{	
	typedef typename _Aligned<_Len, _Align, double, _Align <= alignment_of<double>::value>::type type;
	};

template<size_t _Len,
	size_t _Align>
	struct _Aligned<_Len, _Align, short, false>
	{	
	typedef typename _Aligned<_Len, _Align, int, _Align <= alignment_of<int>::value>::type type;
	};

template<size_t _Len,
	size_t _Align>
	struct _Aligned<_Len, _Align, char, false>
	{	
	typedef typename _Aligned<_Len, _Align, short, _Align <= alignment_of<short>::value>::type type;
	};

template<size_t _Len,
	size_t _Align = alignment_of<max_align_t>::value>
	struct aligned_storage
	{	
	typedef typename _Aligned<_Len, _Align, char, _Align <= alignment_of<char>::value>::type type;
	};




	
template<size_t... _Vals>
	struct _Maximum;

template<>
	struct _Maximum<>
	{	
	static const size_t value = 0;
	};

template<size_t _Val>
	struct _Maximum<_Val>
	{	
	static const size_t value = _Val;
	};

template<size_t _First,
	size_t _Second,
	size_t... _Rest>
	struct _Maximum<_First, _Second, _Rest...>
		: _Maximum<(_First < _Second ? _Second : _First), _Rest...>
	{	
	};

template<size_t _Len,
	class... _Types>
	struct aligned_union
	{	
	static const size_t _Max_len = _Maximum<
		_Len, sizeof(_Types)...>::value;	
	static const size_t alignment_value = _Maximum<
		alignment_of<_Types>::value...>::value;
	typedef typename aligned_storage<_Max_len, alignment_value>::type type;
	};

	
template<class _Ty>
	struct underlying_type
	{	
	typedef __underlying_type(_Ty) type;
	};

	
template<class _Ty>
	struct rank
		: integral_constant<size_t, 0>
	{	
	};

template<class _Ty, unsigned int _Ix>
	struct rank<_Ty[_Ix]>
		: integral_constant<size_t, rank<_Ty>::value + 1>
	{	
	};

template<class _Ty>
	struct rank<_Ty[]>
		: integral_constant<size_t, rank<_Ty>::value + 1>
	{	
	};

	
template<class _Ty, unsigned int _Nx>
	struct _Extent
		: integral_constant<size_t, 0>
	{	
	};

template<class _Ty, unsigned int _Ix>
	struct _Extent<_Ty[_Ix], 0>
		: integral_constant<size_t, _Ix>
	{	
	};

template<class _Ty, unsigned int _Nx, unsigned int _Ix>
	struct _Extent<_Ty[_Ix], _Nx>
		: _Extent<_Ty, _Nx - 1>
	{	
	};

template<class _Ty, unsigned int _Nx>
	struct _Extent<_Ty[], _Nx>
		: _Extent<_Ty, _Nx - 1>
	{	
	};

template<class _Ty, unsigned int _Nx = 0>
	struct extent
		: _Extent<_Ty, _Nx>
	{	
	};

	
template<class _Base, class _Der>
	struct is_base_of : _Cat_base<__is_base_of(_Base, _Der)>
	{	
	};

	
template<class _Ty>
	struct decay
	{	
	typedef typename remove_reference<_Ty>::type _Ty1;

	typedef typename _If<is_array<_Ty1>::value,
		typename remove_extent<_Ty1>::type *,
		typename _If<is_function<_Ty1>::value,
			typename add_pointer<_Ty1>::type,
			typename remove_cv<_Ty1>::type>::type>::type type;
	};

namespace tr1 {	
using ::std:: add_const;
using ::std:: add_cv;
using ::std:: add_pointer;
using ::std:: add_reference;	
using ::std:: add_volatile;
using ::std:: aligned_storage;
using ::std:: alignment_of;
using ::std:: conditional;
using ::std:: decay;
using ::std:: enable_if;
using ::std:: extent;
using ::std:: false_type;
using ::std:: has_nothrow_assign;	
using ::std:: has_nothrow_constructor;	
using ::std:: has_nothrow_copy;	
using ::std:: has_trivial_assign;
using ::std:: has_trivial_constructor;	
using ::std:: has_trivial_copy;	
using ::std:: has_trivial_destructor;	
using ::std:: has_virtual_destructor;
using ::std:: integral_constant;
using ::std:: is_abstract;
using ::std:: is_arithmetic;
using ::std:: is_array;
using ::std:: is_base_of;
using ::std:: is_class;
using ::std:: is_compound;
using ::std:: is_const;
using ::std:: is_convertible;
using ::std:: is_empty;
using ::std:: is_enum;
using ::std:: is_floating_point;
using ::std:: is_function;
using ::std:: is_fundamental;
using ::std:: is_integral;
using ::std:: is_member_function_pointer;
using ::std:: is_member_object_pointer;
using ::std:: is_member_pointer;
using ::std:: is_object;
using ::std:: is_pod;
using ::std:: is_pointer;
using ::std:: is_polymorphic;
using ::std:: is_reference;
using ::std:: is_same;
using ::std:: is_scalar;
using ::std:: is_signed;
using ::std:: is_union;
using ::std:: is_unsigned;
using ::std:: is_void;
using ::std:: is_volatile;
using ::std:: make_signed;
using ::std:: make_unsigned;
using ::std:: rank;
using ::std:: remove_all_extents;
using ::std:: remove_const;
using ::std:: remove_cv;
using ::std:: remove_extent;
using ::std:: remove_pointer;
using ::std:: remove_reference;
using ::std:: remove_volatile;
using ::std:: true_type;
	}	

		
template<class... _Ty>
	struct common_type;

template<class _Ty>
	struct common_type<_Ty>
	{	
	typedef typename decay<_Ty>::type type;
	};

template<class _Ty0,
	class _Ty1>
	struct common_type<_Ty0, _Ty1>
	{	
	typedef typename decay<
		decltype(_Always_false<_Ty0>::value
			? ::std:: declval<_Ty0>()
			: ::std:: declval<_Ty1>())
	>::type type;
	};

template<class _Ty0,
	class _Ty1,
	class... _Ty>
	struct common_type<_Ty0, _Ty1, _Ty...>
	{	
	typedef typename common_type<
		typename common_type<_Ty0, _Ty1>::type, _Ty...
	>::type type;
	};

	
template<size_t... _Indexes>
	struct _Arg_idx
	{	
	};

	
template<class _Ty>
	class reference_wrapper;

template<class _Ty>
	struct _Unrefwrap_helper
	{	
	typedef _Ty type;
	};

template<class _Ty>
	struct _Unrefwrap_helper<reference_wrapper<_Ty> >
	{	
	typedef _Ty& type;
	};

template<class _Ty>
	struct _Unrefwrap
	{	
	typedef typename decay<_Ty>::type _Ty1;
	typedef typename _Unrefwrap_helper<_Ty1>::type type;
	};

	
template<class _Ty>
	struct identity
	{	
	typedef _Ty type;

	const _Ty& operator()(const _Ty& _Left) const
		{	
		return (_Left);
		}
	};

	
template<class _Ty> inline
	_Ty&& forward(typename remove_reference<_Ty>::type& _Arg)
	{	
	return (static_cast<_Ty&&>(_Arg));
	}

template<class _Ty> inline
	_Ty&& forward(typename remove_reference<_Ty>::type&& _Arg) throw ()
	{	
	static_assert(!is_lvalue_reference<_Ty>::value, "bad forward call");
	return (static_cast<_Ty&&>(_Arg));
	}

		
template<class _Ty> inline
	typename remove_reference<_Ty>::type&&
		move(_Ty&& _Arg) throw ()
	{	
	return ((typename remove_reference<_Ty>::type&&)_Arg);
	}

		
template<class _Ty> inline
	typename remove_reference<_Ty>::type&&
		_Move(_Ty&& _Arg) throw ()
	{	
	return ((typename remove_reference<_Ty>::type&&)_Arg);
	}

		
template<class _Ty> inline
	typename _If<!has_nothrow_move_constructor<_Ty>::value
		&& has_copy_constructor<_Ty>::value,
			const _Ty&, _Ty&&>::type
	move_if_noexcept(_Ty& _Arg) throw ()
	{	
	return (::std:: move(_Arg));
	}

	
template<class _Ty> inline
	typename decay<_Ty>::type _Decay_copy(_Ty&& _Arg)
	{	
	return (::std:: forward<_Ty>(_Arg));
	}
}

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xrefwrap"

#pragma once






 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 #pragma warning(disable: 4180)

namespace std {
template<class _Ty>
	class reference_wrapper;

	
template<class _Ret,
	class... _Types>
	struct _Fun_class_base
	{	
	};

template<class _Ret,
	class _Farg0>
	struct _Fun_class_base<_Ret, _Farg0>
		: public unary_function<_Farg0, _Ret>
	{	
	};

template<class _Ret,
	class _Farg0,
	class _Farg1>
	struct _Fun_class_base<_Ret, _Farg0, _Farg1>
		: public binary_function<_Farg0, _Farg1, _Ret>
	{	
	};

template<class _Ret,
	class _Farg0,
	class _Farg1,
	class... _Types>
	struct _Fun_class_base<_Ret, _Farg0, _Farg1, _Types...>
	{	
	};




template<class _Fty,
	class... _Args>
	struct _Result_of
	{	
	typedef decltype(
		::std:: declval<_Fty>()(::std:: declval<_Args>()...)) type;
	};














template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__thiscall _Ty::* )(_Mfargs...) , _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__cdecl _Ty::* )(_Mfargs...) , _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__stdcall _Ty::* )(_Mfargs...) , _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__fastcall _Ty::* )(_Mfargs...) , _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__thiscall _Ty::* )(_Mfargs...) const, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__cdecl _Ty::* )(_Mfargs...) const, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__stdcall _Ty::* )(_Mfargs...) const, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__fastcall _Ty::* )(_Mfargs...) const, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__thiscall _Ty::* )(_Mfargs...) volatile, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__cdecl _Ty::* )(_Mfargs...) volatile, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__stdcall _Ty::* )(_Mfargs...) volatile, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__fastcall _Ty::* )(_Mfargs...) volatile, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__thiscall _Ty::* )(_Mfargs...) const volatile, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__cdecl _Ty::* )(_Mfargs...) const volatile, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__stdcall _Ty::* )(_Mfargs...) const volatile, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__fastcall _Ty::* )(_Mfargs...) const volatile, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__thiscall _Ty::* const)(_Mfargs...) , _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__cdecl _Ty::* const)(_Mfargs...) , _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__stdcall _Ty::* const)(_Mfargs...) , _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__fastcall _Ty::* const)(_Mfargs...) , _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__thiscall _Ty::* const)(_Mfargs...) const, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__cdecl _Ty::* const)(_Mfargs...) const, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__stdcall _Ty::* const)(_Mfargs...) const, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__fastcall _Ty::* const)(_Mfargs...) const, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__thiscall _Ty::* const)(_Mfargs...) volatile, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__cdecl _Ty::* const)(_Mfargs...) volatile, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__stdcall _Ty::* const)(_Mfargs...) volatile, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__fastcall _Ty::* const)(_Mfargs...) volatile, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__thiscall _Ty::* const)(_Mfargs...) const volatile, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__cdecl _Ty::* const)(_Mfargs...) const volatile, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__stdcall _Ty::* const)(_Mfargs...) const volatile, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__fastcall _Ty::* const)(_Mfargs...) const volatile, _Obj, _Args...> { typedef _Ret type; };


template<class _Ret,
	class _Ty,
	class _Obj,
	class... _Args>
	struct _Result_of<_Ret _Ty::*, _Obj, _Args...>
	{	
		
	typedef typename _Copy_cv<_Ret,
		typename remove_pointer<
			typename remove_reference<_Obj>::type>::type>::type type;
	};

template<class _Ret,
	class _Ty,
	class _Obj,
	class... _Args>
	struct _Result_of<_Ret _Ty::*const, _Obj, _Args...>
	{	
		
	typedef typename _Copy_cv<_Ret,
		typename remove_pointer<
			typename remove_reference<_Obj>::type>::type>::type const type;
	};

template<class _Fty>
	struct result_of;	















template<class _Fty, class... _Args> struct result_of<_Fty __cdecl (_Args...)> { typedef typename _Result_of<_Fty, _Args...>::type type; }; template<class _Fty, class... _Args> struct result_of<reference_wrapper<_Fty> __cdecl (_Args...)> { typedef typename _Result_of<_Fty, _Args...>::type type; }; template<class _Fty, class... _Args> struct result_of<_Fty __stdcall (_Args...)> { typedef typename _Result_of<_Fty, _Args...>::type type; }; template<class _Fty, class... _Args> struct result_of<reference_wrapper<_Fty> __stdcall (_Args...)> { typedef typename _Result_of<_Fty, _Args...>::type type; }; template<class _Fty, class... _Args> struct result_of<_Fty __fastcall (_Args...)> { typedef typename _Result_of<_Fty, _Args...>::type type; }; template<class _Fty, class... _Args> struct result_of<reference_wrapper<_Fty> __fastcall (_Args...)> { typedef typename _Result_of<_Fty, _Args...>::type type; };





	
template<class _Ret,
	class _Arg0>
	struct _Pmd_caller
	{	
	template<class _Pmd,
		class _Farg0>
		static _Ret& _Call_pmd(_Pmd _Pm, _Farg0&& _Fx0, true_type)
		{	
		return ((_Ret&)(_Fx0.*_Pm));
		}

	template<class _Pmd,
		class _Farg0>
		static _Ret& _Call_pmd(_Pmd _Pm, _Farg0&& _Fx0, false_type)
		{	
		return ((_Ret&)((*_Fx0).*_Pm));
		}

	template<class _Pmd,
		class _Farg0>
		static _Ret& _Apply_pmd(_Pmd _Pm, _Farg0&& _Fx0)
		{	
		typedef typename remove_cv<
			typename remove_reference<_Arg0>::type>::type _Arg0_bare;
		typedef typename remove_cv<
			typename remove_reference<_Farg0>::type>::type _Farg0_bare;
		typedef _Cat_base<is_same<_Arg0_bare, _Farg0_bare>::value
			|| (is_base_of<_Arg0_bare, _Farg0_bare>::value
				&& is_same<typename add_reference<_Farg0_bare>::type,
					_Farg0>::value)> _Is_obj;

		return (_Call_pmd<_Pmd, _Farg0>(_Pm,
			::std:: forward<_Farg0>(_Fx0), _Is_obj()));
		}
	};

	
template<class _Ty,
	bool _Indirect>
	struct _Callable_base;

template<class _Ty>
	struct _Callable_base<_Ty, false>
	{	
	enum {_EEN_INDIRECT = 0};	
	typedef _Ty _MyTy;
	typedef const _Ty& _MyCnstTy;

	_Callable_base(const _Ty& _Val)
		: _Object(_Val)
		{	
		}

	const _Ty& _Get() const
		{	
		return (_Object);
		}

	_Ty& _Get()
		{	
		return (_Object);
		}

private:
	_Callable_base& operator=(const _Callable_base&);

	_Ty _Object;
};

template<class _Ty>
	struct _Callable_base<_Ty, true>
	{	
		
	enum {_EEN_INDIRECT = 1};	
	typedef _Ty _MyTy;
	typedef _Ty& _MyCnstTy;

	_Callable_base(_Ty& _Val)
		: _Ptr(::std:: addressof(_Val))
		{	
		}

	_MyCnstTy _Get() const
		{	
		return (*_Ptr);
		}

	_Ty& _Get()
		{	
		return (*_Ptr);
		}

	void _Reset(_Ty& _Val)
		{	
		_Ptr = ::std:: addressof(_Val);
		}

private:
	_Ty *_Ptr;
};

	
template<class _Ty,
	class _Memty,
	bool _Indirect = false>
	struct _Callable_pmd
		: _Callable_base<_Ty, _Indirect>
	{	
	_Callable_pmd(const _Callable_pmd& _Right)
		: _Callable_base<_Ty, _Indirect>(_Right._Get())
		{	
		}

	_Callable_pmd(_Ty& _Val)
		: _Callable_base<_Ty, _Indirect>(_Val)
		{	
		}

	template<class _Ret,
		class _Arg0>
		_Ret& _ApplyX(_Arg0&& _A0) const
		{	
		return (_Pmd_caller<_Ret, _Memty>::
			_Apply_pmd(this->_Get(), ::std:: forward<_Arg0>(_A0)));
		}
	};

	
template<class _Ty,
	bool _Indirect = false>
	struct _Callable_obj
		: _Callable_base<_Ty, _Indirect>
	{	
	typedef _Callable_base<_Ty, _Indirect> _Mybase;

	template<class _Ty2>
		_Callable_obj(_Ty2&& _Val)
		: _Mybase(::std:: forward<_Ty2>(_Val))
		{	
		}

	template<class _Ret,
		class... _Types>
		_Ret _ApplyX(_Types&&... _Args) const
		{ 
		return (this->_Get()(::std:: forward<_Types>(_Args)...));
		}

	template<class _Ret,
		class... _Types>
		_Ret _ApplyX(_Types&&... _Args)
		{ 
		return (this->_Get()(::std:: forward<_Types>(_Args)...));
		}

	};

	

template<class _Ret,
	class _Arg0>
	struct _Pmf_caller
	{	
	template<class _Pmf,
		class _Farg0,
		class... _Ftypes>
		static _Ret _Call_pmf(_Pmf _Pm, _Farg0&& _Fx0, true_type,
			_Ftypes&&... _Fargs)
		{	
		typedef typename _Copy_cv<_Arg0, _Farg0>::type
			_Funobj_cv;
		return (((_Funobj_cv)_Fx0.*_Pm)(::std:: forward<_Ftypes>(_Fargs)...));
		}

	template<class _Pmf,
		class _Farg0,
		class... _Ftypes>
		static _Ret _Call_pmf(_Pmf _Pm, _Farg0&& _Fx0, false_type,
			_Ftypes&&... _Fargs)
		{	
		return (((*_Fx0).*_Pm)(::std:: forward<_Ftypes>(_Fargs)...));
		}

	template<class _Pmf,
		class _Farg0,
		class... _Ftypes>
		static _Ret _Apply_pmf(_Pmf _Pm, _Farg0&& _Fx0,
			_Ftypes&&... _Fargs)
		{	
		typedef typename remove_reference<_Arg0>::type _Arg0_bare0;
		typedef typename remove_cv<_Arg0_bare0>::type _Arg0_bare;
		typedef typename remove_reference<_Farg0>::type _Farg0_bare;
		typedef _Cat_base<is_same<_Arg0_bare, _Farg0_bare>::value
			|| (is_base_of<_Arg0_bare, _Farg0_bare>::value
				&& is_same<typename add_reference<_Farg0_bare>::type,
					_Farg0>::value)> _Is_obj;

		return (_Call_pmf<_Pmf, _Farg0&&, _Ftypes&&...>(_Pm,
			::std:: forward<_Farg0>(_Fx0), _Is_obj(),
				::std:: forward<_Ftypes>(_Fargs)...));
		}
	};


	
template<class _Ty,
	class _Memty,
	bool _Indirect = false>
	struct _Callable_pmf
		: _Callable_base<_Ty, _Indirect>
	{	
	_Callable_pmf(const _Callable_pmf& _Right)
		: _Callable_base<_Ty, _Indirect>(_Right._Get())
		{	
		}

	_Callable_pmf(_Ty& _Val)
		: _Callable_base<_Ty, _Indirect>(_Val)
		{	
		}

	template<class _Ret,
		class... _Types>
		_Ret _ApplyX(_Types&&... _Args) const
		{ 
		return (_Pmf_caller<_Ret, _Memty>::
			_Apply_pmf(this->_Get(), ::std:: forward<_Types>(_Args)...));
		}

	};

	
template<class _Ty,
	bool _Indirect = false>
	struct _Callable_fun
		: _Callable_base<_Ty, _Indirect>
	{	
	_Callable_fun(const _Callable_fun& _Right)
		: _Callable_base<_Ty, _Indirect>(_Right._Get())
		{	
		}

	_Callable_fun(_Ty& _Val)
		: _Callable_base<_Ty, _Indirect>(_Val)
		{	
		}

	template<class _Ret,
		class... _Types>
		_Ret _ApplyX(_Types&&... _Args) const
		{ 
		return (this->_Get()(::std:: forward<_Types>(_Args)...));
		}

	};

	
template<class _Callable>
	struct _Call_wrapper_base
	{	
	typedef typename _Callable::_MyTy _MyTy;
	typedef typename _Callable::_MyCnstTy _MyCnstTy;

	_Call_wrapper_base(_MyTy& _Val)
		: _Callee(_Val)
		{	
		}

	void _Reset(_MyTy& _Val)
		{	
		_Callee._Reset(_Val);
		}

	_MyCnstTy _Get() const
		{	
		return (_Callee._Get());
		}

	_MyCnstTy _Get()
		{	
		return (_Callee._Get());
		}

	_Callable _Callee;
	};

	
template<class _Callable,
	bool _Is_abstract = false>
	struct _Call_wrapper
	: _Call_wrapper_base<_Callable>
	{	
	typedef _Call_wrapper_base<_Callable> _Mybase;

	_Call_wrapper(typename _Call_wrapper_base<_Callable>::_MyTy& _Val)
		: _Call_wrapper_base<_Callable>(_Val)
		{	
		}

	template<class... _Types>
		typename result_of<
			typename _Callable::_MyTy(_Types...)>::type
			operator()(_Types&&... _Args) const
		{ 
		typedef typename result_of<
			typename _Callable::_MyTy(_Types...)>::type _Ret;
		return (this->_Callee.template _ApplyX<_Ret>(
			::std:: forward<_Types>(_Args)...));
		}

	};

template<class _Callable>
	struct _Call_wrapper<_Callable, true>
	: _Call_wrapper_base<_Callable>
	{	
	typedef _Call_wrapper_base<_Callable> _Mybase;

	_Call_wrapper(typename _Call_wrapper_base<_Callable>::_MyTy& _Val)
		: _Call_wrapper_base<_Callable>(_Val)
		{	
		}
	};

		
template<class _Ty>
	struct _Has_result_and_arg_type
		{ template<class _Uty> static auto _Fn(int, _Identity<typename _Uty::argument_type> * = 0, _Identity<typename _Uty::result_type> * = 0, _Identity<typename _Uty::result_type> * = 0) -> true_type; template<class _Uty> static auto _Fn(_Wrap_int) -> false_type; typedef decltype(_Fn<_Ty>(0)) type; };

		
template<class _Ty>
	struct _Has_result_and_2arg_type
		{ template<class _Uty> static auto _Fn(int, _Identity<typename _Uty::first_argument_type> * = 0, _Identity<typename _Uty::second_argument_type> * = 0, _Identity<typename _Uty::result_type> * = 0) -> true_type; template<class _Uty> static auto _Fn(_Wrap_int) -> false_type; typedef decltype(_Fn<_Ty>(0)) type; };

	
template<class _Ty,
	bool>
	struct _Refwrap_result0
	{	
	typedef typename _Ty::result_type result_type;
	};

template<class _Ty>
	struct _Refwrap_result0<_Ty, false>
	{	
	};


template<class _Ty,
	bool>
	struct _Refwrap_result1_helper
		: _Refwrap_result0<_Ty, _Has_result_type<_Ty>::type::value>
	{	
	};

template<class _Ty>
	struct _Refwrap_result1_helper<_Ty, true>
		: unary_function<typename _Ty::argument_type,
			typename _Ty::result_type>
	{	
	};

	
template<class _Ty,
	bool>
	struct _Refwrap_result1
		: _Refwrap_result0<_Ty, _Has_result_type<_Ty>::type::value>
	{	
	};

template<class _Ty>
	struct _Refwrap_result1<_Ty, true>
		: _Refwrap_result1_helper<_Ty,
			is_base_of<unary_function<
				typename _Ty::argument_type,
				typename _Ty::result_type>, _Ty>::value>
	{	
	};

	
template<class _Ty,
	bool>
	struct _Refwrap_result2_helper
		: _Refwrap_result1<_Ty, _Has_result_and_arg_type<_Ty>::type::value>
	{	
	};

template<class _Ty>
	struct _Refwrap_result2_helper<_Ty, true>
		: binary_function<typename _Ty::first_argument_type,
			typename _Ty::second_argument_type,
			typename _Ty::result_type>,
		_Refwrap_result1<_Ty, _Has_result_and_arg_type<_Ty>::type::value>
	{	
	};

	
template<class _Ty,
	bool>
	struct _Refwrap_result2
		: _Refwrap_result1<_Ty, _Has_result_and_arg_type<_Ty>::type::value>
	{	
	};

template<class _Ty>
	struct _Refwrap_result2<_Ty, true>
		: _Refwrap_result2_helper<_Ty,
			is_base_of<binary_function<
				typename _Ty::first_argument_type,
				typename _Ty::second_argument_type,
				typename _Ty::result_type>, _Ty>::value>
	{	
	};

	
template<class _Ty>
	struct _Refwrap_impl
		: _Call_wrapper<_Callable_obj<_Ty, true>,
			is_abstract<_Ty>::value>,
			_Refwrap_result2<_Ty, _Has_result_and_2arg_type<_Ty>::type::value>
	{	
	_Refwrap_impl(_Ty& _Val)
		: _Call_wrapper<_Callable_obj<_Ty, true>,
			is_abstract<_Ty>::value>(_Val)
		{	
		}
	};

template<class _Rx,
	class _Arg0>
	struct _Refwrap_impl<_Rx _Arg0::*>
		: _Call_wrapper<_Callable_pmd<_Rx _Arg0::*, _Arg0, false> >
	{	
	typedef _Rx _Arg0::* _Fty;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmd<_Fty, _Arg0, false> >(_Val)
		{	
		}
	};

template<class _Rx,
	class _Arg0>
	struct _Refwrap_impl<_Rx _Arg0::*const>
		: _Call_wrapper<_Callable_pmd<_Rx _Arg0::*const, _Arg0, false> >
	{	
	typedef _Rx _Arg0::*const _Fty;
	typedef _Rx result_type;
	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmd<_Fty, _Arg0, false> >(_Val)
		{	
		}
	};

	
















template<class _Rx, class... _Types> struct _Refwrap_impl<_Rx __cdecl (_Types...)> : _Call_wrapper<_Callable_fun< _Rx(__cdecl *)(_Types...), false> >, _Fun_class_base<_Rx, _Types...> { typedef _Rx(__cdecl *_Fty)(_Types...); typedef _Rx result_type; _Refwrap_impl(_Fty _Val) : _Call_wrapper<_Callable_fun<_Fty, false> >(_Val) { } }; template<class _Rx, class... _Types> struct _Refwrap_impl<_Rx __stdcall (_Types...)> : _Call_wrapper<_Callable_fun< _Rx(__stdcall *)(_Types...), false> >, _Fun_class_base<_Rx, _Types...> { typedef _Rx(__stdcall *_Fty)(_Types...); typedef _Rx result_type; _Refwrap_impl(_Fty _Val) : _Call_wrapper<_Callable_fun<_Fty, false> >(_Val) { } }; template<class _Rx, class... _Types> struct _Refwrap_impl<_Rx __fastcall (_Types...)> : _Call_wrapper<_Callable_fun< _Rx(__fastcall *)(_Types...), false> >, _Fun_class_base<_Rx, _Types...> { typedef _Rx(__fastcall *_Fty)(_Types...); typedef _Rx result_type; _Refwrap_impl(_Fty _Val) : _Call_wrapper<_Callable_fun<_Fty, false> >(_Val) { } };


	
















template<class _Rx, class... _Types> struct _Refwrap_impl<_Rx(__cdecl *)(_Types...)> : _Call_wrapper<_Callable_fun< _Rx(__cdecl *)(_Types...), true> >, _Fun_class_base<_Rx, _Types...> { typedef _Rx(__cdecl * _Fty)(_Types...); typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_fun<_Fty, true> >(_Val) { } }; template<class _Rx, class... _Types> struct _Refwrap_impl<_Rx(__stdcall *)(_Types...)> : _Call_wrapper<_Callable_fun< _Rx(__stdcall *)(_Types...), true> >, _Fun_class_base<_Rx, _Types...> { typedef _Rx(__stdcall * _Fty)(_Types...); typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_fun<_Fty, true> >(_Val) { } }; template<class _Rx, class... _Types> struct _Refwrap_impl<_Rx(__fastcall *)(_Types...)> : _Call_wrapper<_Callable_fun< _Rx(__fastcall *)(_Types...), true> >, _Fun_class_base<_Rx, _Types...> { typedef _Rx(__fastcall * _Fty)(_Types...); typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_fun<_Fty, true> >(_Val) { } }; template<class _Rx, class... _Types> struct _Refwrap_impl<_Rx(__cdecl *const)(_Types...)> : _Call_wrapper<_Callable_fun< _Rx(__cdecl *const)(_Types...), true> >, _Fun_class_base<_Rx, _Types...> { typedef _Rx(__cdecl *const _Fty)(_Types...); typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_fun<_Fty, true> >(_Val) { } }; template<class _Rx, class... _Types> struct _Refwrap_impl<_Rx(__stdcall *const)(_Types...)> : _Call_wrapper<_Callable_fun< _Rx(__stdcall *const)(_Types...), true> >, _Fun_class_base<_Rx, _Types...> { typedef _Rx(__stdcall *const _Fty)(_Types...); typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_fun<_Fty, true> >(_Val) { } }; template<class _Rx, class... _Types> struct _Refwrap_impl<_Rx(__fastcall *const)(_Types...)> : _Call_wrapper<_Callable_fun< _Rx(__fastcall *const)(_Types...), true> >, _Fun_class_base<_Rx, _Types...> { typedef _Rx(__fastcall *const _Fty)(_Types...); typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_fun<_Fty, true> >(_Val) { } };


	


















template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__thiscall _Arg0::* )(_Types...) > : _Call_wrapper<_Callable_pmf< _Rx(__thiscall _Arg0::* )(_Types...) , _Arg0, true> >, _Fun_class_base<_Rx,  _Arg0 *, _Types...> { typedef _Rx(__thiscall _Arg0::*  _Fty)(_Types...) ; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__cdecl _Arg0::* )(_Types...) > : _Call_wrapper<_Callable_pmf< _Rx(__cdecl _Arg0::* )(_Types...) , _Arg0, true> >, _Fun_class_base<_Rx,  _Arg0 *, _Types...> { typedef _Rx(__cdecl _Arg0::*  _Fty)(_Types...) ; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__stdcall _Arg0::* )(_Types...) > : _Call_wrapper<_Callable_pmf< _Rx(__stdcall _Arg0::* )(_Types...) , _Arg0, true> >, _Fun_class_base<_Rx,  _Arg0 *, _Types...> { typedef _Rx(__stdcall _Arg0::*  _Fty)(_Types...) ; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__fastcall _Arg0::* )(_Types...) > : _Call_wrapper<_Callable_pmf< _Rx(__fastcall _Arg0::* )(_Types...) , _Arg0, true> >, _Fun_class_base<_Rx,  _Arg0 *, _Types...> { typedef _Rx(__fastcall _Arg0::*  _Fty)(_Types...) ; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__thiscall _Arg0::* )(_Types...) const> : _Call_wrapper<_Callable_pmf< _Rx(__thiscall _Arg0::* )(_Types...) const, _Arg0, true> >, _Fun_class_base<_Rx, const _Arg0 *, _Types...> { typedef _Rx(__thiscall _Arg0::*  _Fty)(_Types...) const; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__cdecl _Arg0::* )(_Types...) const> : _Call_wrapper<_Callable_pmf< _Rx(__cdecl _Arg0::* )(_Types...) const, _Arg0, true> >, _Fun_class_base<_Rx, const _Arg0 *, _Types...> { typedef _Rx(__cdecl _Arg0::*  _Fty)(_Types...) const; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__stdcall _Arg0::* )(_Types...) const> : _Call_wrapper<_Callable_pmf< _Rx(__stdcall _Arg0::* )(_Types...) const, _Arg0, true> >, _Fun_class_base<_Rx, const _Arg0 *, _Types...> { typedef _Rx(__stdcall _Arg0::*  _Fty)(_Types...) const; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__fastcall _Arg0::* )(_Types...) const> : _Call_wrapper<_Callable_pmf< _Rx(__fastcall _Arg0::* )(_Types...) const, _Arg0, true> >, _Fun_class_base<_Rx, const _Arg0 *, _Types...> { typedef _Rx(__fastcall _Arg0::*  _Fty)(_Types...) const; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__thiscall _Arg0::* )(_Types...) volatile> : _Call_wrapper<_Callable_pmf< _Rx(__thiscall _Arg0::* )(_Types...) volatile, _Arg0, true> >, _Fun_class_base<_Rx, volatile _Arg0 *, _Types...> { typedef _Rx(__thiscall _Arg0::*  _Fty)(_Types...) volatile; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__cdecl _Arg0::* )(_Types...) volatile> : _Call_wrapper<_Callable_pmf< _Rx(__cdecl _Arg0::* )(_Types...) volatile, _Arg0, true> >, _Fun_class_base<_Rx, volatile _Arg0 *, _Types...> { typedef _Rx(__cdecl _Arg0::*  _Fty)(_Types...) volatile; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__stdcall _Arg0::* )(_Types...) volatile> : _Call_wrapper<_Callable_pmf< _Rx(__stdcall _Arg0::* )(_Types...) volatile, _Arg0, true> >, _Fun_class_base<_Rx, volatile _Arg0 *, _Types...> { typedef _Rx(__stdcall _Arg0::*  _Fty)(_Types...) volatile; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__fastcall _Arg0::* )(_Types...) volatile> : _Call_wrapper<_Callable_pmf< _Rx(__fastcall _Arg0::* )(_Types...) volatile, _Arg0, true> >, _Fun_class_base<_Rx, volatile _Arg0 *, _Types...> { typedef _Rx(__fastcall _Arg0::*  _Fty)(_Types...) volatile; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__thiscall _Arg0::* )(_Types...) const volatile> : _Call_wrapper<_Callable_pmf< _Rx(__thiscall _Arg0::* )(_Types...) const volatile, _Arg0, true> >, _Fun_class_base<_Rx, const volatile _Arg0 *, _Types...> { typedef _Rx(__thiscall _Arg0::*  _Fty)(_Types...) const volatile; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__cdecl _Arg0::* )(_Types...) const volatile> : _Call_wrapper<_Callable_pmf< _Rx(__cdecl _Arg0::* )(_Types...) const volatile, _Arg0, true> >, _Fun_class_base<_Rx, const volatile _Arg0 *, _Types...> { typedef _Rx(__cdecl _Arg0::*  _Fty)(_Types...) const volatile; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__stdcall _Arg0::* )(_Types...) const volatile> : _Call_wrapper<_Callable_pmf< _Rx(__stdcall _Arg0::* )(_Types...) const volatile, _Arg0, true> >, _Fun_class_base<_Rx, const volatile _Arg0 *, _Types...> { typedef _Rx(__stdcall _Arg0::*  _Fty)(_Types...) const volatile; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__fastcall _Arg0::* )(_Types...) const volatile> : _Call_wrapper<_Callable_pmf< _Rx(__fastcall _Arg0::* )(_Types...) const volatile, _Arg0, true> >, _Fun_class_base<_Rx, const volatile _Arg0 *, _Types...> { typedef _Rx(__fastcall _Arg0::*  _Fty)(_Types...) const volatile; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__thiscall _Arg0::* const)(_Types...) > : _Call_wrapper<_Callable_pmf< _Rx(__thiscall _Arg0::* const)(_Types...) , _Arg0, true> >, _Fun_class_base<_Rx,  _Arg0 *, _Types...> { typedef _Rx(__thiscall _Arg0::* const _Fty)(_Types...) ; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__cdecl _Arg0::* const)(_Types...) > : _Call_wrapper<_Callable_pmf< _Rx(__cdecl _Arg0::* const)(_Types...) , _Arg0, true> >, _Fun_class_base<_Rx,  _Arg0 *, _Types...> { typedef _Rx(__cdecl _Arg0::* const _Fty)(_Types...) ; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__stdcall _Arg0::* const)(_Types...) > : _Call_wrapper<_Callable_pmf< _Rx(__stdcall _Arg0::* const)(_Types...) , _Arg0, true> >, _Fun_class_base<_Rx,  _Arg0 *, _Types...> { typedef _Rx(__stdcall _Arg0::* const _Fty)(_Types...) ; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__fastcall _Arg0::* const)(_Types...) > : _Call_wrapper<_Callable_pmf< _Rx(__fastcall _Arg0::* const)(_Types...) , _Arg0, true> >, _Fun_class_base<_Rx,  _Arg0 *, _Types...> { typedef _Rx(__fastcall _Arg0::* const _Fty)(_Types...) ; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__thiscall _Arg0::* const)(_Types...) const> : _Call_wrapper<_Callable_pmf< _Rx(__thiscall _Arg0::* const)(_Types...) const, _Arg0, true> >, _Fun_class_base<_Rx, const _Arg0 *, _Types...> { typedef _Rx(__thiscall _Arg0::* const _Fty)(_Types...) const; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__cdecl _Arg0::* const)(_Types...) const> : _Call_wrapper<_Callable_pmf< _Rx(__cdecl _Arg0::* const)(_Types...) const, _Arg0, true> >, _Fun_class_base<_Rx, const _Arg0 *, _Types...> { typedef _Rx(__cdecl _Arg0::* const _Fty)(_Types...) const; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__stdcall _Arg0::* const)(_Types...) const> : _Call_wrapper<_Callable_pmf< _Rx(__stdcall _Arg0::* const)(_Types...) const, _Arg0, true> >, _Fun_class_base<_Rx, const _Arg0 *, _Types...> { typedef _Rx(__stdcall _Arg0::* const _Fty)(_Types...) const; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__fastcall _Arg0::* const)(_Types...) const> : _Call_wrapper<_Callable_pmf< _Rx(__fastcall _Arg0::* const)(_Types...) const, _Arg0, true> >, _Fun_class_base<_Rx, const _Arg0 *, _Types...> { typedef _Rx(__fastcall _Arg0::* const _Fty)(_Types...) const; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__thiscall _Arg0::* const)(_Types...) volatile> : _Call_wrapper<_Callable_pmf< _Rx(__thiscall _Arg0::* const)(_Types...) volatile, _Arg0, true> >, _Fun_class_base<_Rx, volatile _Arg0 *, _Types...> { typedef _Rx(__thiscall _Arg0::* const _Fty)(_Types...) volatile; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__cdecl _Arg0::* const)(_Types...) volatile> : _Call_wrapper<_Callable_pmf< _Rx(__cdecl _Arg0::* const)(_Types...) volatile, _Arg0, true> >, _Fun_class_base<_Rx, volatile _Arg0 *, _Types...> { typedef _Rx(__cdecl _Arg0::* const _Fty)(_Types...) volatile; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__stdcall _Arg0::* const)(_Types...) volatile> : _Call_wrapper<_Callable_pmf< _Rx(__stdcall _Arg0::* const)(_Types...) volatile, _Arg0, true> >, _Fun_class_base<_Rx, volatile _Arg0 *, _Types...> { typedef _Rx(__stdcall _Arg0::* const _Fty)(_Types...) volatile; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__fastcall _Arg0::* const)(_Types...) volatile> : _Call_wrapper<_Callable_pmf< _Rx(__fastcall _Arg0::* const)(_Types...) volatile, _Arg0, true> >, _Fun_class_base<_Rx, volatile _Arg0 *, _Types...> { typedef _Rx(__fastcall _Arg0::* const _Fty)(_Types...) volatile; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__thiscall _Arg0::* const)(_Types...) const volatile> : _Call_wrapper<_Callable_pmf< _Rx(__thiscall _Arg0::* const)(_Types...) const volatile, _Arg0, true> >, _Fun_class_base<_Rx, const volatile _Arg0 *, _Types...> { typedef _Rx(__thiscall _Arg0::* const _Fty)(_Types...) const volatile; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__cdecl _Arg0::* const)(_Types...) const volatile> : _Call_wrapper<_Callable_pmf< _Rx(__cdecl _Arg0::* const)(_Types...) const volatile, _Arg0, true> >, _Fun_class_base<_Rx, const volatile _Arg0 *, _Types...> { typedef _Rx(__cdecl _Arg0::* const _Fty)(_Types...) const volatile; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__stdcall _Arg0::* const)(_Types...) const volatile> : _Call_wrapper<_Callable_pmf< _Rx(__stdcall _Arg0::* const)(_Types...) const volatile, _Arg0, true> >, _Fun_class_base<_Rx, const volatile _Arg0 *, _Types...> { typedef _Rx(__stdcall _Arg0::* const _Fty)(_Types...) const volatile; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__fastcall _Arg0::* const)(_Types...) const volatile> : _Call_wrapper<_Callable_pmf< _Rx(__fastcall _Arg0::* const)(_Types...) const volatile, _Arg0, true> >, _Fun_class_base<_Rx, const volatile _Arg0 *, _Types...> { typedef _Rx(__fastcall _Arg0::* const _Fty)(_Types...) const volatile; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } };



	
template<class _Ty>
	class reference_wrapper
	: public _Refwrap_impl<_Ty>
	{	
public:
	typedef reference_wrapper<_Ty> _Myt;
	typedef _Refwrap_impl<_Ty> _Mybase;
	typedef _Ty type;

	reference_wrapper(_Ty& _Val) throw ()
		: _Mybase(_Val)
		{	
		}

	reference_wrapper(const _Myt& _Right) throw ()
		: _Mybase(_Right.get())
		{	
		}

	_Myt& operator=(const _Myt& _Right) throw ()
		{	
		this->_Reset(_Right.get());
		return (*this);
		}

	operator _Ty&() const throw ()
		{	
		return (this->_Get());
		}

	_Ty& get() const throw ()
		{	
		return (this->_Get());
		}

private:
	reference_wrapper(_Ty&&);	
	};

	
template<class _Ty>
	reference_wrapper<_Ty>
		ref(_Ty& _Val) throw ()
	{	
	return (reference_wrapper<_Ty>(_Val));
	}

template<class _Ty>
	void ref(const _Ty&& _Val);	

template<class _Ty>
	reference_wrapper<_Ty>
		ref(reference_wrapper<_Ty> _Val) throw ()
	{	
	return (_Val);
	}

template<class _Ty>
	reference_wrapper<const _Ty>
		cref(const _Ty& _Val) throw ()
	{	
	return (reference_wrapper<const _Ty>(_Val));
	}

template<class _Ty>
	void cref(const _Ty&& _Val);	

template<class _Ty>
	reference_wrapper<const _Ty>
		cref(reference_wrapper<_Ty> _Val) throw ()
	{	
	return (reference_wrapper<const _Ty>(_Val.get()));
	}

namespace tr1 {	
using ::std:: cref;
using ::std:: ref;
using ::std:: reference_wrapper;
using ::std:: result_of;
	}	
}

 
 #pragma warning(pop)
 #pragma pack(pop)
#line 730 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xrefwrap"
#line 731 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xrefwrap"





#line 1581 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\type_traits"

 
 #pragma warning(pop)
 #pragma pack(pop)
#line 1586 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\type_traits"
#line 1587 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\type_traits"






#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\utility"

 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 #pragma warning(disable: 4180 4512)

namespace std {
		
template<class _Ty> inline
	void swap(_Ty&, _Ty&)
		;
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\utility"

template<class _FwdIt1,
	class _FwdIt2> inline
	void iter_swap(_FwdIt1 _Left, _FwdIt2 _Right)
	{	
	swap(*_Left, *_Right);
	}

		
template<class _Ty,
	size_t _Size> inline
	void swap(_Ty (&_Left)[_Size], _Ty (&_Right)[_Size])
		
	{	
	if (&_Left != &_Right)
		{	
		_Ty *_First1 = _Left;
		_Ty *_Last1 = _First1 + _Size;
		_Ty *_First2 = _Right;
		for (; _First1 != _Last1; ++_First1, ++_First2)
			::std:: iter_swap(_First1, _First2);
		}
	}

template<class _Ty> inline
	void swap(_Ty& _Left, _Ty& _Right)
		
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\utility"
	{	
	_Ty _Tmp = _Move(_Left);
	_Left = _Move(_Right);
	_Right = _Move(_Tmp);
	}

		
template<class _Ty> inline
	void _Swap_adl(_Ty& _Left, _Ty& _Right)
	{	
	swap(_Left, _Right);
	}

		
struct piecewise_construct_t
	{	
	};

const piecewise_construct_t piecewise_construct =
	piecewise_construct_t();

		

template<class...>
	class tuple;


template<class _Ty1,
	class _Ty2>
	struct pair
	{	
	typedef pair<_Ty1, _Ty2> _Myt;
	typedef _Ty1 first_type;
	typedef _Ty2 second_type;

	pair()
		: first(), second()
		{	
		}

	pair(const _Ty1& _Val1, const _Ty2& _Val2)
		: first(_Val1), second(_Val2)
		{	
		}

	template<class _Other1,
		class _Other2,
		class = typename enable_if<is_convertible<const _Other1&, _Ty1>::value
			&& is_convertible<const _Other2&, _Ty2>::value,
			void>::type>
		pair(const pair<_Other1, _Other2>& _Right)
		: first(_Right.first), second(_Right.second)
		{	
		}

	template<class _Other1,
		class _Other2>
		_Myt& operator=(const pair<_Other1, _Other2>& _Right)
		{	
		first = _Right.first;
		second = _Right.second;
		return (*this);
		}


	template<class _Tuple1,
		class _Tuple2,
		size_t... _Indexes1,
		size_t... _Indexes2> inline
		pair(_Tuple1& _Val1,
			_Tuple2& _Val2,
			_Arg_idx<_Indexes1...>,
			_Arg_idx<_Indexes2...>);

	template<class... _Types1,
		class... _Types2> inline
		pair(piecewise_construct_t,
			tuple<_Types1...> _Val1,
			tuple<_Types2...> _Val2)
			;
#line 132 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\utility"


	template<class _Other1,
		class _Other2,
		class = typename enable_if<is_convertible<_Other1, _Ty1>::value
			&& is_convertible<_Other2, _Ty2>::value,
			void>::type>
		pair(_Other1&& _Val1, _Other2&& _Val2)
			
#line 142 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\utility"
		: first(::std:: forward<_Other1>(_Val1)),
				second(::std:: forward<_Other2>(_Val2))
		{	
		}

	template<class _Other1,
		class _Other2,
		class = typename enable_if<is_convertible<_Other1, _Ty1>::value
			&& is_convertible<_Other2, _Ty2>::value,
			void>::type>
		pair(pair<_Other1, _Other2>&& _Right)
			
#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\utility"
		: first(::std:: forward<_Other1>(_Right.first)),
			second(::std:: forward<_Other2>(_Right.second))
		{	
		}

	template<class _Other1,
		class _Other2>
		_Myt& operator=(pair<_Other1, _Other2>&& _Right)
			
#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\utility"
		{	
		first = ::std:: forward<_Other1>(_Right.first);
		second = ::std:: forward<_Other2>(_Right.second);
		return (*this);
		}

	_Myt& operator=(_Myt&& _Right)
		
#line 174 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\utility"
		{	
		first = ::std:: forward<_Ty1>(_Right.first);
		second = ::std:: forward<_Ty2>(_Right.second);
		return (*this);
		}

	void swap(_Myt& _Right)
		
#line 183 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\utility"
		{	
		if (this != &_Right)
			{	
			_Swap_adl(first, _Right.first);
			_Swap_adl(second, _Right.second);
			}
		}

	_Myt& operator=(const _Myt& _Right)
		{	
		first = _Right.first;
		second = _Right.second;
		return (*this);
		}

	_Ty1 first;	
	_Ty2 second;	
	};

		

template<class _Ty1,
	class _Ty2> inline
	void swap(pair<_Ty1, _Ty2>& _Left, pair<_Ty1, _Ty2>& _Right)
		
	{	
	_Left.swap(_Right);
	}

template<class _Ty1,
	class _Ty2> inline
	bool operator==(const pair<_Ty1, _Ty2>& _Left,
		const pair<_Ty1, _Ty2>& _Right)
	{	
	return (_Left.first == _Right.first && _Left.second == _Right.second);
	}

template<class _Ty1,
	class _Ty2> inline
	bool operator!=(const pair<_Ty1, _Ty2>& _Left,
		const pair<_Ty1, _Ty2>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Ty1,
	class _Ty2> inline
	bool operator<(const pair<_Ty1, _Ty2>& _Left,
		const pair<_Ty1, _Ty2>& _Right)
	{	
	return (_Left.first < _Right.first ||
		(!(_Right.first < _Left.first) && _Left.second < _Right.second));
	}

template<class _Ty1,
	class _Ty2> inline
	bool operator>(const pair<_Ty1, _Ty2>& _Left,
		const pair<_Ty1, _Ty2>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _Ty1,
	class _Ty2> inline
	bool operator<=(const pair<_Ty1, _Ty2>& _Left,
		const pair<_Ty1, _Ty2>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _Ty1,
	class _Ty2> inline
	bool operator>=(const pair<_Ty1, _Ty2>& _Left,
		const pair<_Ty1, _Ty2>& _Right)
	{	
	return (!(_Left < _Right));
	}

	

template<class _Ty1,
	class _Ty2> inline
	pair<typename _Unrefwrap<_Ty1>::type,
		typename _Unrefwrap<_Ty2>::type>
		make_pair(_Ty1&& _Val1, _Ty2&& _Val2)
	{	
	typedef pair<typename _Unrefwrap<_Ty1>::type,
		typename _Unrefwrap<_Ty2>::type> _Mypair;
	return (_Mypair(::std:: forward<_Ty1>(_Val1),
		::std:: forward<_Ty2>(_Val2)));
	}

		
	namespace rel_ops
		{	
template<class _Ty> inline
	bool operator!=(const _Ty& _Left, const _Ty& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Ty> inline
	bool operator>(const _Ty& _Left, const _Ty& _Right)
	{	
	return (_Right < _Left);
	}

template<class _Ty> inline
	bool operator<=(const _Ty& _Left, const _Ty& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _Ty> inline
	bool operator>=(const _Ty& _Left, const _Ty& _Right)
	{	
	return (!(_Left < _Right));
	}
		}
}

namespace std {
	
template<class _Tuple>
	struct tuple_size
	{	
	static_assert(_Always_false<_Tuple>::value,
		"The C++ Standard doesn't define tuple_size for this type.");
	};

template<class _Ty1,
	class _Ty2>
	struct tuple_size<pair<_Ty1, _Ty2> >
	: integral_constant<size_t, 2>
	{	
	};

template<class... _Types>
	struct tuple_size<tuple<_Types...> >
	: integral_constant<size_t, sizeof...(_Types)>
	{	
	};


template<class _Tuple>
	struct tuple_size<const _Tuple>
	: tuple_size<_Tuple>
	{	
	};

template<class _Tuple>
	struct tuple_size<volatile _Tuple>
	: tuple_size<_Tuple>
	{	
	};

template<class _Tuple>
	struct tuple_size<const volatile _Tuple>
	: tuple_size<_Tuple>
	{	
	};

	
template<size_t _Idx,
	class _Tuple>
	struct tuple_element;

template<int _Idx,
	class _Ty>
	struct _Pair_data;

template<class _Ty1,
	class _Ty2>
	struct _Pair_data<0, pair<_Ty1, _Ty2> >
	{	
	typedef typename add_lvalue_reference<const _Ty1>::type _Ctype;
	typedef typename add_lvalue_reference<_Ty1>::type _Rtype;
	typedef typename add_rvalue_reference<_Ty1>::type _RRtype;

	static _Rtype _Val(pair<_Ty1, _Ty2>& _Pr)
		{	
		return (_Pr.first);
		}

	static _Ctype _Val(const pair<_Ty1, _Ty2>& _Pr)
		{	
		return (_Pr.first);
		}

	static _RRtype _Val(pair<_Ty1, _Ty2>&& _Pr)
		{	
		return (::std:: forward<_Ty1>(_Pr.first));
		}
	};

template<class _Ty1,
	class _Ty2>
	struct _Pair_data<1, pair<_Ty1, _Ty2> >
	{	
	typedef typename add_lvalue_reference<const _Ty2>::type _Ctype;
	typedef typename add_lvalue_reference<_Ty2>::type _Rtype;
	typedef typename add_rvalue_reference<_Ty2>::type _RRtype;

	static _Rtype _Val(pair<_Ty1, _Ty2>& _Pr)
		{	
		return (_Pr.second);
		}

	static _Ctype _Val(const pair<_Ty1, _Ty2>& _Pr)
		{	
		return (_Pr.second);
		}

	static _RRtype _Val(pair<_Ty1, _Ty2>&& _Pr)
		{	
		return (::std:: forward<_Ty2>(_Pr.second));
		}
	};

template<class _Ty1,
	class _Ty2>
	struct tuple_element<0, pair<_Ty1, _Ty2> >
	{	
	typedef _Ty1 type;
	};

template<class _Ty1,
	class _Ty2>
	struct tuple_element<1, pair<_Ty1, _Ty2> >
	{	
	typedef _Ty2 type;
	};

template<int _Idx,
	class _Ty1,
	class _Ty2> inline
	typename _Pair_data<_Idx, pair<_Ty1, _Ty2> >::_Rtype
		get(pair<_Ty1, _Ty2>& _Pr) throw ()
	{	
	return (_Pair_data<_Idx, pair<_Ty1, _Ty2> >::_Val(_Pr));
	}

template<int _Idx,
	class _Ty1,
	class _Ty2> inline
	typename _Pair_data<_Idx, pair<_Ty1, _Ty2> >::_Ctype
		get(const pair<_Ty1, _Ty2>& _Pr) throw ()
	{	
	return (_Pair_data<_Idx, pair<_Ty1, _Ty2> >::_Val(_Pr));
	}

template<int _Idx,
	class _Ty1,
	class _Ty2> inline
	typename _Pair_data<_Idx, pair<_Ty1, _Ty2> >::_RRtype
		get(pair<_Ty1, _Ty2>&& _Pr) throw ()
	{	
	typedef typename _Pair_data<_Idx, pair<_Ty1, _Ty2> >::_RRtype
		_RRtype;
	return (::std:: forward<_RRtype>(
		_Pair_data<_Idx, pair<_Ty1, _Ty2> >::_Val(_Pr)));
	}
}

namespace std {
namespace tr1 {	
using ::std:: get;
using ::std:: tuple_element;
using ::std:: tuple_size;
}	
}

 
 #pragma warning(pop)
 #pragma pack(pop)
#line 459 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\utility"
#line 460 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\utility"






















#line 22 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/no_tr1/utility.hpp"




#line 27 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/no_tr1/utility.hpp"

#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/no_tr1/utility.hpp"
#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/select_stdlib_config.hpp"





#line 44 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/select_stdlib_config.hpp"



#line 48 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/select_stdlib_config.hpp"



#line 52 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/select_stdlib_config.hpp"



#line 56 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/select_stdlib_config.hpp"



#line 60 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/select_stdlib_config.hpp"



#line 64 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/select_stdlib_config.hpp"



#line 68 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/select_stdlib_config.hpp"



#line 72 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/select_stdlib_config.hpp"








#line 81 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/select_stdlib_config.hpp"

#line 83 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/select_stdlib_config.hpp"



#line 41 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config.hpp"
#line 42 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/stdlib/dinkumware.hpp"


















#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/stdlib/dinkumware.hpp"



   
   


#line 28 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/stdlib/dinkumware.hpp"


#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/stdlib/dinkumware.hpp"









#line 41 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/stdlib/dinkumware.hpp"



#line 45 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/stdlib/dinkumware.hpp"



















#line 65 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/stdlib/dinkumware.hpp"








#line 74 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/stdlib/dinkumware.hpp"







#line 82 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/stdlib/dinkumware.hpp"


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\algorithm"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xmemory"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xmemory0"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\cstdlib"

#pragma once










 
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\cstdlib"

 

namespace std {
using :: size_t; using :: div_t; using :: ldiv_t;

using :: abort; using :: abs; using :: atexit;
using :: atof; using :: atoi; using :: atol;
using :: bsearch; using :: calloc; using :: div;
using :: exit; using :: free;
using :: labs; using :: ldiv; using :: malloc;
using :: mblen; using :: mbstowcs; using :: mbtowc;
using :: qsort; using :: rand; using :: realloc;
using :: srand; using :: strtod; using :: strtol;
using :: strtoul;
using :: wcstombs; using :: wctomb;

using :: lldiv_t;
using :: llabs; using :: lldiv;

 
using :: getenv;
using :: system;
 #line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\cstdlib"
}
 #line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\cstdlib"
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\cstdlib"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xmemory0"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\limits"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\ymath.h"

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 

  

 
 
extern "C" {
 #line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\ymath.h"
 #line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\ymath.h"

		





		






void __cdecl _Feraise(int);

typedef union
	{	
	unsigned short _Word[8];
	float _Float;
	double _Double;
	long double _Long_double;
	} _Dconst;

		
 double __cdecl _Cosh(double, double);
 double __cdecl _Divide(double, double);
 short __cdecl _Dtest(double *);
 double __cdecl _Log(double, int);
 double __cdecl _Recip(double);
 double __cdecl _Sin(double, unsigned int);
 double __cdecl _Sinx(double, unsigned int, int);
 double __cdecl _Sinh(double, double);

 short __cdecl _Exp(double *, double, short);
extern   _Dconst _Denorm, _Hugeval, _Inf,
	_Nan, _Snan;

		
 float __cdecl _FCosh(float, float);
 float __cdecl _FDivide(float, float);
 short __cdecl _FDtest(float *);
 float __cdecl _FLog(float, int);
 float __cdecl _FRecip(float);
 float __cdecl _FSin(float, unsigned int);
 float __cdecl _FSinx(float, unsigned int, int);
 float __cdecl _FSinh(float, float);

 short __cdecl _FExp(float *, float, short);
extern   _Dconst _FDenorm, _FInf, _FNan, _FSnan;

		
 long double __cdecl _LCosh(long double, long double);
 long double __cdecl _LDivide(long double, long double);
 short __cdecl _LDtest(long double *);
 long double __cdecl _LLog(long double, int);
 long double __cdecl _LRecip(long double);
 long double __cdecl _LSin(long double, unsigned int);
 long double __cdecl _LSinx(long double, unsigned int, int);
 long double __cdecl _LSinh(long double, long double);

 short __cdecl _LExp(long double *, long double, short);
extern   _Dconst _LDenorm, _LInf, _LNan, _LSnan;

 
 
}
 #line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\ymath.h"
 #line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\ymath.h"

 
 #pragma warning(pop)
 #pragma pack(pop)

#line 94 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\ymath.h"
#line 95 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\ymath.h"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\limits"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\cfloat"

#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\float.h"















#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"







































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\float.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtwrn.h"











#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"







































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtwrn.h"














































#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtwrn.h"
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\float.h"








#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\float.h"

#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\float.h"
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\float.h"
#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\float.h"


extern "C" {
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\float.h"





















#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\float.h"





#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\float.h"


#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\float.h"
#line 72 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\float.h"













































  unsigned int __cdecl _clearfp(void);
#pragma warning(push)
#pragma warning(disable: 4141)
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_controlfp_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  unsigned int __cdecl _controlfp(  unsigned int _NewValue,  unsigned int _Mask);
#pragma warning(pop)
  void __cdecl _set_controlfp(  unsigned int _NewValue,   unsigned int _Mask);
  errno_t __cdecl _controlfp_s(  unsigned int *_CurrentState,   unsigned int _NewValue,   unsigned int _Mask);
  unsigned int __cdecl _statusfp(void);
  void __cdecl _fpreset(void);


  void __cdecl _statusfp2(  unsigned int *_X86_status,   unsigned int *_SSE2_status);
#line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\float.h"






































































#line 201 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\float.h"

  unsigned int __cdecl _control87(  unsigned int _NewValue,  unsigned int _Mask);

  int __cdecl __control87_2(  unsigned int _NewValue,   unsigned int _Mask,
                                    unsigned int* _X86_cw,   unsigned int* _Sse2_cw);
#line 207 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\float.h"



   extern int * __cdecl __fpecode(void);






























   double __cdecl _copysign(  double _Number,   double _Sign);
   double __cdecl _chgsign(  double _X);
   double __cdecl _scalb(  double _X,   long _Y);
   double __cdecl _logb(  double _X);
   double __cdecl _nextafter(  double _X,   double _Y);
   int    __cdecl _finite(  double _X);
   int    __cdecl _isnan(  double _X);
   int    __cdecl _fpclass(  double _X);

























  void __cdecl fpreset(void);





























































#line 337 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\float.h"


}
#line 341 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\float.h"

#line 343 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\float.h"
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\cfloat"
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\cfloat"





#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\limits"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\climits"

#pragma once





#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\climits"





#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\limits"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\cmath"

#pragma once













 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\math.h"

















#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"







































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\math.h"





#pragma pack(push,8)


extern "C" {
#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\math.h"








struct _exception {
        int type;       
        char *name;     
        double arg1;    
        double arg2;    
        double retval;  
        } ;


#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\math.h"







struct _complex {
        double x,y; 
        } ;




#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\math.h"


#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\math.h"
#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\math.h"

typedef float float_t;
typedef double double_t;





















 extern double _HUGE;


#line 94 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\math.h"
#line 95 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\math.h"





#line 101 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\math.h"



















































































void __cdecl _fperrraise(  int _Except);

short  __cdecl _dclass(  double _X);
short  __cdecl _ldclass(  long double _X);
short  __cdecl _fdclass(  float _X);

int  __cdecl _dsign(  double _X);
int  __cdecl _ldsign(  long double _X);
int  __cdecl _fdsign(  float _X);

int  __cdecl _dpcomp(  double _X,   double _Y);
int  __cdecl _ldpcomp(  long double _X,   long double _Y);
int  __cdecl _fdpcomp(  float _X,   float _Y);

short  __cdecl _dtest(  double *_Px);
short  __cdecl _ldtest(  long double *_Px);
short  __cdecl _fdtest(  float *_Px);

short  __cdecl _d_int(  double *_Px,   short _Xexp);
short  __cdecl _ld_int(  long double *_Px,   short _Xexp);
short  __cdecl _fd_int(  float *_Px,   short _Xexp);

short  __cdecl _dscale(  double *_Px,   long _Lexp);
short  __cdecl _ldscale(  long double *_Px,   long _Lexp);
short  __cdecl _fdscale(  float *_Px,   long _Lexp);

short   __cdecl _dunscale(  short *_Pex,   double *_Px);
short  __cdecl _ldunscale(  short *_Pex,   long double *_Px);
short  __cdecl _fdunscale(  short *_Pex,   float *_Px);

short  __cdecl _dexp(  double *_Px,   double _Y,   long _Eoff);
short  __cdecl _ldexp(  long double *_Px,   long double _Y,   long _Eoff);
short  __cdecl _fdexp(  float *_Px,   float _Y,   long _Eoff);

short  __cdecl _dnorm(  unsigned short *_Ps);
short  __cdecl _fdnorm(  unsigned short *_Ps);

double __cdecl _dpoly(  double _X,   const double *_Tab,   int _N);
long double __cdecl _ldpoly(  long double _X,   const long double *_Tab,   int _N);
float __cdecl _fdpoly(  float _X,   const float *_Tab,   int _N);

double  __cdecl _dlog(  double _X,   int _Baseflag);
long double  __cdecl _ldlog(  long double _X,   int _Baseflag);
float  __cdecl _fdlog(  float _X,   int _Baseflag);

double  __cdecl _dsin(  double _X,   unsigned int _Qoff);
long double  __cdecl _ldsin(  long double _X,   unsigned int _Qoff);
float  __cdecl _fdsin(  float _X,   unsigned int _Qoff);


typedef union
{	
    unsigned short _Sh[8];
    double _Val;
} _double_val;


typedef union
{	
    unsigned short _Sh[8];
    float _Val;
} _float_val;


typedef union
{	
    unsigned short _Sh[8];
    long double _Val;
} _ldouble_val;

typedef union
{	
    unsigned short _Word[8];
    float _Float;
    double _Double;
    long double _Long_double;
} _float_const;

extern const _float_const _Denorm_C,  _Inf_C,  _Nan_C,  _Snan_C, _Hugeval_C;
extern const _float_const _FDenorm_C, _FInf_C, _FNan_C, _FSnan_C;
extern const _float_const _LDenorm_C, _LInf_C, _LNan_C, _LSnan_C;

extern const _float_const _Eps_C,  _Rteps_C;
extern const _float_const _FEps_C, _FRteps_C;
extern const _float_const _LEps_C, _LRteps_C;

extern const double _Zero_C, _Xbig_C;
extern const float _FZero_C, _FXbig_C;
extern const long double _LZero_C, _LXbig_C;





























extern "C++" {

inline __declspec(nothrow) int fpclassify(float _X)
{
    return (_fdtest(&_X));
}

inline __declspec(nothrow) int fpclassify(double _X)
{
    return (_dtest(&_X));
}

inline __declspec(nothrow) int fpclassify(long double _X)
{
    return (_ldtest(&_X));
}

inline __declspec(nothrow) bool signbit(float _X)
{
    return (_fdsign(_X) != 0);
}

inline __declspec(nothrow) bool signbit(double _X)
{
    return (_dsign(_X) != 0);
}

inline __declspec(nothrow) bool signbit(long double _X)
{
    return (_ldsign(_X) != 0);
}

inline __declspec(nothrow) int _fpcomp(float _X, float _Y)
{
    return (_fdpcomp(_X, _Y));
}

inline __declspec(nothrow) int _fpcomp(double _X, double _Y)
{
    return (_dpcomp(_X, _Y));
}

inline __declspec(nothrow) int _fpcomp(long double _X, long double _Y)
{
    return (_ldpcomp(_X, _Y));
}

template<class _Trc, class _Tre> struct _Combined_type
{	
    typedef float _Type;	
};

template<> struct _Combined_type<float, double>
{	
    typedef double _Type;
};

template<> struct _Combined_type<float, long double>
{	
    typedef long double _Type;
};

template<class _Ty, class _T2> struct _Real_widened
{	
    typedef long double _Type;	
};

template<> struct _Real_widened<float, float>
{	
    typedef float _Type;
};

template<> struct _Real_widened<float, double>
{	
    typedef double _Type;
};

template<> struct _Real_widened<double, float>
{	
    typedef double _Type;
};

template<> struct _Real_widened<double, double>
{	
    typedef double _Type;
};

template<class _Ty> struct _Real_type
{	
    typedef double _Type;	
};

template<> struct _Real_type<float>
{	
    typedef float _Type;
};

template<> struct _Real_type<long double>
{	
    typedef long double _Type;
};

template<class _T1, class _T2> inline __declspec(nothrow) int _fpcomp(_T1 _X, _T2 _Y)
{	
    typedef typename _Combined_type<float,
        typename _Real_widened<
        typename _Real_type<_T1>::_Type,
        typename _Real_type<_T2>::_Type>::_Type>::_Type _Tw;
    return (_fpcomp((_Tw)_X, (_Tw)_Y));
}

template<class _Ty> inline __declspec(nothrow) bool isfinite(_Ty _X)
{
    return (fpclassify(_X) <= 0);
}

template<class _Ty> inline __declspec(nothrow) bool isinf(_Ty _X)
{
    return (fpclassify(_X) == 1);
}

template<class _Ty> inline __declspec(nothrow) bool isnan(_Ty _X)
{
    return (fpclassify(_X) == 2);
}

template<class _Ty> inline __declspec(nothrow) bool isnormal(_Ty _X)
{
    return (fpclassify(_X) == (-1));
}

template<class _Ty1, class _Ty2> inline __declspec(nothrow) bool isgreater(_Ty1 _X, _Ty2 _Y)
{
    return ((_fpcomp(_X, _Y) & 4) != 0);
}

template<class _Ty1, class _Ty2> inline __declspec(nothrow) bool isgreaterequal(_Ty1 _X, _Ty2 _Y)
{
    return ((_fpcomp(_X, _Y) & (2 | 4)) != 0);
}

template<class _Ty1, class _Ty2> inline __declspec(nothrow) bool isless(_Ty1 _X, _Ty2 _Y)
{
    return ((_fpcomp(_X, _Y) & 1) != 0);
}

template<class _Ty1, class _Ty2> inline __declspec(nothrow) bool islessequal(_Ty1 _X, _Ty2 _Y)
{
    return ((_fpcomp(_X, _Y) & (1 | 2)) != 0);
}

template<class _Ty1, class _Ty2> inline __declspec(nothrow) bool islessgreater(_Ty1 _X, _Ty2 _Y)
{
    return ((_fpcomp(_X, _Y) & (1 | 4)) != 0);
}

template<class _Ty1, class _Ty2> inline __declspec(nothrow) bool isunordered(_Ty1 _X, _Ty2 _Y)
{
    return (_fpcomp(_X, _Y) == 0);
}

}  

#line 466 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\math.h"




int       __cdecl abs(  int _X);
long      __cdecl labs(  long _X);
long long __cdecl llabs(  long long _X);

double  __cdecl acos(  double _X);
 double __cdecl acosh(  double _X);
double  __cdecl asin(  double _X);
 double __cdecl asinh(  double _X);
double  __cdecl atan(  double _X);
 double __cdecl atanh(  double _X);
double  __cdecl atan2(  double _Y,   double _X);

 double __cdecl cbrt(  double _X);
 double __cdecl copysign(  double _X,   double _Y);
double  __cdecl cos(  double _X);
double  __cdecl cosh(  double _X);
 double __cdecl erf(  double _X);
 double __cdecl erfc(  double _X);
double  __cdecl exp(  double _X);
 double __cdecl exp2(  double _X);
 double __cdecl expm1(  double _X);
 double  __cdecl fabs(  double _X);
 double __cdecl fdim(  double _X,   double _Y);
 double __cdecl fma(  double _X,   double _Y,   double _Z);
 double __cdecl fmax(  double _X,   double _Y);
 double __cdecl fmin(  double _X,   double _Y);
double  __cdecl fmod(  double _X,   double _Y);
 int __cdecl ilogb(  double _X);
 double __cdecl lgamma(  double _X);
 long long __cdecl llrint(  double _X);
 long long __cdecl llround(  double _X);
double  __cdecl log(  double _X);
double  __cdecl log10(  double _X);
 double __cdecl log1p(  double _X);
 double __cdecl log2(  double _X);
 double __cdecl logb(  double _X);
 long __cdecl lrint(  double _X);
 long __cdecl lround(  double _X);
 double __cdecl nan(  const char *);
 double __cdecl nearbyint(  double _X);
 double __cdecl nextafter(  double _X,   double _Y);
 double __cdecl nexttoward(  double _X,   long double _Y);
double  __cdecl pow(  double _X,   double _Y);
 double __cdecl remainder(  double _X,   double _Y);
 double __cdecl remquo(  double _X,   double _Y,   int *);
 double __cdecl rint(  double _X);
 double __cdecl round(  double _X);
 double __cdecl scalbln(  double _X,   long _Y);
 double __cdecl scalbn(  double _X,   int _Y);
double  __cdecl sin(  double _X);
double  __cdecl sinh(  double _X);
  double  __cdecl sqrt(  double _X);
double  __cdecl tan(  double _X);
double  __cdecl tanh(  double _X);
 double __cdecl tgamma(  double _X);
 double __cdecl trunc(  double _X);

   double  __cdecl atof(  const char *_String);
   double  __cdecl _atof_l(  const char *_String,   _locale_t _Locale);

 double  __cdecl _cabs(  struct _complex _Complex_value);
 double  __cdecl ceil(  double _X);

   double __cdecl _chgsign (  double _X);
   double __cdecl _copysign (  double _Number,   double _Sign);

 double  __cdecl floor(  double _X);
 double  __cdecl frexp(  double _X,   int * _Y);
 double  __cdecl _hypot(  double _X,   double _Y);
 double  __cdecl _j0(  double _X );
 double  __cdecl _j1(  double _X );
 double  __cdecl _jn(int _X,   double _Y);
 double  __cdecl ldexp(  double _X,   int _Y);



#line 547 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\math.h"
int     __cdecl _matherr(  struct _exception * _Except);
#line 549 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\math.h"

 double  __cdecl modf(  double _X,   double * _Y);
 double  __cdecl _y0(  double _X);
 double  __cdecl _y1(  double _X);
 double  __cdecl _yn(  int _X,   double _Y);

__inline double __cdecl hypot(  double _X,   double _Y)
{
    return _hypot(_X, _Y);
}


 float __cdecl acoshf(  float _X);
 float __cdecl asinhf(  float _X);
 float __cdecl atanhf(  float _X);
 float __cdecl cbrtf(  float _X);
 float  __cdecl _chgsignf(  float _X);
 float __cdecl copysignf(  float _X,   float _Y);
 float  __cdecl _copysignf(  float _Number,   float _Sign);
 float __cdecl erff(  float _X);
 float __cdecl erfcf(  float _X);
 float __cdecl expm1f(  float _X);
 float __cdecl exp2f(  float _X);
 float __cdecl fdimf(  float _X,   float _Y);
 float __cdecl fmaf(  float _X,   float _Y,   float _Z);
 float __cdecl fmaxf(  float _X,   float _Y);
 float __cdecl fminf(  float _X,   float _Y);
 float  __cdecl _hypotf(  float _X,   float _Y);
 int __cdecl ilogbf(  float _X);
 float __cdecl lgammaf(  float _X);
 long long __cdecl llrintf(  float _X);
 long long __cdecl llroundf(  float _X);
 float __cdecl log1pf(  float _X);
 float __cdecl log2f(  float _X);
 float __cdecl logbf(  float _X);
 long __cdecl lrintf(  float _X);
 long __cdecl lroundf(  float _X);
 float __cdecl nanf(  const char *);
 float __cdecl nearbyintf(  float _X);
 float __cdecl nextafterf(  float _X,   float _Y);
 float __cdecl nexttowardf(  float _X,   long double _Y);
 float __cdecl remainderf(  float _X,   float _Y);
 float __cdecl remquof(  float _X,   float _Y,   int *);
 float __cdecl rintf(  float _X);
 float __cdecl roundf(  float _X);
 float __cdecl scalblnf(  float _X,   long _Y);
 float __cdecl scalbnf(  float _X,   int _Y);
 float __cdecl tgammaf(  float _X);
 float __cdecl truncf(  float _X);



 int  __cdecl _set_SSE2_enable(  int _Flag);

#line 604 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\math.h"











#line 616 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\math.h"






#line 623 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\math.h"












#line 636 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\math.h"

__inline float  __cdecl acosf(  float _X)
{
    return (float)acos(_X);
}

__inline float  __cdecl asinf(  float _X)
{
    return (float)asin(_X);
}

__inline float  __cdecl atan2f(  float _Y,   float _X)
{
    return (float)atan2(_Y, _X);
}

__inline float  __cdecl atanf(  float _X)
{
    return (float)atan(_X);
}

__inline float  __cdecl ceilf(  float _X)
{
    return (float)ceil(_X);
}

__inline float  __cdecl cosf(  float _X)
{
    return (float)cos(_X);
}

__inline float  __cdecl coshf(  float _X)
{
    return (float)cosh(_X);
}

__inline float  __cdecl expf(  float _X)
{
    return (float)exp(_X);
}

#line 678 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\math.h"





#line 684 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\math.h"

__inline float __cdecl fabsf(  float _X)
{
    return (float)fabs(_X);
}

#line 691 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\math.h"






#line 698 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\math.h"

__inline float __cdecl floorf(  float _X)
{
    return (float)floor(_X);
}

__inline float __cdecl fmodf(  float _X,   float _Y)
{
    return (float)fmod(_X, _Y);
}

#line 710 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\math.h"

__inline float __cdecl frexpf(  float _X,   int *_Y)
{
    return (float)frexp(_X, _Y);
}

__inline float __cdecl hypotf(  float _X,   float _Y)
{
    return _hypotf(_X, _Y);
}

__inline float __cdecl ldexpf(  float _X,   int _Y)
{
    return (float)ldexp(_X, _Y);
}













#line 739 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\math.h"

__inline float __cdecl log10f(  float _X)
{
    return (float)log10(_X);
}

__inline float __cdecl logf(  float _X)
{
    return (float)log(_X);
}

__inline float __cdecl modff(  float _X,   float *_Y)
{
    double _F, _I;
    _F = modf(_X, &_I);
    *_Y = (float)_I;
    return (float)_F;
}

__inline float __cdecl powf(  float _X,   float _Y)
{
    return (float)pow(_X, _Y);
}

__inline float __cdecl sinf(  float _X)
{
    return (float)sin(_X);
}

__inline float __cdecl sinhf(  float _X)
{
    return (float)sinh(_X);
}

__inline float __cdecl sqrtf(  float _X)
{
    return (float)sqrt(_X);
}

__inline float __cdecl tanf(  float _X)
{
    return (float)tan(_X);
}

__inline float __cdecl tanhf(  float _X)
{
    return (float)tanh(_X);
}

#line 789 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\math.h"

 long double __cdecl acoshl(  long double _X);

__inline long double __cdecl acosl(  long double _X)
{
    return acos((double)_X);
}

 long double __cdecl asinhl(  long double _X);

__inline long double __cdecl asinl(  long double _X)
{
    return asin((double)_X);
}

__inline long double __cdecl atan2l(  long double _Y,   long double _X)
{
    return atan2((double)_Y, (double)_X);
}

 long double __cdecl atanhl(  long double _X);

__inline long double __cdecl atanl(  long double _X)
{
    return atan((double)_X);
}

 long double __cdecl cbrtl(  long double _X);

__inline long double __cdecl ceill(  long double _X)
{
    return ceil((double)_X);
}

__inline long double __cdecl _chgsignl(  long double _X)
{
    return _chgsign((double)_X);
}

 long double __cdecl copysignl(  long double _X,   long double _Y);

__inline long double __cdecl _copysignl(  long double _X,   long double _Y)
{
    return _copysign((double)_X, (double)_Y);
}

__inline long double __cdecl coshl(  long double _X)
{
    return cosh((double)_X);
}

__inline long double __cdecl cosl(  long double _X)
{
    return cos((double)_X);
}

 long double __cdecl erfl(  long double _X);
 long double __cdecl erfcl(  long double _X);

__inline long double __cdecl expl(  long double _X)
{
    return exp((double)_X);
}

 long double __cdecl exp2l(  long double _X);
 long double __cdecl expm1l(  long double _X);

__inline long double __cdecl fabsl(  long double _X)
{
    return fabs((double)_X);
}

 long double __cdecl fdiml(  long double _X,   long double _Y);

__inline long double __cdecl floorl(  long double _X)
{
    return floor((double)_X);
}

 long double __cdecl fmal(  long double _X,   long double _Y,   long double _Z);
 long double __cdecl fmaxl(  long double _X,   long double _Y);
 long double __cdecl fminl(  long double _X,   long double _Y);

__inline long double __cdecl fmodl(  long double _X,   long double _Y)
{
    return fmod((double)_X, (double)_Y);
}

__inline long double __cdecl frexpl(  long double _X,   int *_Y)
{
    return frexp((double)_X, _Y);
}

 int __cdecl ilogbl(  long double _X);

__inline long double __cdecl _hypotl(  long double _X,   long double _Y)
{
    return _hypot((double)_X, (double)_Y);
}

__inline long double __cdecl hypotl(  long double _X,   long double _Y)
{
    return _hypot((double)_X, (double)_Y);
}

__inline long double __cdecl ldexpl(  long double _X,   int _Y)
{
    return ldexp((double)_X, _Y);
}

 long double __cdecl lgammal(  long double _X);
 long long __cdecl llrintl(  long double _X);
 long long __cdecl llroundl(  long double _X);

__inline long double __cdecl logl(  long double _X)
{
    return log((double)_X);
}

__inline long double __cdecl log10l(  long double _X)
{
    return log10((double)_X);
}

 long double __cdecl log1pl(  long double _X);
 long double __cdecl log2l(  long double _X);
 long double __cdecl logbl(  long double _X);
 long __cdecl lrintl(  long double _X);
 long __cdecl lroundl(  long double _X);

__inline long double __cdecl modfl(  long double _X,   long double *_Y)
{
    double _F, _I;
    _F = modf((double)_X, &_I);
    *_Y = _I;
    return _F;
}
 long double __cdecl nanl(  const char *);
 long double __cdecl nearbyintl(  long double _X);
 long double __cdecl nextafterl(  long double _X,   long double _Y);
 long double __cdecl nexttowardl(  long double _X,   long double _Y);

__inline long double __cdecl powl(  long double _X,   long double _Y)
{
    return pow((double)_X, (double)_Y);
}

 long double __cdecl remainderl(  long double _X,   long double _Y);
 long double __cdecl remquol(  long double _X,   long double _Y,   int *);
 long double __cdecl rintl(  long double _X);
 long double __cdecl roundl(  long double _X);
 long double __cdecl scalblnl(  long double _X,   long _Y);
 long double __cdecl scalbnl(  long double _X,   int _Y);

__inline long double __cdecl sinhl(  long double _X)
{
    return sinh((double)_X);
}

__inline long double __cdecl sinl(  long double _X)
{
    return sin((double)_X);
}

__inline long double __cdecl sqrtl(  long double _X)
{
    return sqrt((double)_X);
}

__inline long double __cdecl tanhl(  long double _X)
{
    return tanh((double)_X);
}

__inline long double __cdecl tanl(  long double _X)
{
    return tan((double)_X);
}

 long double __cdecl tgammal(  long double _X);
 long double __cdecl truncl(  long double _X);




#line 975 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\math.h"

















 extern double HUGE;


#line 996 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\math.h"

__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_j0" ". See online help for details."))  double  __cdecl j0(  double _X);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_j1" ". See online help for details."))  double  __cdecl j1(  double _X);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_jn" ". See online help for details."))  double  __cdecl jn(  int _X,   double _Y);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_y0" ". See online help for details."))  double  __cdecl y0(  double _X);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_y1" ". See online help for details."))  double  __cdecl y1(  double _X);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_yn" ". See online help for details."))  double  __cdecl yn(  int _X,   double _Y);

#line 1005 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\math.h"
#line 1006 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\math.h"


}

extern "C++" {

template<class _Ty> inline
        _Ty _Pow_int(_Ty _X, int _Y) throw()
        {unsigned int _N;
        if (_Y >= 0)
                _N = (unsigned int)_Y;
        else
                _N = (unsigned int)(-_Y);
        for (_Ty _Z = _Ty(1); ; _X *= _X)
                {if ((_N & 1) != 0)
                        _Z *= _X;
                if ((_N >>= 1) == 0)
                        return (_Y < 0 ? _Ty(1) / _Z : _Z); }}

inline double __cdecl abs(  double _X) throw()
        {return (fabs(_X)); }
inline double __cdecl pow(  double _X,   int _Y) throw()
        {return (_Pow_int(_X, _Y)); }
inline float __cdecl abs(  float _X) throw()
        {return (fabsf(_X)); }
inline float __cdecl acos(  float _X) throw()
        {return (acosf(_X)); }
inline float __cdecl asin(  float _X) throw()
        {return (asinf(_X)); }
inline float __cdecl atan(  float _X) throw()
        {return (atanf(_X)); }
inline float __cdecl atan2(  float _Y,   float _X) throw()
        {return (atan2f(_Y, _X)); }
inline float __cdecl ceil(  float _X) throw()
        {return (ceilf(_X)); }
inline float __cdecl cos(  float _X) throw()
        {return (cosf(_X)); }
inline float __cdecl cosh(  float _X) throw()
        {return (coshf(_X)); }
inline float __cdecl exp(  float _X) throw()
        {return (expf(_X)); }
inline float __cdecl fabs(  float _X) throw()
        {return (fabsf(_X)); }
inline float __cdecl floor(  float _X) throw()
        {return (floorf(_X)); }
inline float __cdecl fmod(  float _X,   float _Y) throw()
        {return (fmodf(_X, _Y)); }
inline float __cdecl frexp(  float _X,   int * _Y) throw()
        {return (frexpf(_X, _Y)); }
inline float __cdecl ldexp(  float _X,   int _Y) throw()
        {return (ldexpf(_X, _Y)); }
inline float __cdecl log(  float _X) throw()
        {return (logf(_X)); }
inline float __cdecl log10(  float _X) throw()
        {return (log10f(_X)); }
inline float __cdecl modf(  float _X,   float * _Y) throw()
        {return (modff(_X, _Y)); }
inline float __cdecl pow(  float _X,   float _Y) throw()
        {return (powf(_X, _Y)); }
inline float __cdecl pow(  float _X,   int _Y) throw()
        {return (_Pow_int(_X, _Y)); }
inline float __cdecl sin(  float _X) throw()
        {return (sinf(_X)); }
inline float __cdecl sinh(  float _X) throw()
        {return (sinhf(_X)); }
inline float __cdecl sqrt(  float _X) throw()
        {return (sqrtf(_X)); }
inline float __cdecl tan(  float _X) throw()
        {return (tanf(_X)); }
inline float __cdecl tanh(  float _X) throw()
        {return (tanhf(_X)); }
inline long double __cdecl abs(  long double _X) throw()
        {return (fabsl(_X)); }
inline long double __cdecl acos(  long double _X) throw()
        {return (acosl(_X)); }
inline long double __cdecl asin(  long double _X) throw()
        {return (asinl(_X)); }
inline long double __cdecl atan(  long double _X) throw()
        {return (atanl(_X)); }
inline long double __cdecl atan2(  long double _Y,   long double _X) throw()
        {return (atan2l(_Y, _X)); }
inline long double __cdecl ceil(  long double _X) throw()
        {return (ceill(_X)); }
inline long double __cdecl cos(  long double _X) throw()
        {return (cosl(_X)); }
inline long double __cdecl cosh(  long double _X) throw()
        {return (coshl(_X)); }
inline long double __cdecl exp(  long double _X) throw()
        {return (expl(_X)); }
inline long double __cdecl fabs(  long double _X) throw()
        {return (fabsl(_X)); }
inline long double __cdecl floor(  long double _X) throw()
        {return (floorl(_X)); }
inline long double __cdecl fmod(  long double _X,   long double _Y) throw()
        {return (fmodl(_X, _Y)); }
inline long double __cdecl frexp(  long double _X,   int * _Y) throw()
        {return (frexpl(_X, _Y)); }
inline long double __cdecl ldexp(  long double _X,   int _Y) throw()
        {return (ldexpl(_X, _Y)); }
inline long double __cdecl log(  long double _X) throw()
        {return (logl(_X)); }
inline long double __cdecl log10(  long double _X) throw()
        {return (log10l(_X)); }
inline long double __cdecl modf(  long double _X,   long double * _Y) throw()
        {return (modfl(_X, _Y)); }
inline long double __cdecl pow(  long double _X,   long double _Y) throw()
        {return (powl(_X, _Y)); }
inline long double __cdecl pow(  long double _X,   int _Y) throw()
        {return (_Pow_int(_X, _Y)); }
inline long double __cdecl sin(  long double _X) throw()
        {return (sinl(_X)); }
inline long double __cdecl sinh(  long double _X) throw()
        {return (sinhl(_X)); }
inline long double __cdecl sqrt(  long double _X) throw()
        {return (sqrtl(_X)); }
inline long double __cdecl tan(  long double _X) throw()
        {return (tanl(_X)); }
inline long double __cdecl tanh(  long double _X) throw()
        {return (tanhl(_X)); }

}
#line 1128 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\math.h"

#pragma pack(pop)

#line 1132 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\math.h"







































#line 1172 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\math.h"

#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\cmath"

 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xtgmath.h"

#pragma once




 


 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

namespace std {
template<class _Ty>
	struct _Promote_to_float
	{	
	typedef typename conditional<is_integral<_Ty>::value,
		double, _Ty>::type type;
	};

template<class _Ty1,
	class _Ty2>
	struct _Common_float_type
	{	
	typedef typename _Promote_to_float<_Ty1>::type _Ty1f;
	typedef typename _Promote_to_float<_Ty2>::type _Ty2f;
	typedef typename conditional<is_same<_Ty1f, long double>::value
		|| is_same<_Ty2f, long double>::value, long double,
		typename conditional<is_same<_Ty1f, double>::value
			|| is_same<_Ty2f, double>::value, double,
			float>::type>::type type;
	};
}




































extern "C" double __cdecl pow(  double,   double);
float __cdecl  pow(  float,   float) throw ();
long double __cdecl  pow(  long double,   long double) throw ();

template<class _Ty1,
	class _Ty2> inline
	typename ::std:: enable_if< ::std:: _Is_numeric<_Ty1>::value
		&& ::std:: _Is_numeric<_Ty2>::value,
		typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type
	pow(const _Ty1 _Left, const _Ty2 _Right)
	{	
	typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type;
	return (:: pow(type(_Left), type(_Right)));
	}


extern "C"  double __cdecl acos(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type acos(_Ty _Left) { return (:: acos((double)_Left)); }
extern "C"  double __cdecl asin(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type asin(_Ty _Left) { return (:: asin((double)_Left)); }
extern "C"  double __cdecl atan(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type atan(_Ty _Left) { return (:: atan((double)_Left)); }
extern "C"  double __cdecl atan2(  double,   double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: _Is_numeric<_Ty1>::value && ::std:: _Is_numeric<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type atan2(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: atan2((type)_Left, (type)_Right)); }
extern "C"  double __cdecl ceil(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type ceil(_Ty _Left) { return (:: ceil((double)_Left)); }
extern "C"  double __cdecl cos(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type cos(_Ty _Left) { return (:: cos((double)_Left)); }
extern "C"  double __cdecl cosh(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type cosh(_Ty _Left) { return (:: cosh((double)_Left)); }
extern "C"  double __cdecl exp(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type exp(_Ty _Left) { return (:: exp((double)_Left)); }

extern "C"  double __cdecl floor(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type floor(_Ty _Left) { return (:: floor((double)_Left)); }
extern "C"  double __cdecl fmod(  double,   double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: _Is_numeric<_Ty1>::value && ::std:: _Is_numeric<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type fmod(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: fmod((type)_Left, (type)_Right)); }
extern "C"  double __cdecl frexp(  double,   int *); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type frexp(_Ty _Left,   int * _Arg2) { return (:: frexp((double)_Left, _Arg2)); }
extern "C"  double __cdecl ldexp(  double,   int); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type ldexp(_Ty _Left,   int _Arg2) { return (:: ldexp((double)_Left, _Arg2)); }
extern "C"  double __cdecl log(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type log(_Ty _Left) { return (:: log((double)_Left)); }
extern "C"  double __cdecl log10(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type log10(_Ty _Left) { return (:: log10((double)_Left)); }


extern "C"  double __cdecl sin(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type sin(_Ty _Left) { return (:: sin((double)_Left)); }
extern "C"  double __cdecl sinh(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type sinh(_Ty _Left) { return (:: sinh((double)_Left)); }
extern "C"  double __cdecl sqrt(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type sqrt(_Ty _Left) { return (:: sqrt((double)_Left)); }
extern "C"  double __cdecl tan(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type tan(_Ty _Left) { return (:: tan((double)_Left)); }
extern "C"  double __cdecl tanh(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type tanh(_Ty _Left) { return (:: tanh((double)_Left)); }

 #line 112 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xtgmath.h"

 
 #pragma warning(pop)
 #pragma pack(pop)
#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xtgmath.h"
#line 118 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xtgmath.h"





#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\cmath"
#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\cmath"

 

namespace std {
using :: acosf; using :: asinf;
using :: atanf; using :: atan2f; using :: ceilf;
using :: cosf; using :: coshf; using :: expf;
using :: fabsf; using :: floorf; using :: fmodf;
using :: frexpf; using :: ldexpf; using :: logf;
using :: log10f; using :: modff; using :: powf;
using :: sinf; using :: sinhf; using :: sqrtf;
using :: tanf; using :: tanhf;

using :: acosl; using :: asinl;
using :: atanl; using :: atan2l; using :: ceill;
using :: cosl; using :: coshl; using :: expl;
using :: fabsl; using :: floorl; using :: fmodl;
using :: frexpl; using :: ldexpl; using :: logl;
using :: log10l; using :: modfl; using :: powl;
using :: sinl; using :: sinhl; using :: sqrtl;
using :: tanl; using :: tanhl;

using :: abs;

using :: acos; using :: asin;
using :: atan; using :: atan2; using :: ceil;
using :: cos; using :: cosh; using :: exp;
using :: fabs; using :: floor; using :: fmod;
using :: frexp; using :: ldexp; using :: log;
using :: log10; using :: modf; using :: pow;
using :: sin; using :: sinh; using :: sqrt;
using :: tan; using :: tanh;

using :: hypot; using :: hypotf;
}
 #line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\cmath"
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\cmath"





#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\limits"



 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

namespace std {








 

		
typedef enum	{	
	denorm_indeterminate = -1,
	denorm_absent = 0,
	denorm_present = 1}
		float_denorm_style;

		
typedef enum	{	
	round_indeterminate = -1,
	round_toward_zero = 0,
	round_to_nearest = 1,
	round_toward_infinity = 2,
	round_toward_neg_infinity = 3}
		float_round_style;

		
struct _Num_base
	{	
	static const float_denorm_style has_denorm = (float_denorm_style)(denorm_absent);
	static const bool has_denorm_loss = (bool)(false);
	static const bool has_infinity = (bool)(false);
	static const bool has_quiet_NaN = (bool)(false);
	static const bool has_signaling_NaN = (bool)(false);
	static const bool is_bounded = (bool)(false);
	static const bool is_exact = (bool)(false);
	static const bool is_iec559 = (bool)(false);
	static const bool is_integer = (bool)(false);
	static const bool is_modulo = (bool)(false);
	static const bool is_signed = (bool)(false);
	static const bool is_specialized = (bool)(false);
	static const bool tinyness_before = (bool)(false);
	static const bool traps = (bool)(false);
	static const float_round_style round_style = (float_round_style)(round_toward_zero);
	static const int digits = (int)(0);
	static const int digits10 = (int)(0);

	static const int max_digits10 = (int)(0);

	static const int max_exponent = (int)(0);
	static const int max_exponent10 = (int)(0);
	static const int min_exponent = (int)(0);
	static const int min_exponent10 = (int)(0);
	static const int radix = (int)(0);
	};

		
template<class _Ty>
	class numeric_limits
		: public _Num_base
	{	
public:
	static _Ty (min)() throw ()
		{	
		return (_Ty(0));
		}

	static _Ty (max)() throw ()
		{	
		return (_Ty(0));
		}

	static _Ty lowest() throw ()
		{	
		return ((min)());
		}

	static _Ty epsilon() throw ()
		{	
		return (_Ty(0));
		}

	static _Ty round_error() throw ()
		{	
		return (_Ty(0));
		}

	static _Ty denorm_min() throw ()
		{	
		return (_Ty(0));
		}

	static _Ty infinity() throw ()
		{	
		return (_Ty(0));
		}

	static _Ty quiet_NaN() throw ()
		{	
		return (_Ty(0));
		}

	static _Ty signaling_NaN() throw ()
		{	
		return (_Ty(0));
		}
	};

template<class _Ty>
	class numeric_limits<const _Ty>
		: public numeric_limits<_Ty>
	{	
	};

template<class _Ty>
	class numeric_limits<volatile _Ty>
		: public numeric_limits<_Ty>
	{	
	};

template<class _Ty>
	class numeric_limits<const volatile _Ty>
		: public numeric_limits<_Ty>
	{	
	};

		
struct _Num_int_base
	: public _Num_base
	{	
	static const bool is_bounded = (bool)(true);
	static const bool is_exact = (bool)(true);
	static const bool is_integer = (bool)(true);
	static const bool is_modulo = (bool)(true);
	static const bool is_specialized = (bool)(true);
	static const int radix = (int)(2);
	};

		
struct _Num_float_base
	: public _Num_base
	{	
	static const float_denorm_style has_denorm = (float_denorm_style)(denorm_present);
	static const bool has_denorm_loss = (bool)(true);
	static const bool has_infinity = (bool)(true);
	static const bool has_quiet_NaN = (bool)(true);
	static const bool has_signaling_NaN = (bool)(true);
	static const bool is_bounded = (bool)(true);
	static const bool is_exact = (bool)(false);
	static const bool is_iec559 = (bool)(true);
	static const bool is_integer = (bool)(false);
	static const bool is_modulo = (bool)(false);
	static const bool is_signed = (bool)(true);
	static const bool is_specialized = (bool)(true);
	static const bool tinyness_before = (bool)(true);
	static const bool traps = (bool)(false);
	static const float_round_style round_style = (float_round_style)(round_to_nearest);
	static const int radix = (int)(2);
	};

		
template<> class numeric_limits<char>
	: public _Num_int_base
	{	
public:
	typedef char _Ty;

	static _Ty (min)() throw ()
		{	
		return ((-128));
		}

	static _Ty (max)() throw ()
		{	
		return (127);
		}

	static _Ty lowest() throw ()
		{	
		return ((min)());
		}

	static _Ty epsilon() throw ()
		{	
		return (0);
		}

	static _Ty round_error() throw ()
		{	
		return (0);
		}

	static _Ty denorm_min() throw ()
		{	
		return (0);
		}

	static _Ty infinity() throw ()
		{	
		return (0);
		}

	static _Ty quiet_NaN() throw ()
		{	
		return (0);
		}

	static _Ty signaling_NaN() throw ()
		{	
		return (0);
		}

	static const bool is_signed = (bool)((-128) != 0);
	static const int digits = (int)(8 - ((-128) != 0 ? 1 : 0));
	static const int digits10 = (int)((8 - ((-128) != 0 ? 1 : 0)) * 301L / 1000);
#line 237 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\limits"
	};

		
template<> class numeric_limits<wchar_t>
	: public _Num_int_base
	{	
public:
	typedef wchar_t _Ty;

	static _Ty (min)() throw ()
		{	
		return ((_Ty)0x0000);
		}

	static _Ty (max)() throw ()
		{	
		return ((_Ty)0xffff);
		}

	static _Ty lowest() throw ()
		{	
		return ((min)());
		}

	static _Ty epsilon() throw ()
		{	
		return (0);
		}

	static _Ty round_error() throw ()
		{	
		return (0);
		}

	static _Ty denorm_min() throw ()
		{	
		return (0);
		}

	static _Ty infinity() throw ()
		{	
		return (0);
		}

	static _Ty quiet_NaN() throw ()
		{	
		return (0);
		}

	static _Ty signaling_NaN() throw ()
		{	
		return (0);
		}

	static const bool is_signed = (bool)(0x0000 != 0);
	static const int digits = (int)(8 * sizeof (wchar_t) - (0x0000 != 0 ? 1 : 0));
#line 294 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\limits"
	static const int digits10 = (int)((8 * sizeof (wchar_t) - (0x0000 != 0 ? 1 : 0)) * 301L / 1000);
#line 296 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\limits"
	};

		
template<> class numeric_limits<_Bool>
	: public _Num_int_base
	{	
public:
	typedef bool _Ty;

	static _Ty (min)() throw ()
		{	
		return (false);
		}

	static _Ty (max)() throw ()
		{	
		return (true);
		}

	static _Ty lowest() throw ()
		{	
		return ((min)());
		}

	static _Ty epsilon() throw ()
		{	
		return (0);
		}

	static _Ty round_error() throw ()
		{	
		return (0);
		}

	static _Ty denorm_min() throw ()
		{	
		return (0);
		}

	static _Ty infinity() throw ()
		{	
		return (0);
		}

	static _Ty quiet_NaN() throw ()
		{	
		return (0);
		}

	static _Ty signaling_NaN() throw ()
		{	
		return (0);
		}

	static const bool is_modulo = (bool)(false);
	static const bool is_signed = (bool)(false);
	static const int digits = (int)(1);
	static const int digits10 = (int)(0);
	};

		
template<> class numeric_limits<signed char>
	: public _Num_int_base
	{	
public:
	typedef signed char _Ty;

	static _Ty (min)() throw ()
		{	
		return ((-128));
		}

	static _Ty (max)() throw ()
		{	
		return (127);
		}

	static _Ty lowest() throw ()
		{	
		return ((min)());
		}

	static _Ty epsilon() throw ()
		{	
		return (0);
		}

	static _Ty round_error() throw ()
		{	
		return (0);
		}

	static _Ty denorm_min() throw ()
		{	
		return (0);
		}

	static _Ty infinity() throw ()
		{	
		return (0);
		}

	static _Ty quiet_NaN() throw ()
		{	
		return (0);
		}

	static _Ty signaling_NaN() throw ()
		{	
		return (0);
		}

	static const bool is_signed = (bool)(true);
	static const int digits = (int)(8 - 1);
	static const int digits10 = (int)((8 - 1) * 301L / 1000);
	};

		
template<> class numeric_limits<unsigned char>
	: public _Num_int_base
	{	
public:
	typedef unsigned char _Ty;

	static _Ty (min)() throw ()
		{	
		return (0);
		}

	static _Ty (max)() throw ()
		{	
		return (0xff);
		}

	static _Ty lowest() throw ()
		{	
		return ((min)());
		}

	static _Ty epsilon() throw ()
		{	
		return (0);
		}

	static _Ty round_error() throw ()
		{	
		return (0);
		}

	static _Ty denorm_min() throw ()
		{	
		return (0);
		}

	static _Ty infinity() throw ()
		{	
		return (0);
		}

	static _Ty quiet_NaN() throw ()
		{	
		return (0);
		}

	static _Ty signaling_NaN() throw ()
		{	
		return (0);
		}

	static const bool is_signed = (bool)(false);
	static const int digits = (int)(8);
	static const int digits10 = (int)(8 * 301L / 1000);
	};

		
template<> class numeric_limits<short>
	: public _Num_int_base
	{	
public:
	typedef short _Ty;

	static _Ty (min)() throw ()
		{	
		return ((-32768));
		}

	static _Ty (max)() throw ()
		{	
		return (32767);
		}

	static _Ty lowest() throw ()
		{	
		return ((min)());
		}

	static _Ty epsilon() throw ()
		{	
		return (0);
		}

	static _Ty round_error() throw ()
		{	
		return (0);
		}

	static _Ty denorm_min() throw ()
		{	
		return (0);
		}

	static _Ty infinity() throw ()
		{	
		return (0);
		}

	static _Ty quiet_NaN() throw ()
		{	
		return (0);
		}

	static _Ty signaling_NaN() throw ()
		{	
		return (0);
		}

	static const bool is_signed = (bool)(true);
	static const int digits = (int)(8 * sizeof (short) - 1);
	static const int digits10 = (int)((8 * sizeof (short) - 1) * 301L / 1000);
#line 526 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\limits"
	};

 
		
template<> class numeric_limits<unsigned short>
	: public _Num_int_base
	{	
public:
	typedef unsigned short _Ty;

	static _Ty (min)() throw ()
		{	
		return (0);
		}

	static _Ty (max)() throw ()
		{	
		return (0xffff);
		}

	static _Ty lowest() throw ()
		{	
		return ((min)());
		}

	static _Ty epsilon() throw ()
		{	
		return (0);
		}

	static _Ty round_error() throw ()
		{	
		return (0);
		}

	static _Ty denorm_min() throw ()
		{	
		return (0);
		}

	static _Ty infinity() throw ()
		{	
		return (0);
		}

	static _Ty quiet_NaN() throw ()
		{	
		return (0);
		}

	static _Ty signaling_NaN() throw ()
		{	
		return (0);
		}

	static const bool is_signed = (bool)(false);
	static const int digits = (int)(8 * sizeof (unsigned short));
	static const int digits10 = (int)(8 * sizeof (unsigned short) * 301L / 1000);
#line 585 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\limits"
	};
 #line 587 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\limits"

 

























































#line 647 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\limits"

		
template<> class numeric_limits<int>
	: public _Num_int_base
	{	
public:
	typedef int _Ty;

	static _Ty (min)() throw ()
		{	
		return ((-2147483647 - 1));
		}

	static _Ty (max)() throw ()
		{	
		return (2147483647);
		}

	static _Ty lowest() throw ()
		{	
		return ((min)());
		}

	static _Ty epsilon() throw ()
		{	
		return (0);
		}

	static _Ty round_error() throw ()
		{	
		return (0);
		}

	static _Ty denorm_min() throw ()
		{	
		return (0);
		}

	static _Ty infinity() throw ()
		{	
		return (0);
		}

	static _Ty quiet_NaN() throw ()
		{	
		return (0);
		}

	static _Ty signaling_NaN() throw ()
		{	
		return (0);
		}

	static const bool is_signed = (bool)(true);
	static const int digits = (int)(8 * sizeof (int) - 1);
	static const int digits10 = (int)((8 * sizeof (int) - 1) * 301L / 1000);
#line 704 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\limits"
	};

		
template<> class numeric_limits<unsigned int>
	: public _Num_int_base
	{	
public:
	typedef unsigned int _Ty;

	static _Ty (min)() throw ()
		{	
		return (0);
		}

	static _Ty (max)() throw ()
		{	
		return (0xffffffff);
		}

	static _Ty lowest() throw ()
		{	
		return ((min)());
		}

	static _Ty epsilon() throw ()
		{	
		return (0);
		}

	static _Ty round_error() throw ()
		{	
		return (0);
		}

	static _Ty denorm_min() throw ()
		{	
		return (0);
		}

	static _Ty infinity() throw ()
		{	
		return (0);
		}

	static _Ty quiet_NaN() throw ()
		{	
		return (0);
		}

	static _Ty signaling_NaN() throw ()
		{	
		return (0);
		}

	static const bool is_signed = (bool)(false);
	static const int digits = (int)(8 * sizeof (unsigned int));
	static const int digits10 = (int)(8 * sizeof (unsigned int) * 301L / 1000);
#line 762 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\limits"
	};

		
template<> class numeric_limits<long>
	: public _Num_int_base
	{	
public:
	typedef long _Ty;

	static _Ty (min)() throw ()
		{	
		return ((-2147483647L - 1));
		}

	static _Ty (max)() throw ()
		{	
		return (2147483647L);
		}

	static _Ty lowest() throw ()
		{	
		return ((min)());
		}

	static _Ty epsilon() throw ()
		{	
		return (0);
		}

	static _Ty round_error() throw ()
		{	
		return (0);
		}

	static _Ty denorm_min() throw ()
		{	
		return (0);
		}

	static _Ty infinity() throw ()
		{	
		return (0);
		}

	static _Ty quiet_NaN() throw ()
		{	
		return (0);
		}

	static _Ty signaling_NaN() throw ()
		{	
		return (0);
		}

	static const bool is_signed = (bool)(true);
	static const int digits = (int)(8 * sizeof (long) - 1);
	static const int digits10 = (int)((8 * sizeof (long) - 1) * 301L / 1000);
#line 820 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\limits"
	};

		
template<> class numeric_limits<unsigned long>
	: public _Num_int_base
	{	
public:
	typedef unsigned long _Ty;

	static _Ty (min)() throw ()
		{	
		return (0);
		}

	static _Ty (max)() throw ()
		{	
		return (0xffffffffUL);
		}

	static _Ty lowest() throw ()
		{	
		return ((min)());
		}

	static _Ty epsilon() throw ()
		{	
		return (0);
		}

	static _Ty round_error() throw ()
		{	
		return (0);
		}

	static _Ty denorm_min() throw ()
		{	
		return (0);
		}

	static _Ty infinity() throw ()
		{	
		return (0);
		}

	static _Ty quiet_NaN() throw ()
		{	
		return (0);
		}

	static _Ty signaling_NaN() throw ()
		{	
		return (0);
		}

	static const bool is_signed = (bool)(false);
	static const int digits = (int)(8 * sizeof (unsigned long));
	static const int digits10 = (int)(8 * sizeof (unsigned long) * 301L / 1000);
#line 878 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\limits"
	};

 

























































#line 939 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\limits"

 
		
template<> class numeric_limits<__int64>
	: public _Num_int_base
	{	
public:
	typedef __int64 _Ty;

	static _Ty (min)() throw ()
		{	
		return (-0x7fffffffffffffff - 1);
		}

	static _Ty (max)() throw ()
		{	
		return (0x7fffffffffffffff);
		}

	static _Ty lowest() throw ()
		{	
		return ((min)());
		}

	static _Ty epsilon() throw ()
		{	
		return (0);
		}

	static _Ty round_error() throw ()
		{	
		return (0);
		}

	static _Ty denorm_min() throw ()
		{	
		return (0);
		}

	static _Ty infinity() throw ()
		{	
		return (0);
		}

	static _Ty quiet_NaN() throw ()
		{	
		return (0);
		}

	static _Ty signaling_NaN() throw ()
		{	
		return (0);
		}

	static const bool is_signed = (bool)(true);
	static const int digits = (int)(8 * sizeof (__int64) - 1);
	static const int digits10 = (int)((8 * sizeof (__int64) - 1) * 301L / 1000);
#line 997 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\limits"
	};

		
template<> class numeric_limits<unsigned __int64>
	: public _Num_int_base
	{	
public:
	typedef unsigned __int64 _Ty;

	static _Ty (min)() throw ()
		{	
		return (0);
		}

	static _Ty (max)() throw ()
		{	
		return (0xffffffffffffffff);
		}

	static _Ty lowest() throw ()
		{	
		return ((min)());
		}

	static _Ty epsilon() throw ()
		{	
		return (0);
		}

	static _Ty round_error() throw ()
		{	
		return (0);
		}

	static _Ty denorm_min() throw ()
		{	
		return (0);
		}

	static _Ty infinity() throw ()
		{	
		return (0);
		}

	static _Ty quiet_NaN() throw ()
		{	
		return (0);
		}

	static _Ty signaling_NaN() throw ()
		{	
		return (0);
		}

	static const bool is_signed = (bool)(false);
	static const int digits = (int)(8 * sizeof (unsigned __int64));
	static const int digits10 = (int)(8 * sizeof (unsigned __int64) * 301L / 1000);
#line 1055 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\limits"
	};
 #line 1057 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\limits"

		
template<> class numeric_limits<float>
	: public _Num_float_base
	{	
public:
	typedef float _Ty;

	static _Ty (min)() throw ()
		{	
		return (1.175494351e-38F);
		}

	static _Ty (max)() throw ()
		{	
		return (3.402823466e+38F);
		}

	static _Ty lowest() throw ()
		{	
		return (-(max)());
		}

	static _Ty epsilon() throw ()
		{	
		return (1.192092896e-07F);
		}

	static _Ty round_error() throw ()
		{	
		return (0.5);
		}

	static _Ty denorm_min() throw ()
		{	
		return (:: _FDenorm._Float);
		}

	static _Ty infinity() throw ()
		{	
		return (:: _FInf._Float);
		}

	static _Ty quiet_NaN() throw ()
		{	
		return (:: _FNan._Float);
		}

	static _Ty signaling_NaN() throw ()
		{	
		return (:: _FSnan._Float);
		}

	static const int digits = (int)(24);
	static const int digits10 = (int)(6);

	static const int max_digits10 = (int)(2 + 24 * 301L / 1000);

	static const int max_exponent = (int)((int)128);
	static const int max_exponent10 = (int)((int)38);
	static const int min_exponent = (int)((int)(-125));
	static const int min_exponent10 = (int)((int)(-37));
	};

		
template<> class numeric_limits<double>
	: public _Num_float_base
	{	
public:
	typedef double _Ty;

	static _Ty (min)() throw ()
		{	
		return (2.2250738585072014e-308);
		}

	static _Ty (max)() throw ()
		{	
		return (1.7976931348623158e+308);
		}

	static _Ty lowest() throw ()
		{	
		return (-(max)());
		}

	static _Ty epsilon() throw ()
		{	
		return (2.2204460492503131e-016);
		}

	static _Ty round_error() throw ()
		{	
		return (0.5);
		}

	static _Ty denorm_min() throw ()
		{	
		return (:: _Denorm._Double);
		}

	static _Ty infinity() throw ()
		{	
		return (:: _Inf._Double);
		}

	static _Ty quiet_NaN() throw ()
		{	
		return (:: _Nan._Double);
		}

	static _Ty signaling_NaN() throw ()
		{	
		return (:: _Snan._Double);
		}

	static const int digits = (int)(53);
	static const int digits10 = (int)(15);

	static const int max_digits10 = (int)(2 + 53 * 301L / 1000);

	static const int max_exponent = (int)((int)1024);
	static const int max_exponent10 = (int)((int)308);
	static const int min_exponent = (int)((int)(-1021));
	static const int min_exponent10 = (int)((int)(-307));
	};

		
template<> class numeric_limits<long double>
	: public _Num_float_base
	{	
public:
	typedef long double _Ty;

	static _Ty (min)() throw ()
		{	
		return (2.2250738585072014e-308);
		}

	static _Ty (max)() throw ()
		{	
		return (1.7976931348623158e+308);
		}

	static _Ty lowest() throw ()
		{	
		return (-(max)());
		}

	static _Ty epsilon() throw ()
		{	
		return (2.2204460492503131e-016);
		}

	static _Ty round_error() throw ()
		{	
		return (0.5);
		}

	static _Ty denorm_min() throw ()
		{	
		return (:: _LDenorm._Long_double);
		}

	static _Ty infinity() throw ()
		{	
		return (:: _LInf._Long_double);
		}

	static _Ty quiet_NaN() throw ()
		{	
		return (:: _LNan._Long_double);
		}

	static _Ty signaling_NaN() throw ()
		{	
		return (:: _LSnan._Long_double);
		}

	static const int digits = (int)(53);
	static const int digits10 = (int)(15);

	static const int max_digits10 = (int)(2 + 53 * 301L / 1000);

	static const int max_exponent = (int)((int)1024);
	static const int max_exponent10 = (int)((int)308);
	static const int min_exponent = (int)((int)(-1021));
	static const int min_exponent10 = (int)((int)(-307));
	};

  













































































































































































































#line 1454 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\limits"
}
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 1459 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\limits"
#line 1460 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\limits"






#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xmemory0"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\new"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\exception"

#pragma once






 #pragma pack(push,8)
 #pragma warning(push,3)
 
 










namespace std {

  


  



  



}

 

 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\eh.h"












#pragma once

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"







































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\eh.h"








#pragma pack(push,8)







typedef void (__cdecl *terminate_function)();
typedef void (__cdecl *terminate_handler)();
typedef void (__cdecl *unexpected_function)();
typedef void (__cdecl *unexpected_handler)();





#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\eh.h"








struct _EXCEPTION_POINTERS;

typedef void (__cdecl *_se_translator_function)(unsigned int, struct _EXCEPTION_POINTERS*);
#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\eh.h"

 __declspec(noreturn) void __cdecl terminate(void);
 __declspec(noreturn) void __cdecl unexpected(void);

 int __cdecl _is_exception_typeof(  const type_info &_Type,   struct _EXCEPTION_POINTERS * _ExceptionPtr);



 terminate_function __cdecl set_terminate(  terminate_function _NewPtFunc);
extern "C"  terminate_function __cdecl _get_terminate(void);
 unexpected_function __cdecl set_unexpected(  unexpected_function _NewPtFunc);
extern "C"  unexpected_function __cdecl _get_unexpected(void);
#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\eh.h"



 _se_translator_function __cdecl _set_se_translator(  _se_translator_function _NewPtFunc);
#line 72 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\eh.h"
 bool __cdecl __uncaught_exception();









#pragma pack(pop)
#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\eh.h"
#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\eh.h"
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\exception"
 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\malloc.h"














#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"







































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\malloc.h"





#pragma pack(push,8)


extern "C" {
#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\malloc.h"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\malloc.h"



















typedef struct _heapinfo {
        int * _pentry;
        size_t _size;
        int _useflag;
        } _HEAPINFO;

#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\malloc.h"



































#line 101 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\malloc.h"







































#line 141 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\malloc.h"


 int     __cdecl _resetstkoflw (void);
#line 145 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\malloc.h"



 unsigned long __cdecl _set_malloc_crt_max_wait(  unsigned long _NewValue);







#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\malloc.h"

       void *  __cdecl _expand(  void * _Memory,   size_t _NewSize);
   size_t  __cdecl _msize(  void * _Memory);




#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\malloc.h"

    void *          __cdecl _alloca(  size_t _Size);


  int     __cdecl _heapwalk(  _HEAPINFO * _EntryInfo);
 intptr_t __cdecl _get_heap_handle(void);
#line 172 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\malloc.h"


   int     __cdecl _heapadd(  void * _Memory,   size_t _Size);
   int     __cdecl _heapchk(void);
   int     __cdecl _heapmin(void);
 int     __cdecl _heapset(  unsigned int _Fill);
 size_t  __cdecl _heapused(size_t * _Used, size_t * _Commit);
#line 180 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\malloc.h"













#line 194 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\malloc.h"

typedef char __static_assert_t[ (sizeof(unsigned int) <= 8) ];


#pragma warning(push)
#pragma warning(disable:6540)
__inline void *_MarkAllocaS(   void *_Ptr, unsigned int _Marker)
{
    if (_Ptr)
    {
        *((unsigned int*)_Ptr) = _Marker;
        _Ptr = (char*)_Ptr + 8;
    }
    return _Ptr;
}

__inline int _MallocaIsSizeInRange(size_t size)
{
    return size + 8 > size;
}
#pragma warning(pop)
#line 216 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\malloc.h"










#line 227 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\malloc.h"








#line 236 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\malloc.h"










#line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\malloc.h"






__pragma(warning(push))
__pragma(warning(disable: 6014))
__declspec(noalias) __inline void __cdecl _freea(    void * _Memory)
{
    unsigned int _Marker;
    if (_Memory)
    {
        _Memory = (char*)_Memory - 8;
        _Marker = *(unsigned int *)_Memory;
        if (_Marker == 0xDDDD)
        {
            free(_Memory);
        }

        else if (_Marker != 0xCCCC)
        {
            #pragma warning(suppress: 4548) 
            ((void)0);
        }
#line 273 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\malloc.h"
    }
}
__pragma(warning(pop))
#line 277 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\malloc.h"
#line 278 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\malloc.h"
#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\malloc.h"




#line 284 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\malloc.h"





}
#line 291 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\malloc.h"

#pragma pack(pop)

#line 295 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\malloc.h"
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\exception"
 

 

#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\exception"

 





























#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\exception"

 namespace std {





 
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\exception"

class  exception
	{   
public:
	  exception();
	 explicit  exception(const char * const &);
	  exception(const char * const &, int);
	  exception(const exception&);
	 exception&  operator=(const exception&);
	 virtual  ~exception() throw ();
	 virtual const char *  what() const;

private:
	 void  _Copy_str(const char *);
	 void  _Tidy();

	const char * _Mywhat;
	bool _Mydofree;
	};

















































































using ::set_terminate; using ::terminate_handler; using ::terminate; using ::set_unexpected; using ::unexpected_handler; using ::unexpected;

typedef void (__cdecl *_Prhand)(const exception&);

 bool __cdecl uncaught_exception();


inline terminate_handler __cdecl get_terminate()
	{	
	return (_get_terminate());
	}

inline unexpected_handler __cdecl get_unexpected()
	{	
	return (_get_unexpected());
	}
#line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\exception"

}

 




















































































































#line 326 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\exception"


namespace std {


#line 332 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\exception"

		
class bad_exception : public exception
	{	
public:
	 bad_exception(const char *_Message = "bad exception")
		throw ()
		: exception(_Message)
		{	
		}

	virtual  ~bad_exception() throw ()
		{	
		}

 





#line 354 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\exception"

	};

		
class bad_alloc : public exception
	{	
public:
	 bad_alloc() throw ()
		: exception("bad allocation", 1)
		{	
		}

	virtual  ~bad_alloc() throw ()
		{	
		}

private:
	friend class bad_array_new_length;

	 bad_alloc(const char *_Message) throw ()
		: exception(_Message, 1)
		{	
		}

 





#line 385 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\exception"

	};

		
class bad_array_new_length
	: public bad_alloc
	{	
public:

	bad_array_new_length() throw ()
		: bad_alloc("bad array new length")
		{	
		}
	};


}









#line 412 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\exception"

 void __cdecl __ExceptionPtrCreate(  void* );
 void __cdecl __ExceptionPtrDestroy(  void* );
 void __cdecl __ExceptionPtrCopy(  void*,   const void* );
 void __cdecl __ExceptionPtrAssign(  void*,   const void* );
 bool __cdecl __ExceptionPtrCompare(  const void*,   const void*);
 bool __cdecl __ExceptionPtrToBool(  const void*);
 void __cdecl __ExceptionPtrSwap(  void*,   void*);

 void __cdecl __ExceptionPtrCurrentException(  void*);
 void __cdecl __ExceptionPtrRethrow(  const void*);
 void __cdecl __ExceptionPtrCopyException(  void*,   const void*,   const void*);

namespace std {

class exception_ptr
	{
public:
	exception_ptr()
		{
		__ExceptionPtrCreate(this);
		}
	exception_ptr(nullptr_t)
		{
		__ExceptionPtrCreate(this);
		}
	~exception_ptr() throw ()
		{
		__ExceptionPtrDestroy(this);
		}
	exception_ptr(const exception_ptr& _Rhs)
		{
		__ExceptionPtrCopy(this, &_Rhs);
		}
	exception_ptr& operator=(const exception_ptr& _Rhs)
		{
		__ExceptionPtrAssign(this, &_Rhs);
		return *this;
		}
	exception_ptr& operator=(nullptr_t)
		{
		exception_ptr _Ptr;
		__ExceptionPtrAssign(this, &_Ptr);
		return *this;
		}

	typedef exception_ptr _Myt;

	explicit operator bool() const throw ()
		{
		return __ExceptionPtrToBool(this);
		}

	void _RethrowException() const
		{
		__ExceptionPtrRethrow(this);
		}

	static exception_ptr _Current_exception()
		{
		exception_ptr _Retval;
		__ExceptionPtrCurrentException(&_Retval);
		return _Retval;
		}
	static exception_ptr _Copy_exception(  void* _Except,   const void* _Ptr)
		{
		exception_ptr _Retval = 0;
		if (!_Ptr)
			{
			
			return _Retval;
			}
		__ExceptionPtrCopyException(&_Retval, _Except, _Ptr);
		return _Retval;
		}
private:
	void* _Data1;
	void* _Data2;
	};

inline void swap(exception_ptr& _Lhs, exception_ptr& _Rhs)
	{
	__ExceptionPtrSwap(&_Lhs, &_Rhs);
	}

inline bool operator==(const exception_ptr& _Lhs, const exception_ptr& _Rhs)
	{
	return __ExceptionPtrCompare(&_Lhs, &_Rhs);
	}

inline bool operator==(nullptr_t, const exception_ptr& _Rhs)
	{
	return !_Rhs;
	}

inline bool operator==(const exception_ptr& _Lhs, nullptr_t)
	{
	return !_Lhs;
	}

inline bool operator!=(const exception_ptr& _Lhs, const exception_ptr& _Rhs)
	{
	return !(_Lhs == _Rhs);
	}

inline bool operator!=(nullptr_t _Lhs, const exception_ptr& _Rhs)
	{
	return !(_Lhs == _Rhs);
	}

inline bool operator!=(const exception_ptr& _Lhs, nullptr_t _Rhs)
	{
	return !(_Lhs == _Rhs);
	}

inline exception_ptr current_exception()
	{
	return exception_ptr::_Current_exception();
	}

inline void rethrow_exception(  exception_ptr _P)
	{
	_P._RethrowException();
	}

template <class _E> void *__GetExceptionInfo(_E);

template<class _E> exception_ptr make_exception_ptr(_E _Except)
	{
	return exception_ptr::_Copy_exception(::std:: addressof(_Except), __GetExceptionInfo(_Except));
	}
}







 
 #pragma warning(pop)
 #pragma pack(pop)

#line 556 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\exception"
#line 557 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\exception"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\new"

 #pragma pack(push,8)
 #pragma warning(push,3)
 

  








#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\new"

namespace std {

		
 




typedef void (__cdecl * new_handler) ();
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\new"
 #line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\new"

 
struct nothrow_t
	{	
	};

extern const nothrow_t nothrow;	
 #line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\new"

		
 new_handler __cdecl set_new_handler(  new_handler)
	throw ();	

 new_handler __cdecl get_new_handler()
	throw ();	
}

		
void __cdecl operator delete(void *) throw ();
#pragma warning (suppress: 4985)
    void *__cdecl operator new(size_t _Size) throw (...);

 
  
inline void *__cdecl operator new(size_t, void *_Where) throw ()
	{	
	return (_Where);
	}

inline void __cdecl operator delete(void *, void *) throw ()
	{	
	}
 #line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\new"

 
  
inline void *__cdecl operator new[](size_t, void *_Where) throw ()
	{	
	return (_Where);
	}

inline void __cdecl operator delete[](void *, void *) throw ()
	{	
	}
 #line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\new"

void __cdecl operator delete[](void *) throw ();	

    void *__cdecl operator new[](size_t _Size)
	throw (...);	

 
  
    void *__cdecl operator new(size_t _Size, const ::std:: nothrow_t&)
	throw ();

    void *__cdecl operator new[](size_t _Size, const ::std:: nothrow_t&)
	throw ();	

void __cdecl operator delete(void *, const ::std:: nothrow_t&)
	throw ();	

void __cdecl operator delete[](void *, const ::std:: nothrow_t&)
	throw ();	
 #line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\new"


 
using ::std:: new_handler;
 #line 104 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\new"

 
 #pragma warning(pop)
 #pragma pack(pop)

#line 110 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\new"
#line 111 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\new"





#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xmemory0"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xutility"

#pragma once







 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

namespace std {
		

 












#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xutility"
  
 #line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xutility"

		
struct _Container_proxy;
struct _Container_base12;
struct _Iterator_base12;

struct  _Container_base0
	{	
	void _Orphan_all()
		{	
		}

	void _Swap_all(_Container_base0&)
		{	
		}
	};

struct _Iterator_base0
	{	
	void _Adopt(const void *)
		{	
		}

	const _Container_base0 *_Getcont() const
		{	
		return (0);
		}
	};

		
struct _Container_proxy
	{	
	_Container_proxy()
		: _Mycont(0), _Myfirstiter(0)
		{	
		}

	const _Container_base12 *_Mycont;
	_Iterator_base12 *_Myfirstiter;
	};

struct  _Container_base12
	{	
public:
	_Container_base12()
		: _Myproxy(0)
		{	
		}

	_Container_base12(const _Container_base12&)
		: _Myproxy(0)
		{	
		}

	_Container_base12& operator=(const _Container_base12&)
		{	
		return (*this);
		}

	~_Container_base12() throw ()
		{	
		_Orphan_all();
		}

	_Iterator_base12 **_Getpfirst() const
		{	
		return (_Myproxy == 0 ? 0 : &_Myproxy->_Myfirstiter);
		}

	void _Orphan_all();	
	void _Swap_all(_Container_base12&);	

	_Container_proxy *_Myproxy;
	};

struct _Iterator_base12
	{	
public:
	_Iterator_base12()
		: _Myproxy(0), _Mynextiter(0)
		{	
		}

	_Iterator_base12(const _Iterator_base12& _Right)
		: _Myproxy(0), _Mynextiter(0)
		{	
		*this = _Right;
		}

	_Iterator_base12& operator=(const _Iterator_base12& _Right)
		{	
		if (_Myproxy == _Right._Myproxy)
			;
		else if (_Right._Myproxy != 0)
			_Adopt(_Right._Myproxy->_Mycont);
		else
			{	
 


#line 135 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xutility"
			}
		return (*this);
		}

	~_Iterator_base12() throw ()
		{	
 


#line 145 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xutility"
		}

	void _Adopt(const _Container_base12 *_Parent)
		{	
		if (_Parent == 0)
			{	
 


#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xutility"
			}
		else
			{	
			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;

 









#line 171 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xutility"
			_Myproxy = _Parent_proxy;
 #line 173 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xutility"
			}
		}

	void _Clrcont()
		{	
		_Myproxy = 0;
		}

	const _Container_base12 *_Getcont() const
		{	
		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);
		}

	_Iterator_base12 **_Getpnext()
		{	
		return (&_Mynextiter);
		}

	void _Orphan_me()
		{	
 











#line 206 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xutility"
		}

	_Container_proxy *_Myproxy;
	_Iterator_base12 *_Mynextiter;
	};

		
inline void _Container_base12::_Orphan_all()
	{	
 









#line 226 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xutility"
	}

inline void _Container_base12::_Swap_all(_Container_base12& _Right)
	{	
 

#line 233 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xutility"

	_Container_proxy *_Temp = _Myproxy;
	_Myproxy = _Right._Myproxy;
	_Right._Myproxy = _Temp;

	if (_Myproxy != 0)
		_Myproxy->_Mycont = (_Container_base12 *)this;
	if (_Right._Myproxy != 0)
		_Right._Myproxy->_Mycont = (_Container_base12 *)&_Right;
	}

 
typedef _Container_base0 _Container_base;
typedef _Iterator_base0 _Iterator_base;

 


#line 252 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xutility"

		

		
 


		
template<class _Ty>
	struct _Get_unchecked_type
		{ template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::_Unchecked_type>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<_Ty>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };
#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xutility"

		
template<class _Ty>
	struct _Is_checked_helper
		{ template<class _Uty> static auto _Fn(int, _Identity<typename _Uty::_Unchecked_type> * = 0, _Identity<typename _Uty::_Unchecked_type> * = 0, _Identity<typename _Uty::_Unchecked_type> * = 0) -> true_type; template<class _Uty> static auto _Fn(_Wrap_int) -> false_type; typedef decltype(_Fn<_Ty>(0)) type; };

		
template<class _Iter> inline
	typename _Is_checked_helper<_Iter>::type _Is_checked(_Iter)
	{	
	return (typename _Is_checked_helper<_Iter>::type());
	}

		
template<class _Iter> inline
	_Iter _Unchecked(_Iter _Src)
	{	
	return (_Src);
	}

		
template<class _Iter,
	class _UIter> inline
	_Iter& _Rechecked(_Iter& _Dest, _UIter _Src)
	{	
	_Dest = _Src;
	return (_Dest);
	}

		
		
struct input_iterator_tag
	{	
	};

struct _Mutable_iterator_tag
	{	
	};

struct output_iterator_tag
	: _Mutable_iterator_tag
	{	
	};

struct forward_iterator_tag
	: input_iterator_tag, _Mutable_iterator_tag
	{	
	};

struct bidirectional_iterator_tag
	: forward_iterator_tag
	{	
	};

struct random_access_iterator_tag
	: bidirectional_iterator_tag
	{	
	};

		
struct _Nonscalar_ptr_iterator_tag
	{	
	};
struct _Scalar_ptr_iterator_tag
	{	
	};

		
template<class _Category,
	class _Ty,
	class _Diff = ptrdiff_t,
	class _Pointer = _Ty *,
	class _Reference = _Ty&>
	struct iterator
	{	
	typedef _Category iterator_category;
	typedef _Ty value_type;
	typedef _Diff difference_type;
	typedef _Diff distance_type;	
	typedef _Pointer pointer;
	typedef _Reference reference;
	};

template<class _Category,
	class _Ty,
	class _Diff,
	class _Pointer,
	class _Reference,
	class _Base>
	struct _Iterator012
		: public _Base
	{	
	typedef _Category iterator_category;
	typedef _Ty value_type;
	typedef _Diff difference_type;
	typedef _Diff distance_type;	
	typedef _Pointer pointer;
	typedef _Reference reference;
	};


typedef iterator<output_iterator_tag, void, void, void, void> _Outit;

		
template<class _Iter>
	struct iterator_traits
	{	
	typedef typename _Iter::iterator_category iterator_category;
	typedef typename _Iter::value_type value_type;
	typedef typename _Iter::difference_type difference_type;
	typedef difference_type distance_type;	
	typedef typename _Iter::pointer pointer;
	typedef typename _Iter::reference reference;
	};

template<class _Ty>
	struct iterator_traits<_Ty *>
	{	
	typedef random_access_iterator_tag iterator_category;
	typedef _Ty value_type;
	typedef ptrdiff_t difference_type;
	typedef ptrdiff_t distance_type;	
	typedef _Ty *pointer;
	typedef _Ty& reference;
	};

template<class _Ty>
	struct iterator_traits<const _Ty *>
	{	
	typedef random_access_iterator_tag iterator_category;
	typedef _Ty value_type;
	typedef ptrdiff_t difference_type;
	typedef ptrdiff_t distance_type;	
	typedef const _Ty *pointer;
	typedef const _Ty& reference;
	};

		
template<class _Iter> inline
	typename iterator_traits<_Iter>::iterator_category
		_Iter_cat(const _Iter&)
	{	
	typename iterator_traits<_Iter>::iterator_category _Cat;
	return (_Cat);
	}

		
template<class _Iter1,
	class _Iter2> inline
	_Nonscalar_ptr_iterator_tag _Ptr_cat(_Iter1&, _Iter2&)
	{	
	_Nonscalar_ptr_iterator_tag _Cat;
	return (_Cat);
	}

template<class _Elem1,
	class _Elem2>
	struct _Ptr_cat_helper
	{	
	typedef _Nonscalar_ptr_iterator_tag type;
	};

template<class _Elem>
	struct _Ptr_cat_helper<_Elem, _Elem>
	{	
	typedef typename _If<is_scalar<_Elem>::value,
		_Scalar_ptr_iterator_tag,
		_Nonscalar_ptr_iterator_tag>::type type;
	};

template<class _Anything>
	struct _Ptr_cat_helper<_Anything *, const _Anything *>
	{	
	typedef _Scalar_ptr_iterator_tag type;
	};

template<class _Elem1,
	class _Elem2> inline
	typename _Ptr_cat_helper<_Elem1, _Elem2>::type
		_Ptr_cat(_Elem1 *, _Elem2 *)
	{	
	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
	return (_Cat);
	}

template<class _Elem1,
	class _Elem2> inline
	typename _Ptr_cat_helper<_Elem1, _Elem2>::type
		_Ptr_cat(const _Elem1 *, _Elem2 *)
	{	
	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
	return (_Cat);
	}

		

 
  
  
  
  
  
  
  
  

 







































































































































































#line 639 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xutility"

		
		

template<class _Iter> inline
	typename iterator_traits<_Iter>::value_type *_Val_type(_Iter)
	{	
	return (0);
	}

		
template<class _InIt,
	class _Diff> inline
	void _Advance(_InIt& _Where, _Diff _Off, input_iterator_tag)
	{	
 


#line 658 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xutility"

	for (; 0 < _Off; --_Off)
		++_Where;
	}

template<class _FwdIt,
	class _Diff> inline
	void _Advance(_FwdIt& _Where, _Diff _Off, forward_iterator_tag)
	{	
 


#line 671 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xutility"

	for (; 0 < _Off; --_Off)
		++_Where;
	}

template<class _BidIt,
	class _Diff> inline
	void _Advance(_BidIt& _Where, _Diff _Off, bidirectional_iterator_tag)
	{	
	for (; 0 < _Off; --_Off)
		++_Where;
	for (; _Off < 0; ++_Off)
		--_Where;
	}

template<class _RanIt,
	class _Diff> inline
	void _Advance(_RanIt& _Where, _Diff _Off, random_access_iterator_tag)
	{	
	_Where += _Off;
	}

template<class _InIt,
	class _Diff> inline
	void advance(_InIt& _Where, _Diff _Off)
	{	
	_Advance(_Where, _Off, _Iter_cat(_Where));
	}

		

template<class _Iter> inline
	typename iterator_traits<_Iter>::difference_type
		*_Dist_type(_Iter)
	{	
	return (0);
	}

		
template<class _InIt,
	class _Diff> inline
		void _Distance2(_InIt _First, _InIt _Last, _Diff& _Off,
			input_iterator_tag)
	{	
	for (; _First != _Last; ++_First)
		++_Off;
	}

template<class _FwdIt,
	class _Diff> inline
		void _Distance2(_FwdIt _First, _FwdIt _Last, _Diff& _Off,
			forward_iterator_tag)
	{	
	for (; _First != _Last; ++_First)
		++_Off;
	}

template<class _BidIt,
	class _Diff> inline
		void _Distance2(_BidIt _First, _BidIt _Last, _Diff& _Off,
			bidirectional_iterator_tag)
	{	
	for (; _First != _Last; ++_First)
		++_Off;
	}

template<class _RanIt,
	class _Diff> inline
		void _Distance2(_RanIt _First, _RanIt _Last, _Diff& _Off,
			random_access_iterator_tag)
	{	
 





#line 749 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xutility"

	_Off += _Last - _First;
	}

template<class _InIt> inline
	typename iterator_traits<_InIt>::difference_type
		distance(_InIt _First, _InIt _Last)
	{	
	typename iterator_traits<_InIt>::difference_type _Off = 0;
	_Distance2(_First, _Last, _Off, _Iter_cat(_First));
	return (_Off);
	}

template<class _InIt,
	class _Diff> inline
		void _Distance(_InIt _First, _InIt _Last, _Diff& _Off)
	{	
	_Distance2(_First, _Last, _Off, _Iter_cat(_First));
	}

		
template<class _FwdIt> inline
	_FwdIt next(_FwdIt _First,
		typename iterator_traits<_FwdIt>::difference_type _Off = 1)
	{	
	static_assert((is_base_of<forward_iterator_tag,
		typename iterator_traits<_FwdIt>::iterator_category>::value),
		"next requires forward iterator");

	::std:: advance(_First, _Off);
	return (_First);
	}

		
template<class _BidIt> inline
	_BidIt prev(_BidIt _First,
		typename iterator_traits<_BidIt>::difference_type _Off = 1)
	{	
	static_assert((is_base_of<bidirectional_iterator_tag,
		typename iterator_traits<_BidIt>::iterator_category>::value),
		"prev requires bidirectional iterator");

	::std:: advance(_First, -_Off);
	return (_First);
	}


		
template<class _Ty>
	struct pointer_traits;

template<class _RanIt,
	class _Base>
	class _Revranit
		: public _Base
	{	
public:
	typedef _Revranit<_RanIt, _Base> _Myt;
	typedef typename _Base::difference_type difference_type;
	typedef typename _Base::pointer pointer;
	typedef typename _Base::reference reference;
	typedef _RanIt iterator_type;

	_Revranit()
		{	
		}

	explicit _Revranit(_RanIt _Right)
		: current(_Right)
		{	
		}

	template<class _RanIt2,
		class _Base2>
		_Revranit(const _Revranit<_RanIt2, _Base2>& _Right)
		: current(_Right.base())
		{	
		}

	_RanIt base() const
		{	
		return (current);
		}

	reference operator*() const
		{	
		_RanIt _Tmp = current;
		return (*--_Tmp);
		}

	pointer operator->() const
		{	
		return (::std:: pointer_traits<pointer>::pointer_to(**this));
		}

	_Myt& operator++()
		{	
		--current;
		return (*this);
		}

	_Myt operator++(int)
		{	
		_Myt _Tmp = *this;
		--current;
		return (_Tmp);
		}

	_Myt& operator--()
		{	
		++current;
		return (*this);
		}

	_Myt operator--(int)
		{	
		_Myt _Tmp = *this;
		++current;
		return (_Tmp);
		}

	template<class _RanIt2,
		class _Base2>
		bool _Equal(const _Revranit<_RanIt2, _Base2>& _Right) const
		{	
		return (current == _Right.base());
		}



	_Myt& operator+=(difference_type _Off)
		{	
		current -= _Off;
		return (*this);
		}

	_Myt operator+(difference_type _Off) const
		{	
		return (_Myt(current - _Off));
		}

	_Myt& operator-=(difference_type _Off)
		{	
		current += _Off;
		return (*this);
		}

	_Myt operator-(difference_type _Off) const
		{	
		return (_Myt(current + _Off));
		}

	reference operator[](difference_type _Off) const
		{	
		return (*(*this + _Off));
		}

	template<class _RanIt2,
		class _Base2>
		bool _Less(const _Revranit<_RanIt2, _Base2>& _Right) const
		{	
		return (_Right.base() < current);
		}

	difference_type operator-(const _Myt& _Right) const
		{	
		return (_Right.base() - current);
		}

protected:
	_RanIt current;	
	};

		
template<class _RanIt,
	class _Base,
	class _Diff> inline
	_Revranit<_RanIt, _Base>
		operator+(_Diff _Off,
		const _Revranit<_RanIt, _Base>& _Right)
	{	
	return (_Right + _Off);
	}

template<class _RanIt1,
	class _Base1,
	class _RanIt2,
	class _Base2>
	auto inline operator-(
		const _Revranit<_RanIt1, _Base1>& _Left,
		const _Revranit<_RanIt2, _Base2>& _Right)
			-> decltype(_Right.base() - _Left.base())
	{	
	return (_Right.base() - _Left.base());
	}

template<class _RanIt1,
	class _Base1,
	class _RanIt2,
	class _Base2> inline
	bool operator==(
		const _Revranit<_RanIt1, _Base1>& _Left,
		const _Revranit<_RanIt2, _Base2>& _Right)
	{	
	return (_Left._Equal(_Right));
	}

template<class _RanIt1,
	class _Base1,
	class _RanIt2,
	class _Base2> inline
	bool operator!=(
		const _Revranit<_RanIt1, _Base1>& _Left,
		const _Revranit<_RanIt2, _Base2>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _RanIt1,
	class _Base1,
	class _RanIt2,
	class _Base2> inline
	bool operator<(
		const _Revranit<_RanIt1, _Base1>& _Left,
		const _Revranit<_RanIt2, _Base2>& _Right)
	{	
	return (_Left._Less(_Right));
	}

template<class _RanIt1,
	class _Base1,
	class _RanIt2,
	class _Base2> inline
	bool operator>(
		const _Revranit<_RanIt1, _Base1>& _Left,
		const _Revranit<_RanIt2, _Base2>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _RanIt1,
	class _Base1,
	class _RanIt2,
	class _Base2> inline
	bool operator<=(
		const _Revranit<_RanIt1, _Base1>& _Left,
		const _Revranit<_RanIt2, _Base2>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _RanIt1,
	class _Base1,
	class _RanIt2,
	class _Base2> inline
	bool operator>=(
		const _Revranit<_RanIt1, _Base1>& _Left,
		const _Revranit<_RanIt2, _Base2>& _Right)
	{	
	return (!(_Left < _Right));
	}

		
template<class _RanIt>
	class reverse_iterator
		: public _Revranit<_RanIt, iterator<
			typename iterator_traits<_RanIt>::iterator_category,
			typename iterator_traits<_RanIt>::value_type,
			typename iterator_traits<_RanIt>::difference_type,
			typename iterator_traits<_RanIt>::pointer,
			typename iterator_traits<_RanIt>::reference> >
	{	
	typedef reverse_iterator<_RanIt> _Myt;
	typedef _Revranit<_RanIt, iterator<
		typename iterator_traits<_RanIt>::iterator_category,
		typename iterator_traits<_RanIt>::value_type,
		typename iterator_traits<_RanIt>::difference_type,
		typename iterator_traits<_RanIt>::pointer,
		typename iterator_traits<_RanIt>::reference> > _Mybase;

public:
	typedef typename iterator_traits<_RanIt>::difference_type difference_type;
	typedef typename iterator_traits<_RanIt>::pointer pointer;
	typedef typename iterator_traits<_RanIt>::reference reference;
	typedef _RanIt iterator_type;

	reverse_iterator()
		{	
		}

	explicit reverse_iterator(_RanIt _Right)
		: _Mybase(_Right)
		{	
		}

	template<class _Other>
		reverse_iterator(const reverse_iterator<_Other>& _Right)
		: _Mybase(_Right.base())
		{	
		}

	reverse_iterator(_Mybase _Right)
		: _Mybase(_Right)
		{	
		}

	template<class _Other>
		_Myt& operator=(const reverse_iterator<_Other>& _Right)
		{	
		this->current = _Right.base();
		return (*this);
		}

	_Myt& operator++()
		{	
		++*((_Mybase *)this);
		return (*this);
		}

	_Myt operator++(int)
		{	
		_Myt _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Myt& operator--()
		{	
		--*((_Mybase *)this);
		return (*this);
		}

	_Myt operator--(int)
		{	
		_Myt _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	_Myt& operator+=(difference_type _Off)
		{	
		*((_Mybase *)this) += _Off;
		return (*this);
		}

	_Myt operator+(difference_type _Off) const
		{	
		_Myt _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Myt& operator-=(difference_type _Off)
		{	
		*((_Mybase *)this) -= _Off;
		return (*this);
		}

	_Myt operator-(difference_type _Off) const
		{	
		_Myt _Tmp = *this;
		return (_Tmp -= _Off);
		}
	};

template<class _RanIt>
	struct _Is_checked_helper<reverse_iterator<_RanIt> >
		: public _Is_checked_helper<_RanIt>
	{	
	};

		
template<class _RanIt,
	class _Diff> inline
	reverse_iterator<_RanIt> operator+(_Diff _Off,
		const reverse_iterator<_RanIt>& _Right)
	{	
	return (_Right + _Off);
	}

template<class _RanIt1,
	class _RanIt2>
	auto inline operator-(const reverse_iterator<_RanIt1>& _Left,
		const reverse_iterator<_RanIt2>& _Right)
			-> decltype(_Right.base() - _Left.base())
	{	
	return (_Right.base() - _Left.base());
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator==(const reverse_iterator<_RanIt1>& _Left,
		const reverse_iterator<_RanIt2>& _Right)
	{	
	return (_Left._Equal(_Right));
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator!=(const reverse_iterator<_RanIt1>& _Left,
		const reverse_iterator<_RanIt2>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator<(const reverse_iterator<_RanIt1>& _Left,
		const reverse_iterator<_RanIt2>& _Right)
	{	
	return (_Left._Less(_Right));
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator>(const reverse_iterator<_RanIt1>& _Left,
		const reverse_iterator<_RanIt2>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator<=(const reverse_iterator<_RanIt1>& _Left,
		const reverse_iterator<_RanIt2>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator>=(const reverse_iterator<_RanIt1>& _Left,
		const reverse_iterator<_RanIt2>& _Right)
	{	
	return (!(_Left < _Right));
	}


		
template<class _Container>
	auto inline begin(_Container& _Cont) -> decltype(_Cont.begin())
	{	
	return (_Cont.begin());
	}

template<class _Container>
	auto inline begin(const _Container& _Cont) -> decltype(_Cont.begin())
	{	
	return (_Cont.begin());
	}

template<class _Container>
	auto inline end(_Container& _Cont) -> decltype(_Cont.end())
	{	
	return (_Cont.end());
	}

template<class _Container>
	auto inline end(const _Container& _Cont) -> decltype(_Cont.end())
	{	
	return (_Cont.end());
	}

template<class _Ty,
	size_t _Size> inline
	_Ty *begin(_Ty (&_Array)[_Size])
	{	
	return (_Array);
	}

template<class _Ty,
	size_t _Size> inline
	_Ty *end(_Ty (&_Array)[_Size])
	{	
	return (_Array + _Size);
	}

		
template<class _Container>
	auto inline cbegin(const _Container& _Cont) -> decltype(::std:: begin(_Cont))
	{	
	return (::std:: begin(_Cont));
	}

template<class _Container>
	auto inline cend(const _Container& _Cont) -> decltype(::std:: end(_Cont))
	{	
	return (::std:: end(_Cont));
	}

		
template<class _Container>
	auto inline rbegin(_Container& _Cont) -> decltype(_Cont.rbegin())
	{	
	return (_Cont.rbegin());
	}

template<class _Container>
	auto inline rbegin(const _Container& _Cont) -> decltype(_Cont.rbegin())
	{	
	return (_Cont.rbegin());
	}

template<class _Container>
	auto inline rend(_Container& _Cont) -> decltype(_Cont.rend())
	{	
	return (_Cont.rend());
	}

template<class _Container>
	auto inline rend(const _Container& _Cont) -> decltype(_Cont.rend())
	{	
	return (_Cont.rend());
	}

template<class _Ty,
	size_t _Size> inline
	reverse_iterator<_Ty *> rbegin(_Ty (&_Array)[_Size])
	{	
	return (reverse_iterator<_Ty *>(_Array + _Size));
	}

template<class _Ty,
	size_t _Size> inline
	reverse_iterator<_Ty *> rend(_Ty (&_Array)[_Size])
	{	
	return (reverse_iterator<_Ty *>(_Array));
	}

template<class _Elem> inline
	reverse_iterator<const _Elem *> rbegin(initializer_list<_Elem> _Ilist)
	{	
	return (reverse_iterator<const _Elem *>(_Ilist.end()));
	}

template<class _Elem> inline
	reverse_iterator<const _Elem *> rend(initializer_list<_Elem> _Ilist)
	{	
	return (reverse_iterator<const _Elem *>(_Ilist.begin()));
	}

		
template<class _Container>
	auto inline crbegin(const _Container& _Cont) -> decltype(::std:: rbegin(_Cont))
	{	
	return (::std:: rbegin(_Cont));
	}

template<class _Container>
	auto inline crend(const _Container& _Cont) -> decltype(::std:: rend(_Cont))
	{	
	return (::std:: rend(_Cont));
	}


		
template<class _Ty,
	size_t _Size>
	class _Array_const_iterator
		: public _Iterator012<random_access_iterator_tag,
			_Ty,
			ptrdiff_t,
			const _Ty *,
			const _Ty&,
			_Iterator_base>
	{	
public:
	typedef _Array_const_iterator<_Ty, _Size> _Myiter;
	typedef random_access_iterator_tag iterator_category;

	typedef _Ty value_type;
	typedef size_t size_type;
	typedef ptrdiff_t difference_type;
	typedef const _Ty *pointer;
	typedef const _Ty& reference;
	enum {_EEN_SIZE = _Size};	
	enum {_EEN_IDL =
		0};	

 
	_Array_const_iterator()
		{	
		_Ptr = 0;
		}

	explicit _Array_const_iterator(pointer _Parg, size_t _Off = 0)
		{	
		_Ptr = _Parg + _Off;
		}

	typedef pointer _Unchecked_type;

	_Myiter& _Rechecked(_Unchecked_type _Right)
		{	
		_Ptr = _Right;
		return (*this);
		}

	_Unchecked_type _Unchecked() const
		{	
		return (_Ptr);
		}

	reference operator*() const
		{	
		return (*_Ptr);
		}

	pointer operator->() const
		{	
		return (::std:: pointer_traits<pointer>::pointer_to(**this));
		}

	_Myiter& operator++()
		{	
		++_Ptr;
		return (*this);
		}

	_Myiter operator++(int)
		{	
		_Myiter _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Myiter& operator--()
		{	
		--_Ptr;
		return (*this);
		}

	_Myiter operator--(int)
		{	
		_Myiter _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	_Myiter& operator+=(difference_type _Off)
		{	
		_Ptr += _Off;
		return (*this);
		}

	_Myiter operator+(difference_type _Off) const
		{	
		_Myiter _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Myiter& operator-=(difference_type _Off)
		{	
		return (*this += -_Off);
		}

	_Myiter operator-(difference_type _Off) const
		{	
		_Myiter _Tmp = *this;
		return (_Tmp -= _Off);
		}

	difference_type operator-(const _Myiter& _Right) const
		{	
		return (_Ptr - _Right._Ptr);
		}

	reference operator[](difference_type _Off) const
		{	
		return (*(*this + _Off));
		}

	bool operator==(const _Myiter& _Right) const
		{	
		return (_Ptr == _Right._Ptr);
		}

	bool operator!=(const _Myiter& _Right) const
		{	
		return (!(*this == _Right));
		}

	bool operator<(const _Myiter& _Right) const
		{	
		return (_Ptr < _Right._Ptr);
		}

	bool operator>(const _Myiter& _Right) const
		{	
		return (_Right < *this);
		}

	bool operator<=(const _Myiter& _Right) const
		{	
		return (!(_Right < *this));
		}

	bool operator>=(const _Myiter& _Right) const
		{	
		return (!(*this < _Right));
		}

	pointer _Ptr;	

 








































































































































































































#line 1654 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xutility"
	};

template<class _Ty,
	size_t _Size> inline
	typename _Array_const_iterator<_Ty, _Size>::_Unchecked_type
		_Unchecked(_Array_const_iterator<_Ty, _Size> _Iter)
	{	
	return (_Iter._Unchecked());
	}

template<class _Ty,
	size_t _Size> inline
	_Array_const_iterator<_Ty, _Size>&
		_Rechecked(_Array_const_iterator<_Ty, _Size>& _Iter,
			typename _Array_const_iterator<_Ty, _Size>
				::_Unchecked_type _Right)
	{	
	return (_Iter._Rechecked(_Right));
	}

template<class _Ty,
	size_t _Size> inline
	_Array_const_iterator<_Ty, _Size> operator+(
		typename _Array_const_iterator<_Ty, _Size>::difference_type _Off,
		_Array_const_iterator<_Ty, _Size> _Next)
	{	
	return (_Next += _Off);
	}

		
template<class _Ty,
	size_t _Size>
	class _Array_iterator
		: public _Array_const_iterator<_Ty, _Size>
	{	
public:
	typedef _Array_iterator<_Ty, _Size> _Myiter;
	typedef _Array_const_iterator<_Ty, _Size> _Mybase;
	typedef random_access_iterator_tag iterator_category;

	typedef _Ty value_type;
	typedef size_t size_type;
	typedef ptrdiff_t difference_type;
	typedef _Ty *pointer;
	typedef _Ty& reference;

	_Array_iterator()
		{	
		}

	explicit _Array_iterator(pointer _Parg, size_t _Off = 0)
		: _Mybase(_Parg, _Off)
		{	
		}
	enum {_EEN_SIZE = _Size};	
	enum {_EEN_IDL =
		0};	

	typedef pointer _Unchecked_type;

	_Myiter& _Rechecked(_Unchecked_type _Right)
		{	
		((_Mybase *)this)->_Rechecked(_Right);
		return (*this);
		}

	_Unchecked_type _Unchecked() const
		{	
		return ((pointer)((_Mybase *)this)->_Unchecked());
		}

	reference operator*() const
		{	
		return ((reference)**(_Mybase *)this);
		}

	pointer operator->() const
		{	
		return (::std:: pointer_traits<pointer>::pointer_to(**this));
		}

	_Myiter& operator++()
		{	
		++*(_Mybase *)this;
		return (*this);
		}

	_Myiter operator++(int)
		{	
		_Myiter _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Myiter& operator--()
		{	
		--*(_Mybase *)this;
		return (*this);
		}

	_Myiter operator--(int)
		{	
		_Myiter _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	_Myiter& operator+=(difference_type _Off)
		{	
		*(_Mybase *)this += _Off;
		return (*this);
		}

	_Myiter operator+(difference_type _Off) const
		{	
		_Myiter _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Myiter& operator-=(difference_type _Off)
		{	
		return (*this += -_Off);
		}

	_Myiter operator-(difference_type _Off) const
		{	
		_Myiter _Tmp = *this;
		return (_Tmp -= _Off);
		}

	difference_type operator-(const _Mybase& _Right) const
		{	
		return (*(_Mybase *)this - _Right);
		}

	reference operator[](difference_type _Off) const
		{	
		return (*(*this + _Off));
		}
	};

template<class _Ty,
	size_t _Size> inline
	typename _Array_iterator<_Ty, _Size>::_Unchecked_type
		_Unchecked(_Array_iterator<_Ty, _Size> _Iter)
	{	
	return (_Iter._Unchecked());
	}

template<class _Ty,
	size_t _Size> inline
	_Array_iterator<_Ty, _Size>&
		_Rechecked(_Array_iterator<_Ty, _Size>& _Iter,
			typename _Array_iterator<_Ty, _Size>
				::_Unchecked_type _Right)
	{	
	return (_Iter._Rechecked(_Right));
	}

template<class _Ty,
	size_t _Size> inline
	_Array_iterator<_Ty, _Size> operator+(
		typename _Array_iterator<_Ty, _Size>::difference_type _Off,
		_Array_iterator<_Ty, _Size> _Next)
	{	
	return (_Next += _Off);
	}

		
template<class _RanIt>
	class move_iterator
	{	
public:
	typedef move_iterator<_RanIt> _Myt;
	typedef typename iterator_traits<_RanIt>::iterator_category
		iterator_category;
	typedef typename iterator_traits<_RanIt>::value_type
		value_type;
	typedef typename iterator_traits<_RanIt>::difference_type
		difference_type;
	typedef _RanIt pointer;
	typedef value_type&& reference;
	typedef _RanIt iterator_type;

	move_iterator()
		{	
		}

	explicit move_iterator(iterator_type _Right)
		: current(_Right)
		{	
		}

	template<class _RanIt2>
		move_iterator(const move_iterator<_RanIt2>& _Right)
		: current(_Right.base())
		{	
		}

	template<class _RanIt2>
		_Myt& operator=(const move_iterator<_RanIt2>& _Right)
		{	
		current = _Right.base();
		return (*this);
		}

	_RanIt base() const
		{	
		return (current);
		}

	reference operator*() const
		{	
		return (::std:: move(*current));
		}

	pointer operator->() const
		{	
		return (current);
		}

	_Myt& operator++()
		{	
		++current;
		return (*this);
		}

	_Myt operator++(int)
		{	
		_Myt _Tmp = *this;
		++current;
		return (_Tmp);
		}

	_Myt& operator--()
		{	
		--current;
		return (*this);
		}

	_Myt operator--(int)
		{	
		_Myt _Tmp = *this;
		--current;
		return (_Tmp);
		}

	template<class _RanIt2>
		bool _Equal(const move_iterator<_RanIt2>& _Right) const
		{	
		return (current == _Right.base());
		}



	_Myt& operator+=(difference_type _Off)
		{	
		current += _Off;
		return (*this);
		}

	_Myt operator+(difference_type _Off) const
		{	
		return (_Myt(current + _Off));
		}

	_Myt& operator-=(difference_type _Off)
		{	
		current -= _Off;
		return (*this);
		}

	_Myt operator-(difference_type _Off) const
		{	
		return (_Myt(current - _Off));
		}

	reference operator[](difference_type _Off) const
		{	
		return (::std:: move(current[_Off]));
		}

	template<class _RanIt2>
		bool _Less(const move_iterator<_RanIt2>& _Right) const
		{	
		return (current < _Right.base());
		}

	difference_type operator-(const _Myt& _Right) const
		{	
		return (current - _Right.base());
		}

protected:
	iterator_type current;	
	};

template<class _RanIt>
	struct _Is_checked_helper<move_iterator<_RanIt> >
		: public _Is_checked_helper<_RanIt>
	{	
	};

		
template<class _RanIt,
	class _Diff> inline
	move_iterator<_RanIt>
		operator+(_Diff _Off,
		const move_iterator<_RanIt>& _Right)
	{	
	return (_Right + _Off);
	}

template<class _RanIt1,
	class _RanIt2>
	auto inline operator-(
		move_iterator<_RanIt1>& _Left,
		const move_iterator<_RanIt2>& _Right)
			-> decltype(_Left.base() - _Right.base())
	{	
	return (_Left.base() - _Right.base());
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator==(
		const move_iterator<_RanIt1>& _Left,
		const move_iterator<_RanIt2>& _Right)
	{	
	return (_Left._Equal(_Right));
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator!=(
		const move_iterator<_RanIt1>& _Left,
		const move_iterator<_RanIt2>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator<(
		const move_iterator<_RanIt1>& _Left,
		const move_iterator<_RanIt2>& _Right)
	{	
	return (_Left._Less(_Right));
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator>(
		const move_iterator<_RanIt1>& _Left,
		const move_iterator<_RanIt2>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator<=(
		const move_iterator<_RanIt1>& _Left,
		const move_iterator<_RanIt2>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator>=(
		const move_iterator<_RanIt1>& _Left,
		const move_iterator<_RanIt2>& _Right)
	{	
	return (!(_Left < _Right));
	}

		
template<class _RanIt> inline
	move_iterator<_RanIt> make_move_iterator(_RanIt _Iter)
	{	
	return (move_iterator<_RanIt>(_Iter));
	}

		
template<class _InIt,
	class _OutIt> inline
	_OutIt _Copy_impl(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Nonscalar_ptr_iterator_tag)
	{	
	for (; _First != _Last; ++_Dest, ++_First)
		*_Dest = *_First;
	return (_Dest);
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Copy_impl(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Scalar_ptr_iterator_tag)
	{	
	ptrdiff_t _Count = _Last - _First;
	:: memmove(&*_Dest, &*_First,
		_Count * sizeof (*_First));
	return (_Dest + _Count);
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Copy_impl(_InIt _First, _InIt _Last,
		_OutIt _Dest)
	{	
	return (_Copy_impl(_First, _Last,
		_Dest, _Ptr_cat(_First, _Dest)));
	}

 
template<class _InIt,
	class _OutIt> inline
	_OutIt copy(_InIt _First, _InIt _Last,
		_OutIt _Dest)
	{	
	return (_Rechecked(_Dest,
		_Copy_impl(_Unchecked(_First), _Unchecked(_Last),
			_Unchecked(_Dest))));
	}

 



































































#line 2149 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xutility"

		
template<class _InIt,
	class _Diff,
	class _OutIt> inline
	_OutIt _Copy_n(_InIt _First, _Diff _Count,
		_OutIt _Dest, input_iterator_tag)
	{	
	*_Dest = *_First;	
	while (0 < --_Count)
		*++_Dest = *++_First;
	return (++_Dest);
	}

template<class _InIt,
	class _Diff,
	class _OutIt> inline
	_OutIt _Copy_n(_InIt _First, _Diff _Count,
		_OutIt _Dest, forward_iterator_tag)
	{	
	for (; 0 < _Count; --_Count, ++_Dest, ++_First)
		*_Dest = *_First;
	return (_Dest);
	}

template<class _InIt,
	class _Diff,
	class _OutIt> inline
	_OutIt _Copy_n(_InIt _First, _Diff _Count,
		_OutIt _Dest, _Nonscalar_ptr_iterator_tag)
	{	
	return (_Copy_n(_First, _Count,
		_Dest, _Iter_cat(_First)));
	}
template<class _InIt,
	class _Diff,
	class _OutIt> inline
	_OutIt _Copy_n(_InIt _First, _Diff _Count,
		_OutIt _Dest, _Scalar_ptr_iterator_tag)
	{	
	:: memmove(&*_Dest, &*_First,
		_Count * sizeof (*_First));
	return (_Dest + _Count);
	}

template<class _InIt,
	class _Diff,
	class _OutIt> inline
	_OutIt _Copy_n(_InIt _First, _Diff _Count,
		_OutIt _Dest)
	{	
	return (_Copy_n(_First, _Count,
		_Dest, _Ptr_cat(_First, _Dest)));
	}

 
template<class _InIt,
	class _Diff,
	class _OutIt> inline
	_OutIt copy_n(_InIt _First, _Diff _Count,
		_OutIt _Dest)
	{	
	if (_Count <= 0)
		return (_Dest);
	else
		return (_Rechecked(_Dest,
			_Copy_n(_Unchecked(_First), _Count,
				_Unchecked(_Dest))));
	}

 





















































































































#line 2338 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xutility"

		
template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 _Copy_backward(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest, _Nonscalar_ptr_iterator_tag)
	{	
	while (_First != _Last)
		*--_Dest = *--_Last;
	return (_Dest);
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Copy_backward(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Scalar_ptr_iterator_tag)
	{	
	ptrdiff_t _Count = _Last - _First;
	:: memmove(&*_Dest - _Count, &*_First,
		_Count * sizeof (*_First));
	return (_Dest - _Count);
	}

template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 _Copy_backward(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest)
	{	
	return (_Copy_backward(_First, _Last,
		_Dest, _Ptr_cat(_First, _Dest)));
	}

 
template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 copy_backward(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest)
	{	
	return (_Rechecked(_Dest,
		_Copy_backward(_Unchecked(_First), _Unchecked(_Last),
			_Unchecked(_Dest))));
	}

 





























#line 2412 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xutility"

		
template<class _InIt,
	class _OutIt> inline
	_OutIt _Move(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Nonscalar_ptr_iterator_tag)
	{	
	for (; _First != _Last; ++_Dest, ++_First)
		*_Dest = ::std:: move(*_First);
	return (_Dest);
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Move(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Scalar_ptr_iterator_tag)
	{	
	ptrdiff_t _Count = _Last - _First;
	:: memmove(&*_Dest, &*_First,
		_Count * sizeof (*_First));
	return (_Dest + _Count);
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Move(_InIt _First, _InIt _Last,
		_OutIt _Dest)
	{	
	return (_Move(_First, _Last,
		_Dest, _Ptr_cat(_First, _Dest)));
	}

 
template<class _InIt,
	class _OutIt> inline
	_OutIt move(_InIt _First, _InIt _Last,
		_OutIt _Dest)
	{	
	return (_Rechecked(_Dest,
		_Move(_Unchecked(_First), _Unchecked(_Last),
			_Unchecked(_Dest))));
	}

 






























































#line 2519 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xutility"

		
template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 _Move_backward(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest, _Nonscalar_ptr_iterator_tag)
	{	
	while (_First != _Last)
		*--_Dest = ::std:: move(*--_Last);
	return (_Dest);
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Move_backward(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Scalar_ptr_iterator_tag)
	{	
	ptrdiff_t _Count = _Last - _First;
	:: memmove(&*_Dest - _Count, &*_First,
		_Count * sizeof (*_First));
	return (_Dest - _Count);
	}

template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 _Move_backward(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest)
	{	
	return (_Move_backward(_First, _Last,
		_Dest, _Ptr_cat(_First, _Dest)));
	}

 
template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 move_backward(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest)
	{	
	return (_Rechecked(_Dest,
		_Move_backward(_Unchecked(_First), _Unchecked(_Last),
			_Unchecked(_Dest))));
	}

 





























#line 2593 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xutility"

		
template<class _FwdIt,
	class _Ty> inline
	void _Fill(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
	{	
	for (; _First != _Last; ++_First)
		*_First = _Val;
	}

inline void _Fill(char *_First, char *_Last, char _Val)
	{	
	:: memset(_First, _Val, _Last - _First);
	}

inline void _Fill(signed char *_First, signed char *_Last, signed char _Val)
	{	
	:: memset(_First, _Val, _Last - _First);
	}

inline void _Fill(unsigned char *_First, unsigned char *_Last, unsigned char _Val)
	{	
	:: memset(_First, _Val, _Last - _First);
	}

template<class _FwdIt,
	class _Ty> inline
	void fill(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
	{	
	;
	_Fill(_Unchecked(_First), _Unchecked(_Last), _Val);
	}

		
template<class _OutIt,
	class _Diff,
	class _Ty> inline
	_OutIt _Fill_n(_OutIt _Dest, _Diff _Count, const _Ty& _Val)
	{	
	for (; 0 < _Count; --_Count, ++_Dest)
		*_Dest = _Val;
	return (_Dest);
	}

inline char *_Fill_n(char *_Dest, size_t _Count, char _Val)
	{	
	:: memset(_Dest, _Val, _Count);
	return (_Dest + _Count);
	}

inline signed char *_Fill_n(signed char *_Dest, size_t _Count,
	signed char _Val)
	{	
	:: memset(_Dest, _Val, _Count);
	return (_Dest + _Count);
	}

inline unsigned char *_Fill_n(unsigned char *_Dest, size_t _Count,
	unsigned char _Val)
	{	
	:: memset(_Dest, _Val, _Count);
	return (_Dest + _Count);
	}

 
template<class _OutIt,
	class _Diff,
	class _Ty> inline
	_OutIt fill_n(_OutIt _Dest, _Diff _Count, const _Ty& _Val)
	{	
	return (_Rechecked(_Dest, _Fill_n(_Unchecked(_Dest), _Count, _Val)));
	}

 






























































#line 2730 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xutility"

		
template<class _InIt1,
	class _InIt2> inline
	bool _Equal(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2)
	{	
	for (; _First1 != _Last1; ++_First1, ++_First2)
		if (!(*_First1 == *_First2))
			return (false);
	return (true);
	}

inline bool _Equal(const char *_First1, const char *_Last1,
	const char *_First2)
	{	
	return (:: memcmp(_First1, _First2, _Last1 - _First1) == 0);
	}

inline bool _Equal(const signed char *_First1, const signed char *_Last1,
	const signed char *_First2)
	{	
	return (:: memcmp(_First1, _First2, _Last1 - _First1) == 0);
	}

inline bool _Equal(const unsigned char *_First1, const unsigned char *_Last1,
	const unsigned char *_First2)
	{	
	return (:: memcmp(_First1, _First2, _Last1 - _First1) == 0);
	}

 
template<class _InIt1,
	class _InIt2> inline
	bool equal(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2)
	{	
	return (_Equal(_Unchecked(_First1), _Unchecked(_Last1),
		_Unchecked(_First2)));
	}

 









































#line 2813 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xutility"

		
template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool _Equal(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _Pr _Pred)
	{	
	for (; _First1 != _Last1; ++_First1, ++_First2)
		if (!_Pred(*_First1, *_First2))
			return (false);
	return (true);
	}

 
template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool equal(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _Pr _Pred)
	{	
	return (_Equal(_Unchecked(_First1), _Unchecked(_Last1),
		_Unchecked(_First2), _Pred));
	}

 













































#line 2885 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xutility"

		
template<class _InIt1,
	class _InIt2> inline
	bool _Lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2)
	{	
	for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, ++_First2)
		if (((*_First1) < (*_First2)))
			return (true);
		else if (*_First2 < *_First1)
			return (false);
	return (_First1 == _Last1 && _First2 != _Last2);
	}

inline bool _Lexicographical_compare(
	const unsigned char *_First1, const unsigned char *_Last1,
	const unsigned char *_First2, const unsigned char *_Last2)
	{	
	ptrdiff_t _Num1 = _Last1 - _First1;
	ptrdiff_t _Num2 = _Last2 - _First2;
	int _Ans = :: memcmp(_First1, _First2, _Num1 < _Num2 ? _Num1 : _Num2);
	return (_Ans < 0 || (_Ans == 0 && _Num1 < _Num2));
	}

 









#line 2921 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xutility"

template<class _InIt1,
	class _InIt2> inline
	bool lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2)
	{	
	;
	;
	return (_Lexicographical_compare(_Unchecked(_First1), _Unchecked(_Last1),
		_Unchecked(_First2), _Unchecked(_Last2)));
	}

		
template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool _Lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
	{	
	for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, ++_First2)
		if (_Pred(*_First1, *_First2))
			return (true);
		else if (_Pred(*_First2, *_First1))
			return (false);
	return (_First1 == _Last1 && _First2 != _Last2);
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
	{	
	;
	;
	;
	return (_Lexicographical_compare(_Unchecked(_First1), _Unchecked(_Last1),
		_Unchecked(_First2), _Unchecked(_Last2), _Pred));
	}

		
template<class _Ty,
	class _Ignored> inline
	bool _Within_limits(const _Ty& _Val, true_type, true_type, _Ignored)
	{	
	return ((-128) <= _Val && _Val <= 127);
	}

template<class _Ty> inline
	bool _Within_limits(const _Ty& _Val, true_type, false_type, true_type)
	{	
	return (_Val <= 127 || static_cast<_Ty>((-128)) <= _Val);
	}

template<class _Ty> inline
	bool _Within_limits(const _Ty& _Val, true_type, false_type, false_type)
	{	
	return (_Val <= 127);
	}

template<class _Ty,
	class _Ignored> inline
	bool _Within_limits(const _Ty& _Val, false_type, true_type, _Ignored)
	{	
	return (0 <= _Val && _Val <= 0xff);
	}

template<class _Ty,
	class _Ignored> inline
	bool _Within_limits(const _Ty& _Val, false_type, false_type, _Ignored)
	{	
	return (_Val <= 0xff);
	}

template<class _InIt,
	class _Ty> inline
	bool _Within_limits(_InIt, const _Ty& _Val)
	{	
	typedef typename remove_pointer<_InIt>::type _Elem;
	return (_Within_limits(_Val, is_signed<_Elem>(), is_signed<_Ty>(),
		integral_constant<bool, -1 == static_cast<_Ty>(-1)>()));
	}

template<class _InIt> inline
	bool _Within_limits(_InIt, const bool&)
	{	
	return (true);
	}

template<class _InIt,
	class _Ty> inline
	_InIt _Find(_InIt _First, _InIt _Last, const _Ty& _Val, true_type)
	{	
	if (!_Within_limits(_First, _Val))
		return (_Last);
	_First = static_cast<_InIt>(:: memchr(
		_First, static_cast<unsigned char>(_Val), _Last - _First));
	return (_First ? _First : _Last);
	}

template<class _InIt,
	class _Ty> inline
	_InIt _Find(_InIt _First, _InIt _Last, const _Ty& _Val, false_type)
	{	
	for (; _First != _Last; ++_First)
		if (*_First == _Val)
			break;
	return (_First);
	}

template<class _InIt,
	class _Ty> inline
	_InIt _Find(_InIt _First, _InIt _Last, const _Ty& _Val)
	{	
	
	typedef integral_constant<bool,
		(  is_same<_InIt, char *>::value
		|| is_same<_InIt, signed char *>::value
		|| is_same<_InIt, unsigned char *>::value
		|| is_same<_InIt, const char *>::value
		|| is_same<_InIt, const signed char *>::value
		|| is_same<_InIt, const unsigned char *>::value)
		&& is_integral<_Ty>::value
	> _Memchr_opt;
	return (_Find(_First, _Last, _Val, _Memchr_opt()));
	}

template<class _InIt,
	class _Ty> inline
	_InIt find(_InIt _First, _InIt _Last, const _Ty& _Val)
	{	
	;
	return (_Rechecked(_First,
		_Find(_Unchecked(_First), _Unchecked(_Last), _Val)));
	}

		
template<class _InIt,
	class _Ty,
	class _Pr> inline
	_InIt _Find_pr(_InIt _First, _InIt _Last, const _Ty& _Val, _Pr _Pred)
	{	
	for (; _First != _Last; ++_First)
		if (_Pred(*_First, _Val))
			break;
	return (_First);
	}

		
template<class _InIt,
	class _Ty> inline
	typename iterator_traits<_InIt>::difference_type
		_Count_np(_InIt _First, _InIt _Last, const _Ty& _Val)
	{	
	typename iterator_traits<_InIt>::difference_type _Count = 0;

	for (; _First != _Last; ++_First)
		if (*_First == _Val)
			++_Count;
	return (_Count);
	}

template<class _InIt,
	class _Ty> inline
	typename iterator_traits<_InIt>::difference_type
		count(_InIt _First, _InIt _Last, const _Ty& _Val)
	{	
	;
	return (_Count_np(_Unchecked(_First), _Unchecked(_Last), _Val));
	}

		
template<class _InIt,
	class _Ty,
	class _Pr> inline
	typename iterator_traits<_InIt>::difference_type
		_Count_pr(_InIt _First, _InIt _Last, const _Ty& _Val, _Pr _Pred)
	{	
	typename iterator_traits<_InIt>::difference_type _Count = 0;

	for (; _First != _Last; ++_First)
		if (_Pred(*_First, _Val))
			++_Count;
	return (_Count);
	}

		
template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	bool _Is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _Pr _Pred)
	{	
	for (; _First1 != _Last1; ++_First1, ++_First2)
		if (!_Pred(*_First1, *_First2))
			break;	
	if (_First1 != _Last1)
		{	
		_FwdIt2 _Last2 = _First2;
		advance(_Last2, distance(_First1, _Last1));
		for (_FwdIt1 _Next1 = _First1; _Next1 != _Last1; ++_Next1)
			if (_Next1 == _Find_pr(_First1, _Next1, *_Next1, _Pred))
				{	
				typename iterator_traits<_FwdIt2>::difference_type _Count =
					_Count_pr(_First2, _Last2, *_Next1, _Pred);
				if (_Count == 0
					|| _Count != _Count_pr(_Next1, _Last1, *_Next1, _Pred))
					return (false);	
				}
		}
	return (true);
	}

template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _Pr _Pred)
	{	
	;
	;
	return _Is_permutation(_Unchecked(_First1), _Unchecked(_Last1),
		_Unchecked(_First2), _Pred);
	}

		
template<class _FwdIt1,
	class _FwdIt2> inline
	bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2)
	{	
	return (::std:: is_permutation(_First1, _Last1,
		_First2, equal_to<>()));
	}

		
template<class _BidIt> inline
	void _Reverse(_BidIt _First, _BidIt _Last, bidirectional_iterator_tag)
	{	
	for (; _First != _Last && _First != --_Last; ++_First)
		::std:: iter_swap(_First, _Last);
	}

template<class _BidIt> inline
	void reverse(_BidIt _First, _BidIt _Last)
	{	
	;
	_Reverse(_Unchecked(_First), _Unchecked(_Last), _Iter_cat(_First));
	}

		
template<class _FwdIt> inline
	void _Rotate(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last,
		forward_iterator_tag)
	{	
	for (_FwdIt _Next = _Mid; ; )
		{	
		::std:: iter_swap(_First, _Next);
		if (++_First == _Mid)
			if (++_Next == _Last)
				break;	
			else
				_Mid = _Next;	
		else if (++_Next == _Last)
			_Next = _Mid;	
		}
	}

template<class _BidIt> inline
	void _Rotate(_BidIt _First, _BidIt _Mid, _BidIt _Last,
		bidirectional_iterator_tag)
	{	
	::std:: reverse(_First, _Mid);
	::std:: reverse(_Mid, _Last);
	::std:: reverse(_First, _Last);
	}

template<class _RanIt,
	class _Diff,
	class _Ty> inline
	void _Rotate(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Diff *, _Ty *)
	{	
	_Diff _Shift = _Mid - _First;
	_Diff _Count = _Last - _First;

	for (_Diff _Factor = _Shift; _Factor != 0; )
		{	
		_Diff _Tmp = _Count % _Factor;
		_Count = _Factor;
		_Factor = _Tmp;
		}

	if (_Count < _Last - _First)
		for (; 0 < _Count; --_Count)
			{	
			_RanIt _Hole = _First + _Count;
			_RanIt _Next = _Hole;
			_RanIt _Next1 = _Next + _Shift == _Last ? _First : _Next + _Shift;
			for (; ; )
				{	
				iter_swap(_Next, _Next1);
				_Next = _Next1;
				_Next1 = _Shift < _Last - _Next1 ? _Next1 + _Shift
					: _First + (_Shift - (_Last - _Next1));
				if (_Next1 == _Hole)
					break;
				}
			}
	}

template<class _RanIt> inline
	void _Rotate(_RanIt _First, _RanIt _Mid, _RanIt _Last,
		random_access_iterator_tag)
	{	
	_Rotate(_First, _Mid, _Last, _Dist_type(_First), _Val_type(_First));
	}

template<class _FwdIt> inline
	_FwdIt rotate(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last)
	{	
	;
	;
	if (_First != _Mid && _Mid != _Last)
		_Rotate(_Unchecked(_First), _Unchecked(_Mid), _Unchecked(_Last),
			_Iter_cat(_First));
	::std:: advance(_First, ::std:: distance(_Mid, _Last));
	return (_First);
	}

	
template<class _Diff, class _Urng>
	class _Rng_from_urng
	{	
public:
	typedef typename make_unsigned<_Diff>::type _Ty0;
	typedef typename _Urng::result_type _Ty1;

	typedef typename _If<sizeof (_Ty1) < sizeof (_Ty0),
		_Ty0, _Ty1>::type _Udiff;


	explicit _Rng_from_urng(_Urng& _Func)
		: _Ref(_Func), _Bits(8 * sizeof (_Udiff)), _Bmask(_Udiff(-1))
		{	
		for (; (_Urng::max)() - (_Urng::min)() < _Bmask; _Bmask >>= 1)
			--_Bits;
		}

	_Diff operator()(_Diff _Index)
		{	
		for (; ; )
			{	
			_Udiff _Ret = 0;	
			_Udiff _Mask = 0;	

			while (_Mask < _Udiff(_Index - 1))
				{	
				_Ret <<= _Bits - 1;	
				_Ret <<= 1;
				_Ret |= _Get_bits();
				_Mask <<= _Bits - 1;	
				_Mask <<= 1;
				_Mask |= _Bmask;
				}

			
			if (_Ret / _Index < _Mask / _Index
				|| _Mask % _Index == _Udiff(_Index - 1))
				return (_Ret % _Index);
			}
		}

	_Udiff _Get_all_bits()
		{	
		_Udiff _Ret = 0;

		for (size_t _Num = 0; _Num < 8 * sizeof (_Udiff);
			_Num += _Bits)
			{	
			_Ret <<= _Bits - 1;	
			_Ret <<= 1;
			_Ret |= _Get_bits();
			}

		return (_Ret);
		}

private:
	_Udiff _Get_bits()
		{	
		for (; ; )
			{	
			_Udiff _Val = _Ref() - (_Urng::min)();

			if (_Val <= _Bmask)
				return (_Val);
			}
		}

	_Urng& _Ref;	
	size_t _Bits;	
	_Udiff _Bmask;	

	_Rng_from_urng(const _Rng_from_urng&);	
	_Rng_from_urng& operator=(const _Rng_from_urng&);	
	};

		
template<class _Elem>
	class  _Yarn
	{	
public:
	typedef _Yarn<_Elem> _Myt;

	 _Yarn()
		: _Myptr(0), _Nul(0)
		{	
		}

	 _Yarn(const _Myt& _Right)
		: _Myptr(0), _Nul(0)
		{	
		*this = _Right;
		}

	 _Yarn(const _Elem *_Right)
		: _Myptr(0), _Nul(0)
		{	
		*this = _Right;
		}

	_Myt&  operator=(const _Myt& _Right)
		{	
		return (*this = _Right._Myptr);
		}

	_Myt&  operator=(const _Elem *_Right)
		{	
		if (_Myptr != _Right)
			{	
			_Tidy();

			if (_Right != 0)
				{	
				const _Elem *_Ptr = _Right;
				while (*_Ptr != (_Elem)0)
					++_Ptr;
				size_t _Count = ((const char *)++_Ptr - (const char *)_Right);

 




				_Myptr = (_Elem *):: malloc(_Count);
 #line 3377 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xutility"

				if (_Myptr != 0)
					:: memcpy(_Myptr, _Right, _Count);
				}
			}
		return (*this);
		}

	 ~_Yarn() throw ()
		{	
		_Tidy();
		}

	bool  empty() const
		{	
		return (_Myptr == 0);
		}

	const _Elem * c_str() const
		{	
		return (_Myptr != 0 ? _Myptr : &_Nul);
		}

	bool  _Empty() const
		{	
		return (_Myptr == 0);
		}

	const _Elem * _C_str() const
		{	
		return (_Myptr != 0 ? _Myptr : &_Nul);
		}

private:
	void  _Tidy()
		{	
		if (_Myptr != 0)

 



			:: free(_Myptr);
 #line 3421 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xutility"

		_Myptr = 0;
		}

	_Elem *_Myptr;	
	_Elem _Nul;		
	};

	
template<class _Ty,
	class _Alloc>
	struct _Has_allocator_type
	{	
	template<class _Uty>
		static auto _Fn(int)
			-> is_convertible<_Alloc,
				typename _Uty::allocator_type>;
	template<class _Uty>
		static auto _Fn(_Wrap_int)
			-> false_type;

	typedef decltype(_Fn<_Ty>(0)) type;
	};

		
struct allocator_arg_t
	{	
	};

const allocator_arg_t allocator_arg = allocator_arg_t();

 __declspec(noreturn) void __cdecl _Xbad_alloc();
 __declspec(noreturn) void __cdecl _Xinvalid_argument(  const char *);
 __declspec(noreturn) void __cdecl _Xlength_error(  const char *);
 __declspec(noreturn) void __cdecl _Xout_of_range(  const char *);
 __declspec(noreturn) void __cdecl _Xoverflow_error(  const char *);
 __declspec(noreturn) void __cdecl _Xruntime_error(  const char *);
}

namespace std {
		
template<class _Ty,
	class _Alloc>
	struct uses_allocator
		: _Has_allocator_type<_Ty, _Alloc>::type
	{	
	};
}	
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 3473 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xutility"
#line 3474 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xutility"























#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xmemory0"

 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 #pragma warning(disable: 4100 4345)

namespace std {
		
template<class _Ty> inline
	_Ty *_Allocate(size_t _Count, _Ty *)
	{	
	void *_Ptr = 0;

	if (_Count == 0)
		;
	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)
		_Xbad_alloc();	

	return ((_Ty *)_Ptr);
	}

		
template<class _Ty1,
	class _Ty2> inline
	void _Construct(_Ty1 *_Ptr, _Ty2&& _Val)
	{	
	void *_Vptr = _Ptr;
	::new (_Vptr) _Ty1(::std:: forward<_Ty2>(_Val));
	}

template<class _Ty1> inline
	void _Construct(_Ty1 *_Ptr)
	{	
	void *_Vptr = _Ptr;

	::new (_Vptr) _Ty1();
	}

		
template<class _Ty> inline
	void _Destroy(_Ty *_Ptr)
	{	
	_Ptr->~_Ty();
	}

template<> inline
	void _Destroy(char *)
	{	
	}

template<> inline
	void _Destroy(wchar_t *)
	{	
	}

 
template<> inline
	void _Destroy(unsigned short *)
	{	
	}
 #line 74 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xmemory0"

		
template<class _Alloc> inline
	void _Destroy_range(typename _Alloc::pointer _First,
		typename _Alloc::pointer _Last, _Alloc& _Al,
		_Nonscalar_ptr_iterator_tag)
	{	
	for (; _First != _Last; ++_First)
		_Al.destroy(_First);
	}

template<class _Alloc> inline
	void _Destroy_range(typename _Alloc::pointer _First,
		typename _Alloc::pointer _Last, _Alloc& _Al,
		_Scalar_ptr_iterator_tag)
	{	
	}

template<class _Alloc> inline
	void _Destroy_range(typename _Alloc::pointer _First,
		typename _Alloc::pointer _Last, _Alloc& _Al)
	{	
	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
	}

		
template<class _Alty>
	struct _Is_simple_alloc
		: _Cat_base<is_same<typename _Alty::size_type, size_t>::value
		&& is_same<typename _Alty::difference_type, ptrdiff_t>::value
		&& is_same<typename _Alty::pointer,
			typename _Alty::value_type *>::value
		&& is_same<typename _Alty::const_pointer,
			const typename _Alty::value_type *>::value
		&& is_same<typename _Alty::reference,
			typename _Alty::value_type&>::value
		&& is_same<typename _Alty::const_reference,
			const typename _Alty::value_type&>::value>
	{	
	};

		
template<class _Value_type>
	struct _Simple_types
	{	
	typedef _Value_type value_type;
	typedef size_t size_type;
	typedef ptrdiff_t difference_type;
	typedef value_type *pointer;
	typedef const value_type *const_pointer;
	typedef value_type& reference;
	typedef const value_type& const_reference;
	};

		
template<class _Alty,
	class _Pointer>
	struct _Get_voidptr
	{	
	typedef typename _Alty::template rebind<void>::other _Alvoid;
	typedef typename _Alvoid::pointer type;
	};

template<class _Alty,
	class _Ty>
	struct _Get_voidptr<_Alty, _Ty *>
	{	
	typedef void *type;
	};

		
template<class _Iter>
	struct _Is_iterator
	: public integral_constant<bool, !is_integral<_Iter>::value>
	{	
	};

		
template<class _Ty>
	struct pointer_traits;

		
template<class _Ty>
	struct _Get_first_parameter;

template<template<class, class...> class _Ty,
	class _First,
	class... _Rest>
	struct _Get_first_parameter<_Ty<_First, _Rest...> >
	{	
	typedef _First type;
	};

		
template<class _Newfirst,
	class _Ty>
	struct _Replace_first_parameter;

template<class _Newfirst,
	template<class, class...> class _Ty,
	class _First,
	class... _Rest>
	struct _Replace_first_parameter<_Newfirst, _Ty<_First, _Rest...> >
	{	
	typedef _Ty<_Newfirst, _Rest...> type;
	};

		
template<class _Ty>
	struct _Get_element_type
	{ template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::element_type>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename _Get_first_parameter<_Uty>::type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };
#line 186 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xmemory0"

		
template<class _Ty>
	struct _Get_ptr_difference_type
	{ template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::difference_type>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<ptrdiff_t>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };
#line 192 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xmemory0"

		
template<class _Ty,
	class _Other>
	struct _Get_rebind_type
	{ template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::template rebind<_Other>::other>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename _Replace_first_parameter<_Other , _Uty>::type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };
#line 199 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xmemory0"

		
template<class _Ty>
	struct pointer_traits
	{	
	typedef pointer_traits<_Ty> other;

	typedef typename _Get_element_type<_Ty>::type element_type;
	typedef _Ty pointer;
	typedef typename _Get_ptr_difference_type<_Ty>::type difference_type;

	template<class _Other>
		struct rebind
		{	
		typedef typename _Get_rebind_type<_Ty, _Other>::type other;
		};

	typedef typename _If<is_void<element_type>::value,
		char&,
		typename add_reference<element_type>::type>::type _Reftype;

	static pointer pointer_to(_Reftype _Val)
		{	
		return (_Ty::pointer_to(_Val));
		}
	};

		
template<class _Ty>
	struct pointer_traits<_Ty *>
	{	
	typedef pointer_traits<_Ty *> other;

	typedef _Ty element_type;
	typedef _Ty *pointer;
	typedef ptrdiff_t difference_type;

	template<class _Other>
		struct rebind
		{	
		typedef _Other *other;
		};

	typedef typename _If<is_void<_Ty>::value,
		char&,
		typename add_reference<_Ty>::type>::type _Reftype;

	static pointer pointer_to(_Reftype _Val)
		{	
		return (::std:: addressof(_Val));
		}
	};

		
template<class _Ty>
	struct _Get_pointer_type
	{ template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::pointer>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename _Ty::value_type *>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };
#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xmemory0"

		
template<class _Ty>
	struct _Get_const_pointer_type
	{ template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::const_pointer>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename pointer_traits<typename _Get_pointer_type<_Ty>::type> ::template rebind<const typename _Ty::value_type>::other>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };
#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xmemory0"

		
template<class _Ty>
	struct _Get_void_pointer_type
	{ template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::void_pointer>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename pointer_traits<typename _Get_pointer_type<_Ty>::type> ::template rebind<void>::other>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };
#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xmemory0"

		
template<class _Ty>
	struct _Get_const_void_pointer_type
	{ template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::const_void_pointer>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename pointer_traits<typename _Get_pointer_type<_Ty>::type> ::template rebind<const void>::other>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };
#line 278 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xmemory0"

		
template<class _Ty>
	struct _Get_difference_type
	{ template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::difference_type>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename _Get_ptr_difference_type< typename _Get_pointer_type<_Ty>::type>::type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };
#line 285 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xmemory0"

		
template<class _Ty>
	struct _Get_size_type
	{ template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::size_type>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename make_unsigned< typename _Get_difference_type<_Ty>::type>::type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };
#line 292 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xmemory0"

		
template<class _Ty>
	struct _Get_propagate_on_container_copy
	{ template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::propagate_on_container_copy_assignment>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<false_type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };
#line 298 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xmemory0"

		
template<class _Ty>
	struct _Get_propagate_on_container_move
	{ template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::propagate_on_container_move_assignment>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<false_type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };
#line 304 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xmemory0"

		
template<class _Ty>
	struct _Get_propagate_on_container_swap
	{ template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::propagate_on_container_swap>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<false_type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };
#line 310 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xmemory0"

		
struct _Alloc_allocate
	{	
		

	template<class _Alloc,
		class _Size_type,
		class _Const_void_pointer>
		static auto _Fn(int, _Alloc& _Al,
			_Size_type _Count,
			_Const_void_pointer _Hint)
			-> decltype(_Al.allocate(_Count, _Hint))
		{	
		return (_Al.allocate(_Count, _Hint));
		}

	template<class _Alloc,
		class _Size_type,
		class _Const_void_pointer>
		static auto _Fn(_Wrap_int, _Alloc& _Al,
			_Size_type _Count,
			_Const_void_pointer)
			-> decltype(_Al.allocate(_Count))
		{	
		return (_Al.allocate(_Count));
		}
	};

		
struct _Alloc_construct
	{	
		

	template<class _Ty,
		class _Objty,
		class... _Types>
		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr,
			_Types&&... _Args)
			-> decltype(
				_Al.construct(_Ptr, ::std:: forward<_Types>(_Args)...))
		{	
		_Al.construct(_Ptr, ::std:: forward<_Types>(_Args)...);
		}

	template<class _Ty,
		class _Objty,
		class... _Types>
		static auto _Fn(_Wrap_int, _Ty&, _Objty *_Ptr,
			_Types&&... _Args)
			-> void
		{	
		::new (static_cast<void *>(_Ptr))
			_Objty(::std:: forward<_Types>(_Args)...);
		}

	};

		
struct _Alloc_destroy
	{	
	template<class _Ty,
		class _Objty>
		static auto _Fn(int, _Ty& _Al, _Objty *_Ptr)
			-> decltype(_Al.destroy(_Ptr))
		{	
		_Al.destroy(_Ptr);
		}

	template<class _Ty,
		class _Objty>
		static auto _Fn(_Wrap_int, _Ty&, _Objty *_Ptr)
			-> void
		{	
		_Ptr->~_Objty();
		}
	};

		
struct _Alloc_max_size
	{	
	template<class _Ty>
		static auto _Fn(int, const _Ty& _Al)
			-> decltype(_Al.max_size())
		{	
		return (_Al.max_size());
		}

	template<class _Ty>
		static auto _Fn(_Wrap_int, const _Ty&)
			-> typename _Get_size_type<_Ty>::type
		{	
		return ((numeric_limits<typename _Get_size_type<_Ty>::type>::max)());
		}
	};

		
struct _Alloc_select
	{	
		

	template<class _Ty>
		static auto _Fn(int, const _Ty& _Al)
			-> decltype((_Ty)_Al.select_on_container_copy_construction())
		{	
		return (_Al.select_on_container_copy_construction());
		}

	template<class _Ty>
		static auto _Fn(_Wrap_int, const _Ty& _Al)
			-> _Ty
		{	
		return (_Al);
		}
	};

		
template<class _Alloc>
	struct allocator_traits
	{	
	typedef allocator_traits<_Alloc> other;

	typedef _Alloc allocator_type;
	typedef typename _Alloc::value_type value_type;

	typedef typename _Get_pointer_type<_Alloc>::type
		pointer;
	typedef typename _Get_const_pointer_type<_Alloc>::type
		const_pointer;
	typedef typename _Get_void_pointer_type<_Alloc>::type
		void_pointer;
	typedef typename _Get_const_void_pointer_type<_Alloc>::type
		const_void_pointer;

	typedef typename _Get_size_type<_Alloc>::type size_type;
	typedef typename _Get_difference_type<_Alloc>::type difference_type;

	typedef typename _Get_propagate_on_container_copy<_Alloc>::type
		propagate_on_container_copy_assignment;
	typedef typename _Get_propagate_on_container_move<_Alloc>::type
		propagate_on_container_move_assignment;
	typedef typename _Get_propagate_on_container_swap<_Alloc>::type
		propagate_on_container_swap;

	template<class _Other>
		struct rebind_alloc
		{	
		typedef typename _Get_rebind_type<_Alloc, _Other>::type other;
		};

	template<class _Other>
		struct rebind_traits
		{	
			
		typedef typename rebind_alloc<_Other>::other _Other_alloc;
		typedef allocator_traits<_Other_alloc> other;
		};

	static pointer allocate(_Alloc& _Al, size_type _Count)
		{	
		return (_Al.allocate(_Count));
		}

	static pointer allocate(_Alloc& _Al, size_type _Count,
		const_void_pointer _Hint)
		{	
		return (_Alloc_allocate::_Fn(0, _Al, _Count, _Hint));
		}

	static void deallocate(_Alloc& _Al,
		pointer _Ptr, size_type _Count)
		{	
		_Al.deallocate(_Ptr, _Count);
		}

	template<class _Ty,
		class... _Types>
		static void construct(_Alloc& _Al, _Ty *_Ptr,
			_Types&&... _Args)
		{	
		_Alloc_construct::_Fn(0, _Al, _Ptr,
			::std:: forward<_Types>(_Args)...);
		}


	template<class _Ty>
		static void destroy(_Alloc& _Al, _Ty *_Ptr)
		{	
		_Alloc_destroy::_Fn(0, _Al, _Ptr);
		}

	static size_type max_size(const _Alloc& _Al)
		{	
		return (_Alloc_max_size::_Fn(0, _Al));
		}

	static _Alloc select_on_container_copy_construction(
		const _Alloc& _Al)
		{	
		return (_Alloc_select::_Fn(0, _Al));
		}
	};

		
template<class _Ty>
	struct _Allocator_base
	{	
	typedef _Ty value_type;
	};

		
template<class _Ty>
	struct _Allocator_base<const _Ty>
	{	
	typedef _Ty value_type;
	};

		
template<class _Ty>
	class allocator
		: public _Allocator_base<_Ty>
	{	
public:
	typedef allocator<_Ty> other;

	typedef _Allocator_base<_Ty> _Mybase;
	typedef typename _Mybase::value_type value_type;

	typedef value_type *pointer;
	typedef const value_type *const_pointer;
	typedef void *void_pointer;
	typedef const void *const_void_pointer;

	typedef value_type& reference;
	typedef const value_type& const_reference;

	typedef size_t size_type;
	typedef ptrdiff_t difference_type;

	typedef false_type propagate_on_container_copy_assignment;
	typedef false_type propagate_on_container_move_assignment;
	typedef false_type propagate_on_container_swap;

	allocator<_Ty> select_on_container_copy_construction() const
		{	
		return (*this);
		}

	template<class _Other>
		struct rebind
		{	
		typedef allocator<_Other> other;
		};

	pointer address(reference _Val) const throw ()
		{	
		return (::std:: addressof(_Val));
		}

	const_pointer address(const_reference _Val) const throw ()
		{	
		return (::std:: addressof(_Val));
		}

	allocator() throw ()
		{	
		}

	allocator(const allocator<_Ty>&) throw ()
		{	
		}

	template<class _Other>
		allocator(const allocator<_Other>&) throw ()
		{	
		}

	template<class _Other>
		allocator<_Ty>& operator=(const allocator<_Other>&)
		{	
		return (*this);
		}

	void deallocate(pointer _Ptr, size_type)
		{	
		::operator delete(_Ptr);
		}

	pointer allocate(size_type _Count)
		{	
		return (_Allocate(_Count, (pointer)0));
		}

	pointer allocate(size_type _Count, const void *)
		{	
		return (allocate(_Count));
		}

	void construct(_Ty *_Ptr)
		{	
		::new ((void *)_Ptr) _Ty();
		}

	void construct(_Ty *_Ptr, const _Ty& _Val)
		{	
		::new ((void *)_Ptr) _Ty(_Val);
		}

	template<class _Objty,
		class... _Types>
		void construct(_Objty *_Ptr, _Types&&... _Args)
		{	
		::new ((void *)_Ptr) _Objty(::std:: forward<_Types>(_Args)...);
		}


	template<class _Uty>
		void destroy(_Uty *_Ptr)
		{	
		_Ptr->~_Uty();
		}

	size_t max_size() const throw ()
		{	
		return ((size_t)(-1) / sizeof (_Ty));
		}
	};

		
template<>
	class allocator<void>
	{	
public:
	typedef allocator<void> other;

	typedef void value_type;

	typedef void *pointer;
	typedef const void *const_pointer;
	typedef void *void_pointer;
	typedef const void *const_void_pointer;

	template<class _Other>
		struct rebind
		{	
		typedef allocator<_Other> other;
		};

	allocator() throw ()
		{	
		}

	allocator(const allocator<void>&) throw ()
		{	
		}

	template<class _Other>
		allocator(const allocator<_Other>&) throw ()
		{	
		}

	template<class _Other>
		allocator<void>& operator=(const allocator<_Other>&)
		{	
		return (*this);
		}
	};

template<class _Ty,
	class _Other> inline
	bool operator==(const allocator<_Ty>&,
		const allocator<_Other>&) throw ()
	{	
	return (true);
	}

template<class _Ty,
	class _Other> inline
	bool operator!=(const allocator<_Ty>& _Left,
		const allocator<_Other>& _Right) throw ()
	{	
	return (!(_Left == _Right));
	}

		
template<class _Ty>
	struct allocator_traits<allocator<_Ty> >
	{	
	typedef allocator<_Ty> _Alloc;

	typedef allocator_traits<_Alloc> other;

	typedef _Alloc allocator_type;
	typedef typename _Alloc::value_type value_type;

	typedef value_type *pointer;
	typedef const value_type *const_pointer;
	typedef void *void_pointer;
	typedef const void *const_void_pointer;

	typedef size_t size_type;
	typedef ptrdiff_t difference_type;

	typedef false_type propagate_on_container_copy_assignment;
	typedef false_type propagate_on_container_move_assignment;
	typedef false_type propagate_on_container_swap;

	template<class _Other>
		struct rebind_alloc
		{	
		typedef allocator<_Other> other;
		};

	template<class _Other>
		struct rebind_traits
		{	
			
		typedef allocator_traits<allocator<_Other> > other;
		};

	static pointer allocate(_Alloc& _Al, size_type _Count)
		{	
		return (_Al.allocate(_Count));
		}

	static pointer allocate(_Alloc& _Al, size_type _Count,
		const_void_pointer _Hint)
		{	
		return (_Al.allocate(_Count, _Hint));
		}

	static void deallocate(_Alloc& _Al,
		pointer _Ptr, size_type _Count)
		{	
		_Al.deallocate(_Ptr, _Count);
		}

	template<class _Objty,
		class... _Types>
		static void construct(_Alloc& _Al, _Objty *_Ptr,
			_Types&&... _Args)
		{	
		_Al.construct(_Ptr, ::std:: forward<_Types>(_Args)...);
		}


	template<class _Uty>
		static void destroy(_Alloc& _Al, _Uty *_Ptr)
		{	
		_Al.destroy(_Ptr);
		}

	static size_type max_size(const _Alloc& _Al)
		{	
		return (_Al.max_size());
		}

	static _Alloc select_on_container_copy_construction(
		const _Alloc& _Al)
		{	
		return (_Al.select_on_container_copy_construction());
		}
	};

		
template<class _Alloc>
	struct _Wrap_alloc
		: public _Alloc
	{	
	typedef _Wrap_alloc<_Alloc> other;

	typedef _Alloc _Mybase;
	typedef allocator_traits<_Alloc> _Mytraits;

	typedef typename _Mytraits::value_type value_type;

	typedef typename _Mytraits::pointer pointer;
	typedef typename _Mytraits::const_pointer const_pointer;
	typedef typename _Mytraits::void_pointer void_pointer;
	typedef typename _Mytraits::const_void_pointer const_void_pointer;

	typedef typename _If<is_void<value_type>::value,
		int, value_type>::type& reference;
	typedef typename _If<is_void<const value_type>::value,
		const int, const value_type>::type& const_reference;

	typedef typename _Mytraits::size_type size_type;
	typedef typename _Mytraits::difference_type difference_type;

	typedef typename _Mytraits::propagate_on_container_copy_assignment
		propagate_on_container_copy_assignment;
	typedef typename _Mytraits::propagate_on_container_move_assignment
		propagate_on_container_move_assignment;
	typedef typename _Mytraits::propagate_on_container_swap
		propagate_on_container_swap;

	_Wrap_alloc select_on_container_copy_construction() const
		{	
		return (_Mytraits::select_on_container_copy_construction(*this));
		}

	template<class _Other>
		struct rebind
		{	
		typedef typename _Mytraits::template rebind_alloc<_Other>::other
			_Other_alloc;
		typedef _Wrap_alloc<_Other_alloc> other;
		};

	pointer address(reference _Val) const
		{	
		return (::std:: addressof(_Val));
		}

	const_pointer address(const_reference _Val) const
		{	
		return (::std:: addressof(_Val));
		}

	_Wrap_alloc() throw ()
		: _Mybase()
		{	
		}

	_Wrap_alloc(const _Mybase& _Right) throw ()
		: _Mybase(_Right)
		{	
		}

	_Wrap_alloc(const _Wrap_alloc& _Right) throw ()
		: _Mybase(_Right)
		{	
		}

	template<class _Other>
		_Wrap_alloc(const _Other& _Right) throw ()
		: _Mybase(_Right)
		{	
		}

	template<class _Other>
		_Wrap_alloc(_Other& _Right) throw ()
		: _Mybase(_Right)
		{	
		}

	_Wrap_alloc& operator=(const _Mybase& _Right)
		{	
		_Mybase::operator=(_Right);
		return (*this);
		}

	_Wrap_alloc& operator=(const _Wrap_alloc& _Right)
		{	
		_Mybase::operator=(_Right);
		return (*this);
		}

	template<class _Other>
		_Wrap_alloc& operator=(const _Other& _Right)
		{	
		_Mybase::operator=(_Right);
		return (*this);
		}

	pointer allocate(size_type _Count)
		{	
		return (_Mybase::allocate(_Count));
		}

	pointer allocate(size_type _Count,
		const_void_pointer _Hint)
		{	
		return (_Mytraits::allocate(*this, _Count, _Hint));
		}

	void deallocate(pointer _Ptr, size_type _Count)
		{	
		_Mybase::deallocate(_Ptr, _Count);
		}

	void construct(value_type *_Ptr)
		{	
		_Mytraits::construct(*this, _Ptr);
		}

	template<class _Ty,
		class... _Types>
		void construct(_Ty *_Ptr,
			_Types&&... _Args)
		{	
		_Mytraits::construct(*this, _Ptr,
			::std:: forward<_Types>(_Args)...);
		}


	template<class _Ty>
		void destroy(_Ty *_Ptr)
		{	
		_Mytraits::destroy(*this, _Ptr);
		}

	size_type max_size() const throw ()
		{	
		return (_Mytraits::max_size(*this));
		}
	};

template<class _Ty,
	class _Other> inline
	bool operator==(const _Wrap_alloc<_Ty>& _Left,
		const _Wrap_alloc<_Other>& _Right) throw ()
	{	
	return (static_cast<_Ty>(_Left) == static_cast<_Other>(_Right));
	}

template<class _Ty,
	class _Other> inline
	bool operator!=(const _Wrap_alloc<_Ty>& _Left,
		const _Wrap_alloc<_Other>& _Right) throw ()
	{	
	return (!(_Left == _Right));
	}
}

		

  
   #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xatomic0.h"

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

namespace std {
 
  
 #line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xatomic0.h"

		
typedef enum memory_order {
	memory_order_relaxed,
	memory_order_consume,
	memory_order_acquire,
	memory_order_release,
	memory_order_acq_rel,
	memory_order_seq_cst
	} memory_order;

typedef _Uint32t _Uint4_t;
typedef _Uint4_t _Atomic_integral_t;

	
	




  
  
  
  
  

  






#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xatomic0.h"
   

   

#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xatomic0.h"
	
   #line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xatomic0.h"
  #line 59 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xatomic0.h"

  

#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xatomic0.h"

  
   
  #line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xatomic0.h"

		

typedef long _Atomic_flag_t;

  
  
  

		
inline _Uint4_t _Atomic_load_4(volatile _Uint4_t *, memory_order);
inline int _Atomic_compare_exchange_weak_4(
	volatile _Uint4_t *, _Uint4_t *, _Uint4_t, memory_order, memory_order);
inline _Uint4_t _Atomic_fetch_add_4(
	volatile _Uint4_t *, _Uint4_t, memory_order);
inline _Uint4_t _Atomic_fetch_sub_4(
	volatile _Uint4_t *, _Uint4_t, memory_order);

typedef _Atomic_integral_t _Atomic_counter_t;

  
inline _Atomic_integral_t
	_Get_atomic_count(const _Atomic_counter_t& _Counter)
	{	
	return (_Counter);
	}

inline void _Init_atomic_counter(_Atomic_counter_t& _Counter,
	_Atomic_integral_t _Value)
	{	
	_Counter = _Value;
	}

inline _Atomic_integral_t _Inc_atomic_counter_explicit(
	_Atomic_counter_t& _Counter, memory_order _Order)
	{	
	return (_Atomic_fetch_add_4(&_Counter, 1, _Order) + 1);
	}

inline _Atomic_integral_t _Inc_atomic_counter(_Atomic_counter_t& _Counter)
	{	
	return (_Inc_atomic_counter_explicit(_Counter, memory_order_seq_cst));
	}

inline _Atomic_integral_t _Dec_atomic_counter_explicit(
	_Atomic_counter_t& _Counter, memory_order _Order)
	{	
	return (_Atomic_fetch_sub_4(&_Counter, 1, _Order) - 1);
	}

inline _Atomic_integral_t _Dec_atomic_counter(_Atomic_counter_t& _Counter)
	{	
	return (_Dec_atomic_counter_explicit(_Counter, memory_order_seq_cst));
	}

inline _Atomic_integral_t _Load_atomic_counter_explicit(
	_Atomic_counter_t& _Counter, memory_order _Order)
	{	
	return (_Atomic_load_4(&_Counter, _Order));
	}

inline _Atomic_integral_t _Load_atomic_counter(_Atomic_counter_t& _Counter)
	{	
	return (_Load_atomic_counter_explicit(_Counter, memory_order_seq_cst));
	}

inline _Atomic_integral_t _Compare_increment_atomic_counter_explicit(
	_Atomic_counter_t& _Counter,
	_Atomic_integral_t _Expected,
	memory_order _Order)
	{	
	return (_Atomic_compare_exchange_weak_4(
		&_Counter, &_Expected, _Expected + 1,
		_Order, _Order));
	}

inline _Atomic_integral_t _Compare_increment_atomic_counter(
	_Atomic_counter_t& _Counter, _Atomic_integral_t _Expected)
	{	
	return (_Compare_increment_atomic_counter_explicit(
		_Counter, _Expected, memory_order_seq_cst));
	}

  






























#line 182 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xatomic0.h"

		
extern "C" {
 void __cdecl _Lock_shared_ptr_spin_lock();
 void __cdecl _Unlock_shared_ptr_spin_lock();
}
}
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 193 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xatomic0.h"
#line 194 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xatomic0.h"





#line 939 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xmemory0"
   #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\intrin.h"












#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"







































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\intrin.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\setjmp.h"















#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"







































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\setjmp.h"









#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\setjmp.h"





#pragma pack(push,8)


extern "C" {
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\setjmp.h"













#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\setjmp.h"







typedef struct __JUMP_BUFFER {
    unsigned long Ebp;
    unsigned long Ebx;
    unsigned long Edi;
    unsigned long Esi;
    unsigned long Esp;
    unsigned long Eip;
    unsigned long Registration;
    unsigned long TryLevel;
    unsigned long Cookie;
    unsigned long UnwindFunc;
    unsigned long UnwindData[6];
} _JUMP_BUFFER;





















































































#line 162 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\setjmp.h"





typedef int jmp_buf[16];


#line 171 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\setjmp.h"




int __cdecl _setjmp(  jmp_buf _Buf);


}
#line 180 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\setjmp.h"


#pragma warning(push)
#pragma warning(disable:4987)
extern "C"
{
 __declspec(noreturn) void __cdecl longjmp(  jmp_buf _Buf,   int _Value) throw(...);
}
#pragma warning(pop)


#line 192 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\setjmp.h"

#pragma pack(pop)

#line 196 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\setjmp.h"
#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\intrin.h"






#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\immintrin.h"













#pragma once






#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\immintrin.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wmmintrin.h"
















#pragma once






#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wmmintrin.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\nmmintrin.h"

















#pragma once






#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\nmmintrin.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\smmintrin.h"

















#pragma once






#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\smmintrin.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\tmmintrin.h"










#pragma once






#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\tmmintrin.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\pmmintrin.h"


















#pragma once






#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\pmmintrin.h"




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\emmintrin.h"




















#pragma once






#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\emmintrin.h"




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xmmintrin.h"



























#pragma once






#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xmmintrin.h"





#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\mmintrin.h"


















#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"







































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\mmintrin.h"



#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\mmintrin.h"


extern "C" { 


#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\mmintrin.h"

typedef union __declspec(intrin_type) __declspec(align(8)) __m64
{
    unsigned __int64    m64_u64;
    float               m64_f32[2];
    __int8              m64_i8[8];
    __int16             m64_i16[4];
    __int32             m64_i32[2];
    __int64             m64_i64;
    unsigned __int8     m64_u8[8];
    unsigned __int16    m64_u16[4];
    unsigned __int32    m64_u32[2];
} __m64;


void  _m_empty(void);
__m64 _m_from_int(int _I);
int   _m_to_int(__m64 _M);
__m64 _m_packsswb(__m64 _MM1, __m64 _MM2);
__m64 _m_packssdw(__m64 _MM1, __m64 _MM2);
__m64 _m_packuswb(__m64 _MM1, __m64 _MM2);
__m64 _m_punpckhbw(__m64 _MM1, __m64 _MM2);
__m64 _m_punpckhwd(__m64 _MM1, __m64 _MM2);
__m64 _m_punpckhdq(__m64 _MM1, __m64 _MM2);
__m64 _m_punpcklbw(__m64 _MM1, __m64 _MM2);
__m64 _m_punpcklwd(__m64 _MM1, __m64 _MM2);
__m64 _m_punpckldq(__m64 _MM1, __m64 _MM2);


__m64 _m_paddb(__m64 _MM1, __m64 _MM2);
__m64 _m_paddw(__m64 _MM1, __m64 _MM2);
__m64 _m_paddd(__m64 _MM1, __m64 _MM2);
__m64 _m_paddsb(__m64 _MM1, __m64 _MM2);
__m64 _m_paddsw(__m64 _MM1, __m64 _MM2);
__m64 _m_paddusb(__m64 _MM1, __m64 _MM2);
__m64 _m_paddusw(__m64 _MM1, __m64 _MM2);
__m64 _m_psubb(__m64 _MM1, __m64 _MM2);
__m64 _m_psubw(__m64 _MM1, __m64 _MM2);
__m64 _m_psubd(__m64 _MM1, __m64 _MM2);
__m64 _m_psubsb(__m64 _MM1, __m64 _MM2);
__m64 _m_psubsw(__m64 _MM1, __m64 _MM2);
__m64 _m_psubusb(__m64 _MM1, __m64 _MM2);
__m64 _m_psubusw(__m64 _MM1, __m64 _MM2);
__m64 _m_pmaddwd(__m64 _MM1, __m64 _MM2);
__m64 _m_pmulhw(__m64 _MM1, __m64 _MM2);
__m64 _m_pmullw(__m64 _MM1, __m64 _MM2);


__m64 _m_psllw(__m64 _M, __m64 _Count);
__m64 _m_psllwi(__m64 _M, int _Count);
__m64 _m_pslld(__m64 _M, __m64 _Count);
__m64 _m_pslldi(__m64 _M, int _Count);
__m64 _m_psllq(__m64 _M, __m64 _Count);
__m64 _m_psllqi(__m64 _M, int _Count);
__m64 _m_psraw(__m64 _M, __m64 _Count);
__m64 _m_psrawi(__m64 _M, int _Count);
__m64 _m_psrad(__m64 _M, __m64 _Count);
__m64 _m_psradi(__m64 _M, int _Count);
__m64 _m_psrlw(__m64 _M, __m64 _Count);
__m64 _m_psrlwi(__m64 _M, int _Count);
__m64 _m_psrld(__m64 _M, __m64 _Count);
__m64 _m_psrldi(__m64 _M, int _Count);
__m64 _m_psrlq(__m64 _M, __m64 _Count);
__m64 _m_psrlqi(__m64 _M, int _Count);


__m64 _m_pand(__m64 _MM1, __m64 _MM2);
__m64 _m_pandn(__m64 _MM1, __m64 _MM2);
__m64 _m_por(__m64 _MM1, __m64 _MM2);
__m64 _m_pxor(__m64 _MM1, __m64 _MM2);


__m64 _m_pcmpeqb(__m64 _MM1, __m64 _MM2);
__m64 _m_pcmpeqw(__m64 _MM1, __m64 _MM2);
__m64 _m_pcmpeqd(__m64 _MM1, __m64 _MM2);
__m64 _m_pcmpgtb(__m64 _MM1, __m64 _MM2);
__m64 _m_pcmpgtw(__m64 _MM1, __m64 _MM2);
__m64 _m_pcmpgtd(__m64 _MM1, __m64 _MM2);


__m64 _mm_setzero_si64(void);
__m64 _mm_set_pi32(int _I1, int _I0);
__m64 _mm_set_pi16(short _S3, short _S2, short _S1, short _S0);
__m64 _mm_set_pi8(char _B7, char _B6, char _B5, char _B4,
                  char _B3, char _B2, char _B1, char _B0);
__m64 _mm_set1_pi32(int _I);
__m64 _mm_set1_pi16(short _S);
__m64 _mm_set1_pi8(char _B);
__m64 _mm_setr_pi32(int _I1, int _I0);
__m64 _mm_setr_pi16(short _S3, short _S2, short _S1, short _S0);
__m64 _mm_setr_pi8(char _B7, char _B6, char _B5, char _B4,
                   char _B3, char _B2, char _B1, char _B0);




























































}; 
#line 184 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\mmintrin.h"

#line 186 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\mmintrin.h"
#line 187 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\mmintrin.h"
#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\mmintrin.h"

#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xmmintrin.h"
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xmmintrin.h"

















typedef union __declspec(intrin_type) __declspec(align(16)) __m128 {
     float               m128_f32[4];
     unsigned __int64    m128_u64[2];
     __int8              m128_i8[16];
     __int16             m128_i16[8];
     __int32             m128_i32[4];
     __int64             m128_i64[2];
     unsigned __int8     m128_u8[16];
     unsigned __int16    m128_u16[8];
     unsigned __int32    m128_u32[4];
 } __m128;





#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xmmintrin.h"

 
 
 
 
 
 
 
 
 
 




 
 
 
 
 
 
 
 
 
 







































































 
 
 


extern "C" { 
  
#line 181 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xmmintrin.h"





extern __m128 _mm_add_ss(__m128 _A, __m128 _B);
extern __m128 _mm_add_ps(__m128 _A, __m128 _B);
extern __m128 _mm_sub_ss(__m128 _A, __m128 _B);
extern __m128 _mm_sub_ps(__m128 _A, __m128 _B);
extern __m128 _mm_mul_ss(__m128 _A, __m128 _B);
extern __m128 _mm_mul_ps(__m128 _A, __m128 _B);
extern __m128 _mm_div_ss(__m128 _A, __m128 _B);
extern __m128 _mm_div_ps(__m128 _A, __m128 _B);
extern __m128 _mm_sqrt_ss(__m128 _A);
extern __m128 _mm_sqrt_ps(__m128 _A);
extern __m128 _mm_rcp_ss(__m128 _A);
extern __m128 _mm_rcp_ps(__m128 _A);
extern __m128 _mm_rsqrt_ss(__m128 _A);
extern __m128 _mm_rsqrt_ps(__m128 _A);
extern __m128 _mm_min_ss(__m128 _A, __m128 _B);
extern __m128 _mm_min_ps(__m128 _A, __m128 _B);
extern __m128 _mm_max_ss(__m128 _A, __m128 _B);
extern __m128 _mm_max_ps(__m128 _A, __m128 _B);





extern __m128 _mm_and_ps(__m128 _A, __m128 _B);
extern __m128 _mm_andnot_ps(__m128 _A, __m128 _B);
extern __m128 _mm_or_ps(__m128 _A, __m128 _B);
extern __m128 _mm_xor_ps(__m128 _A, __m128 _B);





extern __m128 _mm_cmpeq_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpeq_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmplt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmplt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmple_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmple_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpgt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpgt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpge_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpge_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpneq_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpneq_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnlt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnlt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnle_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnle_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpngt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpngt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnge_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnge_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpord_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpord_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpunord_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpunord_ps(__m128 _A, __m128 _B);
extern int _mm_comieq_ss(__m128 _A, __m128 _B);
extern int _mm_comilt_ss(__m128 _A, __m128 _B);
extern int _mm_comile_ss(__m128 _A, __m128 _B);
extern int _mm_comigt_ss(__m128 _A, __m128 _B);
extern int _mm_comige_ss(__m128 _A, __m128 _B);
extern int _mm_comineq_ss(__m128 _A, __m128 _B);
extern int _mm_ucomieq_ss(__m128 _A, __m128 _B);
extern int _mm_ucomilt_ss(__m128 _A, __m128 _B);
extern int _mm_ucomile_ss(__m128 _A, __m128 _B);
extern int _mm_ucomigt_ss(__m128 _A, __m128 _B);
extern int _mm_ucomige_ss(__m128 _A, __m128 _B);
extern int _mm_ucomineq_ss(__m128 _A, __m128 _B);





extern int _mm_cvt_ss2si(__m128 _A);
extern __m64 _mm_cvt_ps2pi(__m128 _A);
extern int _mm_cvtt_ss2si(__m128 _A);
extern __m64 _mm_cvtt_ps2pi(__m128 _A);
extern __m128 _mm_cvt_si2ss(__m128, int);
extern __m128 _mm_cvt_pi2ps(__m128, __m64);
extern float _mm_cvtss_f32(__m128 _A);








#line 275 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xmmintrin.h"





extern __m128 _mm_shuffle_ps(__m128 _A, __m128 _B, unsigned int _Imm8);
extern __m128 _mm_unpackhi_ps(__m128 _A, __m128 _B);
extern __m128 _mm_unpacklo_ps(__m128 _A, __m128 _B);
extern __m128 _mm_loadh_pi(__m128, __m64 const*);
extern __m128 _mm_movehl_ps(__m128, __m128);
extern __m128 _mm_movelh_ps(__m128, __m128);
extern void _mm_storeh_pi(__m64 *, __m128);
extern __m128 _mm_loadl_pi(__m128, __m64 const*);
extern void _mm_storel_pi(__m64 *, __m128);
extern int _mm_movemask_ps(__m128 _A);





extern int _m_pextrw(__m64, int);
extern __m64 _m_pinsrw(__m64, int, int);
extern __m64 _m_pmaxsw(__m64, __m64);
extern __m64 _m_pmaxub(__m64, __m64);
extern __m64 _m_pminsw(__m64, __m64);
extern __m64 _m_pminub(__m64, __m64);
extern int _m_pmovmskb(__m64);
extern __m64 _m_pmulhuw(__m64, __m64);
extern __m64 _m_pshufw(__m64, int);
extern void _m_maskmovq(__m64, __m64, char *);
extern __m64 _m_pavgb(__m64, __m64);
extern __m64 _m_pavgw(__m64, __m64);
extern __m64 _m_psadbw(__m64, __m64);





extern __m128 _mm_set_ss(float _A);
extern __m128 _mm_set_ps1(float _A);
extern __m128 _mm_set_ps(float _A, float _B, float _C, float _D);
extern __m128 _mm_setr_ps(float _A, float _B, float _C, float _D);
extern __m128 _mm_setzero_ps(void);
extern __m128 _mm_load_ss(float const*_A);
extern __m128 _mm_load_ps1(float const*_A);
extern __m128 _mm_load_ps(float const*_A);
extern __m128 _mm_loadr_ps(float const*_A);
extern __m128 _mm_loadu_ps(float const*_A);
extern void _mm_store_ss(float *_V, __m128 _A);
extern void _mm_store_ps1(float *_V, __m128 _A);
extern void _mm_store_ps(float *_V, __m128 _A);
extern void _mm_storer_ps(float *_V, __m128 _A);
extern void _mm_storeu_ps(float *_V, __m128 _A);
extern void _mm_prefetch(char const*_A, int _Sel);
extern void _mm_stream_pi(__m64 *, __m64);
extern void _mm_stream_ps(float *, __m128);
extern __m128 _mm_move_ss(__m128 _A, __m128 _B);

extern void _mm_sfence(void);
extern unsigned int _mm_getcsr(void);
extern void _mm_setcsr(unsigned int);






























 
 
 

 
 
 
 
 
 
 
 
__inline __m128 _mm_cvtpi16_ps(__m64 a)
{
  __m128 tmp;
  __m64  ext_val = _m_pcmpgtw(_mm_setzero_si64(), a);

  tmp = _mm_cvt_pi2ps(_mm_setzero_ps(), _m_punpckhwd(a, ext_val));
  return(_mm_cvt_pi2ps(_mm_movelh_ps(tmp, tmp),
                        _m_punpcklwd(a, ext_val)));
}


 
 
 
 
 
 
 
 
__inline __m128 _mm_cvtpu16_ps(__m64 a)
{
  __m128 tmp;
  __m64  ext_val = _mm_setzero_si64();

  tmp = _mm_cvt_pi2ps(_mm_setzero_ps(), _m_punpckhwd(a, ext_val));
  return(_mm_cvt_pi2ps(_mm_movelh_ps(tmp, tmp),
                        _m_punpcklwd(a, ext_val)));
}


 
 
 
 
 
 
 
 
__inline __m64 _mm_cvtps_pi16(__m128 a)
{
  return _m_packssdw(_mm_cvt_ps2pi(a),
                        _mm_cvt_ps2pi(_mm_movehl_ps(a, a)));
}


 
 
 
 
 
 
 
 
__inline __m128 _mm_cvtpi8_ps(__m64 a)
{
  __m64  ext_val = _m_pcmpgtb(_mm_setzero_si64(), a);

  return _mm_cvtpi16_ps(_m_punpcklbw(a, ext_val));
}


 
 
 
 
 
 
 
 
 
__inline __m128 _mm_cvtpu8_ps(__m64 a)
{
  return _mm_cvtpu16_ps(_m_punpcklbw(a, _mm_setzero_si64()));
}


 
 
 
 
 
 
 
 
__inline __m64 _mm_cvtps_pi8(__m128 a)
{
  return _m_packsswb(_mm_cvtps_pi16(a), _mm_setzero_si64());
}


 
 
 
 
 
 
 
 
 
__inline __m128 _mm_cvtpi32x2_ps(__m64 a, __m64 b)
{
  return _mm_movelh_ps(_mm_cvt_pi2ps(_mm_setzero_ps(), a),
                       _mm_cvt_pi2ps(_mm_setzero_ps(), b));
}



}; 
#line 487 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xmmintrin.h"

#line 489 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xmmintrin.h"

#line 491 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xmmintrin.h"
#line 492 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xmmintrin.h"
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\emmintrin.h"

typedef union __declspec(intrin_type) __declspec(align(16)) __m128i {
    __int8              m128i_i8[16];
    __int16             m128i_i16[8];
    __int32             m128i_i32[4];
    __int64             m128i_i64[2];
    unsigned __int8     m128i_u8[16];
    unsigned __int16    m128i_u16[8];
    unsigned __int32    m128i_u32[4];
    unsigned __int64    m128i_u64[2];
} __m128i;

typedef struct __declspec(intrin_type) __declspec(align(16)) __m128d {
    double              m128d_f64[2];
} __m128d;






 
 
 


extern "C" { 
  
#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\emmintrin.h"





extern __m128d _mm_add_sd(__m128d _A, __m128d _B);
extern __m128d _mm_add_pd(__m128d _A, __m128d _B);
extern __m128d _mm_sub_sd(__m128d _A, __m128d _B);
extern __m128d _mm_sub_pd(__m128d _A, __m128d _B);
extern __m128d _mm_mul_sd(__m128d _A, __m128d _B);
extern __m128d _mm_mul_pd(__m128d _A, __m128d _B);
extern __m128d _mm_sqrt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_sqrt_pd(__m128d _A);
extern __m128d _mm_div_sd(__m128d _A, __m128d _B);
extern __m128d _mm_div_pd(__m128d _A, __m128d _B);
extern __m128d _mm_min_sd(__m128d _A, __m128d _B);
extern __m128d _mm_min_pd(__m128d _A, __m128d _B);
extern __m128d _mm_max_sd(__m128d _A, __m128d _B);
extern __m128d _mm_max_pd(__m128d _A, __m128d _B);





extern __m128d _mm_and_pd(__m128d _A, __m128d _B);
extern __m128d _mm_andnot_pd(__m128d _A, __m128d _B);
extern __m128d _mm_or_pd(__m128d _A, __m128d _B);
extern __m128d _mm_xor_pd(__m128d _A, __m128d _B);





extern __m128d _mm_cmpeq_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpeq_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmplt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmplt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmple_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmple_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpgt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpgt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpge_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpge_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpneq_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpneq_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnlt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnlt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnle_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnle_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpngt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpngt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnge_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnge_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpord_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpord_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpunord_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpunord_sd(__m128d _A, __m128d _B);
extern int _mm_comieq_sd(__m128d _A, __m128d _B);
extern int _mm_comilt_sd(__m128d _A, __m128d _B);
extern int _mm_comile_sd(__m128d _A, __m128d _B);
extern int _mm_comigt_sd(__m128d _A, __m128d _B);
extern int _mm_comige_sd(__m128d _A, __m128d _B);
extern int _mm_comineq_sd(__m128d _A, __m128d _B);
extern int _mm_ucomieq_sd(__m128d _A, __m128d _B);
extern int _mm_ucomilt_sd(__m128d _A, __m128d _B);
extern int _mm_ucomile_sd(__m128d _A, __m128d _B);
extern int _mm_ucomigt_sd(__m128d _A, __m128d _B);
extern int _mm_ucomige_sd(__m128d _A, __m128d _B);
extern int _mm_ucomineq_sd(__m128d _A, __m128d _B);





extern __m128d _mm_cvtepi32_pd(__m128i _A);
extern __m128i _mm_cvtpd_epi32(__m128d _A);
extern __m128i _mm_cvttpd_epi32(__m128d _A);
extern __m128 _mm_cvtepi32_ps(__m128i _A);
extern __m128i _mm_cvtps_epi32(__m128 _A);
extern __m128i _mm_cvttps_epi32(__m128 _A);
extern __m128 _mm_cvtpd_ps(__m128d _A);
extern __m128d _mm_cvtps_pd(__m128 _A);
extern __m128 _mm_cvtsd_ss(__m128 _A, __m128d _B);
extern __m128d _mm_cvtss_sd(__m128d _A, __m128 _B);

extern int _mm_cvtsd_si32(__m128d _A);
extern int _mm_cvttsd_si32(__m128d _A);
extern __m128d _mm_cvtsi32_sd(__m128d _A, int _B);

extern __m64 _mm_cvtpd_pi32(__m128d _A);
extern __m64 _mm_cvttpd_pi32(__m128d _A);
extern __m128d _mm_cvtpi32_pd(__m64 _A);





extern __m128d _mm_unpackhi_pd(__m128d _A, __m128d _B);
extern __m128d _mm_unpacklo_pd(__m128d _A, __m128d _B);
extern int _mm_movemask_pd(__m128d _A);
extern __m128d _mm_shuffle_pd(__m128d _A, __m128d _B, int _I);





extern __m128d _mm_load_pd(double const*_Dp);
extern __m128d _mm_load1_pd(double const*_Dp);
extern __m128d _mm_loadr_pd(double const*_Dp);
extern __m128d _mm_loadu_pd(double const*_Dp);
extern __m128d _mm_load_sd(double const*_Dp);
extern __m128d _mm_loadh_pd(__m128d _A, double const*_Dp);
extern __m128d _mm_loadl_pd(__m128d _A, double const*_Dp);





extern __m128d _mm_set_sd(double _W);
extern __m128d _mm_set1_pd(double _A);
extern __m128d _mm_set_pd(double _Z, double _Y);
extern __m128d _mm_setr_pd(double _Y, double _Z);
extern __m128d _mm_setzero_pd(void);
extern __m128d _mm_move_sd(__m128d _A, __m128d _B);





extern void _mm_store_sd(double *_Dp, __m128d _A);
extern void _mm_store1_pd(double *_Dp, __m128d _A);
extern void _mm_store_pd(double *_Dp, __m128d _A);
extern void _mm_storeu_pd(double *_Dp, __m128d _A);
extern void _mm_storer_pd(double *_Dp, __m128d _A);
extern void _mm_storeh_pd(double *_Dp, __m128d _A);
extern void _mm_storel_pd(double *_Dp, __m128d _A);





extern __m128i _mm_add_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_add_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_add_epi32(__m128i _A, __m128i _B);
extern __m64 _mm_add_si64(__m64 _A, __m64 _B);
extern __m128i _mm_add_epi64(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epu16(__m128i _A, __m128i _B);
extern __m128i _mm_avg_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_avg_epu16(__m128i _A, __m128i _B);
extern __m128i _mm_madd_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_max_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_max_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_min_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_min_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_mulhi_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_mulhi_epu16(__m128i _A, __m128i _B);
extern __m128i _mm_mullo_epi16(__m128i _A, __m128i _B);
extern __m64 _mm_mul_su32(__m64 _A, __m64 _B);
extern __m128i _mm_mul_epu32(__m128i _A, __m128i _B);
extern __m128i _mm_sad_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_sub_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_sub_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_sub_epi32(__m128i _A, __m128i _B);
extern __m64 _mm_sub_si64(__m64 _A, __m64 _B);
extern __m128i _mm_sub_epi64(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epu16(__m128i _A, __m128i _B);





extern __m128i _mm_and_si128(__m128i _A, __m128i _B);
extern __m128i _mm_andnot_si128(__m128i _A, __m128i _B);
extern __m128i _mm_or_si128(__m128i _A, __m128i _B);
extern __m128i _mm_xor_si128(__m128i _A, __m128i _B);





extern __m128i _mm_slli_si128(__m128i _A, int _Imm);
extern __m128i _mm_slli_epi16(__m128i _A, int _Count);
extern __m128i _mm_sll_epi16(__m128i _A, __m128i _Count);
extern __m128i _mm_slli_epi32(__m128i _A, int _Count);
extern __m128i _mm_sll_epi32(__m128i _A, __m128i _Count);
extern __m128i _mm_slli_epi64(__m128i _A, int _Count);
extern __m128i _mm_sll_epi64(__m128i _A, __m128i _Count);
extern __m128i _mm_srai_epi16(__m128i _A, int _Count);
extern __m128i _mm_sra_epi16(__m128i _A, __m128i _Count);
extern __m128i _mm_srai_epi32(__m128i _A, int _Count);
extern __m128i _mm_sra_epi32(__m128i _A, __m128i _Count);
extern __m128i _mm_srli_si128(__m128i _A, int _Imm);
extern __m128i _mm_srli_epi16(__m128i _A, int _Count);
extern __m128i _mm_srl_epi16(__m128i _A, __m128i _Count);
extern __m128i _mm_srli_epi32(__m128i _A, int _Count);
extern __m128i _mm_srl_epi32(__m128i _A, __m128i _Count);
extern __m128i _mm_srli_epi64(__m128i _A, int _Count);
extern __m128i _mm_srl_epi64(__m128i _A, __m128i _Count);





extern __m128i _mm_cmpeq_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_cmpeq_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_cmpeq_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_cmpgt_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_cmpgt_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_cmpgt_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_cmplt_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_cmplt_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_cmplt_epi32(__m128i _A, __m128i _B);





extern __m128i _mm_cvtsi32_si128(int _A);
extern int _mm_cvtsi128_si32(__m128i _A);





extern __m128i _mm_packs_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_packs_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_packus_epi16(__m128i _A, __m128i _B);
extern int _mm_extract_epi16(__m128i _A, int _Imm);
extern __m128i _mm_insert_epi16(__m128i _A, int _B, int _Imm);
extern int _mm_movemask_epi8(__m128i _A);
extern __m128i _mm_shuffle_epi32(__m128i _A, int _Imm);
extern __m128i _mm_shufflehi_epi16(__m128i _A, int _Imm);
extern __m128i _mm_shufflelo_epi16(__m128i _A, int _Imm);
extern __m128i _mm_unpackhi_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_unpackhi_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_unpackhi_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_unpackhi_epi64(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi64(__m128i _A, __m128i _B);





extern __m128i _mm_load_si128(__m128i const*_P);
extern __m128i _mm_loadu_si128(__m128i const*_P);
extern __m128i _mm_loadl_epi64(__m128i const*_P);





extern __m128i _mm_set_epi64(__m64 _Q1, __m64 _Q0);
extern __m128i _mm_set_epi32(int _I3, int _I2, int _I1, int _I0);
extern __m128i _mm_set_epi16(short _W7, short _W6, short _W5, short _W4,
                             short _W3, short _W2, short _W1, short _W0);
extern __m128i _mm_set_epi8(char _B15, char _B14, char _B13, char _B12,
                            char _B11, char _B10, char _B9, char _B8,
                            char _B7, char _B6, char _B5, char _B4,
                            char _B3, char _B2, char _B1, char _B0);
extern __m128i _mm_set1_epi64(__m64 _Q);
extern __m128i _mm_set1_epi32(int _I);
extern __m128i _mm_set1_epi16(short _W);
extern __m128i _mm_set1_epi8(char _B);
extern __m128i _mm_setl_epi64(__m128i _Q);
extern __m128i _mm_setr_epi64(__m64 _Q0, __m64 _Q1);
extern __m128i _mm_setr_epi32(int _I0, int _I1, int _I2, int _I3);
extern __m128i _mm_setr_epi16(short _W0, short _W1, short _W2, short _W3,
                              short _W4, short _W5, short _W6, short _W7);
extern __m128i _mm_setr_epi8(char _B15, char _B14, char _B13, char _B12,
                             char _B11, char _B10, char _B9, char _B8,
                             char _B7, char _B6, char _B5, char _B4,
                             char _B3, char _B2, char _B1, char _B0);
extern __m128i _mm_setzero_si128(void);





extern void _mm_store_si128(__m128i *_P, __m128i _B);
extern void _mm_storeu_si128(__m128i *_P, __m128i _B);
extern void _mm_storel_epi64(__m128i *_P, __m128i _Q);
extern void _mm_maskmoveu_si128(__m128i _D, __m128i _N, char *_P);





extern __m128i _mm_move_epi64(__m128i _Q);
extern __m128i _mm_movpi64_epi64(__m64 _Q);
extern __m64 _mm_movepi64_pi64(__m128i _Q);





extern void _mm_stream_pd(double *_Dp, __m128d _A);
extern void _mm_stream_si128(__m128i *_P, __m128i _A);
extern void _mm_clflush(void const*_P);
extern void _mm_lfence(void);
extern void _mm_mfence(void);
extern void _mm_stream_si32(int *_P, int _I);
extern void _mm_pause(void);





extern double _mm_cvtsd_f64(__m128d _A);







extern __m128  _mm_castpd_ps(__m128d);
extern __m128i _mm_castpd_si128(__m128d);
extern __m128d _mm_castps_pd(__m128);
extern __m128i _mm_castps_si128(__m128);
extern __m128  _mm_castsi128_ps(__m128i);
extern __m128d _mm_castsi128_pd(__m128i);













#line 407 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\emmintrin.h"


}; 
#line 411 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\emmintrin.h"

#line 413 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\emmintrin.h"

#line 415 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\emmintrin.h"
#line 416 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\emmintrin.h"
#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\pmmintrin.h"

 
 
 














 
 
 


extern "C" { 
  
#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\pmmintrin.h"





extern __m128 _mm_addsub_ps(__m128 a, __m128 b);
extern __m128 _mm_hadd_ps(__m128 a, __m128 b);
extern __m128 _mm_hsub_ps(__m128 a, __m128 b);
extern __m128 _mm_movehdup_ps(__m128 a);
extern __m128 _mm_moveldup_ps(__m128 a);





extern __m128d _mm_addsub_pd(__m128d a, __m128d b);
extern __m128d _mm_hadd_pd(__m128d a, __m128d b);
extern __m128d _mm_hsub_pd(__m128d a, __m128d b);
extern __m128d _mm_loaddup_pd(double const * dp);
extern __m128d _mm_movedup_pd(__m128d a);




extern __m128i _mm_lddqu_si128(__m128i const *p);







extern void _mm_monitor(void const *p, unsigned extensions, unsigned hints);




extern void _mm_mwait(unsigned extensions, unsigned hints);


}; 
#line 100 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\pmmintrin.h"

#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\pmmintrin.h"

#line 104 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\pmmintrin.h"
#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\pmmintrin.h"
#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\tmmintrin.h"









extern "C" {
#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\tmmintrin.h"

    
    

    extern __m128i _mm_hadd_epi16 (__m128i a, __m128i b);
    extern __m128i _mm_hadd_epi32 (__m128i a, __m128i b);
    extern __m128i _mm_hadds_epi16 (__m128i a, __m128i b);

    extern __m64 _mm_hadd_pi16 (__m64 a, __m64 b);
    extern __m64 _mm_hadd_pi32 (__m64 a, __m64 b);
    extern __m64 _mm_hadds_pi16 (__m64 a, __m64 b);

    
    

    extern __m128i _mm_hsub_epi16 (__m128i a, __m128i b);
    extern __m128i _mm_hsub_epi32 (__m128i a, __m128i b);
    extern __m128i _mm_hsubs_epi16 (__m128i a, __m128i b);

    extern __m64 _mm_hsub_pi16 (__m64 a, __m64 b);
    extern __m64 _mm_hsub_pi32 (__m64 a, __m64 b);
    extern __m64 _mm_hsubs_pi16 (__m64 a, __m64 b);

    
    

    extern __m128i _mm_maddubs_epi16 (__m128i a, __m128i b);

    extern __m64 _mm_maddubs_pi16 (__m64 a, __m64 b);

    
    

    extern __m128i _mm_mulhrs_epi16 (__m128i a, __m128i b);

    extern __m64 _mm_mulhrs_pi16 (__m64 a, __m64 b);

    
    

    extern __m128i _mm_shuffle_epi8 (__m128i a, __m128i b);

    extern __m64 _mm_shuffle_pi8 (__m64 a, __m64 b);

    
    

    extern __m128i _mm_sign_epi8 (__m128i a, __m128i b);
    extern __m128i _mm_sign_epi16 (__m128i a, __m128i b);
    extern __m128i _mm_sign_epi32 (__m128i a, __m128i b);

    extern __m64 _mm_sign_pi8 (__m64 a, __m64 b);
    extern __m64 _mm_sign_pi16 (__m64 a, __m64 b);
    extern __m64 _mm_sign_pi32 (__m64 a, __m64 b);

    
    

    extern __m128i _mm_alignr_epi8 (__m128i a, __m128i b, int n);

    extern __m64 _mm_alignr_pi8 (__m64 a, __m64 b, int n);

    
    

    extern __m128i _mm_abs_epi8 (__m128i a);
    extern __m128i _mm_abs_epi16 (__m128i a);
    extern __m128i _mm_abs_epi32 (__m128i a);

    extern __m64 _mm_abs_pi8 (__m64 a);
    extern __m64 _mm_abs_pi16 (__m64 a);
    extern __m64 _mm_abs_pi32 (__m64 a);


};
#line 108 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\tmmintrin.h"

#line 110 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\tmmintrin.h"

#line 112 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\tmmintrin.h"

#line 114 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\tmmintrin.h"
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\smmintrin.h"


















































extern "C" {
#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\smmintrin.h"

        
        

        extern __m128i _mm_blend_epi16 (__m128i v1, __m128i v2,
                                        const int mask);
        extern __m128i _mm_blendv_epi8 (__m128i v1, __m128i v2, __m128i mask);

        
        

        extern __m128  _mm_blend_ps (__m128  v1, __m128  v2, const int mask);
        extern __m128  _mm_blendv_ps(__m128  v1, __m128  v2, __m128 v3);

        
        

        extern __m128d _mm_blend_pd (__m128d v1, __m128d v2, const int mask);
        extern __m128d _mm_blendv_pd(__m128d v1, __m128d v2, __m128d v3);

        
        

        extern __m128  _mm_dp_ps(__m128  val1, __m128  val2, const int mask);
        extern __m128d _mm_dp_pd(__m128d val1, __m128d val2, const int mask);

        
        

        extern __m128i _mm_cmpeq_epi64(__m128i val1, __m128i val2);

        

        extern __m128i _mm_min_epi8 (__m128i val1, __m128i val2);
        extern __m128i _mm_max_epi8 (__m128i val1, __m128i val2);

        extern __m128i _mm_min_epu16(__m128i val1, __m128i val2);
        extern __m128i _mm_max_epu16(__m128i val1, __m128i val2);

        extern __m128i _mm_min_epi32(__m128i val1, __m128i val2);
        extern __m128i _mm_max_epi32(__m128i val1, __m128i val2);
        extern __m128i _mm_min_epu32(__m128i val1, __m128i val2);
        extern __m128i _mm_max_epu32(__m128i val1, __m128i val2);

        
        

        extern __m128i _mm_mullo_epi32(__m128i a, __m128i b);

        
        

        extern __m128i _mm_mul_epi32(__m128i a, __m128i b);

        
        

        extern int _mm_testz_si128(__m128i mask, __m128i val);

        
        

        extern int _mm_testc_si128(__m128i mask, __m128i val);

        
        
        

        extern int _mm_testnzc_si128(__m128i mask, __m128i s2);

        
        
        
        
        

        extern __m128 _mm_insert_ps(__m128 dst, __m128 src, const int ndx);

        




        
        

        extern int _mm_extract_ps(__m128 src, const int ndx);

        
        




        
        





        
        

        extern __m128i _mm_insert_epi8 (__m128i dst, int s, const int ndx);
        extern __m128i _mm_insert_epi32(__m128i dst, int s, const int ndx);



#line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\smmintrin.h"
        
        

        extern int   _mm_extract_epi8 (__m128i src, const int ndx);
        extern int   _mm_extract_epi32(__m128i src, const int ndx);



#line 199 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\smmintrin.h"

        
        

        extern __m128i _mm_minpos_epu16(__m128i shortValues);

        

        extern __m128d _mm_round_pd(__m128d val, int iRoundMode);
        extern __m128d _mm_round_sd(__m128d dst, __m128d val, int iRoundMode);

        

        extern __m128  _mm_round_ps(__m128  val, int iRoundMode);
        extern __m128  _mm_round_ss(__m128 dst, __m128  val, int iRoundMode);

        

        extern __m128i _mm_cvtepi8_epi32 (__m128i byteValues);
        extern __m128i _mm_cvtepi16_epi32(__m128i shortValues);
        extern __m128i _mm_cvtepi8_epi64 (__m128i byteValues);
        extern __m128i _mm_cvtepi32_epi64(__m128i intValues);
        extern __m128i _mm_cvtepi16_epi64(__m128i shortValues);
        extern __m128i _mm_cvtepi8_epi16 (__m128i byteValues);

        

        extern __m128i _mm_cvtepu8_epi32 (__m128i byteValues);
        extern __m128i _mm_cvtepu16_epi32(__m128i shortValues);
        extern __m128i _mm_cvtepu8_epi64 (__m128i shortValues);
        extern __m128i _mm_cvtepu32_epi64(__m128i intValues);
        extern __m128i _mm_cvtepu16_epi64(__m128i shortValues);
        extern __m128i _mm_cvtepu8_epi16 (__m128i byteValues);


        
        

        extern __m128i _mm_packus_epi32(__m128i val1, __m128i val2);

        
        
        

        extern __m128i _mm_mpsadbw_epu8(__m128i s1, __m128i s2, const int msk);

        



        extern __m128i _mm_stream_load_si128(__m128i* v1);


}; 
#line 254 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\smmintrin.h"

#line 256 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\smmintrin.h"

#line 258 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\smmintrin.h"
#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\smmintrin.h"
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\nmmintrin.h"



extern "C" {
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\nmmintrin.h"













































    extern __m128i _mm_cmpistrm (__m128i a, __m128i b, const int mode);
    extern int     _mm_cmpistri (__m128i a, __m128i b, const int mode);

    extern __m128i _mm_cmpestrm (__m128i a, int la, __m128i b, int lb, const int mode);
    extern int     _mm_cmpestri (__m128i a, int la, __m128i b, int lb, const int mode);





    extern int     _mm_cmpistrz (__m128i a, __m128i b, const int mode);
    extern int     _mm_cmpistrc (__m128i a, __m128i b, const int mode);
    extern int     _mm_cmpistrs (__m128i a, __m128i b, const int mode);
    extern int     _mm_cmpistro (__m128i a, __m128i b, const int mode);
    extern int     _mm_cmpistra (__m128i a, __m128i b, const int mode);

    extern int     _mm_cmpestrz (__m128i a, int la, __m128i b, int lb, const int mode);
    extern int     _mm_cmpestrc (__m128i a, int la, __m128i b, int lb, const int mode);
    extern int     _mm_cmpestrs (__m128i a, int la, __m128i b, int lb, const int mode);
    extern int     _mm_cmpestro (__m128i a, int la, __m128i b, int lb, const int mode);
    extern int     _mm_cmpestra (__m128i a, int la, __m128i b, int lb, const int mode);






    extern __m128i _mm_cmpgt_epi64(__m128i val1, __m128i val2);





    extern int _mm_popcnt_u32(unsigned int v);



#line 116 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\nmmintrin.h"





    extern unsigned int _mm_crc32_u8 (unsigned int crc, unsigned char v);
    extern unsigned int _mm_crc32_u16(unsigned int crc, unsigned short v);
    extern unsigned int _mm_crc32_u32(unsigned int crc, unsigned int v);



#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\nmmintrin.h"


}; 
#line 132 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\nmmintrin.h"

#line 134 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\nmmintrin.h"

#line 136 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\nmmintrin.h"
#line 137 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\nmmintrin.h"
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wmmintrin.h"



extern "C" {
#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wmmintrin.h"





extern __m128i _mm_aesdec_si128(__m128i v, __m128i rkey);





extern __m128i _mm_aesdeclast_si128(__m128i v, __m128i rkey);





extern __m128i _mm_aesenc_si128(__m128i v, __m128i rkey);





extern __m128i _mm_aesenclast_si128(__m128i v, __m128i rkey);





extern __m128i _mm_aesimc_si128(__m128i v);






extern __m128i _mm_aeskeygenassist_si128(__m128i ckey, const int rcon);







extern __m128i _mm_clmulepi64_si128(__m128i v1, __m128i v2,
                                            const int imm8);





}; 
#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wmmintrin.h"

#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wmmintrin.h"

#line 89 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wmmintrin.h"
#line 90 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\wmmintrin.h"
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\immintrin.h"


extern "C" {
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\immintrin.h"




typedef union __declspec(intrin_type) __declspec(align(32)) __m256 {
    float m256_f32[8];
} __m256;

typedef struct __declspec(intrin_type) __declspec(align(32)) __m256d {
    double m256d_f64[4];
} __m256d;

typedef union  __declspec(intrin_type) __declspec(align(32)) __m256i {
    __int8              m256i_i8[32];
    __int16             m256i_i16[16];
    __int32             m256i_i32[8];
    __int64             m256i_i64[4];
    unsigned __int8     m256i_u8[32];
    unsigned __int16    m256i_u16[16];
    unsigned __int32    m256i_u32[8];
    unsigned __int64    m256i_u64[4];
} __m256i;



















































extern __m256d __cdecl _mm256_add_pd(__m256d, __m256d);









extern __m256 __cdecl _mm256_add_ps(__m256, __m256);












extern __m256d __cdecl _mm256_addsub_pd(__m256d, __m256d);












extern __m256 __cdecl _mm256_addsub_ps(__m256, __m256);








extern __m256d __cdecl _mm256_and_pd(__m256d, __m256d);








extern __m256 __cdecl _mm256_and_ps(__m256, __m256);








extern __m256d __cdecl _mm256_andnot_pd(__m256d, __m256d);








extern __m256 __cdecl _mm256_andnot_ps(__m256, __m256);













extern __m256d __cdecl _mm256_blend_pd(__m256d, __m256d, const int);













extern __m256 __cdecl _mm256_blend_ps(__m256, __m256, const int);









extern __m256d __cdecl _mm256_blendv_pd(__m256d, __m256d, __m256d);









extern __m256 __cdecl _mm256_blendv_ps(__m256, __m256, __m256);








extern __m256d __cdecl _mm256_div_pd(__m256d, __m256d);








extern __m256 __cdecl _mm256_div_ps(__m256, __m256);














extern __m256 __cdecl _mm256_dp_ps(__m256, __m256, const int);








extern __m256d __cdecl _mm256_hadd_pd(__m256d, __m256d);








extern __m256 __cdecl _mm256_hadd_ps(__m256, __m256);








extern __m256d __cdecl _mm256_hsub_pd(__m256d, __m256d);








extern __m256 __cdecl _mm256_hsub_ps(__m256, __m256);








extern __m256d __cdecl _mm256_max_pd(__m256d, __m256d);








extern __m256 __cdecl _mm256_max_ps(__m256, __m256);








extern __m256d __cdecl _mm256_min_pd(__m256d, __m256d);








extern __m256 __cdecl _mm256_min_ps(__m256, __m256);









extern __m256d __cdecl _mm256_mul_pd(__m256d, __m256d);









extern __m256 __cdecl _mm256_mul_ps(__m256, __m256);








extern __m256d __cdecl _mm256_or_pd(__m256d, __m256d);








extern __m256 __cdecl _mm256_or_ps(__m256, __m256);











extern __m256d __cdecl _mm256_shuffle_pd(__m256d, __m256d, const int);












extern __m256 __cdecl _mm256_shuffle_ps(__m256, __m256, const int);








extern __m256d __cdecl _mm256_sub_pd(__m256d, __m256d);









extern __m256 __cdecl _mm256_sub_ps(__m256, __m256);








extern __m256d __cdecl _mm256_xor_pd(__m256d, __m256d);








extern __m256 __cdecl _mm256_xor_ps(__m256, __m256);















extern __m128d __cdecl _mm_cmp_pd(__m128d, __m128d, const int);
extern __m256d __cdecl _mm256_cmp_pd(__m256d, __m256d, const int);















extern __m128 __cdecl _mm_cmp_ps(__m128, __m128, const int);
extern __m256 __cdecl _mm256_cmp_ps(__m256, __m256, const int);












extern __m128d __cdecl _mm_cmp_sd(__m128d, __m128d, const int);












extern __m128 __cdecl _mm_cmp_ss(__m128, __m128, const int);








extern __m256d __cdecl _mm256_cvtepi32_pd(__m128i);








extern __m256  __cdecl _mm256_cvtepi32_ps(__m256i);









extern __m128  __cdecl _mm256_cvtpd_ps(__m256d);








extern __m256i __cdecl _mm256_cvtps_epi32(__m256);









extern __m256d __cdecl _mm256_cvtps_pd(__m128);












extern __m128i __cdecl _mm256_cvttpd_epi32(__m256d);








extern __m128i __cdecl _mm256_cvtpd_epi32(__m256d);












extern __m256i __cdecl _mm256_cvttps_epi32(__m256);







extern __m128  __cdecl _mm256_extractf128_ps(__m256, const int);
extern __m128d __cdecl _mm256_extractf128_pd(__m256d, const int);
extern __m128i __cdecl _mm256_extractf128_si256(__m256i, const int);






extern void __cdecl _mm256_zeroall(void);







extern void __cdecl _mm256_zeroupper(void);









extern __m256  __cdecl _mm256_permutevar_ps(__m256, __m256i);
extern __m128  __cdecl _mm_permutevar_ps(__m128, __m128i);









extern __m256  __cdecl _mm256_permute_ps(__m256, int);
extern __m128  __cdecl _mm_permute_ps(__m128, int);









extern __m256d __cdecl _mm256_permutevar_pd(__m256d, __m256i);
extern __m128d __cdecl _mm_permutevar_pd(__m128d, __m128i);









extern __m256d __cdecl _mm256_permute_pd(__m256d, int);
extern __m128d __cdecl _mm_permute_pd(__m128d, int);








extern __m256  __cdecl _mm256_permute2f128_ps(__m256, __m256, int);
extern __m256d __cdecl _mm256_permute2f128_pd(__m256d, __m256d, int);
extern __m256i __cdecl _mm256_permute2f128_si256(__m256i, __m256i, int);








extern __m256  __cdecl _mm256_broadcast_ss(float const *);
extern __m128  __cdecl _mm_broadcast_ss(float const *);







extern __m256d __cdecl _mm256_broadcast_sd(double const *);







extern __m256  __cdecl _mm256_broadcast_ps(__m128 const *);
extern __m256d __cdecl _mm256_broadcast_pd(__m128d const *);









extern __m256  __cdecl _mm256_insertf128_ps(__m256, __m128, int);
extern __m256d __cdecl _mm256_insertf128_pd(__m256d, __m128d, int);
extern __m256i __cdecl _mm256_insertf128_si256(__m256i, __m128i, int);








extern __m256d __cdecl _mm256_load_pd(double const *);
extern void    __cdecl _mm256_store_pd(double *, __m256d);








extern __m256  __cdecl _mm256_load_ps(float const *);
extern void    __cdecl _mm256_store_ps(float *, __m256);








extern __m256d __cdecl _mm256_loadu_pd(double const *);
extern void    __cdecl _mm256_storeu_pd(double *, __m256d);








extern __m256  __cdecl _mm256_loadu_ps(float const *);
extern void    __cdecl _mm256_storeu_ps(float *, __m256);








extern __m256i __cdecl _mm256_load_si256(__m256i const *);
extern void    __cdecl _mm256_store_si256(__m256i *, __m256i);








extern __m256i __cdecl _mm256_loadu_si256(__m256i const *);
extern void    __cdecl _mm256_storeu_si256(__m256i *, __m256i);







































































extern __m256d __cdecl _mm256_maskload_pd(double const *, __m256i);
extern void    __cdecl _mm256_maskstore_pd(double *, __m256i, __m256d);
extern __m128d __cdecl _mm_maskload_pd(double const *, __m128i);
extern void    __cdecl _mm_maskstore_pd(double *, __m128i, __m128d);



















extern __m256  __cdecl _mm256_maskload_ps(float const *, __m256i);
extern void    __cdecl _mm256_maskstore_ps(float *, __m256i, __m256);
extern __m128  __cdecl _mm_maskload_ps(float const *, __m128i);
extern void    __cdecl _mm_maskstore_ps(float *, __m128i, __m128);







extern __m256  __cdecl _mm256_movehdup_ps(__m256);







extern __m256  __cdecl _mm256_moveldup_ps(__m256);







extern __m256d __cdecl _mm256_movedup_pd(__m256d);









extern __m256i __cdecl _mm256_lddqu_si256(__m256i const *);







extern void    __cdecl _mm256_stream_si256(__m256i *, __m256i);








extern void    __cdecl _mm256_stream_pd(double *, __m256d);








extern void    __cdecl _mm256_stream_ps(float *, __m256);









extern __m256  __cdecl _mm256_rcp_ps(__m256);










extern __m256  __cdecl _mm256_rsqrt_ps(__m256);








extern __m256d __cdecl _mm256_sqrt_pd(__m256d);








extern __m256  __cdecl _mm256_sqrt_ps(__m256);












extern __m256d __cdecl _mm256_round_pd(__m256d, int);














extern __m256  __cdecl _mm256_round_ps(__m256, int);









extern __m256d __cdecl _mm256_unpackhi_pd(__m256d, __m256d);







extern __m256  __cdecl _mm256_unpackhi_ps(__m256, __m256);







extern __m256d __cdecl _mm256_unpacklo_pd(__m256d, __m256d);







extern __m256  __cdecl _mm256_unpacklo_ps(__m256, __m256);









extern int     __cdecl _mm256_testz_si256(__m256i, __m256i);



extern int     __cdecl _mm256_testc_si256(__m256i, __m256i);



extern int     __cdecl _mm256_testnzc_si256(__m256i, __m256i);














extern int     __cdecl _mm256_testz_pd(__m256d, __m256d);
extern int     __cdecl _mm256_testc_pd(__m256d, __m256d);
extern int     __cdecl _mm256_testnzc_pd(__m256d, __m256d);
extern int     __cdecl _mm_testz_pd(__m128d, __m128d);
extern int     __cdecl _mm_testc_pd(__m128d, __m128d);
extern int     __cdecl _mm_testnzc_pd(__m128d, __m128d);












extern int     __cdecl _mm256_testz_ps(__m256, __m256);
extern int     __cdecl _mm256_testc_ps(__m256, __m256);
extern int     __cdecl _mm256_testnzc_ps(__m256, __m256);
extern int     __cdecl _mm_testz_ps(__m128, __m128);
extern int     __cdecl _mm_testc_ps(__m128, __m128);
extern int     __cdecl _mm_testnzc_ps(__m128, __m128);








extern int     __cdecl _mm256_movemask_pd(__m256d);








extern int     __cdecl _mm256_movemask_ps(__m256);




extern __m256d __cdecl _mm256_setzero_pd(void);
extern __m256  __cdecl _mm256_setzero_ps(void);
extern __m256i __cdecl _mm256_setzero_si256(void);




extern __m256d __cdecl _mm256_set_pd(double, double, double, double);
extern __m256  __cdecl _mm256_set_ps(float, float, float, float,
                                            float, float, float, float);
extern __m256i __cdecl _mm256_set_epi8(char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char);
extern __m256i __cdecl _mm256_set_epi16(short, short, short, short,
                                               short, short, short, short,
                                               short, short, short, short,
                                               short, short, short, short);
extern __m256i __cdecl _mm256_set_epi32(int, int, int, int,
                                               int, int, int, int);
extern __m256i __cdecl _mm256_set_epi64x(__int64, __int64,
                                                __int64, __int64);










extern __m256d __cdecl _mm256_setr_pd(double, double, double, double);
extern __m256  __cdecl _mm256_setr_ps(float, float, float, float,
                                             float, float, float, float);
extern __m256i __cdecl _mm256_setr_epi8(char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char);
extern __m256i __cdecl _mm256_setr_epi16(short, short, short, short,
                                                short, short, short, short,
                                                short, short, short, short,
                                                short, short, short, short);
extern __m256i __cdecl _mm256_setr_epi32(int, int, int, int,
                                                int, int, int, int);
extern __m256i __cdecl _mm256_setr_epi64x(__int64, __int64,
                                                 __int64, __int64);







extern __m256d __cdecl _mm256_set1_pd(double);
extern __m256  __cdecl _mm256_set1_ps(float);
extern __m256i __cdecl _mm256_set1_epi8(char);
extern __m256i __cdecl _mm256_set1_epi16(short);
extern __m256i __cdecl _mm256_set1_epi32(int);
extern __m256i __cdecl _mm256_set1_epi64x(long long);







extern __m256  __cdecl _mm256_castpd_ps(__m256d);
extern __m256d __cdecl _mm256_castps_pd(__m256);
extern __m256i __cdecl _mm256_castps_si256(__m256);
extern __m256i __cdecl _mm256_castpd_si256(__m256d);
extern __m256  __cdecl _mm256_castsi256_ps(__m256i);
extern __m256d __cdecl _mm256_castsi256_pd(__m256i);
extern __m128  __cdecl _mm256_castps256_ps128(__m256);
extern __m128d __cdecl _mm256_castpd256_pd128(__m256d);
extern __m128i __cdecl _mm256_castsi256_si128(__m256i);
extern __m256  __cdecl _mm256_castps128_ps256(__m128);
extern __m256d __cdecl _mm256_castpd128_pd256(__m128d);
extern __m256i __cdecl _mm256_castsi128_si256(__m128i);






extern __m128  __cdecl _mm_cvtph_ps(__m128i);
extern __m256  __cdecl _mm256_cvtph_ps(__m128i);
extern __m128i __cdecl _mm_cvtps_ph(__m128 m1, const int imm);
extern __m128i __cdecl _mm256_cvtps_ph(__m256, int);




















extern unsigned __int64 __cdecl _xgetbv(unsigned int);


extern void __cdecl _xsetbv(unsigned int, unsigned __int64);






extern void __cdecl _xsave(void *, unsigned __int64);


#line 1216 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\immintrin.h"






extern void __cdecl _xsaveopt(void *, unsigned __int64);


#line 1226 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\immintrin.h"






extern void __cdecl _xrstor(void const *, unsigned __int64);


#line 1236 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\immintrin.h"





extern void __cdecl _fxsave(void *);


#line 1245 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\immintrin.h"





extern void __cdecl _fxrstor(void const *);


#line 1254 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\immintrin.h"







extern int __cdecl _rdrand16_step(unsigned short *);
extern int __cdecl _rdrand32_step(unsigned int *);


#line 1266 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\immintrin.h"

















#line 1284 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\immintrin.h"




extern __m128  __cdecl _mm_fmadd_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmadd_pd(__m128d, __m128d, __m128d);
extern __m128  __cdecl _mm_fmadd_ss(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmadd_sd(__m128d, __m128d, __m128d);
extern __m128  __cdecl _mm_fmsub_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmsub_pd(__m128d, __m128d, __m128d);
extern __m128  __cdecl _mm_fmsub_ss(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmsub_sd(__m128d, __m128d, __m128d);
extern __m128  __cdecl _mm_fnmadd_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fnmadd_pd(__m128d, __m128d, __m128d);
extern __m128  __cdecl _mm_fnmadd_ss(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fnmadd_sd(__m128d, __m128d, __m128d);
extern __m128  __cdecl _mm_fnmsub_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fnmsub_pd(__m128d, __m128d, __m128d);
extern __m128  __cdecl _mm_fnmsub_ss(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fnmsub_sd(__m128d, __m128d, __m128d);

extern __m256  __cdecl _mm256_fmadd_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fmadd_pd(__m256d, __m256d, __m256d);
extern __m256  __cdecl _mm256_fmsub_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fmsub_pd(__m256d, __m256d, __m256d);
extern __m256  __cdecl _mm256_fnmadd_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fnmadd_pd(__m256d, __m256d, __m256d);
extern __m256  __cdecl _mm256_fnmsub_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fnmsub_pd(__m256d, __m256d, __m256d);





extern __m128  __cdecl _mm_fmaddsub_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmaddsub_pd(__m128d, __m128d, __m128d);
extern __m128  __cdecl _mm_fmsubadd_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmsubadd_pd(__m128d, __m128d, __m128d);

extern __m256  __cdecl _mm256_fmaddsub_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fmaddsub_pd(__m256d, __m256d, __m256d);
extern __m256  __cdecl _mm256_fmsubadd_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fmsubadd_pd(__m256d, __m256d, __m256d);





extern __m256i __cdecl _mm256_cmpeq_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpeq_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpeq_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpeq_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_cmpgt_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpgt_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpgt_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpgt_epi64(__m256i, __m256i);





extern __m256i __cdecl _mm256_max_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epu16(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epu32(__m256i, __m256i);

extern __m256i __cdecl _mm256_min_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epu16(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epu32(__m256i, __m256i);





extern __m256i __cdecl _mm256_and_si256(__m256i, __m256i);
extern __m256i __cdecl _mm256_andnot_si256(__m256i, __m256i);
extern __m256i __cdecl _mm256_or_si256(__m256i, __m256i);
extern __m256i __cdecl _mm256_xor_si256(__m256i, __m256i);





extern __m256i __cdecl _mm256_abs_epi8(__m256i);
extern __m256i __cdecl _mm256_abs_epi16(__m256i);
extern __m256i __cdecl _mm256_abs_epi32(__m256i);

extern __m256i __cdecl _mm256_add_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_add_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_add_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_add_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_adds_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_adds_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_adds_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_adds_epu16(__m256i, __m256i);

extern __m256i __cdecl _mm256_sub_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_sub_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_sub_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_sub_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_subs_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_subs_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_subs_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_subs_epu16(__m256i, __m256i);

extern __m256i __cdecl _mm256_avg_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_avg_epu16(__m256i, __m256i);

extern __m256i __cdecl _mm256_hadd_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_hadd_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_hadds_epi16(__m256i, __m256i);

extern __m256i __cdecl _mm256_hsub_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_hsub_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_hsubs_epi16(__m256i, __m256i);

extern __m256i __cdecl _mm256_madd_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_maddubs_epi16(__m256i, __m256i);

extern __m256i __cdecl _mm256_mulhi_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_mulhi_epu16(__m256i, __m256i);

extern __m256i __cdecl _mm256_mullo_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_mullo_epi32(__m256i, __m256i);

extern __m256i __cdecl _mm256_mul_epu32(__m256i, __m256i);
extern __m256i __cdecl _mm256_mul_epi32(__m256i, __m256i);

extern __m256i __cdecl _mm256_sign_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_sign_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_sign_epi32(__m256i, __m256i);

extern __m256i __cdecl _mm256_mulhrs_epi16(__m256i, __m256i);

extern __m256i __cdecl _mm256_sad_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_mpsadbw_epu8(__m256i, __m256i, const int);





extern __m256i __cdecl _mm256_slli_si256(__m256i, const int);
extern __m256i __cdecl _mm256_srli_si256(__m256i, const int);

extern __m256i __cdecl _mm256_sll_epi16(__m256i, __m128i);
extern __m256i __cdecl _mm256_sll_epi32(__m256i, __m128i);
extern __m256i __cdecl _mm256_sll_epi64(__m256i, __m128i);

extern __m256i __cdecl _mm256_slli_epi16(__m256i, int);
extern __m256i __cdecl _mm256_slli_epi32(__m256i, int);
extern __m256i __cdecl _mm256_slli_epi64(__m256i, int);

extern __m256i __cdecl _mm256_sllv_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_sllv_epi64(__m256i, __m256i);

extern __m128i __cdecl _mm_sllv_epi32(__m128i, __m128i);
extern __m128i __cdecl _mm_sllv_epi64(__m128i, __m128i);

extern __m256i __cdecl _mm256_sra_epi16(__m256i, __m128i);
extern __m256i __cdecl _mm256_sra_epi32(__m256i, __m128i);

extern __m256i __cdecl _mm256_srai_epi16(__m256i, int);
extern __m256i __cdecl _mm256_srai_epi32(__m256i, int);

extern __m256i __cdecl _mm256_srav_epi32(__m256i, __m256i);

extern __m128i __cdecl _mm_srav_epi32(__m128i, __m128i);

extern __m256i __cdecl _mm256_srl_epi16(__m256i, __m128i);
extern __m256i __cdecl _mm256_srl_epi32(__m256i, __m128i);
extern __m256i __cdecl _mm256_srl_epi64(__m256i, __m128i);

extern __m256i __cdecl _mm256_srli_epi16(__m256i, int);
extern __m256i __cdecl _mm256_srli_epi32(__m256i, int);
extern __m256i __cdecl _mm256_srli_epi64(__m256i, int);

extern __m256i __cdecl _mm256_srlv_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_srlv_epi64(__m256i, __m256i);

extern __m128i __cdecl _mm_srlv_epi32(__m128i, __m128i);
extern __m128i __cdecl _mm_srlv_epi64(__m128i, __m128i);





extern __m128i __cdecl _mm_blend_epi32(__m128i, __m128i, const int);

extern __m256i __cdecl _mm256_blend_epi32(__m256i,__m256i, const int);

extern __m256i __cdecl _mm256_alignr_epi8(__m256i, __m256i, const int);

extern __m256i __cdecl _mm256_blendv_epi8(__m256i, __m256i, __m256i);
extern __m256i __cdecl _mm256_blend_epi16(__m256i, __m256i, const int);

extern __m256i __cdecl _mm256_packs_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_packs_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_packus_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_packus_epi32(__m256i, __m256i);

extern __m256i __cdecl _mm256_unpackhi_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpackhi_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpackhi_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpackhi_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_unpacklo_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpacklo_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpacklo_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpacklo_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_shuffle_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_shuffle_epi32(__m256i, const int);

extern __m256i __cdecl _mm256_shufflehi_epi16(__m256i, const int);
extern __m256i __cdecl _mm256_shufflelo_epi16(__m256i, const int);

extern __m128i __cdecl _mm256_extracti128_si256(__m256i, const int);
extern __m256i __cdecl _mm256_inserti128_si256(__m256i, __m128i, const int);





extern __m128  __cdecl _mm_broadcastss_ps(__m128);
extern __m128d __cdecl _mm_broadcastsd_pd(__m128d);

extern __m128i __cdecl _mm_broadcastb_epi8(__m128i);
extern __m128i __cdecl _mm_broadcastw_epi16(__m128i);
extern __m128i __cdecl _mm_broadcastd_epi32(__m128i);
extern __m128i __cdecl _mm_broadcastq_epi64(__m128i);

extern __m256  __cdecl _mm256_broadcastss_ps(__m128);
extern __m256d __cdecl _mm256_broadcastsd_pd(__m128d);

extern __m256i __cdecl _mm256_broadcastb_epi8(__m128i);
extern __m256i __cdecl _mm256_broadcastw_epi16(__m128i);
extern __m256i __cdecl _mm256_broadcastd_epi32(__m128i);
extern __m256i __cdecl _mm256_broadcastq_epi64(__m128i);

extern __m256i __cdecl _mm256_broadcastsi128_si256(__m128i);






extern __m256i __cdecl _mm256_cvtepi8_epi16(__m128i);
extern __m256i __cdecl _mm256_cvtepi8_epi32(__m128i);
extern __m256i __cdecl _mm256_cvtepi8_epi64(__m128i);
extern __m256i __cdecl _mm256_cvtepi16_epi32(__m128i);
extern __m256i __cdecl _mm256_cvtepi16_epi64(__m128i);
extern __m256i __cdecl _mm256_cvtepi32_epi64(__m128i);

extern __m256i __cdecl _mm256_cvtepu8_epi16(__m128i);
extern __m256i __cdecl _mm256_cvtepu8_epi32(__m128i);
extern __m256i __cdecl _mm256_cvtepu8_epi64(__m128i);
extern __m256i __cdecl _mm256_cvtepu16_epi32(__m128i);
extern __m256i __cdecl _mm256_cvtepu16_epi64(__m128i);
extern __m256i __cdecl _mm256_cvtepu32_epi64(__m128i);






extern int __cdecl _mm256_movemask_epi8(__m256i);





extern __m128i __cdecl _mm_maskload_epi32(int const * ,
                                          __m128i     );
extern __m128i __cdecl _mm_maskload_epi64(__int64 const * ,
                                          __m128i         );

extern void __cdecl _mm_maskstore_epi32(int *   ,
                                        __m128i ,
                                        __m128i );
extern void __cdecl _mm_maskstore_epi64(__int64 * ,
                                        __m128i   ,
                                        __m128i   );

extern __m256i __cdecl _mm256_maskload_epi32(int const * ,
                                             __m256i     );
extern __m256i __cdecl _mm256_maskload_epi64(__int64 const * ,
                                             __m256i         );

extern void __cdecl _mm256_maskstore_epi32(int *   ,
                                           __m256i ,
                                           __m256i );
extern void __cdecl _mm256_maskstore_epi64(__int64 * ,
                                           __m256i   ,
                                           __m256i   );





extern __m256i __cdecl _mm256_permutevar8x32_epi32(__m256i, __m256i);
extern __m256  __cdecl _mm256_permutevar8x32_ps(__m256, __m256i);

extern __m256i __cdecl _mm256_permute4x64_epi64(__m256i, const int);
extern __m256d __cdecl _mm256_permute4x64_pd(__m256d, const int);

extern __m256i __cdecl _mm256_permute2x128_si256(__m256i, __m256i, const int);





extern __m256i  __cdecl _mm256_stream_load_si256(__m256i const *);






extern __m256d __cdecl _mm256_mask_i32gather_pd(__m256d        ,
                                                double const * ,
                                                __m128i        ,
                                                __m256d        ,
                                                const int      );
extern __m256  __cdecl _mm256_mask_i32gather_ps(__m256         ,
                                                float const *  ,
                                                __m256i        ,
                                                __m256         ,
                                                const int      );
extern __m256d __cdecl _mm256_mask_i64gather_pd(__m256d        ,
                                                double const * ,
                                                __m256i        ,
                                                __m256d        ,
                                                const int      );
extern __m128  __cdecl _mm256_mask_i64gather_ps(__m128         ,
                                                float const *  ,
                                                __m256i        ,
                                                __m128         ,
                                                const int      );

extern __m128d __cdecl _mm_mask_i32gather_pd(__m128d        ,
                                             double const * ,
                                             __m128i        ,
                                             __m128d        ,
                                             const int      );
extern __m128  __cdecl _mm_mask_i32gather_ps(__m128         ,
                                             float const *  ,
                                             __m128i        ,
                                             __m128         ,
                                             const int      );
extern __m128d __cdecl _mm_mask_i64gather_pd(__m128d        ,
                                             double const * ,
                                             __m128i        ,
                                             __m128d        ,
                                             const int      );
extern __m128  __cdecl _mm_mask_i64gather_ps(__m128         ,
                                             float const *  ,
                                             __m128i        ,
                                             __m128         ,
                                             const int      );


extern __m256i __cdecl _mm256_mask_i32gather_epi32(__m256i     ,
                                                   int const * ,
                                                   __m256i     ,
                                                   __m256i     ,
                                                   const int   );
extern __m256i __cdecl _mm256_mask_i32gather_epi64(__m256i     ,
                                                   __int64 const * ,
                                                   __m128i     ,
                                                   __m256i     ,
                                                   const int   );
extern __m128i __cdecl _mm256_mask_i64gather_epi32(__m128i     ,
                                                   int     const * ,
                                                   __m256i     ,
                                                   __m128i     ,
                                                   const int   );
extern __m256i __cdecl _mm256_mask_i64gather_epi64(__m256i     ,
                                                   __int64 const * ,
                                                   __m256i     ,
                                                   __m256i     ,
                                                   const int   );

extern __m128i __cdecl _mm_mask_i32gather_epi32(__m128i         ,
                                                int const *     ,
                                                __m128i         ,
                                                __m128i         ,
                                                const int       );
extern __m128i __cdecl _mm_mask_i32gather_epi64(__m128i         ,
                                                __int64 const * ,
                                                __m128i         ,
                                                __m128i         ,
                                                const int       );
extern __m128i __cdecl _mm_mask_i64gather_epi32(__m128i         ,
                                                int     const * ,
                                                __m128i         ,
                                                __m128i         ,
                                                const int       );
extern __m128i __cdecl _mm_mask_i64gather_epi64(__m128i         ,
                                                __int64 const * ,
                                                __m128i         ,
                                                __m128i         ,
                                                const int       );





extern __m256d __cdecl _mm256_i32gather_pd(double const * ,
                                           __m128i        ,
                                           const int      );
extern __m256  __cdecl _mm256_i32gather_ps(float  const * ,
                                           __m256i        ,
                                           const int      );
extern __m256d __cdecl _mm256_i64gather_pd(double const * ,
                                           __m256i        ,
                                           const int      );
extern __m128  __cdecl _mm256_i64gather_ps(float  const * ,
                                           __m256i        ,
                                           const int      );

extern __m128d __cdecl _mm_i32gather_pd(double const * ,
                                        __m128i        ,
                                        const int      );
extern __m128  __cdecl _mm_i32gather_ps(float  const * ,
                                        __m128i        ,
                                        const int      );
extern __m128d __cdecl _mm_i64gather_pd(double const * ,
                                        __m128i        ,
                                        const int      );
extern __m128  __cdecl _mm_i64gather_ps(float  const * ,
                                        __m128i        ,
                                        const int      );

extern __m256i __cdecl _mm256_i32gather_epi32(int const *     ,
                                              __m256i         ,
                                              const int       );
extern __m256i __cdecl _mm256_i32gather_epi64(__int64 const * ,
                                              __m128i         ,
                                              const int       );
extern __m128i __cdecl _mm256_i64gather_epi32(int const *     ,
                                              __m256i         ,
                                              const int       );
extern __m256i __cdecl _mm256_i64gather_epi64(__int64 const * ,
                                              __m256i         ,
                                              const int       );

extern __m128i __cdecl _mm_i32gather_epi32(int const *     ,
                                           __m128i         ,
                                           const int       );
extern __m128i __cdecl _mm_i32gather_epi64(__int64 const * ,
                                           __m128i         ,
                                           const int       );
extern __m128i __cdecl _mm_i64gather_epi32(int     const * ,
                                           __m128i         ,
                                           const int       );
extern __m128i __cdecl _mm_i64gather_epi64(__int64 const * ,
                                           __m128i         ,
                                           const int       );





extern unsigned int     _bextr_u32(unsigned int ,
                                   unsigned int ,
                                   unsigned int );
extern unsigned int     _blsi_u32(unsigned int);
extern unsigned int     _blsmsk_u32(unsigned int);
extern unsigned int     _blsr_u32(unsigned int);
extern unsigned int     _bzhi_u32(unsigned int ,
                                  unsigned int );
extern unsigned int     _mulx_u32(unsigned int ,
                                  unsigned int ,
                                  unsigned int * );
extern unsigned int     _pdep_u32(unsigned int ,
                                  unsigned int );
extern unsigned int     _pext_u32(unsigned int ,
                                  unsigned int );
extern unsigned int     _rorx_u32(unsigned int ,
                                  const unsigned int );
extern int              _sarx_i32(int ,
                                  unsigned int );
extern unsigned int     _shlx_u32(unsigned int ,
                                  unsigned int );
extern unsigned int     _shrx_u32(unsigned int ,
                                          unsigned int );

























#line 1804 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\immintrin.h"








extern unsigned int     _lzcnt_u32(unsigned int);


#line 1816 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\immintrin.h"








extern unsigned int     _tzcnt_u32(unsigned int);


#line 1828 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\immintrin.h"






extern void __cdecl _invpcid(unsigned int , void * );


void _Store_HLERelease(long volatile *,long);
void _StorePointer_HLERelease(void * volatile *,void *);

long _InterlockedExchange_HLEAcquire(long volatile *,long);
long _InterlockedExchange_HLERelease(long volatile *,long);
void * _InterlockedExchangePointer_HLEAcquire(void *volatile *,void *);
void * _InterlockedExchangePointer_HLERelease(void *volatile *,void *);

long _InterlockedCompareExchange_HLEAcquire(long volatile *,long,long);
long _InterlockedCompareExchange_HLERelease(long volatile *,long,long);
__int64 _InterlockedCompareExchange64_HLEAcquire(__int64 volatile *,__int64,__int64);
__int64 _InterlockedCompareExchange64_HLERelease(__int64 volatile *,__int64,__int64);
void *_InterlockedCompareExchangePointer_HLEAcquire(void *volatile *,void *,void *);
void *_InterlockedCompareExchangePointer_HLERelease(void *volatile *,void *,void *);

long _InterlockedExchangeAdd_HLEAcquire(long volatile *,long);
long _InterlockedExchangeAdd_HLERelease(long volatile *,long);

long _InterlockedAnd_HLEAcquire(long volatile *,long);
long _InterlockedAnd_HLERelease(long volatile *,long);
long _InterlockedOr_HLEAcquire(long volatile *,long);
long _InterlockedOr_HLERelease(long volatile *,long);
long _InterlockedXor_HLEAcquire(long volatile *,long);
long _InterlockedXor_HLERelease(long volatile *,long);

unsigned char _interlockedbittestandset_HLEAcquire(long *a,long b);
unsigned char _interlockedbittestandset_HLERelease(long *a,long b);
unsigned char _interlockedbittestandreset_HLEAcquire(long *a,long b);
unsigned char _interlockedbittestandreset_HLERelease(long *a,long b);




















#line 1887 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\immintrin.h"











unsigned __int32 _xbegin(void);
void _xend(void);
void _xabort(const unsigned int imm);
unsigned char _xtest(void);


void _sgdt(void*);
void _lgdt(void*);
void _clac(void);
void _stac(void);


}; 
#line 1912 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\immintrin.h"

#line 1914 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\immintrin.h"

#line 1916 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\immintrin.h"
#line 1917 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\immintrin.h"

#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\intrin.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\ammintrin.h"












#pragma once






#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\ammintrin.h"


extern "C" { 
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\ammintrin.h"





























































































__m128 _mm_macc_ps(__m128, __m128, __m128);
__m128d _mm_macc_pd(__m128d, __m128d, __m128d);
__m128 _mm_macc_ss(__m128, __m128, __m128);
__m128d _mm_macc_sd(__m128d, __m128d, __m128d);
__m128 _mm_maddsub_ps(__m128, __m128, __m128);
__m128d _mm_maddsub_pd(__m128d, __m128d, __m128d);
__m128 _mm_msubadd_ps(__m128, __m128, __m128);
__m128d _mm_msubadd_pd(__m128d, __m128d, __m128d);
__m128 _mm_msub_ps(__m128, __m128, __m128);
__m128d _mm_msub_pd(__m128d, __m128d, __m128d);
__m128 _mm_msub_ss(__m128, __m128, __m128);
__m128d _mm_msub_sd(__m128d, __m128d, __m128d);
__m128 _mm_nmacc_ps(__m128, __m128, __m128);
__m128d _mm_nmacc_pd(__m128d, __m128d, __m128d);
__m128 _mm_nmacc_ss(__m128, __m128, __m128);
__m128d _mm_nmacc_sd(__m128d, __m128d, __m128d);
__m128 _mm_nmsub_ps(__m128, __m128, __m128);
__m128d _mm_nmsub_pd(__m128d, __m128d, __m128d);
__m128 _mm_nmsub_ss(__m128, __m128, __m128);
__m128d _mm_nmsub_sd(__m128d, __m128d, __m128d);


__m128i _mm_maccs_epi16(__m128i, __m128i, __m128i);
__m128i _mm_macc_epi16(__m128i, __m128i, __m128i);
__m128i _mm_maccsd_epi16(__m128i, __m128i, __m128i);
__m128i _mm_maccd_epi16(__m128i, __m128i, __m128i);
__m128i _mm_maccs_epi32(__m128i, __m128i, __m128i);
__m128i _mm_macc_epi32(__m128i, __m128i, __m128i);
__m128i _mm_maccslo_epi32(__m128i, __m128i, __m128i);
__m128i _mm_macclo_epi32(__m128i, __m128i, __m128i);
__m128i _mm_maccshi_epi32(__m128i, __m128i, __m128i);
__m128i _mm_macchi_epi32(__m128i, __m128i, __m128i);
__m128i _mm_maddsd_epi16(__m128i, __m128i, __m128i);
__m128i _mm_maddd_epi16(__m128i, __m128i, __m128i);


__m128i _mm_haddw_epi8(__m128i);
__m128i _mm_haddd_epi8(__m128i);
__m128i _mm_haddq_epi8(__m128i);
__m128i _mm_haddd_epi16(__m128i);
__m128i _mm_haddq_epi16(__m128i);
__m128i _mm_haddq_epi32(__m128i);
__m128i _mm_haddw_epu8(__m128i);
__m128i _mm_haddd_epu8(__m128i);
__m128i _mm_haddq_epu8(__m128i);
__m128i _mm_haddd_epu16(__m128i);
__m128i _mm_haddq_epu16(__m128i);
__m128i _mm_haddq_epu32(__m128i);
__m128i _mm_hsubw_epi8(__m128i);
__m128i _mm_hsubd_epi16(__m128i);
__m128i _mm_hsubq_epi32(__m128i);


__m128i _mm_cmov_si128(__m128i, __m128i, __m128i);
__m128i _mm_perm_epi8(__m128i, __m128i, __m128i);


__m128i _mm_rot_epi8(__m128i, __m128i);
__m128i _mm_rot_epi16(__m128i, __m128i);
__m128i _mm_rot_epi32(__m128i, __m128i);
__m128i _mm_rot_epi64(__m128i, __m128i);
__m128i _mm_roti_epi8(__m128i, int);
__m128i _mm_roti_epi16(__m128i, int);
__m128i _mm_roti_epi32(__m128i, int);
__m128i _mm_roti_epi64(__m128i, int);
__m128i _mm_shl_epi8(__m128i, __m128i);
__m128i _mm_shl_epi16(__m128i, __m128i);
__m128i _mm_shl_epi32(__m128i, __m128i);
__m128i _mm_shl_epi64(__m128i, __m128i);
__m128i _mm_sha_epi8(__m128i, __m128i);
__m128i _mm_sha_epi16(__m128i, __m128i);
__m128i _mm_sha_epi32(__m128i, __m128i);
__m128i _mm_sha_epi64(__m128i, __m128i);



__m128i _mm_com_epu8(__m128i, __m128i, int);
__m128i _mm_com_epu16(__m128i, __m128i, int);
__m128i _mm_com_epu32(__m128i, __m128i, int);
__m128i _mm_com_epu64(__m128i, __m128i, int);
__m128i _mm_com_epi8(__m128i, __m128i, int);
__m128i _mm_com_epi16(__m128i, __m128i, int);
__m128i _mm_com_epi32(__m128i, __m128i, int);
__m128i _mm_com_epi64(__m128i, __m128i, int);



__m128 _mm_frcz_ps(__m128);
__m128d _mm_frcz_pd(__m128d);
__m128 _mm_frcz_ss(__m128, __m128);
__m128d _mm_frcz_sd(__m128d, __m128d);








__m128 _mm_permute2_ps(__m128, __m128, __m128i, int);
__m128d _mm_permute2_pd(__m128d, __m128d, __m128i, int);



__m256 _mm256_macc_ps(__m256, __m256, __m256);
__m256d _mm256_macc_pd(__m256d, __m256d, __m256d);
__m256 _mm256_maddsub_ps(__m256, __m256, __m256);
__m256d _mm256_maddsub_pd(__m256d, __m256d, __m256d);
__m256 _mm256_msubadd_ps(__m256, __m256, __m256);
__m256d _mm256_msubadd_pd(__m256d, __m256d, __m256d);
__m256 _mm256_msub_ps(__m256, __m256, __m256);
__m256d _mm256_msub_pd(__m256d, __m256d, __m256d);
__m256 _mm256_nmacc_ps(__m256, __m256, __m256);
__m256d _mm256_nmacc_pd(__m256d, __m256d, __m256d);
__m256 _mm256_nmsub_ps(__m256, __m256, __m256);
__m256d _mm256_nmsub_pd(__m256d, __m256d, __m256d);
__m256i _mm256_cmov_si256(__m256i, __m256i, __m256i);
__m256 _mm256_frcz_ps(__m256);
__m256d _mm256_frcz_pd(__m256d);
__m256 _mm256_permute2_ps(__m256, __m256, __m256i, int);
__m256d _mm256_permute2_pd(__m256d, __m256d, __m256i, int);


void __llwpcb(void *);
void *__slwpcb();
void __lwpval32(unsigned int, unsigned int, unsigned int);
unsigned char __lwpins32(unsigned int, unsigned int, unsigned int);



#line 249 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\ammintrin.h"


unsigned int _bextr_u32(unsigned int, unsigned int, unsigned int);
unsigned int _andn_u32(unsigned int, unsigned int);
unsigned int _tzcnt_u32(unsigned int);
unsigned int _lzcnt_u32(unsigned int);
unsigned int _blsr_u32(unsigned int);
unsigned int _blsmsk_u32(unsigned int);
unsigned int _blsi_u32(unsigned int);








#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\ammintrin.h"


unsigned int _bextri_u32(unsigned int, unsigned int);
unsigned int _blcfill_u32(unsigned int);
unsigned int _blsfill_u32(unsigned int);
unsigned int _blcs_u32(unsigned int);
unsigned int _tzmsk_u32(unsigned int);
unsigned int _blcic_u32(unsigned int);
unsigned int _blsic_u32(unsigned int);
unsigned int _t1mskc_u32(unsigned int);
unsigned int _blcmsk_u32(unsigned int);
unsigned int _blci_u32(unsigned int);











#line 291 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\ammintrin.h"


}; 
#line 295 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\ammintrin.h"

#line 297 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\ammintrin.h"
#line 298 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\ammintrin.h"
#line 299 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\ammintrin.h"
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\intrin.h"
#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\intrin.h"


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\mm3dnow.h"















#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"







































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\mm3dnow.h"




extern "C" { 
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\mm3dnow.h"



void _m_femms(void);
__m64 _m_pavgusb(__m64, __m64);
__m64 _m_pf2id(__m64);
__m64 _m_pfacc(__m64, __m64);
__m64 _m_pfadd(__m64, __m64);
__m64 _m_pfcmpeq(__m64, __m64);
__m64 _m_pfcmpge(__m64, __m64);
__m64 _m_pfcmpgt(__m64, __m64);
__m64 _m_pfmax(__m64, __m64);
__m64 _m_pfmin(__m64, __m64);
__m64 _m_pfmul(__m64, __m64);
__m64 _m_pfrcp(__m64);
__m64 _m_pfrcpit1(__m64, __m64);
__m64 _m_pfrcpit2(__m64, __m64);
__m64 _m_pfrsqrt(__m64);
__m64 _m_pfrsqit1(__m64, __m64);
__m64 _m_pfsub(__m64, __m64);
__m64 _m_pfsubr(__m64, __m64);
__m64 _m_pi2fd(__m64);
__m64 _m_pmulhrw(__m64, __m64);
void _m_prefetch(void*);
void _m_prefetchw(volatile const void*_Source);

__m64 _m_from_float(float);
float _m_to_float(__m64);



__m64 _m_pf2iw(__m64);
__m64 _m_pfnacc(__m64, __m64);
__m64 _m_pfpnacc(__m64, __m64);
__m64 _m_pi2fw(__m64);
__m64 _m_pswapd(__m64);


}; 
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\mm3dnow.h"

#line 70 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\mm3dnow.h"
#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\mm3dnow.h"
#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\intrin.h"
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\intrin.h"



#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\intrin.h"

#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\intrin.h"

#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\intrin.h"


extern "C" {
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\intrin.h"






















#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\intrin.h"


#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\intrin.h"






#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\intrin.h"




#line 83 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\intrin.h"




#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\intrin.h"




#line 93 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\intrin.h"




#line 98 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\intrin.h"




#line 103 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\intrin.h"

#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\intrin.h"


void * _AddressOfReturnAddress(void);
unsigned char _BitScanForward(unsigned long * _Index, unsigned long _Mask);

unsigned char _BitScanReverse(unsigned long * _Index, unsigned long _Mask);




















long _InterlockedAddLargeStatistic(__int64 volatile * _Addend, long _Value);



long _InterlockedAnd(long volatile * _Value, long _Mask);
short _InterlockedAnd16(short volatile * _Value, short _Mask);









char _InterlockedAnd8(char volatile * _Value, char _Mask);








long __cdecl _InterlockedCompareExchange(long volatile * _Destination, long _Exchange, long _Comparand);



short _InterlockedCompareExchange16(short volatile * _Destination, short _Exchange, short _Comparand);




__int64 _InterlockedCompareExchange64(__int64 volatile * _Destination, __int64 _Exchange, __int64 _Comparand);




char _InterlockedCompareExchange8(char volatile * _Destination, char _Exchange, char _Comparand);



void * _InterlockedCompareExchangePointer(void * volatile * _Destination, void * _Exchange, void * _Comparand);








long __cdecl _InterlockedDecrement(long volatile * _Addend);

short _InterlockedDecrement16(short volatile * _Addend);










long __cdecl _InterlockedExchange(long volatile * _Target, long _Value);
short _InterlockedExchange16(short volatile * _Target, short _Value);







char _InterlockedExchange8(char volatile * _Target, char _Value);



long __cdecl _InterlockedExchangeAdd(long volatile * _Addend, long _Value);
short _InterlockedExchangeAdd16(short volatile * _Addend, short _Value);







char _InterlockedExchangeAdd8(char volatile * _Addend, char _Value);






 


__forceinline static void * _Intrin_h_InterlockedExchangePointer(void * volatile * _Target, void * _Value)
{
    return (void *)_InterlockedExchange((long volatile *) _Target, (long) _Value);
}



#line 235 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\intrin.h"






long __cdecl _InterlockedIncrement(long volatile * _Addend);

short _InterlockedIncrement16(short volatile * _Addend);










long _InterlockedOr(long volatile * _Value, long _Mask);
short _InterlockedOr16(short volatile * _Value, short _Mask);









char _InterlockedOr8(char volatile * _Value, char _Mask);








long _InterlockedXor(long volatile * _Value, long _Mask);
short _InterlockedXor16(short volatile * _Value, short _Mask);









char _InterlockedXor8(char volatile * _Value, char _Mask);
















void _ReadBarrier(void);

void _ReadWriteBarrier(void);
void * _ReturnAddress(void);

void _WriteBarrier(void);

void __addfsbyte(unsigned long, unsigned char);
void __addfsdword(unsigned long, unsigned long);
void __addfsword(unsigned long, unsigned short);




void __code_seg(const char *);
void __cpuid(int[4], int);
void __cpuidex(int[4], int, int);
void __cdecl __debugbreak(void);

__int64 __emul(int, int);
unsigned __int64 __emulu(unsigned int, unsigned int);
__declspec(noreturn) void __fastfail(unsigned int);

unsigned int __getcallerseflags(void);
void __halt(void);

unsigned char __inbyte(unsigned short);
void __inbytestring(unsigned short, unsigned char *, unsigned long);
void __incfsbyte(unsigned long);
void __incfsdword(unsigned long);
void __incfsword(unsigned long);




unsigned long __indword(unsigned short);
void __indwordstring(unsigned short, unsigned long *, unsigned long);
void __int2c(void);
void __invlpg(void *);
unsigned short __inword(unsigned short);
void __inwordstring(unsigned short, unsigned short *, unsigned long);









void __lidt(void *);
unsigned __int64 __ll_lshift(unsigned __int64, int);
__int64 __ll_rshift(__int64, int);
unsigned int __lzcnt(unsigned int);
unsigned short __lzcnt16(unsigned short);

void __movsb(unsigned char *, unsigned char const *, size_t);
void __movsd(unsigned long *, unsigned long const *, size_t);

void __movsw(unsigned short *, unsigned short const *, size_t);

void __nop(void);
void __nvreg_restore_fence(void);
void __nvreg_save_fence(void);
void __outbyte(unsigned short, unsigned char);
void __outbytestring(unsigned short, unsigned char *, unsigned long);
void __outdword(unsigned short, unsigned long);
void __outdwordstring(unsigned short, unsigned long *, unsigned long);
void __outword(unsigned short, unsigned short);
void __outwordstring(unsigned short, unsigned short *, unsigned long);
unsigned int __popcnt(unsigned int);
unsigned short __popcnt16(unsigned short);




unsigned __int64 __rdtsc(void);
unsigned __int64 __rdtscp(unsigned int *);

unsigned long __readcr0(void);

unsigned long __readcr2(void);

unsigned long __readcr3(void);

unsigned long __readcr4(void);

unsigned long __readcr8(void);

unsigned int __readdr(unsigned int);

unsigned int __readeflags(void);
unsigned char __readfsbyte(unsigned long);
unsigned long __readfsdword(unsigned long);
unsigned __int64 __readfsqword(unsigned long);
unsigned short __readfsword(unsigned long);




unsigned __int64 __readmsr(unsigned long);
unsigned __int64 __readpmc(unsigned long);
unsigned long __segmentlimit(unsigned long);



void __sidt(void *);

void __stosb(unsigned char *, unsigned char, size_t);
void __stosd(unsigned long *, unsigned long, size_t);

void __stosw(unsigned short *, unsigned short, size_t);
void __svm_clgi(void);
void __svm_invlpga(void *, int);
void __svm_skinit(int);
void __svm_stgi(void);
void __svm_vmload(size_t);
void __svm_vmrun(size_t);
void __svm_vmsave(size_t);



void __ud2(void);
unsigned __int64 __ull_rshift(unsigned __int64, int);

void __vmx_off(void);




void __vmx_vmptrst(unsigned __int64 *);



void __wbinvd(void);



void __writecr0(unsigned int);

void __writecr3(unsigned int);

void __writecr4(unsigned int);

void __writecr8(unsigned int);

void __writedr(unsigned int, unsigned int);

void __writeeflags(unsigned int);
void __writefsbyte(unsigned long, unsigned char);
void __writefsdword(unsigned long, unsigned long);
void __writefsqword(unsigned long, unsigned __int64);
void __writefsword(unsigned long, unsigned short);




void __writemsr(unsigned long, unsigned __int64);

unsigned char _bittest(long const *, long);

unsigned char _bittestandcomplement(long *, long);

unsigned char _bittestandreset(long *, long);

unsigned char _bittestandset(long *, long);

  unsigned __int64 __cdecl _byteswap_uint64(  unsigned __int64);
  unsigned long __cdecl _byteswap_ulong(  unsigned long);
  unsigned short __cdecl _byteswap_ushort(  unsigned short);
void __cdecl _disable(void);
void __cdecl _enable(void);
unsigned char _interlockedbittestandreset(long volatile *, long);




unsigned char _interlockedbittestandset(long volatile *, long);






  unsigned long __cdecl _lrotl(  unsigned long,   int);
  unsigned long __cdecl _lrotr(  unsigned long,   int);
void _m_empty(void);
void _m_femms(void);
__m64 _m_from_float(float);
__m64 _m_from_int(int);
void _m_maskmovq(__m64, __m64, char *);
__m64 _m_packssdw(__m64, __m64);
__m64 _m_packsswb(__m64, __m64);
__m64 _m_packuswb(__m64, __m64);
__m64 _m_paddb(__m64, __m64);
__m64 _m_paddd(__m64, __m64);
__m64 _m_paddsb(__m64, __m64);
__m64 _m_paddsw(__m64, __m64);
__m64 _m_paddusb(__m64, __m64);
__m64 _m_paddusw(__m64, __m64);
__m64 _m_paddw(__m64, __m64);
__m64 _m_pand(__m64, __m64);
__m64 _m_pandn(__m64, __m64);
__m64 _m_pavgb(__m64, __m64);
__m64 _m_pavgusb(__m64, __m64);
__m64 _m_pavgw(__m64, __m64);
__m64 _m_pcmpeqb(__m64, __m64);
__m64 _m_pcmpeqd(__m64, __m64);
__m64 _m_pcmpeqw(__m64, __m64);
__m64 _m_pcmpgtb(__m64, __m64);
__m64 _m_pcmpgtd(__m64, __m64);
__m64 _m_pcmpgtw(__m64, __m64);
int _m_pextrw(__m64, int);
__m64 _m_pf2id(__m64);
__m64 _m_pf2iw(__m64);
__m64 _m_pfacc(__m64, __m64);
__m64 _m_pfadd(__m64, __m64);
__m64 _m_pfcmpeq(__m64, __m64);
__m64 _m_pfcmpge(__m64, __m64);
__m64 _m_pfcmpgt(__m64, __m64);
__m64 _m_pfmax(__m64, __m64);
__m64 _m_pfmin(__m64, __m64);
__m64 _m_pfmul(__m64, __m64);
__m64 _m_pfnacc(__m64, __m64);
__m64 _m_pfpnacc(__m64, __m64);
__m64 _m_pfrcp(__m64);
__m64 _m_pfrcpit1(__m64, __m64);
__m64 _m_pfrcpit2(__m64, __m64);
__m64 _m_pfrsqit1(__m64, __m64);
__m64 _m_pfrsqrt(__m64);
__m64 _m_pfsub(__m64, __m64);
__m64 _m_pfsubr(__m64, __m64);
__m64 _m_pi2fd(__m64);
__m64 _m_pi2fw(__m64);
__m64 _m_pinsrw(__m64, int, int);
__m64 _m_pmaddwd(__m64, __m64);
__m64 _m_pmaxsw(__m64, __m64);
__m64 _m_pmaxub(__m64, __m64);
__m64 _m_pminsw(__m64, __m64);
__m64 _m_pminub(__m64, __m64);
int _m_pmovmskb(__m64);
__m64 _m_pmulhrw(__m64, __m64);
__m64 _m_pmulhuw(__m64, __m64);
__m64 _m_pmulhw(__m64, __m64);
__m64 _m_pmullw(__m64, __m64);
__m64 _m_por(__m64, __m64);
void _m_prefetch(void *);
void _m_prefetchw(volatile const void *);
__m64 _m_psadbw(__m64, __m64);
__m64 _m_pshufw(__m64, int);
__m64 _m_pslld(__m64, __m64);
__m64 _m_pslldi(__m64, int);
__m64 _m_psllq(__m64, __m64);
__m64 _m_psllqi(__m64, int);
__m64 _m_psllw(__m64, __m64);
__m64 _m_psllwi(__m64, int);
__m64 _m_psrad(__m64, __m64);
__m64 _m_psradi(__m64, int);
__m64 _m_psraw(__m64, __m64);
__m64 _m_psrawi(__m64, int);
__m64 _m_psrld(__m64, __m64);
__m64 _m_psrldi(__m64, int);
__m64 _m_psrlq(__m64, __m64);
__m64 _m_psrlqi(__m64, int);
__m64 _m_psrlw(__m64, __m64);
__m64 _m_psrlwi(__m64, int);
__m64 _m_psubb(__m64, __m64);
__m64 _m_psubd(__m64, __m64);
__m64 _m_psubsb(__m64, __m64);
__m64 _m_psubsw(__m64, __m64);
__m64 _m_psubusb(__m64, __m64);
__m64 _m_psubusw(__m64, __m64);
__m64 _m_psubw(__m64, __m64);
__m64 _m_pswapd(__m64);
__m64 _m_punpckhbw(__m64, __m64);
__m64 _m_punpckhdq(__m64, __m64);
__m64 _m_punpckhwd(__m64, __m64);
__m64 _m_punpcklbw(__m64, __m64);
__m64 _m_punpckldq(__m64, __m64);
__m64 _m_punpcklwd(__m64, __m64);
__m64 _m_pxor(__m64, __m64);
float _m_to_float(__m64);
int _m_to_int(__m64);
__m128i _mm_abs_epi16(__m128i);
__m128i _mm_abs_epi32(__m128i);
__m128i _mm_abs_epi8(__m128i);
__m64 _mm_abs_pi16(__m64);
__m64 _mm_abs_pi32(__m64);
__m64 _mm_abs_pi8(__m64);
__m128i _mm_add_epi16(__m128i, __m128i);
__m128i _mm_add_epi32(__m128i, __m128i);
__m128i _mm_add_epi64(__m128i, __m128i);
__m128i _mm_add_epi8(__m128i, __m128i);
__m128d _mm_add_pd(__m128d, __m128d);
__m128 _mm_add_ps(__m128, __m128);
__m128d _mm_add_sd(__m128d, __m128d);
__m64 _mm_add_si64(__m64, __m64);
__m128 _mm_add_ss(__m128, __m128);
__m128i _mm_adds_epi16(__m128i, __m128i);
__m128i _mm_adds_epi8(__m128i, __m128i);
__m128i _mm_adds_epu16(__m128i, __m128i);
__m128i _mm_adds_epu8(__m128i, __m128i);
__m128d _mm_addsub_pd(__m128d, __m128d);
__m128 _mm_addsub_ps(__m128, __m128);
__m128i _mm_alignr_epi8(__m128i, __m128i, int);
__m64 _mm_alignr_pi8(__m64, __m64, int);
__m128d _mm_and_pd(__m128d, __m128d);
__m128 _mm_and_ps(__m128, __m128);
__m128i _mm_and_si128(__m128i, __m128i);
__m128d _mm_andnot_pd(__m128d, __m128d);
__m128 _mm_andnot_ps(__m128, __m128);
__m128i _mm_andnot_si128(__m128i, __m128i);
__m128i _mm_avg_epu16(__m128i, __m128i);
__m128i _mm_avg_epu8(__m128i, __m128i);
__m128i _mm_blend_epi16(__m128i, __m128i, int);
__m128d _mm_blend_pd(__m128d, __m128d, int);
__m128 _mm_blend_ps(__m128, __m128, int);
__m128i _mm_blendv_epi8(__m128i, __m128i, __m128i);
__m128d _mm_blendv_pd(__m128d, __m128d, __m128d);
__m128 _mm_blendv_ps(__m128, __m128, __m128);
void _mm_clflush(void const *);
__m128i _mm_cmpeq_epi16(__m128i, __m128i);
__m128i _mm_cmpeq_epi32(__m128i, __m128i);
__m128i _mm_cmpeq_epi64(__m128i, __m128i);
__m128i _mm_cmpeq_epi8(__m128i, __m128i);
__m128d _mm_cmpeq_pd(__m128d, __m128d);
__m128 _mm_cmpeq_ps(__m128, __m128);
__m128d _mm_cmpeq_sd(__m128d, __m128d);
__m128 _mm_cmpeq_ss(__m128, __m128);
int _mm_cmpestra(__m128i, int, __m128i, int, int);
int _mm_cmpestrc(__m128i, int, __m128i, int, int);
int _mm_cmpestri(__m128i, int, __m128i, int, int);
__m128i _mm_cmpestrm(__m128i, int, __m128i, int, int);
int _mm_cmpestro(__m128i, int, __m128i, int, int);
int _mm_cmpestrs(__m128i, int, __m128i, int, int);
int _mm_cmpestrz(__m128i, int, __m128i, int, int);
__m128d _mm_cmpge_pd(__m128d, __m128d);
__m128 _mm_cmpge_ps(__m128, __m128);
__m128d _mm_cmpge_sd(__m128d, __m128d);
__m128 _mm_cmpge_ss(__m128, __m128);
__m128i _mm_cmpgt_epi16(__m128i, __m128i);
__m128i _mm_cmpgt_epi32(__m128i, __m128i);
__m128i _mm_cmpgt_epi64(__m128i, __m128i);
__m128i _mm_cmpgt_epi8(__m128i, __m128i);
__m128d _mm_cmpgt_pd(__m128d, __m128d);
__m128 _mm_cmpgt_ps(__m128, __m128);
__m128d _mm_cmpgt_sd(__m128d, __m128d);
__m128 _mm_cmpgt_ss(__m128, __m128);
int _mm_cmpistra(__m128i, __m128i, int);
int _mm_cmpistrc(__m128i, __m128i, int);
int _mm_cmpistri(__m128i, __m128i, int);
__m128i _mm_cmpistrm(__m128i, __m128i, int);
int _mm_cmpistro(__m128i, __m128i, int);
int _mm_cmpistrs(__m128i, __m128i, int);
int _mm_cmpistrz(__m128i, __m128i, int);
__m128d _mm_cmple_pd(__m128d, __m128d);
__m128 _mm_cmple_ps(__m128, __m128);
__m128d _mm_cmple_sd(__m128d, __m128d);
__m128 _mm_cmple_ss(__m128, __m128);
__m128i _mm_cmplt_epi16(__m128i, __m128i);
__m128i _mm_cmplt_epi32(__m128i, __m128i);
__m128i _mm_cmplt_epi8(__m128i, __m128i);
__m128d _mm_cmplt_pd(__m128d, __m128d);
__m128 _mm_cmplt_ps(__m128, __m128);
__m128d _mm_cmplt_sd(__m128d, __m128d);
__m128 _mm_cmplt_ss(__m128, __m128);
__m128d _mm_cmpneq_pd(__m128d, __m128d);
__m128 _mm_cmpneq_ps(__m128, __m128);
__m128d _mm_cmpneq_sd(__m128d, __m128d);
__m128 _mm_cmpneq_ss(__m128, __m128);
__m128d _mm_cmpnge_pd(__m128d, __m128d);
__m128 _mm_cmpnge_ps(__m128, __m128);
__m128d _mm_cmpnge_sd(__m128d, __m128d);
__m128 _mm_cmpnge_ss(__m128, __m128);
__m128d _mm_cmpngt_pd(__m128d, __m128d);
__m128 _mm_cmpngt_ps(__m128, __m128);
__m128d _mm_cmpngt_sd(__m128d, __m128d);
__m128 _mm_cmpngt_ss(__m128, __m128);
__m128d _mm_cmpnle_pd(__m128d, __m128d);
__m128 _mm_cmpnle_ps(__m128, __m128);
__m128d _mm_cmpnle_sd(__m128d, __m128d);
__m128 _mm_cmpnle_ss(__m128, __m128);
__m128d _mm_cmpnlt_pd(__m128d, __m128d);
__m128 _mm_cmpnlt_ps(__m128, __m128);
__m128d _mm_cmpnlt_sd(__m128d, __m128d);
__m128 _mm_cmpnlt_ss(__m128, __m128);
__m128d _mm_cmpord_pd(__m128d, __m128d);
__m128 _mm_cmpord_ps(__m128, __m128);
__m128d _mm_cmpord_sd(__m128d, __m128d);
__m128 _mm_cmpord_ss(__m128, __m128);
__m128d _mm_cmpunord_pd(__m128d, __m128d);
__m128 _mm_cmpunord_ps(__m128, __m128);
__m128d _mm_cmpunord_sd(__m128d, __m128d);
__m128 _mm_cmpunord_ss(__m128, __m128);
int _mm_comieq_sd(__m128d, __m128d);
int _mm_comieq_ss(__m128, __m128);
int _mm_comige_sd(__m128d, __m128d);
int _mm_comige_ss(__m128, __m128);
int _mm_comigt_sd(__m128d, __m128d);
int _mm_comigt_ss(__m128, __m128);
int _mm_comile_sd(__m128d, __m128d);
int _mm_comile_ss(__m128, __m128);
int _mm_comilt_sd(__m128d, __m128d);
int _mm_comilt_ss(__m128, __m128);
int _mm_comineq_sd(__m128d, __m128d);
int _mm_comineq_ss(__m128, __m128);
unsigned int _mm_crc32_u16(unsigned int, unsigned short);
unsigned int _mm_crc32_u32(unsigned int, unsigned int);

unsigned int _mm_crc32_u8(unsigned int, unsigned char);
__m128 _mm_cvt_pi2ps(__m128, __m64);
__m64 _mm_cvt_ps2pi(__m128);
__m128 _mm_cvt_si2ss(__m128, int);
int _mm_cvt_ss2si(__m128);
__m128i _mm_cvtepi16_epi32(__m128i);
__m128i _mm_cvtepi16_epi64(__m128i);
__m128i _mm_cvtepi32_epi64(__m128i);
__m128d _mm_cvtepi32_pd(__m128i);
__m128 _mm_cvtepi32_ps(__m128i);
__m128i _mm_cvtepi8_epi16(__m128i);
__m128i _mm_cvtepi8_epi32(__m128i);
__m128i _mm_cvtepi8_epi64(__m128i);
__m128i _mm_cvtepu16_epi32(__m128i);
__m128i _mm_cvtepu16_epi64(__m128i);
__m128i _mm_cvtepu32_epi64(__m128i);
__m128i _mm_cvtepu8_epi16(__m128i);
__m128i _mm_cvtepu8_epi32(__m128i);
__m128i _mm_cvtepu8_epi64(__m128i);
__m128i _mm_cvtpd_epi32(__m128d);
__m64 _mm_cvtpd_pi32(__m128d);
__m128 _mm_cvtpd_ps(__m128d);
__m128d _mm_cvtpi32_pd(__m64);
__m128i _mm_cvtps_epi32(__m128);
__m128d _mm_cvtps_pd(__m128);
int _mm_cvtsd_si32(__m128d);


__m128 _mm_cvtsd_ss(__m128, __m128d);
int _mm_cvtsi128_si32(__m128i);


__m128d _mm_cvtsi32_sd(__m128d, int);
__m128i _mm_cvtsi32_si128(int);






__m128d _mm_cvtss_sd(__m128d, __m128);


__m64 _mm_cvtt_ps2pi(__m128);
int _mm_cvtt_ss2si(__m128);
__m128i _mm_cvttpd_epi32(__m128d);
__m64 _mm_cvttpd_pi32(__m128d);
__m128i _mm_cvttps_epi32(__m128);
int _mm_cvttsd_si32(__m128d);




__m128d _mm_div_pd(__m128d, __m128d);
__m128 _mm_div_ps(__m128, __m128);
__m128d _mm_div_sd(__m128d, __m128d);
__m128 _mm_div_ss(__m128, __m128);
__m128d _mm_dp_pd(__m128d, __m128d, int);
__m128 _mm_dp_ps(__m128, __m128, int);
int _mm_extract_epi16(__m128i, int);
int _mm_extract_epi32(__m128i, int);

int _mm_extract_epi8(__m128i, int);
int _mm_extract_ps(__m128, int);
__m128i _mm_extract_si64(__m128i, __m128i);
__m128i _mm_extracti_si64(__m128i, int, int);
unsigned int _mm_getcsr(void);
__m128i _mm_hadd_epi16(__m128i, __m128i);
__m128i _mm_hadd_epi32(__m128i, __m128i);
__m128d _mm_hadd_pd(__m128d, __m128d);
__m64 _mm_hadd_pi16(__m64, __m64);
__m64 _mm_hadd_pi32(__m64, __m64);
__m128 _mm_hadd_ps(__m128, __m128);
__m128i _mm_hadds_epi16(__m128i, __m128i);
__m64 _mm_hadds_pi16(__m64, __m64);
__m128i _mm_hsub_epi16(__m128i, __m128i);
__m128i _mm_hsub_epi32(__m128i, __m128i);
__m128d _mm_hsub_pd(__m128d, __m128d);
__m64 _mm_hsub_pi16(__m64, __m64);
__m64 _mm_hsub_pi32(__m64, __m64);
__m128 _mm_hsub_ps(__m128, __m128);
__m128i _mm_hsubs_epi16(__m128i, __m128i);
__m64 _mm_hsubs_pi16(__m64, __m64);
__m128i _mm_insert_epi16(__m128i, int, int);
__m128i _mm_insert_epi32(__m128i, int, int);

__m128i _mm_insert_epi8(__m128i, int, int);
__m128 _mm_insert_ps(__m128, __m128, int);
__m128i _mm_insert_si64(__m128i, __m128i);
__m128i _mm_inserti_si64(__m128i, __m128i, int, int);
__m128i _mm_lddqu_si128(__m128i const *);
void _mm_lfence(void);
__m128d _mm_load1_pd(double const *);
__m128d _mm_load_pd(double const *);
__m128 _mm_load_ps(float const *);
__m128 _mm_load_ps1(float const *);
__m128d _mm_load_sd(double const *);
__m128i _mm_load_si128(__m128i const *);
__m128 _mm_load_ss(float const *);
__m128d _mm_loaddup_pd(double const *);
__m128d _mm_loadh_pd(__m128d, double const *);
__m128 _mm_loadh_pi(__m128, __m64 const *);
__m128i _mm_loadl_epi64(__m128i const *);
__m128d _mm_loadl_pd(__m128d, double const *);
__m128 _mm_loadl_pi(__m128, __m64 const *);
__m128d _mm_loadr_pd(double const *);
__m128 _mm_loadr_ps(float const *);
__m128d _mm_loadu_pd(double const *);
__m128 _mm_loadu_ps(float const *);
__m128i _mm_loadu_si128(__m128i const *);
__m128i _mm_madd_epi16(__m128i, __m128i);
__m128i _mm_maddubs_epi16(__m128i, __m128i);
__m64 _mm_maddubs_pi16(__m64, __m64);
void _mm_maskmoveu_si128(__m128i, __m128i, char *);
__m128i _mm_max_epi16(__m128i, __m128i);
__m128i _mm_max_epi32(__m128i, __m128i);
__m128i _mm_max_epi8(__m128i, __m128i);
__m128i _mm_max_epu16(__m128i, __m128i);
__m128i _mm_max_epu32(__m128i, __m128i);
__m128i _mm_max_epu8(__m128i, __m128i);
__m128d _mm_max_pd(__m128d, __m128d);
__m128 _mm_max_ps(__m128, __m128);
__m128d _mm_max_sd(__m128d, __m128d);
__m128 _mm_max_ss(__m128, __m128);
void _mm_mfence(void);
__m128i _mm_min_epi16(__m128i, __m128i);
__m128i _mm_min_epi32(__m128i, __m128i);
__m128i _mm_min_epi8(__m128i, __m128i);
__m128i _mm_min_epu16(__m128i, __m128i);
__m128i _mm_min_epu32(__m128i, __m128i);
__m128i _mm_min_epu8(__m128i, __m128i);
__m128d _mm_min_pd(__m128d, __m128d);
__m128 _mm_min_ps(__m128, __m128);
__m128d _mm_min_sd(__m128d, __m128d);
__m128 _mm_min_ss(__m128, __m128);
__m128i _mm_minpos_epu16(__m128i);
void _mm_monitor(void const *, unsigned int, unsigned int);
__m128i _mm_move_epi64(__m128i);
__m128d _mm_move_sd(__m128d, __m128d);
__m128 _mm_move_ss(__m128, __m128);
__m128d _mm_movedup_pd(__m128d);
__m128 _mm_movehdup_ps(__m128);
__m128 _mm_movehl_ps(__m128, __m128);
__m128 _mm_moveldup_ps(__m128);
__m128 _mm_movelh_ps(__m128, __m128);
int _mm_movemask_epi8(__m128i);
int _mm_movemask_pd(__m128d);
int _mm_movemask_ps(__m128);
__m64 _mm_movepi64_pi64(__m128i);
__m128i _mm_movpi64_epi64(__m64);
__m128i _mm_mpsadbw_epu8(__m128i, __m128i, int);
__m128i _mm_mul_epi32(__m128i, __m128i);
__m128i _mm_mul_epu32(__m128i, __m128i);
__m128d _mm_mul_pd(__m128d, __m128d);
__m128 _mm_mul_ps(__m128, __m128);
__m128d _mm_mul_sd(__m128d, __m128d);
__m128 _mm_mul_ss(__m128, __m128);
__m64 _mm_mul_su32(__m64, __m64);
__m128i _mm_mulhi_epi16(__m128i, __m128i);
__m128i _mm_mulhi_epu16(__m128i, __m128i);
__m128i _mm_mulhrs_epi16(__m128i, __m128i);
__m64 _mm_mulhrs_pi16(__m64, __m64);
__m128i _mm_mullo_epi16(__m128i, __m128i);
__m128i _mm_mullo_epi32(__m128i, __m128i);
void _mm_mwait(unsigned int, unsigned int);
__m128d _mm_or_pd(__m128d, __m128d);
__m128 _mm_or_ps(__m128, __m128);
__m128i _mm_or_si128(__m128i, __m128i);
__m128i _mm_packs_epi16(__m128i, __m128i);
__m128i _mm_packs_epi32(__m128i, __m128i);
__m128i _mm_packus_epi16(__m128i, __m128i);
__m128i _mm_packus_epi32(__m128i, __m128i);
void _mm_pause(void);
int _mm_popcnt_u32(unsigned int);

void _mm_prefetch(char const *, int);
__m128 _mm_rcp_ps(__m128);
__m128 _mm_rcp_ss(__m128);
__m128d _mm_round_pd(__m128d, int);
__m128 _mm_round_ps(__m128, int);
__m128d _mm_round_sd(__m128d, __m128d, int);
__m128 _mm_round_ss(__m128, __m128, int);
__m128 _mm_rsqrt_ps(__m128);
__m128 _mm_rsqrt_ss(__m128);
__m128i _mm_sad_epu8(__m128i, __m128i);
__m128i _mm_set1_epi16(short);
__m128i _mm_set1_epi32(int);
__m128i _mm_set1_epi64(__m64);

__m128i _mm_set1_epi8(char);
__m128d _mm_set1_pd(double);
__m64 _mm_set1_pi16(short);
__m64 _mm_set1_pi32(int);
__m64 _mm_set1_pi8(char);
__m128i _mm_set_epi16(short, short, short, short, short, short, short, short);
__m128i _mm_set_epi32(int, int, int, int);
__m128i _mm_set_epi64(__m64, __m64);

__m128i _mm_set_epi8(char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char);
__m128d _mm_set_pd(double, double);
__m64 _mm_set_pi16(short, short, short, short);
__m64 _mm_set_pi32(int, int);
__m64 _mm_set_pi8(char, char, char, char, char, char, char, char);
__m128 _mm_set_ps(float, float, float, float);
__m128 _mm_set_ps1(float);
__m128d _mm_set_sd(double);
__m128 _mm_set_ss(float);
void _mm_setcsr(unsigned int);
__m128i _mm_setl_epi64(__m128i);
__m128i _mm_setr_epi16(short, short, short, short, short, short, short, short);
__m128i _mm_setr_epi32(int, int, int, int);
__m128i _mm_setr_epi64(__m64, __m64);
__m128i _mm_setr_epi8(char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char);
__m128d _mm_setr_pd(double, double);
__m64 _mm_setr_pi16(short, short, short, short);
__m64 _mm_setr_pi32(int, int);
__m64 _mm_setr_pi8(char, char, char, char, char, char, char, char);
__m128 _mm_setr_ps(float, float, float, float);
__m128d _mm_setzero_pd(void);
__m128 _mm_setzero_ps(void);
__m128i _mm_setzero_si128(void);
__m64 _mm_setzero_si64(void);
void _mm_sfence(void);
__m128i _mm_shuffle_epi32(__m128i, int);
__m128i _mm_shuffle_epi8(__m128i, __m128i);
__m128d _mm_shuffle_pd(__m128d, __m128d, int);
__m64 _mm_shuffle_pi8(__m64, __m64);
__m128 _mm_shuffle_ps(__m128, __m128, unsigned int);
__m128i _mm_shufflehi_epi16(__m128i, int);
__m128i _mm_shufflelo_epi16(__m128i, int);
__m128i _mm_sign_epi16(__m128i, __m128i);
__m128i _mm_sign_epi32(__m128i, __m128i);
__m128i _mm_sign_epi8(__m128i, __m128i);
__m64 _mm_sign_pi16(__m64, __m64);
__m64 _mm_sign_pi32(__m64, __m64);
__m64 _mm_sign_pi8(__m64, __m64);
__m128i _mm_sll_epi16(__m128i, __m128i);
__m128i _mm_sll_epi32(__m128i, __m128i);
__m128i _mm_sll_epi64(__m128i, __m128i);
__m128i _mm_slli_epi16(__m128i, int);
__m128i _mm_slli_epi32(__m128i, int);
__m128i _mm_slli_epi64(__m128i, int);
__m128i _mm_slli_si128(__m128i, int);
__m128d _mm_sqrt_pd(__m128d);
__m128 _mm_sqrt_ps(__m128);
__m128d _mm_sqrt_sd(__m128d, __m128d);
__m128 _mm_sqrt_ss(__m128);
__m128i _mm_sra_epi16(__m128i, __m128i);
__m128i _mm_sra_epi32(__m128i, __m128i);
__m128i _mm_srai_epi16(__m128i, int);
__m128i _mm_srai_epi32(__m128i, int);
__m128i _mm_srl_epi16(__m128i, __m128i);
__m128i _mm_srl_epi32(__m128i, __m128i);
__m128i _mm_srl_epi64(__m128i, __m128i);
__m128i _mm_srli_epi16(__m128i, int);
__m128i _mm_srli_epi32(__m128i, int);
__m128i _mm_srli_epi64(__m128i, int);
__m128i _mm_srli_si128(__m128i, int);
void _mm_store1_pd(double *, __m128d);
void _mm_store_pd(double *, __m128d);
void _mm_store_ps(float *, __m128);
void _mm_store_ps1(float *, __m128);
void _mm_store_sd(double *, __m128d);
void _mm_store_si128(__m128i *, __m128i);
void _mm_store_ss(float *, __m128);
void _mm_storeh_pd(double *, __m128d);
void _mm_storeh_pi(__m64 *, __m128);
void _mm_storel_epi64(__m128i *, __m128i);
void _mm_storel_pd(double *, __m128d);
void _mm_storel_pi(__m64 *, __m128);
void _mm_storer_pd(double *, __m128d);
void _mm_storer_ps(float *, __m128);
void _mm_storeu_pd(double *, __m128d);
void _mm_storeu_ps(float *, __m128);
void _mm_storeu_si128(__m128i *, __m128i);
__m128i _mm_stream_load_si128(__m128i *);
void _mm_stream_pd(double *, __m128d);
void _mm_stream_pi(__m64 *, __m64);
void _mm_stream_ps(float *, __m128);
void _mm_stream_sd(double *, __m128d);
void _mm_stream_si128(__m128i *, __m128i);
void _mm_stream_si32(int *, int);

void _mm_stream_ss(float *, __m128);
__m128i _mm_sub_epi16(__m128i, __m128i);
__m128i _mm_sub_epi32(__m128i, __m128i);
__m128i _mm_sub_epi64(__m128i, __m128i);
__m128i _mm_sub_epi8(__m128i, __m128i);
__m128d _mm_sub_pd(__m128d, __m128d);
__m128 _mm_sub_ps(__m128, __m128);
__m128d _mm_sub_sd(__m128d, __m128d);
__m64 _mm_sub_si64(__m64, __m64);
__m128 _mm_sub_ss(__m128, __m128);
__m128i _mm_subs_epi16(__m128i, __m128i);
__m128i _mm_subs_epi8(__m128i, __m128i);
__m128i _mm_subs_epu16(__m128i, __m128i);
__m128i _mm_subs_epu8(__m128i, __m128i);
int _mm_testc_si128(__m128i, __m128i);
int _mm_testnzc_si128(__m128i, __m128i);
int _mm_testz_si128(__m128i, __m128i);
int _mm_ucomieq_sd(__m128d, __m128d);
int _mm_ucomieq_ss(__m128, __m128);
int _mm_ucomige_sd(__m128d, __m128d);
int _mm_ucomige_ss(__m128, __m128);
int _mm_ucomigt_sd(__m128d, __m128d);
int _mm_ucomigt_ss(__m128, __m128);
int _mm_ucomile_sd(__m128d, __m128d);
int _mm_ucomile_ss(__m128, __m128);
int _mm_ucomilt_sd(__m128d, __m128d);
int _mm_ucomilt_ss(__m128, __m128);
int _mm_ucomineq_sd(__m128d, __m128d);
int _mm_ucomineq_ss(__m128, __m128);
__m128i _mm_unpackhi_epi16(__m128i, __m128i);
__m128i _mm_unpackhi_epi32(__m128i, __m128i);
__m128i _mm_unpackhi_epi64(__m128i, __m128i);
__m128i _mm_unpackhi_epi8(__m128i, __m128i);
__m128d _mm_unpackhi_pd(__m128d, __m128d);
__m128 _mm_unpackhi_ps(__m128, __m128);
__m128i _mm_unpacklo_epi16(__m128i, __m128i);
__m128i _mm_unpacklo_epi32(__m128i, __m128i);
__m128i _mm_unpacklo_epi64(__m128i, __m128i);
__m128i _mm_unpacklo_epi8(__m128i, __m128i);
__m128d _mm_unpacklo_pd(__m128d, __m128d);
__m128 _mm_unpacklo_ps(__m128, __m128);
__m128d _mm_xor_pd(__m128d, __m128d);
__m128 _mm_xor_ps(__m128, __m128);
__m128i _mm_xor_si128(__m128i, __m128i);

unsigned int __cdecl _rotl(  unsigned int _Value,   int _Shift);
unsigned short __cdecl _rotl16(unsigned short _Value, unsigned char _Shift);
unsigned __int64 __cdecl _rotl64(  unsigned __int64 _Value,   int _Shift);
unsigned char __cdecl _rotl8(unsigned char _Value, unsigned char _Shift);
unsigned int __cdecl _rotr(  unsigned int _Value,   int _Shift);
unsigned short __cdecl _rotr16(unsigned short _Value, unsigned char _Shift);
unsigned __int64 __cdecl _rotr64(  unsigned __int64 _Value,   int _Shift);
unsigned char __cdecl _rotr8(unsigned char _Value, unsigned char _Shift);
int __cdecl _setjmp(jmp_buf);


void _rsm(void);
void _lgdt(void *);
void _sgdt(void *);
void _clac(void);
void _stac(void);


}
#line 1059 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\intrin.h"
#line 1060 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\intrin.h"
#line 1061 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\intrin.h"

#line 940 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xmemory0"

   

   


  






#line 954 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xmemory0"

 
 #pragma warning(pop)
 #pragma pack(pop)
#line 959 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xmemory0"
#line 960 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xmemory0"






















#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xmemory"

 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 #pragma warning(disable: 4700)

namespace std {
		
template<class _Ty> inline
	pair<_Ty *, ptrdiff_t>

		get_temporary_buffer(ptrdiff_t _Count) throw ()

	{	
	_Ty *_Pbuf;

	if (_Count < 0)
		_Count = 0;
	else if (((size_t)(-1) / sizeof (_Ty) < _Count))
		_Xbad_alloc();	
	for (_Pbuf = 0; 0 < _Count; _Count /= 2)
		if ((_Pbuf = (_Ty *)operator new(
			(size_t)_Count * sizeof (_Ty), nothrow)) != 0)
			break;

	return (pair<_Ty *, ptrdiff_t>(_Pbuf, _Count));
	}

		
template<class _Ty> inline
	void return_temporary_buffer(_Ty *_Pbuf)
	{	
	operator delete(_Pbuf);
	}

		
template<class _InIt,
	class _Diff,
	class _FwdIt> inline
	_FwdIt _Uninitialized_copy_n(_InIt _First, _Diff _Count,
		_FwdIt _Dest, input_iterator_tag)
	{	
	_FwdIt _Next = _Dest;

	try {
	_Construct(&*_Dest, *_First);	
	while (0 < --_Count)
		_Construct(&*++_Dest, *++_First);
	} catch (...) {
	for (; _Next != _Dest; ++_Next)
		_Destroy(&*_Next);
	throw;
	}
	return (++_Dest);
	}

template<class _InIt,
	class _Diff,
	class _FwdIt> inline
	_FwdIt _Uninitialized_copy_n(_InIt _First, _Diff _Count,
		_FwdIt _Dest, forward_iterator_tag)
	{	
	_FwdIt _Next = _Dest;

	try {
	for (; 0 < _Count; --_Count, ++_Dest, ++_First)
		_Construct(&*_Dest, *_First);
	} catch (...) {
	for (; _Next != _Dest; ++_Next)
		_Destroy(&*_Next);
	throw;
	}
	return (_Dest);
	}

template<class _InIt,
	class _Diff,
	class _FwdIt> inline
	_FwdIt _Uninitialized_copy_n(_InIt _First, _Diff _Count,
		_FwdIt _Dest, _Nonscalar_ptr_iterator_tag)
	{	
	return (_Uninitialized_copy_n(_First, _Count,
		_Dest, _Iter_cat(_First)));
	}

template<class _InIt,
	class _Diff,
	class _FwdIt> inline
	_FwdIt _Uninitialized_copy_n(_InIt _First, _Diff _Count,
		_FwdIt _Dest, _Scalar_ptr_iterator_tag)
	{	
	:: memmove(&*_Dest, &*_First,
		_Count * sizeof (*_First));
	return (_Dest + _Count);
	}

template<class _InIt,
	class _Diff,
	class _FwdIt> inline
	_FwdIt _Uninitialized_copy_n(_InIt _First, _Diff _Count,
		_FwdIt _Dest)
	{	
	return (_Uninitialized_copy_n(_First, _Count,
		_Dest, _Ptr_cat(_First, _Dest)));
	}

 
template<class _InIt,
	class _Diff,
	class _FwdIt> inline
	_FwdIt uninitialized_copy_n(_InIt _First, _Diff _Count,
		_FwdIt _Dest)
	{	
	if (_Count <= 0)
		return (_Dest);
	else
		return (_Rechecked(_Dest,
			_Uninitialized_copy_n(_Unchecked(_First), _Count,
				_Unchecked(_Dest))));
	}

 





















































































































#line 249 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xmemory"

		
template<class _InIt,
	class _FwdIt> inline
	_FwdIt _Uninitialized_copy0(_InIt _First, _InIt _Last,
		_FwdIt _Dest, _Nonscalar_ptr_iterator_tag)
	{	
	_FwdIt _Next = _Dest;

	try {
	for (; _First != _Last; ++_Dest, ++_First)
		_Construct(&*_Dest, *_First);
	} catch (...) {
	for (; _Next != _Dest; ++_Next)
		_Destroy(&*_Next);
	throw;
	}
	return (_Dest);
	}

template<class _InIt,
	class _FwdIt> inline
	_FwdIt _Uninitialized_copy0(_InIt _First, _InIt _Last,
		_FwdIt _Dest, _Scalar_ptr_iterator_tag)
	{	
	ptrdiff_t _Count = _Last - _First;
	:: memmove(&*_Dest, &*_First,
		_Count * sizeof (*_First));
	return (_Dest + _Count);
	}

template<class _InIt,
	class _FwdIt> inline
	_FwdIt _Uninitialized_copy0(_InIt _First, _InIt _Last,
		_FwdIt _Dest)
	{	
	return (_Uninitialized_copy0(_First, _Last,
		_Dest, _Ptr_cat(_First, _Dest)));
	}

 
template<class _InIt,
	class _FwdIt> inline
	_FwdIt uninitialized_copy(_InIt _First, _InIt _Last,
		_FwdIt _Dest)
	{	
	return (_Rechecked(_Dest,
		_Uninitialized_copy0(_Unchecked(_First), _Unchecked(_Last),
			_Unchecked(_Dest))));
	}

 






























































#line 364 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xmemory"

		
template<class _InIt,
	class _FwdIt,
	class _Alloc> inline
	_FwdIt _Uninit_copy(_InIt _First, _InIt _Last, _FwdIt _Dest,
		_Wrap_alloc<_Alloc>& _Al, _Nonscalar_ptr_iterator_tag)
	{	
	;
	;
	_FwdIt _Next = _Dest;

	try {
	for (; _First != _Last; ++_Dest, ++_First)
		_Al.construct(_Dest, *_First);
	} catch (...) {
	for (; _Next != _Dest; ++_Next)
		_Al.destroy(_Next);
	throw;
	}
	return (_Dest);
	}

template<class _InIt,
	class _FwdIt,
	class _Alloc> inline
	_FwdIt _Uninit_copy(_InIt _First, _InIt _Last, _FwdIt _Dest,
		_Wrap_alloc<_Alloc>& _Al, _Scalar_ptr_iterator_tag)
	{	
	return (_Uninit_copy(_First, _Last, _Dest,
		_Al, _Nonscalar_ptr_iterator_tag()));
	}

template<class _Ty1,
	class _Ty2> inline
	_Ty2 *_Uninit_copy(_Ty1 *_First, _Ty1 *_Last, _Ty2 *_Dest,
		_Wrap_alloc<allocator<_Ty2> >&, _Scalar_ptr_iterator_tag)
	{	
	;
	;
	size_t _Count = (size_t)(_Last - _First);
	return ((_Ty2 *):: memmove(&*_Dest, &*_First,
		_Count * sizeof (*_First)) + _Count);	
	}

template<class _InIt,
	class _FwdIt,
	class _Alloc> inline
	_FwdIt _Uninit_copy(_InIt _First, _InIt _Last, _FwdIt _Dest,
		_Alloc& _Al)
	{	
	return (_Uninit_copy(_First, _Last, _Dest, _Al,
		_Ptr_cat(_First, _Dest)));
	}

template<class _InIt,
	class _FwdIt,
	class _Alloc> inline
	_FwdIt _Uninitialized_copy(_InIt _First, _InIt _Last, _FwdIt _Dest,
		_Alloc& _Al)
	{	
	return (_Rechecked(_Dest,
		_Uninit_copy(_Unchecked(_First), _Unchecked(_Last),
			_Unchecked(_Dest), _Al)));
	}

		
template<class _InIt,
	class _FwdIt,
	class _Alloc,
	class _Valty> inline
	_FwdIt _Uninit_move(_InIt _First, _InIt _Last, _FwdIt _Dest,
		_Wrap_alloc<_Alloc>& _Al, _Valty *, _Nonscalar_ptr_iterator_tag)
	{	
	;
	;
	_FwdIt _Next = _Dest;

	try {
	for (; _First != _Last; ++_Dest, ++_First)
		_Al.construct(_Dest, (_Valty&&)*_First);
	} catch (...) {
	for (; _Next != _Dest; ++_Next)
		_Al.destroy(_Next);
	throw;
	}
	return (_Dest);
	}

template<class _InIt,
	class _FwdIt,
	class _Alloc,
	class _Valty> inline
	_FwdIt _Uninit_move(_InIt _First, _InIt _Last, _FwdIt _Dest,
		_Wrap_alloc<_Alloc>& _Al, _Valty *, _Scalar_ptr_iterator_tag)
	{	
	return (_Uninit_move(_First, _Last, _Dest,
		_Al, (_Valty *)0, _Nonscalar_ptr_iterator_tag()));
	}

template<class _Ty1,
	class _Ty2,
	class _Valty> inline
	_Ty2 *_Uninit_move(_Ty1 *_First, _Ty1 *_Last, _Ty2 *_Dest,
		_Wrap_alloc<allocator<_Ty2> >&, _Valty *, _Scalar_ptr_iterator_tag)
	{	
	;
	;
	size_t _Count = (size_t)(_Last - _First);
	return ((_Ty2 *):: memmove(&*_Dest, &*_First,
		_Count * sizeof (*_First)) + _Count);	
	}

template<class _InIt,
	class _FwdIt,
	class _Alloc> inline
	_FwdIt _Uninit_move(_InIt _First, _InIt _Last, _FwdIt _Dest,
		_Alloc& _Al)
	{	
	return (_Uninit_move(_First, _Last, _Dest, _Al,
		_Val_type(_First), _Ptr_cat(_First, _Dest)));
	}

template<class _InIt,
	class _FwdIt,
	class _Alloc> inline
	_FwdIt _Uninitialized_move(_InIt _First, _InIt _Last, _FwdIt _Dest,
		_Alloc& _Al)
	{	
	return (_Rechecked(_Dest,
		_Uninit_move(_Unchecked(_First), _Unchecked(_Last),
			_Unchecked(_Dest), _Al)));
	}

		
template<class _FwdIt,
	class _Tval> inline
	void _Uninit_fill(_FwdIt _First, _FwdIt _Last, const _Tval& _Val,
		_Nonscalar_ptr_iterator_tag)
	{	
	;
	_FwdIt _Next = _First;

	try {
	for (; _First != _Last; ++_First)
		_Construct(&*_First, _Val);
	} catch (...) {
	for (; _Next != _First; ++_Next)
		_Destroy(&*_Next);
	throw;
	}
	}

template<class _Ty,
	class _Tval> inline
	void _Uninit_fill(_Ty *_First, _Ty *_Last, const _Tval& _Val,
		_Scalar_ptr_iterator_tag)
	{	
	::std:: fill(_First, _Last, _Val);
	}

template<class _FwdIt,
	class _Tval> inline
	void uninitialized_fill(_FwdIt _First, _FwdIt _Last, const _Tval& _Val)
	{	
	_Uninit_fill(_First, _Last, _Val, _Ptr_cat(_First, _First));
	}

		
template<class _FwdIt,
	class _Diff,
	class _Tval> inline
	_FwdIt _Uninit_fill_n(_FwdIt _First, _Diff _Count, const _Tval& _Val,
		_Nonscalar_ptr_iterator_tag)
	{	
 


#line 543 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xmemory"

	_FwdIt _Next = _First;

	try {
	for (; 0 < _Count; --_Count, ++_First)
		_Construct(&*_First, _Val);
	} catch (...) {
	for (; _Next != _First; ++_Next)
		_Destroy(&*_Next);
	throw;
	}

	return (_First);
	}

template<class _Ty,
	class _Diff,
	class _Tval> inline
	_Ty *_Uninit_fill_n(_Ty *_First, _Diff _Count, const _Tval& _Val,
		_Scalar_ptr_iterator_tag)
	{	
	return (_Fill_n(_First, _Count, _Val));
	}

template<class _FwdIt,
	class _Diff,
	class _Tval> inline
	_FwdIt uninitialized_fill_n(_FwdIt _First, _Diff _Count,
		const _Tval& _Val)
	{	
	return (_Uninit_fill_n(_First, _Count, _Val, _Ptr_cat(_First, _First)));
	}

		
template<class _FwdIt,
	class _Diff,
	class _Tval,
	class _Alloc,
	class _Valty> inline
	void _Uninit_fill_n(_FwdIt _First, _Diff _Count,
		const _Tval *_Pval, _Wrap_alloc<_Alloc>& _Al,
			_Valty *, _Nonscalar_ptr_iterator_tag)
	{	
 


#line 590 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xmemory"

	_FwdIt _Next = _First;

	try {
	for (; 0 < _Count; --_Count, ++_First)
		_Al.construct(_First, *_Pval);
	} catch (...) {
	for (; _Next != _First; ++_Next)
		_Al.destroy(_Next);
	throw;
	}
	}

template<class _FwdIt,
	class _Diff,
	class _Tval,
	class _Alloc,
	class _Valty> inline
	void _Uninit_fill_n(_FwdIt _First, _Diff _Count,
		const _Tval *_Pval, _Wrap_alloc<_Alloc>& _Al,
			_Valty *, _Scalar_ptr_iterator_tag)
	{	
	_Uninit_fill_n(_First, _Count,
		_Pval, _Al, (_Valty *)0, _Nonscalar_ptr_iterator_tag());
	}

template<class _Ty,
	class _Diff,
	class _Tval,
	class _Valty> inline
	void _Uninit_fill_n(_Ty *_First, _Diff _Count,
		const _Tval *_Pval, _Wrap_alloc<allocator<_Ty> >&,
			_Valty *, _Scalar_ptr_iterator_tag)
	{	
	_Fill_n(_First, _Count, *_Pval);
	}

template<class _FwdIt,
	class _Diff,
	class _Tval,
	class _Alloc> inline
	void _Uninitialized_fill_n(_FwdIt _First, _Diff _Count,
		const _Tval *_Pval, _Alloc& _Al)
	{	
	_Uninit_fill_n(_First, _Count, _Pval, _Al,
		_Val_type(_First), _Ptr_cat(_First, _First));
	}

		
template<class _FwdIt,
	class _Diff,
	class _Alloc,
	class _Valty> inline
	void _Uninit_def_fill_n(_FwdIt _First, _Diff _Count,
		_Wrap_alloc<_Alloc>& _Al, _Valty *, _Nonscalar_ptr_iterator_tag)
	{	
 


#line 650 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xmemory"

	_FwdIt _Next = _First;

	try {
	for (; 0 < _Count; --_Count, ++_First)

		_Al.construct(_First);

	} catch (...) {
	for (; _Next != _First; ++_Next)
		_Al.destroy(_Next);
	throw;
	}
	}

template<class _FwdIt,
	class _Diff,
	class _Alloc,
	class _Valty> inline
	void _Uninit_def_fill_n(_FwdIt _First, _Diff _Count,
		_Wrap_alloc<_Alloc>& _Al, _Valty *, _Scalar_ptr_iterator_tag)
	{	
	_Uninit_def_fill_n(_First, _Count,
		_Al, (_Valty *)0, _Nonscalar_ptr_iterator_tag());
	}

template<class _Ty,
	class _Diff,
	class _Valty> inline
	void _Uninit_def_fill_n(_Ty *_First, _Diff _Count,
		_Wrap_alloc<allocator<_Ty> >&, _Valty *, _Scalar_ptr_iterator_tag)
	{	
	_Fill_n(_First, _Count, (_Valty)0);
	}

template<class _FwdIt,
	class _Diff,
	class _Alloc> inline
	void _Uninitialized_default_fill_n(_FwdIt _First, _Diff _Count,
		_Alloc& _Al)
	{	
	_Uninit_def_fill_n(_First, _Count, _Al,
		_Val_type(_First), _Ptr_cat(_First, _First));
	}

		
template<class _OutIt,
	class _Ty>
	class raw_storage_iterator
		: public _Outit
	{	
public:
	typedef _OutIt iterator_type;	
	typedef _OutIt iter_type;	
	typedef _Ty element_type;	

	explicit raw_storage_iterator(_OutIt _First)
		: _Next(_First)
		{	
		}

	raw_storage_iterator<_OutIt, _Ty>& operator*()
		{	
		return (*this);
		}

	raw_storage_iterator<_OutIt, _Ty>& operator=(const _Ty& _Val)
		{	
		_Construct(&*_Next, _Val);
		return (*this);
		}

	raw_storage_iterator<_OutIt, _Ty>& operator++()
		{	
		++_Next;
		return (*this);
		}

	raw_storage_iterator<_OutIt, _Ty> operator++(int)
		{	
		raw_storage_iterator<_OutIt, _Ty> _Ans = *this;
		++_Next;
		return (_Ans);
		}

private:
	_OutIt _Next;	
	};

		
template<class _Ty>
	class _Temp_iterator
		: public _Outit
	{	
public:
	typedef _Ty *_Pty;

	_Temp_iterator(ptrdiff_t _Count = 0)
		{	
		_Buf._Begin = 0;
		_Buf._Current = 0;
		_Buf._Hiwater = 0;
		_Buf._Size = _Count;	
		_Pbuf = &_Buf;
		}

	_Temp_iterator(const _Temp_iterator<_Ty>& _Right)
		{	
		_Buf._Begin = 0;	
		_Buf._Current = 0;
		_Buf._Hiwater = 0;
		_Buf._Size = 0;
		*this = _Right;
		}

	~_Temp_iterator() throw ()
		{	
		if (_Buf._Begin != 0)
			{	
			for (_Pty _Next = _Buf._Begin;
				_Next != _Buf._Hiwater; ++_Next)
				_Destroy(&*_Next);
			::std:: return_temporary_buffer(_Buf._Begin);
			}
		}

	_Temp_iterator<_Ty>& operator=(const _Temp_iterator<_Ty>& _Right)
		{	
		_Pbuf = _Right._Pbuf;
		return (*this);
		}

	_Temp_iterator<_Ty>& operator=(const _Ty& _Val)
		{	
		if (_Pbuf->_Current < _Pbuf->_Hiwater)
			*_Pbuf->_Current++ = _Val;	
		else
			{	
			_Pty _Ptr = &*_Pbuf->_Current;
			_Construct(_Ptr, _Val);
			_Pbuf->_Hiwater = ++_Pbuf->_Current;
			}
		return (*this);
		}

	_Temp_iterator<_Ty>& operator=(_Ty&& _Val)
		{	
		if (_Pbuf->_Current < _Pbuf->_Hiwater)
			*_Pbuf->_Current++ =
				::std:: forward<_Ty>(_Val);	
		else
			{	
			_Pty _Ptr = &*_Pbuf->_Current;
			_Construct(_Ptr, ::std:: forward<_Ty>(_Val));
			_Pbuf->_Hiwater = ++_Pbuf->_Current;
			}
		return (*this);
		}

	_Temp_iterator<_Ty>& operator*()
		{	
		return (*this);
		}

	_Temp_iterator<_Ty>& operator++()
		{	
		return (*this);
		}

	_Temp_iterator<_Ty>& operator++(int)
		{	
		return (*this);
		}

	_Temp_iterator<_Ty>& _Init()
		{	
		_Pbuf->_Current = _Pbuf->_Begin;
		return (*this);
		}

	_Pty _First() const
		{	
		return (_Pbuf->_Begin);
		}

	_Pty _Last() const
		{	
		return (_Pbuf->_Current);
		}

	ptrdiff_t _Maxlen()
		{	
		if (_Pbuf->_Begin == 0 && 0 < _Pbuf->_Size)
			{	
			pair<_Pty, ptrdiff_t> _Pair =

				::std:: get_temporary_buffer<_Ty>(_Pbuf->_Size);

			_Pbuf->_Begin = _Pair.first;
			_Pbuf->_Current = _Pair.first;
			_Pbuf->_Hiwater = _Pair.first;
			_Pbuf->_Size = _Pair.second;
			}
		return (_Pbuf->_Size);
		}

private:
	struct _Bufpar
		{	
		_Pty _Begin;	
		_Pty _Current;	
		_Pty _Hiwater;	
		ptrdiff_t _Size;	
		};
	_Bufpar _Buf;	
	_Bufpar *_Pbuf;	
	};

		
template<class _Ty>
	class auto_ptr;

template<class _Ty>
	struct auto_ptr_ref
		{	
	explicit auto_ptr_ref(_Ty *_Right)
		: _Ref(_Right)
		{	
		}

	_Ty *_Ref;	
	};

template<class _Ty>
	class auto_ptr
		{	
public:
	typedef auto_ptr<_Ty> _Myt;
	typedef _Ty element_type;

	explicit auto_ptr(_Ty *_Ptr = 0) throw ()
		: _Myptr(_Ptr)
		{	
		}

	auto_ptr(_Myt& _Right) throw ()
		: _Myptr(_Right.release())
		{	
		}

	auto_ptr(auto_ptr_ref<_Ty> _Right) throw ()
		{	
		_Ty *_Ptr = _Right._Ref;
		_Right._Ref = 0;	
		_Myptr = _Ptr;	
		}

	template<class _Other>
		operator auto_ptr<_Other>() throw ()
		{	
		return (auto_ptr<_Other>(*this));
		}

	template<class _Other>
		operator auto_ptr_ref<_Other>() throw ()
		{	
		_Other *_Cvtptr = _Myptr;	
		auto_ptr_ref<_Other> _Ans(_Cvtptr);
		_Myptr = 0;	
		return (_Ans);
		}

	template<class _Other>
		_Myt& operator=(auto_ptr<_Other>& _Right) throw ()
		{	
		reset(_Right.release());
		return (*this);
		}

	template<class _Other>
		auto_ptr(auto_ptr<_Other>& _Right) throw ()
		: _Myptr(_Right.release())
		{	
		}

	_Myt& operator=(_Myt& _Right) throw ()
		{	
		reset(_Right.release());
		return (*this);
		}

	_Myt& operator=(auto_ptr_ref<_Ty> _Right) throw ()
		{	
		_Ty *_Ptr = _Right._Ref;
		_Right._Ref = 0;	
		reset(_Ptr);	
		return (*this);
		}

	~auto_ptr() throw ()
		{	
		delete _Myptr;
		}

	_Ty& operator*() const throw ()
		{	
 


#line 960 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xmemory"

		return (*get());
		}

	_Ty *operator->() const throw ()
		{	
 


#line 970 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xmemory"

		return (get());
		}

	_Ty *get() const throw ()
		{	
		return (_Myptr);
		}

	_Ty *release() throw ()
		{	
		_Ty *_Tmp = _Myptr;
		_Myptr = 0;
		return (_Tmp);
		}

	void reset(_Ty *_Ptr = 0)
		{	
		if (_Ptr != _Myptr)
			delete _Myptr;
		_Myptr = _Ptr;
		}

private:
	_Ty *_Myptr;	
	};
}

 
 #pragma warning(pop)
 #pragma pack(pop)
#line 1002 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xmemory"
#line 1003 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xmemory"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\algorithm"

 #pragma pack(push,8)
 #pragma warning(push,3)
 
 
 #pragma warning(disable: 4244)

namespace std {
		
const int _ISORT_MAX = 32;	

		
template<class _InIt,
	class _Fn1> inline
	void _For_each(_InIt _First, _InIt _Last, _Fn1& _Func)
	{	
	for (; _First != _Last; ++_First)
		_Func(*_First);
	}

template<class _InIt,
	class _Fn1> inline
	_Fn1 for_each(_InIt _First, _InIt _Last, _Fn1 _Func)
	{	
	;
	;
	_For_each(_Unchecked(_First), _Unchecked(_Last), _Func);

	return (::std:: move(_Func));
	}

		
template<class _InIt,
	class _Pr> inline
	_InIt _Find_if(_InIt _First, _InIt _Last, _Pr _Pred)
	{	
	for (; _First != _Last; ++_First)
		if (_Pred(*_First))
			break;
	return (_First);
	}

template<class _InIt,
	class _Pr> inline
	_InIt find_if(_InIt _First, _InIt _Last, _Pr _Pred)
	{	
	;
	;
	return (_Rechecked(_First,
		_Find_if(_Unchecked(_First), _Unchecked(_Last), _Pred)));
	}

		
template<class _FwdIt,
	class _Pr> inline
	_FwdIt _Adjacent_find(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	if (_First != _Last)
		for (_FwdIt _Firstb; (_Firstb = _First), ++_First != _Last; )
			if (_Pred(*_Firstb, *_First))
				return (_Firstb);
	return (_Last);
	}

template<class _FwdIt,
	class _Pr> inline
	_FwdIt adjacent_find(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	;
	;
	return (_Rechecked(_First,
		_Adjacent_find(_Unchecked(_First), _Unchecked(_Last), _Pred)));
	}

		
template<class _FwdIt> inline
	_FwdIt adjacent_find(_FwdIt _First, _FwdIt _Last)
	{	
	return (::std:: adjacent_find(_First, _Last, equal_to<>()));
	}

		
template<class _InIt,
	class _Pr> inline
	typename iterator_traits<_InIt>::difference_type
		_Count_if(_InIt _First, _InIt _Last, _Pr _Pred)
	{	
	typename iterator_traits<_InIt>::difference_type _Count = 0;

	for (; _First != _Last; ++_First)
		if (_Pred(*_First))
			++_Count;
	return (_Count);
	}

template<class _InIt,
	class _Pr> inline
	typename iterator_traits<_InIt>::difference_type
		count_if(_InIt _First, _InIt _Last, _Pr _Pred)
	{	
	;
	;
	return (_Count_if(_Unchecked(_First), _Unchecked(_Last), _Pred));
	}

		
template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	pair<_InIt1, _InIt2>
		_Mismatch(_InIt1 _First1, _InIt1 _Last1,
			_InIt2 _First2, _Pr _Pred)
	{	
	for (; _First1 != _Last1 && _Pred(*_First1, *_First2); )
		++_First1, ++_First2;
	return (pair<_InIt1, _InIt2>(_First1, _First2));
	}

 
template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	pair<_InIt1, _InIt2>
		mismatch(_InIt1 _First1, _InIt1 _Last1,
			_InIt2 _First2, _Pr _Pred)
	{	
	pair<typename _Get_unchecked_type<_InIt1>::type, _InIt2> _Ans(
		_Mismatch(_Unchecked(_First1), _Unchecked(_Last1),
			_First2, _Pred));
	return (pair<_InIt1, _InIt2>(
		_Rechecked(_First1, _Ans.first),
		_Ans.second));
	}

 


























































#line 201 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\algorithm"

		
template<class _InIt1,
	class _InIt2> inline
	pair<_InIt1, _InIt2>
		mismatch(_InIt1 _First1, _InIt1 _Last1,
			_InIt2 _First2)
	{	
	return (::std:: mismatch(_First1, _Last1, _First2,
		equal_to<>()));
	}

 










#line 225 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\algorithm"

		
template<class _InIt,
	class _Pr> inline
	bool _All_of(_InIt _First, _InIt _Last, _Pr _Pred)
	{	
	for (; _First != _Last; ++_First)
		if (!_Pred(*_First))
			return (false);
	return (true);
	}

template<class _InIt,
	class _Pr> inline
	bool all_of(_InIt _First, _InIt _Last, _Pr _Pred)
	{	
	;
	;
	return (_All_of(_Unchecked(_First), _Unchecked(_Last), _Pred));
	}

		
template<class _InIt,
	class _Pr> inline
	bool _Any_of(_InIt _First, _InIt _Last, _Pr _Pred)
	{	
	for (; _First != _Last; ++_First)
		if (_Pred(*_First))
			return (true);
	return (false);
	}

template<class _InIt,
	class _Pr> inline
	bool any_of(_InIt _First, _InIt _Last, _Pr _Pred)
	{	
	;
	;
	return (_Any_of(_Unchecked(_First), _Unchecked(_Last), _Pred));
	}

		
template<class _InIt,
	class _Pr> inline
	bool _None_of(_InIt _First, _InIt _Last, _Pr _Pred)
	{	
	for (; _First != _Last; ++_First)
		if (_Pred(*_First))
			return (false);
	return (true);
	}

template<class _InIt,
	class _Pr> inline
	bool none_of(_InIt _First, _InIt _Last, _Pr _Pred)
	{	
	;
	;
	return (_None_of(_Unchecked(_First), _Unchecked(_Last), _Pred));
	}

		
template<class _InIt,
	class _Pr> inline
	_InIt _Find_if_not(_InIt _First, _InIt _Last, _Pr _Pred)
	{	
	for (; _First != _Last; ++_First)
		if (!_Pred(*_First))
			break;
	return (_First);
	}

template<class _InIt,
	class _Pr> inline
	_InIt find_if_not(_InIt _First, _InIt _Last, _Pr _Pred)
	{	
	;
	;
	return (_Rechecked(_First,
		_Find_if_not(_Unchecked(_First), _Unchecked(_Last), _Pred)));
	}

		
template<class _InIt,
	class _OutIt,
	class _Pr> inline
	_OutIt _Copy_if(_InIt _First, _InIt _Last, _OutIt _Dest,
		_Pr _Pred)
	{	
	for (; _First != _Last; ++_First)
		if (_Pred(*_First))
			*_Dest++ = *_First;
	return (_Dest);
	}

 
template<class _InIt,
	class _OutIt,
	class _Pr> inline
	_OutIt copy_if(_InIt _First, _InIt _Last, _OutIt _Dest,
		_Pr _Pred)
	{	
	return (_Copy_if(_Unchecked(_First), _Unchecked(_Last),
		_Dest, _Pred));
	}

 















































#line 380 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\algorithm"

		
template<class _InIt,
	class _OutIt1,
	class _OutIt2,
	class _Pr> inline
	pair<_OutIt1, _OutIt2>
		_Partition_copy(_InIt _First, _InIt _Last,
			_OutIt1 _Dest1, _OutIt2 _Dest2, _Pr _Pred)
	{	
	for (; _First != _Last; ++_First)
		if (_Pred(*_First))
			*_Dest1++ = *_First;
		else
			*_Dest2++ = *_First;
	return (pair<_OutIt1, _OutIt2>( _Dest1, _Dest2));
	}

 
template<class _InIt,
	class _OutIt1,
	class _OutIt2,
	class _Pr> inline
	pair<_OutIt1, _OutIt2>
		partition_copy(_InIt _First, _InIt _Last,
			_OutIt1 _Dest1, _OutIt2 _Dest2, _Pr _Pred)
	{	
	return (pair<_OutIt1, _OutIt2>(
		_Partition_copy(_Unchecked(_First), _Unchecked(_Last),
			_Dest1, _Dest2, _Pred)));
	}

 





































































































































#line 547 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\algorithm"

		
template<class _InIt,
	class _Pr> inline
	bool _Is_partitioned(_InIt _First, _InIt _Last, _Pr _Pred)
	{	
	for (; _First != _Last; ++_First)
		if (!_Pred(*_First))
			break;	
	for (; _First != _Last; ++_First)
		if (_Pred(*_First))
			return (false);	
	return (true);
	}

template<class _InIt,
	class _Pr> inline
	bool is_partitioned(_InIt _First, _InIt _Last, _Pr _Pred)
	{	
	;
	;
	return (_Is_partitioned(_Unchecked(_First), _Unchecked(_Last),
		_Pred));
	}

		
template<class _FwdIt,
	class _Diff,
	class _Pr> inline
	_FwdIt _Partition_point(_FwdIt _First, _FwdIt _Last, _Pr _Pred, _Diff *)
	{	
	_Diff _Count = 0;
	_Distance(_First, _Last, _Count);
	while (0 < _Count)
		{	
		_Diff _Count2 = _Count / 2;
		_FwdIt _Mid = _First;
		::std:: advance(_Mid, _Count2);

		if (_Pred(*_Mid))
			{	
			_First = ++_Mid;
			_Count -= _Count2 + 1;
			}
		else
			_Count = _Count2;
		}
	return (_First);
	}

template<class _FwdIt,
	class _Pr> inline
	_FwdIt partition_point(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	;
	;
	return (_Rechecked(_First,
		_Partition_point(_Unchecked(_First), _Unchecked(_Last), _Pred,
			_Dist_type(_First))));
	}

		
template<class _FwdIt1,
	class _FwdIt2,
	class _Diff1,
	class _Diff2,
	class _Pr> inline
	_FwdIt1 _Search(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred, _Diff1 *, _Diff2 *)
	{	
	_Diff1 _Count1 = 0;
	_Distance(_First1, _Last1, _Count1);
	_Diff2 _Count2 = 0;
	_Distance(_First2, _Last2, _Count2);

	for (; _Count2 <= _Count1; ++_First1, --_Count1)
		{	
		_FwdIt1 _Mid1 = _First1;
		for (_FwdIt2 _Mid2 = _First2; ; ++_Mid1, ++_Mid2)
			if (_Mid2 == _Last2)
				return (_First1);
			else if (!_Pred(*_Mid1, *_Mid2))
				break;
		}
	return (_Last1);
	}

template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	_FwdIt1 search(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred)
	{	
	;
	;
	;
	return (_Rechecked(_First1,
		_Search(_Unchecked(_First1), _Unchecked(_Last1),
			_Unchecked(_First2), _Unchecked(_Last2), _Pred,
			_Dist_type(_First1), _Dist_type(_First2))));
	}

		
template<class _FwdIt1,
	class _FwdIt2> inline
	_FwdIt1 search(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2)
	{	
	return (::std:: search(_First1, _Last1, _First2, _Last2,
		equal_to<>()));
	}

		
template<class _FwdIt1,
	class _Diff2,
	class _Ty,
	class _Pr> inline
	_FwdIt1 _Search_n(_FwdIt1 _First1, _FwdIt1 _Last1,
		_Diff2 _Count, const _Ty& _Val, _Pr _Pred, forward_iterator_tag)
	{	
	if (_Count <= 0)
		return (_First1);

	for (; _First1 != _Last1; ++_First1)
		if (_Pred(*_First1, _Val))
			{	
			_FwdIt1 _Mid1 = _First1;

			for (_Diff2 _Count1 = _Count; ; )
				if (--_Count1 == 0)
					return (_First1);	
				else if (++_Mid1 == _Last1)
					return (_Last1);	
				else if (!_Pred(*_Mid1, _Val))
					{	
					break;
					}

			_First1 = _Mid1;	
			}
	return (_Last1);
	}

template<class _FwdIt1,
	class _Diff2,
	class _Ty,
	class _Pr> inline
	_FwdIt1 _Search_n(_FwdIt1 _First1, _FwdIt1 _Last1,
		_Diff2 _Count, const _Ty& _Val, _Pr _Pred, random_access_iterator_tag)
	{	
	if (_Count <= 0)
		return (_First1);

	_FwdIt1 _Oldfirst1 = _First1;
	for (_Diff2 _Inc = 0; _Count <= _Last1 - _Oldfirst1; )
		{	
		_First1 = _Oldfirst1 + _Inc;
		if (_Pred(*_First1, _Val))
			{	
			_Diff2 _Count1 = _Count;
			_FwdIt1 _Mid1 = _First1;

			for (; _Oldfirst1 != _First1 && _Pred(_First1[-1], _Val);
				--_First1)
				--_Count1;	

			if (_Count1 <= _Last1 - _Mid1)
				for (; ; )
					{	
					if (--_Count1 == 0)
						return (_First1);	
					else if (!_Pred(*++_Mid1, _Val))
						{	
						break;
						}
					}
			_Oldfirst1 = ++_Mid1;	
			_Inc = 0;
			}
		else
			{	
			_Oldfirst1 = _First1 + 1;
			_Inc = _Count - 1;
			}
		}
	return (_Last1);
	}

template<class _FwdIt1,
	class _Diff2,
	class _Ty,
	class _Pr> inline
	_FwdIt1 search_n(_FwdIt1 _First1, _FwdIt1 _Last1,
		_Diff2 _Count, const _Ty& _Val, _Pr _Pred)
	{	
	;
	;
	return (_Rechecked(_First1,
		_Search_n(_Unchecked(_First1), _Unchecked(_Last1), _Count, _Val,
			_Pred, _Iter_cat(_First1))));
	}

		
template<class _FwdIt1,
	class _Diff2,
	class _Ty> inline
	_FwdIt1 search_n(_FwdIt1 _First1, _FwdIt1 _Last1,
		_Diff2 _Count, const _Ty& _Val)
	{	
	return (::std:: search_n(_First1, _Last1, _Count, _Val,
		equal_to<>()));
	}

		
template<class _FwdIt1,
	class _FwdIt2,
	class _Diff1,
	class _Diff2,
	class _Pr> inline
	_FwdIt1 _Find_end(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred, _Diff1 *, _Diff2 *)
	{	
	_Diff1 _Count1 = 0;
	_Distance(_First1, _Last1, _Count1);
	_Diff2 _Count2 = 0;
	_Distance(_First2, _Last2, _Count2);
	_FwdIt1 _Ans = _Last1;

	if (0 < _Count2)
		for (; _Count2 <= _Count1; ++_First1, --_Count1)
			{	
			_FwdIt1 _Mid1 = _First1;
			for (_FwdIt2 _Mid2 = _First2; ; ++_Mid1)
				if (!_Pred(*_Mid1, *_Mid2))
					break;
				else if (++_Mid2 == _Last2)
					{	
					_Ans = _First1;
					break;
					}
			}
	return (_Ans);
	}

template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	_FwdIt1 find_end(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred)
	{	
	;
	;
	;
	return (_Rechecked(_First1,
		_Find_end(_Unchecked(_First1), _Unchecked(_Last1),
			_Unchecked(_First2), _Unchecked(_Last2), _Pred,
			_Dist_type(_First1), _Dist_type(_First2))));
	}

		
template<class _FwdIt1,
	class _FwdIt2> inline
	_FwdIt1 find_end(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2)
	{	
	return (::std:: find_end(_First1, _Last1, _First2, _Last2,
		equal_to<>()));
	}

		
template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	_FwdIt1 _Find_first_of(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred)
	{	
	for (; _First1 != _Last1; ++_First1)
		for (_FwdIt2 _Mid2 = _First2; _Mid2 != _Last2; ++_Mid2)
			if (_Pred(*_First1, *_Mid2))
				return (_First1);
	return (_First1);
	}

template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	_FwdIt1 find_first_of(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred)
	{	
	;
	;
	;
	return (_Rechecked(_First1,
		_Find_first_of(_Unchecked(_First1), _Unchecked(_Last1),
			_Unchecked(_First2), _Unchecked(_Last2), _Pred)));
	}

		
template<class _FwdIt1,
	class _FwdIt2> inline
	_FwdIt1 find_first_of(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2)
	{	
	return (::std:: find_first_of(_First1, _Last1, _First2, _Last2,
		equal_to<>()));
	}

		
template<class _FwdIt1,
	class _FwdIt2> inline
	_FwdIt2 _Swap_ranges(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _Dest)
	{	
	for (; _First1 != _Last1; ++_First1, ++_Dest)
		::std:: iter_swap(_First1, _Dest);
	return (_Dest);
	}

 
template<class _FwdIt1,
	class _FwdIt2> inline
	_FwdIt2 swap_ranges(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _Dest)
	{	
	return (_Swap_ranges(_Unchecked(_First1), _Unchecked(_Last1),
		_Dest));
	}

 
































































#line 941 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\algorithm"

		
template<class _InIt,
	class _OutIt,
	class _Fn1> inline
	_OutIt _Transform(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Fn1 _Func)
	{	
	for (; _First != _Last; ++_First, ++_Dest)
		*_Dest = _Func(*_First);
	return (_Dest);
	}

 
template<class _InIt,
	class _OutIt,
	class _Fn1> inline
	_OutIt transform(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Fn1 _Func)
	{	
	if (_First != _Last)
		return (_Transform(_Unchecked(_First), _Unchecked(_Last),
			_Dest, _Func));
	return (_Dest);
	}

 











































































#line 1044 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\algorithm"

		
template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Fn2> inline
	_OutIt _Transform(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _OutIt _Dest, _Fn2 _Func)
	{	
	for (; _First1 != _Last1; ++_First1, ++_First2, ++_Dest)
		*_Dest = _Func(*_First1, *_First2);
	return (_Dest);
	}

 
template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Fn2> inline
	_OutIt transform(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _OutIt _Dest, _Fn2 _Func)
	{	
	if (_First1 != _Last1)
		return (_Transform(_Unchecked(_First1), _Unchecked(_Last1),
			_First2, _Dest, _Func));
	return (_Dest);
	}

 











































































































































#line 1213 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\algorithm"

		
template<class _FwdIt,
	class _Ty> inline
	void _Replace(_FwdIt _First, _FwdIt _Last,
		const _Ty& _Oldval, const _Ty& _Newval)
	{	
	for (; _First != _Last; ++_First)
		if (*_First == _Oldval)
			*_First = _Newval;
	}

template<class _FwdIt,
	class _Ty> inline
	void replace(_FwdIt _First, _FwdIt _Last,
		const _Ty& _Oldval, const _Ty& _Newval)
	{	
	;
	_Replace(_Unchecked(_First), _Unchecked(_Last),
		_Oldval, _Newval);
	}

		
template<class _FwdIt,
	class _Pr,
	class _Ty> inline
	void _Replace_if(_FwdIt _First, _FwdIt _Last, _Pr _Pred, const _Ty& _Val)
	{	
	for (; _First != _Last; ++_First)
		if (_Pred(*_First))
			*_First = _Val;
	}

template<class _FwdIt,
	class _Pr,
	class _Ty> inline
	void replace_if(_FwdIt _First, _FwdIt _Last, _Pr _Pred, const _Ty& _Val)
	{	
	;
	;
	_Replace_if(_Unchecked(_First), _Unchecked(_Last),
		_Pred, _Val);
	}

		
template<class _InIt,
	class _OutIt,
	class _Ty> inline
	_OutIt _Replace_copy(_InIt _First, _InIt _Last,
		_OutIt _Dest, const _Ty& _Oldval, const _Ty& _Newval)
	{	
	for (; _First != _Last; ++_First, ++_Dest)
		*_Dest = *_First == _Oldval ? _Newval : *_First;
	return (_Dest);
	}

 
template<class _InIt,
	class _OutIt,
	class _Ty> inline
	_OutIt replace_copy(_InIt _First, _InIt _Last,
		_OutIt _Dest, const _Ty& _Oldval, const _Ty& _Newval)
	{	
	return (_Replace_copy(_Unchecked(_First), _Unchecked(_Last),
		_Dest, _Oldval, _Newval));
	}

 











































































#line 1357 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\algorithm"

		
template<class _InIt,
	class _OutIt,
	class _Pr,
	class _Ty> inline
	_OutIt _Replace_copy_if(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Pr _Pred, const _Ty& _Val)
	{	
	for (; _First != _Last; ++_First, ++_Dest)
		*_Dest = _Pred(*_First) ? _Val : *_First;
	return (_Dest);
	}

 
template<class _InIt,
	class _OutIt,
	class _Pr,
	class _Ty> inline
	_OutIt replace_copy_if(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Pr _Pred, const _Ty& _Val)
	{	
	return (_Replace_copy_if(_Unchecked(_First), _Unchecked(_Last),
		_Dest, _Pred, _Val));
	}

 


















































































#line 1467 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\algorithm"

		
template<class _FwdIt,
	class _Fn0> inline
	void _Generate(_FwdIt _First, _FwdIt _Last, _Fn0 _Func)
	{	
	for (; _First != _Last; ++_First)
		*_First = _Func();
	}

template<class _FwdIt,
	class _Fn0> inline
	void generate(_FwdIt _First, _FwdIt _Last, _Fn0 _Func)
	{	
	;
	;
	_Generate(_Unchecked(_First), _Unchecked(_Last), _Func);
	}

		
template<class _OutIt,
	class _Diff,
	class _Fn0> inline
	_OutIt _Generate_n(_OutIt _Dest, _Diff _Count, _Fn0 _Func)
	{	
	for (; 0 < _Count; --_Count, ++_Dest)
		*_Dest = _Func();
	return (_Dest);
	}

 
template<class _OutIt,
	class _Diff,
	class _Fn0> inline
	_OutIt generate_n(_OutIt _Dest, _Diff _Count, _Fn0 _Func)
	{	
	return (_Generate_n(_Dest, _Count, _Func));
	}

 

































































#line 1573 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\algorithm"

		
template<class _InIt,
	class _OutIt,
	class _Ty> inline
	_OutIt _Remove_copy(_InIt _First, _InIt _Last,
		_OutIt _Dest, const _Ty& _Val)
	{	
	for (; _First != _Last; ++_First)
		if (!(*_First == _Val))
			*_Dest++ = *_First;
	return (_Dest);
	}

 
template<class _InIt,
	class _OutIt,
	class _Ty> inline
	_OutIt remove_copy(_InIt _First, _InIt _Last,
		_OutIt _Dest, const _Ty& _Val)
	{	
	return (_Remove_copy(_Unchecked(_First), _Unchecked(_Last),
		_Dest, _Val));
	}

 

















































#line 1649 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\algorithm"

		
template<class _InIt,
	class _OutIt,
	class _Pr> inline
	_OutIt _Remove_copy_if(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Pr _Pred)
	{	
	for (; _First != _Last; ++_First)
		if (!_Pred(*_First))
			*_Dest++ = *_First;
	return (_Dest);
	}

 
template<class _InIt,
	class _OutIt,
	class _Pr> inline
	_OutIt remove_copy_if(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Pr _Pred)
	{	
	return (_Remove_copy_if(_Unchecked(_First), _Unchecked(_Last),
		_Dest, _Pred));
	}

 


















































#line 1726 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\algorithm"

		
template<class _FwdIt,
	class _Ty> inline
	_FwdIt _Remove(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
	{	
	_FwdIt _Next = _First;
	for (++_First; _First != _Last; ++_First)
		if (!(*_First == _Val))
			*_Next++ = _Move(*_First);
	return (_Next);
	}

template<class _FwdIt,
	class _Ty> inline
	_FwdIt remove(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
	{	
	_First = ::std:: find(_First, _Last, _Val);
	if (_First == _Last)
		return (_First);	
	else
		return (_Rechecked(_First,
			_Remove(_Unchecked(_First), _Unchecked(_Last), _Val)));
	}

		
template<class _FwdIt,
	class _Pr> inline
	_FwdIt _Remove_if(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	_FwdIt _Next = _First;
	for (++_First; _First != _Last; ++_First)
	if (!_Pred(*_First))
		*_Next++ = _Move(*_First);
	return (_Next);
	}

template<class _FwdIt,
	class _Pr> inline
	_FwdIt remove_if(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	_First = ::std:: find_if(_First, _Last, _Pred);
	if (_First == _Last)
		return (_First);	
	else
		return (_Rechecked(_First,
			_Remove_if(_Unchecked(_First), _Unchecked(_Last), _Pred)));
	}

		
template<class _FwdIt,
	class _Pr> inline
	_FwdIt _Unique(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	if (_First != _Last)
		for (_FwdIt _Firstb; (_Firstb = _First), ++_First != _Last; )
			if (_Pred(*_Firstb, *_First))
				{	
				for (; ++_First != _Last; )
					if (!_Pred(*_Firstb, *_First))
						*++_Firstb = _Move(*_First);
				return (++_Firstb);
				}
	return (_Last);
	}

template<class _FwdIt,
	class _Pr> inline
	_FwdIt unique(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	;
	;
	return (_Rechecked(_First,
		_Unique(_Unchecked(_First), _Unchecked(_Last), _Pred)));
	}

		
template<class _FwdIt> inline
	_FwdIt unique(_FwdIt _First, _FwdIt _Last)
	{	
	return (::std:: unique(_First, _Last, equal_to<>()));
	}

		
template<class _InIt,
	class _OutIt,
	class _Ty,
	class _Pr> inline
	_OutIt _Unique_copy(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Pr _Pred, _Ty *)
	{	
	_Ty _Val = *_First;

	for (*_Dest++ = _Val; ++_First != _Last; )
		if (!_Pred(_Val, *_First))
			{	
			_Val = *_First;
			*_Dest++ = _Val;
			}
	return (_Dest);
	}

template<class _InIt,
	class _OutIt,
	class _Pr> inline
	_OutIt _Unique_copy(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Pr _Pred, input_iterator_tag)
	{	
	return (_Unique_copy(_First, _Last, _Dest, _Pred,
		_Val_type(_First)));
	}

template<class _FwdIt,
	class _OutIt,
	class _Pr> inline
	_OutIt _Unique_copy(_FwdIt _First, _FwdIt _Last,
		_OutIt _Dest, _Pr _Pred, forward_iterator_tag)
	{	
	_FwdIt _Firstb = _First;

	for (*_Dest++ = *_Firstb; ++_First != _Last; )
		if (!_Pred(*_Firstb, *_First))
			{	
			_Firstb = _First;
			*_Dest++ = *_Firstb;
			}
	return (_Dest);
	}

 
template<class _InIt,
	class _OutIt,
	class _Pr> inline
	_OutIt unique_copy(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Pr _Pred)
	{	
	return (_First == _Last ? _Dest :
		_Unique_copy(_Unchecked(_First), _Unchecked(_Last),
			_Dest, _Pred, _Iter_cat(_First)));
	}

 















































#line 1916 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\algorithm"

		
template<class _InIt,
	class _OutIt> inline
	_OutIt unique_copy(_InIt _First, _InIt _Last, _OutIt _Dest)
	{	
	return (::std:: unique_copy(_First, _Last, _Dest,
		equal_to<>()));
	}

 









#line 1937 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\algorithm"

		
template<class _BidIt,
	class _OutIt> inline
	_OutIt _Reverse_copy(_BidIt _First, _BidIt _Last,
		_OutIt _Dest)
	{	
	for (; _First != _Last; ++_Dest)
		*_Dest = *--_Last;
	return (_Dest);
	}

 
template<class _BidIt,
	class _OutIt> inline
	_OutIt reverse_copy(_BidIt _First, _BidIt _Last,
		_OutIt _Dest)
	{	
	return (_Reverse_copy(_Unchecked(_First), _Unchecked(_Last),
		_Dest));
	}

 


































































#line 2027 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\algorithm"

		
template<class _FwdIt,
	class _OutIt> inline
	_OutIt rotate_copy(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last,
		_OutIt _Dest)
	{	
	_Dest = ::std:: copy(_Mid, _Last, _Dest);
	return (::std:: copy(_First, _Mid, _Dest));
	}

		
template<class _RanIt,
	class _Fn1,
	class _Diff> inline
	void _Random_shuffle(_RanIt _First, _RanIt _Last, _Fn1& _Func, _Diff *)
	{	
	_RanIt _Next = _First;
	for (_Diff _Index = 2; ++_Next != _Last; ++_Index)
		{	
		_Diff _Off = _Func(_Index);

 






#line 2057 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\algorithm"

#line 2059 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\algorithm"

		::std:: iter_swap(_Next, _First + _Off);
		}
	}

template<class _RanIt,
	class _Fn1> inline
	void random_shuffle(_RanIt _First, _RanIt _Last, _Fn1&& _Func)
	{	
	;
	;
	if (_First != _Last)
		_Random_shuffle(_Unchecked(_First), _Unchecked(_Last), _Func,
			_Dist_type(_First));
	}

		
template<class _RanIt,
	class _Urng> inline
	void shuffle(_RanIt _First, _RanIt _Last, _Urng&& _Func)
	{	
	typedef typename iterator_traits<_RanIt>::difference_type _Diff;
	typedef typename remove_reference<_Urng>::type _Urng0;
	_Rng_from_urng<_Diff, _Urng0> _Rng(_Func);
	::std:: random_shuffle(_First, _Last, _Rng);
	}

	
struct _Rand_urng_from_func
	{	
	typedef unsigned int result_type;

	static result_type (min)()
		{	
		return (0);
		}

	static result_type (max)()
		{	
		return (0x7fff);
		}

	result_type operator()()
		{	
		return (:: rand());
		}
	};

		
template<class _RanIt> inline
	void random_shuffle(_RanIt _First, _RanIt _Last)
	{	
	_Rand_urng_from_func _Func;
	::std:: shuffle(_First, _Last, _Func);
	}

		
template<class _FwdIt,
	class _Pr> inline
	_FwdIt _Partition(_FwdIt _First, _FwdIt _Last, _Pr _Pred,
		forward_iterator_tag)
	{	
	while (_First != _Last && _Pred(*_First))
		++_First;	

	if (_First == _Last)
		return (_First);	

	for (_FwdIt _Next = ::std:: next(_First); _Next != _Last; ++_Next)
		if (_Pred(*_Next))
			::std:: iter_swap(_First++, _Next);	

	return (_First);
	}

template<class _BidIt,
	class _Pr> inline
	_BidIt _Partition(_BidIt _First, _BidIt _Last, _Pr _Pred,
		bidirectional_iterator_tag)
	{	
	for (; ; ++_First)
		{	
		for (; _First != _Last && _Pred(*_First); ++_First)
			;	
		if (_First == _Last)
			break;	

		for (; _First != --_Last && !_Pred(*_Last); )
			;	
		if (_First == _Last)
			break;	

		::std:: iter_swap(_First, _Last);	
		}
	return (_First);
	}

template<class _FwdIt,
	class _Pr> inline
	_FwdIt partition(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	;
	;
	return (_Rechecked(_First,
		_Partition(_Unchecked(_First), _Unchecked(_Last), _Pred,
			_Iter_cat(_First))));
	}

		
template<class _BidIt,
	class _Diff,
	class _Ty> inline
	_BidIt _Buffered_rotate(_BidIt _First, _BidIt _Mid, _BidIt _Last,
		_Diff _Count1, _Diff _Count2, _Temp_iterator<_Ty>& _Tempbuf)
	{	
	if (_Count1 == 0 || _Count2 == 0)
		{	
		::std:: advance(_First, _Count2);
		return (_First);
		}
	else if (_Count1 <= _Count2 && _Count1 <= _Tempbuf._Maxlen())
		{	
		_Move(_First, _Mid, _Tempbuf._Init());
		_Move(_Mid, _Last, _First);
		return (_Move_backward(_Tempbuf._First(), _Tempbuf._Last(),
			_Last));
		}
	else if (_Count2 <= _Tempbuf._Maxlen())
		{	
		_Move(_Mid, _Last, _Tempbuf._Init());
		_Move_backward(_First, _Mid, _Last);
		return (_Move(_Tempbuf._First(), _Tempbuf._Last(), _First));
		}
	else
		{	
		return (::std:: rotate(_First, _Mid, _Last));
		}
	}

template<class _BidIt,
	class _Pr,
	class _Diff,
	class _Ty> inline
	_BidIt _Stable_partition(_BidIt _First, _BidIt _Last, _Pr _Pred,
		_Diff _Count, _Temp_iterator<_Ty>& _Tempbuf)
	{	
	if (_Count == 0)
		return (_First);
	else if (_Count == 1)
		return (_Pred(*_First) ? _Last : _First);
	else if (_Count <= _Tempbuf._Maxlen())
		{	
		_BidIt _Next = _First;
		for (_Tempbuf._Init(); _First != _Last; ++_First)
			if (_Pred(*_First))
				*_Next++ = _Move(*_First);
			else
				*_Tempbuf++ = _Move(*_First);

		_Move(_Tempbuf._First(), _Tempbuf._Last(), _Next);	
		return (_Next);
		}
	else
		{	
		_BidIt _Mid = _First;
		::std:: advance(_Mid, _Count / 2);

		_BidIt _Left = _Stable_partition(_First, _Mid, _Pred,
			_Count / 2, _Tempbuf);	
		_BidIt _Right = _Stable_partition(_Mid, _Last, _Pred,
			_Count - _Count / 2, _Tempbuf);	

		_Diff _Count1 = 0;
		_Distance(_Left, _Mid, _Count1);
		_Diff _Count2 = 0;
		_Distance(_Mid, _Right, _Count2);

		return (_Buffered_rotate(_Left, _Mid, _Right,
			_Count1, _Count2, _Tempbuf));	
		}
	}

template<class _BidIt,
	class _Pr,
	class _Diff,
	class _Ty> inline
	_BidIt _Stable_partition(_BidIt _First, _BidIt _Last, _Pr _Pred,
		_Diff *, _Ty *)
	{	
	_Diff _Count = 0;
	_Distance(_First, _Last, _Count);
	_Temp_iterator<_Ty> _Tempbuf(_Count);
	return (_Stable_partition(_First, _Last, _Pred, _Count, _Tempbuf));
	}

template<class _BidIt,
	class _Pr> inline
	_BidIt stable_partition(_BidIt _First, _BidIt _Last, _Pr _Pred)
	{	
	;
	;
	return (_First == _Last ? _First
		: _Rechecked(_First,
			_Stable_partition(_Unchecked(_First), _Unchecked(_Last),
				_Pred, _Dist_type(_First), _Val_type(_First))));
	}

 


































#line 2302 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\algorithm"
  
  
 #line 2305 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\algorithm"

		
template<class _RanIt,
	class _Diff,
	class _Ty,
	class _Pr> inline
	void _Push_heap(_RanIt _First, _Diff _Hole,
		_Diff _Top, _Ty&& _Val, _Pr _Pred)
	{	
	for (_Diff _Idx = (_Hole - 1) / 2;
		_Top < _Hole && _Pred(*(_First + _Idx), _Val);
		_Idx = (_Hole - 1) / 2)
		{	
		*(_First + _Hole) = _Move(*(_First + _Idx));
		_Hole = _Idx;
		}

	*(_First + _Hole) = _Move(_Val);	
	}

template<class _RanIt,
	class _Diff,
	class _Ty,
	class _Pr> inline
	void _Push_heap_0(_RanIt _First, _RanIt _Last, _Pr _Pred, _Diff *, _Ty *)
	{	
	_Diff _Count = _Last - _First;
	if (0 < _Count)
		{	
		_Ty _Val = _Move(*_Last);
		_Push_heap(_First, _Count, _Diff(0), _Move(_Val), _Pred);
		}
	}

template<class _RanIt,
	class _Pr> inline
	void push_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	;
	;
	if (_First != _Last)
		{	
		--_Last;
		;
		_Push_heap_0(_Unchecked(_First), _Unchecked(_Last), _Pred,
			_Dist_type(_First), _Val_type(_First));
		}
	}

		
template<class _RanIt> inline
	void push_heap(_RanIt _First, _RanIt _Last)
	{	
	::std:: push_heap(_First, _Last, less<>());
	}

		
template<class _RanIt,
	class _Diff,
	class _Ty,
	class _Pr> inline
	void _Adjust_heap(_RanIt _First, _Diff _Hole, _Diff _Bottom,
		_Ty&& _Val, _Pr _Pred)
	{	
	_Diff _Top = _Hole;
	_Diff _Idx = 2 * _Hole + 2;

	for (; _Idx < _Bottom; _Idx = 2 * _Idx + 2)
		{	
		if (_Pred(*(_First + _Idx), *(_First + (_Idx - 1))))
			--_Idx;
		*(_First + _Hole) = _Move(*(_First + _Idx));
		_Hole = _Idx;
		}

	if (_Idx == _Bottom)
		{	
		*(_First + _Hole) = _Move(*(_First + (_Bottom - 1)));
		_Hole = _Bottom - 1;
		}
	_Push_heap(_First, _Hole, _Top, _Move(_Val), _Pred);
	}

template<class _RanIt,
	class _Diff,
	class _Ty,
	class _Pr> inline
	void _Pop_heap(_RanIt _First, _RanIt _Last, _RanIt _Dest,
		_Ty&& _Val, _Pr _Pred, _Diff *)
	{	
	*_Dest = _Move(*_First);
	_Adjust_heap(_First, _Diff(0), _Diff(_Last - _First),
		_Move(_Val), _Pred);
	}

template<class _RanIt,
	class _Ty,
	class _Pr> inline
	void _Pop_heap_0(_RanIt _First, _RanIt _Last, _Pr _Pred, _Ty *)
	{	
	_Ty _Val = _Move(*(_Last - 1));
	_Pop_heap(_First, _Last - 1, _Last - 1,
		_Move(_Val), _Pred, _Dist_type(_First));
	}

template<class _RanIt,
	class _Pr> inline
	void _Pop_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	_Pop_heap_0(_Unchecked(_First), _Unchecked(_Last), _Pred,
		_Val_type(_First));
	}

template<class _RanIt,
	class _Pr> inline
	void pop_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	;
	;
	;
	if (1 < _Last - _First)
		_Pop_heap(_Unchecked(_First), _Unchecked(_Last), _Pred);
	}

		
template<class _RanIt> inline
	void pop_heap(_RanIt _First, _RanIt _Last)
	{	
	::std:: pop_heap(_First, _Last, less<>());
	}

		
template<class _RanIt,
	class _Diff,
	class _Ty,
	class _Pr> inline
	void _Make_heap(_RanIt _First, _RanIt _Last, _Pr _Pred, _Diff *, _Ty *)
	{	
	_Diff _Bottom = _Last - _First;
	for (_Diff _Hole = _Bottom / 2; 0 < _Hole; )
		{	
		--_Hole;
		_Ty _Val = _Move(*(_First + _Hole));
		_Adjust_heap(_First, _Hole, _Bottom,
			_Move(_Val), _Pred);
		}
	}

template<class _RanIt,
	class _Pr> inline
	void make_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	;
	;
	if (1 < _Last - _First)
		_Make_heap(_Unchecked(_First), _Unchecked(_Last), _Pred,
			_Dist_type(_First), _Val_type(_First));
	}

		
template<class _RanIt> inline
	void make_heap(_RanIt _First, _RanIt _Last)
	{	
	::std:: make_heap(_First, _Last, less<>());
	}

		
template<class _RanIt,
	class _Pr> inline
	void _Sort_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	for (; 1 < _Last - _First; --_Last)
		_Pop_heap(_First, _Last, _Pred);
	}

template<class _RanIt,
	class _Pr> inline
	void sort_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	;
	;
	;
	_Sort_heap(_Unchecked(_First), _Unchecked(_Last), _Pred);
	}

		
template<class _RanIt> inline
	void sort_heap(_RanIt _First, _RanIt _Last)
	{	
	::std:: sort_heap(_First, _Last, less<>());
	}

		
template<class _FwdIt,
	class _Ty,
	class _Diff,
	class _Pr> inline
	_FwdIt _Lower_bound(_FwdIt _First, _FwdIt _Last,
		const _Ty& _Val, _Pr _Pred, _Diff *)
	{	
	_Diff _Count = 0;
	_Distance(_First, _Last, _Count);

	while (0 < _Count)
		{	
		_Diff _Count2 = _Count / 2;
		_FwdIt _Mid = _First;
		::std:: advance(_Mid, _Count2);

		if (_Pred(*_Mid, _Val))

			{	
			_First = ++_Mid;
			_Count -= _Count2 + 1;
			}
		else
			_Count = _Count2;
		}
	return (_First);
	}

template<class _FwdIt,
	class _Ty,
	class _Pr> inline
	_FwdIt lower_bound(_FwdIt _First, _FwdIt _Last,
		const _Ty& _Val, _Pr _Pred)
	{	

	return (_Rechecked(_First,
		_Lower_bound(_Unchecked(_First), _Unchecked(_Last), _Val, _Pred,
			_Dist_type(_First))));
	}

		
template<class _FwdIt,
	class _Ty> inline
	_FwdIt lower_bound(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
	{	
	return (::std:: lower_bound(_First, _Last, _Val, less<>()));
	}

		
template<class _FwdIt,
	class _Ty,
	class _Diff,
	class _Pr> inline
	_FwdIt _Upper_bound(_FwdIt _First, _FwdIt _Last,
		const _Ty& _Val, _Pr _Pred, _Diff *)
	{	
	_Diff _Count = 0;
	_Distance(_First, _Last, _Count);

	while (0 < _Count)
		{	
		_Diff _Count2 = _Count / 2;
		_FwdIt _Mid = _First;
		::std:: advance(_Mid, _Count2);

		if (!_Pred(_Val, *_Mid))

			{	
			_First = ++_Mid;
			_Count -= _Count2 + 1;
			}
		else
			_Count = _Count2;
		}
	return (_First);
	}

template<class _FwdIt,
	class _Ty,
	class _Pr> inline
	_FwdIt upper_bound(_FwdIt _First, _FwdIt _Last,
		const _Ty& _Val, _Pr _Pred)
	{	

	return (_Rechecked(_First,
		_Upper_bound(_Unchecked(_First), _Unchecked(_Last), _Val, _Pred,
			_Dist_type(_First))));
	}

		
template<class _FwdIt,
	class _Ty> inline
	_FwdIt upper_bound(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
	{	
	return (::std:: upper_bound(_First, _Last, _Val, less<>()));
	}

		
template<class _FwdIt,
	class _Ty,
	class _Diff,
	class _Pr> inline
	pair<_FwdIt, _FwdIt>
		_Equal_range(_FwdIt _First, _FwdIt _Last,
			const _Ty& _Val, _Pr _Pred, _Diff *)
	{	
	_Diff _Count = 0;
	_Distance(_First, _Last, _Count);

	while (0 < _Count)
		{	
		_Diff _Count2 = _Count / 2;
		_FwdIt _Mid = _First;
		::std:: advance(_Mid, _Count2);

		if (_Pred(*_Mid, _Val))
			{	
			_First = ++_Mid;
			_Count -= _Count2 + 1;
			}
		else if (_Pred(_Val, *_Mid))
			_Count = _Count2;	
		else
			{	
			_FwdIt _First2 = ::std:: lower_bound(_First, _Mid, _Val, _Pred);
			::std:: advance(_First, _Count);
			_FwdIt _Last2 = ::std:: upper_bound(++_Mid, _First, _Val, _Pred);
			return (pair<_FwdIt, _FwdIt>(_First2, _Last2));
			}
		}

	return (pair<_FwdIt, _FwdIt>(_First, _First));	
	}

template<class _FwdIt,
	class _Ty,
	class _Pr> inline
	pair<_FwdIt, _FwdIt>
		equal_range(_FwdIt _First, _FwdIt _Last,
			const _Ty& _Val, _Pr _Pred)
	{	
	;
	pair<typename _Get_unchecked_type<_FwdIt>::type, typename _Get_unchecked_type<_FwdIt>::type> _Ans(
		_Equal_range(_Unchecked(_First), _Unchecked(_Last),
			_Val, _Pred, _Dist_type(_First)));
	return (pair<_FwdIt, _FwdIt>(
		_Rechecked(_First, _Ans.first),
		_Rechecked(_Last, _Ans.second)));
	}

		
template<class _FwdIt,
	class _Ty> inline
	pair<_FwdIt, _FwdIt>
		equal_range(_FwdIt _First, _FwdIt _Last,
			const _Ty& _Val)
	{	
	return (::std:: equal_range(_First, _Last, _Val, less<>()));
	}

		
template<class _FwdIt,
	class _Ty,
	class _Pr> inline
	bool binary_search(_FwdIt _First, _FwdIt _Last,
		const _Ty& _Val, _Pr _Pred)
	{	
	_First = ::std:: lower_bound(_First, _Last, _Val, _Pred);
	return (_First != _Last && !_Pred(_Val, *_First));
	}

		
template<class _FwdIt,
	class _Ty> inline
	bool binary_search(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
	{	
	return (::std:: binary_search(_First, _Last, _Val, less<>()));
	}

		
template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt _Merge0(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest, _Pr _Pred)
	{	
	if (_First1 != _Last1 && _First2 != _Last2)
		for (; ; )
			{	
			if (_Pred(*_First2, *_First1))
				{	
				*_Dest++ = *_First2++;
				if (_First2 == _Last2)
					break;
				}
			else
				{	
				*_Dest++ = *_First1++;
				if (_First1 == _Last1)
					break;
				}
			}

	_Dest = _Copy_impl(_First1, _Last1, _Dest);	
	return (_Copy_impl(_First2, _Last2, _Dest));
	}

 
template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt merge(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest, _Pr _Pred)
	{	
	return (_Merge0(_Unchecked(_First1), _Unchecked(_Last1),
		_Unchecked(_First2), _Unchecked(_Last2),
		_Dest, _Pred));
	}

 





























































































#line 2816 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\algorithm"

		
template<class _InIt1,
	class _InIt2,
	class _OutIt> inline
	_OutIt merge(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest)
	{	
	return (::std:: merge(_First1, _Last1, _First2, _Last2, _Dest,
		less<>()));
	}

 











#line 2842 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\algorithm"

		
template<class _BidIt1,
	class _BidIt2,
	class _BidIt3,
	class _Pr> inline
	_BidIt3 _Merge_backward(_BidIt1 _First1, _BidIt1 _Last1,
		_BidIt2 _First2, _BidIt2 _Last2, _BidIt3 _Dest, _Pr _Pred)
	{	
	if (_First1 != _Last1 && _First2 != _Last2)
		for (; ; )
			{	
			if (_Pred(*--_Last2, *--_Last1))
				{	
				*--_Dest = _Move(*_Last1);
				++_Last2;
				if (_First1 == _Last1)
					break;
				}
			else
				{	
				*--_Dest = _Move(*_Last2);
				++_Last1;
				if (_First2 == _Last2)
					break;
				}
			}

	_Dest = _Move_backward(_First2, _Last2, _Dest);	
	return (_Move_backward(_First1, _Last1, _Dest));
	}

template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt _Merge(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest, _Pr _Pred)
	{	
	if (_First1 != _Last1 && _First2 != _Last2)
		for (; ; )
			{	
			if (_Pred(*_First2, *_First1))
				{	
				*_Dest++ = _Move(*_First2++);
				if (_First2 == _Last2)
					break;
				}
			else
				{	
				*_Dest++ = _Move(*_First1++);
				if (_First1 == _Last1)
					break;
				}
			}

	_Dest = _Move(_First1, _Last1, _Dest);	
	return (_Move(_First2, _Last2, _Dest));
	}

template<class _BidIt,
	class _Diff,
	class _Ty,
	class _Pr> inline
	void _Buffered_merge(_BidIt _First, _BidIt _Mid, _BidIt _Last,
		_Diff _Count1, _Diff _Count2,
			_Temp_iterator<_Ty>& _Tempbuf, _Pr _Pred)
	{	
	if (_Count1 == 0 || _Count2 == 0)
		;	
	else if (_Count1 + _Count2 == 2)
		{	
		if (_Pred(*_Mid, *_First))
			::std:: iter_swap(_First, _Mid);
		}
	else if (_Count1 <= _Count2 && _Count1 <= _Tempbuf._Maxlen())
		{	
		_Move(_First, _Mid, _Tempbuf._Init());
		_Merge(_Tempbuf._First(), _Tempbuf._Last(),
			_Mid, _Last, _First, _Pred);
		}
	else if (_Count2 <= _Tempbuf._Maxlen())
		{	
		_Move(_Mid, _Last, _Tempbuf._Init());
		_Merge_backward(_First, _Mid,
			_Tempbuf._First(), _Tempbuf._Last(), _Last, _Pred);
		}
	else
		{	
		_BidIt _Firstn, _Lastn;
		_Diff _Count1n, _Count2n;
		if (_Count2 < _Count1)
			{	
			_Count1n = _Count1 / 2, _Count2n = 0;
			_Firstn = _First;
			::std:: advance(_Firstn, _Count1n);
			_Lastn = ::std:: lower_bound(_Mid, _Last, *_Firstn, _Pred);
			_Distance(_Mid, _Lastn, _Count2n);
			}
		else
			{	
			_Count1n = 0, _Count2n = _Count2 / 2;
			_Lastn = _Mid;
			::std:: advance(_Lastn, _Count2n);
			_Firstn = ::std:: upper_bound(_First, _Mid, *_Lastn, _Pred);
			_Distance(_First, _Firstn, _Count1n);
			}
		_BidIt _Midn = _Buffered_rotate(_Firstn, _Mid, _Lastn,
			_Count1 - _Count1n, _Count2n, _Tempbuf);	
		_Buffered_merge(_First, _Firstn, _Midn,
			_Count1n, _Count2n, _Tempbuf, _Pred);	
		_Buffered_merge(_Midn, _Lastn, _Last,
			_Count1 - _Count1n, _Count2 - _Count2n, _Tempbuf, _Pred);
		}
	}

template<class _BidIt,
	class _Diff,
	class _Ty,
	class _Pr> inline
	void _Inplace_merge(_BidIt _First, _BidIt _Mid, _BidIt _Last, _Pr _Pred,
		_Diff *, _Ty *)
	{	
	_Diff _Count1 = 0;
	_Distance(_First, _Mid, _Count1);
	_Diff _Count2 = 0;
	_Distance(_Mid, _Last, _Count2);
	_Temp_iterator<_Ty> _Tempbuf(_Count1 < _Count2 ? _Count1 : _Count2);
	_Buffered_merge(_First, _Mid, _Last,
		_Count1, _Count2, _Tempbuf, _Pred);
	}

template<class _BidIt,
	class _Pr> inline
	void inplace_merge(_BidIt _First, _BidIt _Mid, _BidIt _Last, _Pr _Pred)
	{	
	;
	;
	if (_First != _Mid && _Mid != _Last)
		_Inplace_merge(
			_Unchecked(_First), _Unchecked(_Mid), _Unchecked(_Last), _Pred,
			_Dist_type(_First), _Val_type(_First));
	}

		
template<class _BidIt> inline
	void inplace_merge(_BidIt _First, _BidIt _Mid, _BidIt _Last)
	{	
	::std:: inplace_merge(_First, _Mid, _Last, less<>());
	}

		
template<class _BidIt,
	class _Pr,
	class _Ty> inline
	void _Insertion_sort1(_BidIt _First, _BidIt _Last, _Pr _Pred, _Ty *)
	{	
	if (_First != _Last)
		for (_BidIt _Next = _First; ++_Next != _Last; )
			{	
			_BidIt _Next1 = _Next;
			_Ty _Val = _Move(*_Next);

			if (_Pred(_Val, *_First))
				{	
				_Move_backward(_First, _Next, ++_Next1);
				*_First = _Move(_Val);
				}
			else
				{	
				for (_BidIt _First1 = _Next1;
					_Pred(_Val, *--_First1);
					_Next1 = _First1)
					*_Next1 = _Move(*_First1);	
				*_Next1 = _Move(_Val);	
				}
			}
	}

template<class _BidIt,
	class _Pr> inline
	void _Insertion_sort(_BidIt _First, _BidIt _Last, _Pr _Pred)
	{	
	_Insertion_sort1(_First, _Last, _Pred, _Val_type(_First));
	}

template<class _RanIt,
	class _Pr> inline
	void _Med3(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred)
	{	
	if (_Pred(*_Mid, *_First))
		::std:: iter_swap(_Mid, _First);
	if (_Pred(*_Last, *_Mid))
		{	
		::std:: iter_swap(_Last, _Mid);
		if (_Pred(*_Mid, *_First))
			::std:: iter_swap(_Mid, _First);
		}
	}

template<class _RanIt,
	class _Pr> inline
	void _Median(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred)
	{	
	if (40 < _Last - _First)
		{	
		size_t _Step = (_Last - _First + 1) / 8;
		_Med3(_First, _First + _Step, _First + 2 * _Step, _Pred);
		_Med3(_Mid - _Step, _Mid, _Mid + _Step, _Pred);
		_Med3(_Last - 2 * _Step, _Last - _Step, _Last, _Pred);
		_Med3(_First + _Step, _Mid, _Last - _Step, _Pred);
		}
	else
		_Med3(_First, _Mid, _Last, _Pred);
	}

template<class _RanIt,
	class _Pr> inline
	pair<_RanIt, _RanIt>
		_Unguarded_partition(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	_RanIt _Mid = _First + (_Last - _First) / 2;
	_Median(_First, _Mid, _Last - 1, _Pred);
	_RanIt _Pfirst = _Mid;
	_RanIt _Plast = _Pfirst + 1;

	while (_First < _Pfirst
		&& !_Pred(*(_Pfirst - 1), *_Pfirst)
		&& !_Pred(*_Pfirst, *(_Pfirst - 1)))
		--_Pfirst;
	while (_Plast < _Last
		&& !_Pred(*_Plast, *_Pfirst)
		&& !_Pred(*_Pfirst, *_Plast))
		++_Plast;

	_RanIt _Gfirst = _Plast;
	_RanIt _Glast = _Pfirst;

	for (; ; )
		{	
		for (; _Gfirst < _Last; ++_Gfirst)
			if (_Pred(*_Pfirst, *_Gfirst))
				;
			else if (_Pred(*_Gfirst, *_Pfirst))
				break;
			else if (_Plast++ != _Gfirst)
				::std:: iter_swap(_Plast - 1, _Gfirst);
		for (; _First < _Glast; --_Glast)
			if (_Pred(*(_Glast - 1), *_Pfirst))
				;
			else if (_Pred(*_Pfirst, *(_Glast - 1)))
				break;
			else if (--_Pfirst != _Glast - 1)
				::std:: iter_swap(_Pfirst, _Glast - 1);
		if (_Glast == _First && _Gfirst == _Last)
			return (pair<_RanIt, _RanIt>(_Pfirst, _Plast));

		if (_Glast == _First)
			{	
			if (_Plast != _Gfirst)
				::std:: iter_swap(_Pfirst, _Plast);
			++_Plast;
			::std:: iter_swap(_Pfirst++, _Gfirst++);
			}
		else if (_Gfirst == _Last)
			{	
			if (--_Glast != --_Pfirst)
				::std:: iter_swap(_Glast, _Pfirst);
			::std:: iter_swap(_Pfirst, --_Plast);
			}
		else
			::std:: iter_swap(_Gfirst++, --_Glast);
		}
	}

template<class _RanIt,
	class _Diff,
	class _Pr> inline
	void _Sort(_RanIt _First, _RanIt _Last, _Diff _Ideal, _Pr _Pred)
	{	
	_Diff _Count;
	for (; _ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal; )
		{	
		pair<_RanIt, _RanIt> _Mid =
			_Unguarded_partition(_First, _Last, _Pred);
		_Ideal /= 2, _Ideal += _Ideal / 2;	

		if (_Mid.first - _First < _Last - _Mid.second)
			{	
			_Sort(_First, _Mid.first, _Ideal, _Pred);
			_First = _Mid.second;
			}
		else
			{	
			_Sort(_Mid.second, _Last, _Ideal, _Pred);
			_Last = _Mid.first;
			}
		}

	if (_ISORT_MAX < _Count)
		{	
		::std:: make_heap(_First, _Last, _Pred);
		::std:: sort_heap(_First, _Last, _Pred);
		}
	else if (1 < _Count)
		_Insertion_sort(_First, _Last, _Pred);	
	}

template<class _RanIt,
	class _Pr> inline
	void sort(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	;
	;
	_Sort(_Unchecked(_First), _Unchecked(_Last), _Last - _First, _Pred);
	}

		
template<class _RanIt> inline
	void sort(_RanIt _First, _RanIt _Last)
	{	
	::std:: sort(_First, _Last, less<>());
	}

		
template<class _BidIt,
	class _OutIt,
	class _Diff,
	class _Pr> inline
	void _Chunked_merge(_BidIt _First, _BidIt _Last, _OutIt _Dest,
		_Diff _Chunk, _Diff _Count, _Pr _Pred)
	{	
	for (_Diff _Chunk2 = _Chunk * 2; _Chunk2 <= _Count; _Count -= _Chunk2)
		{	
		_BidIt _Mid1 = _First;
		::std:: advance(_Mid1, _Chunk);
		_BidIt _Mid2 = _Mid1;
		::std:: advance(_Mid2, _Chunk);

		_Dest = _Merge(_First, _Mid1, _Mid1, _Mid2, _Dest, _Pred);
		_First = _Mid2;
		}

	if (_Count <= _Chunk)
		_Move(_First, _Last, _Dest);	
	else
		{	
		_BidIt _Mid1 = _First;
		::std:: advance(_Mid1, _Chunk);

		_Merge(_First, _Mid1, _Mid1, _Last, _Dest, _Pred);
		}
	}

template<class _BidIt,
	class _Diff,
	class _Ty,
	class _Pr> inline
	void _Buffered_merge_sort(_BidIt _First, _BidIt _Last, _Diff _Count,
		_Temp_iterator<_Ty>& _Tempbuf, _Pr _Pred)
	{	
	_BidIt _Mid = _First;
	for (_Diff _Nleft = _Count; _ISORT_MAX <= _Nleft; _Nleft -= _ISORT_MAX)
		{	
		_BidIt _Midn = _Mid;
		::std:: advance(_Midn, (int)_ISORT_MAX);

		_Insertion_sort(_Mid, _Midn, _Pred);
		_Mid = _Midn;
		}
	_Insertion_sort(_Mid, _Last, _Pred);	

	for (_Diff _Chunk = _ISORT_MAX; _Chunk < _Count; _Chunk *= 2)
		{	
		_Chunked_merge(_First, _Last, _Tempbuf._Init(),
			_Chunk, _Count, _Pred);
		_Chunked_merge(_Tempbuf._First(), _Tempbuf._Last(), _First,
			_Chunk *= 2, _Count, _Pred);
		}
	}

template<class _BidIt,
	class _Diff,
	class _Ty,
	class _Pr> inline
	void _Stable_sort(_BidIt _First, _BidIt _Last, _Diff _Count,
		_Temp_iterator<_Ty>& _Tempbuf, _Pr _Pred)
	{	
	if (_Count <= _ISORT_MAX)
		_Insertion_sort(_First, _Last, _Pred);	
	else
		{	
		_Diff _Count2 = (_Count + 1) / 2;
		_BidIt _Mid = _First;
		::std:: advance(_Mid, _Count2);

		if (_Count2 <= _Tempbuf._Maxlen())
			{	
			_Buffered_merge_sort(_First, _Mid, _Count2, _Tempbuf, _Pred);
			_Buffered_merge_sort(_Mid, _Last, _Count - _Count2,
				_Tempbuf, _Pred);
			}
		else
			{	
			_Stable_sort(_First, _Mid, _Count2, _Tempbuf, _Pred);
			_Stable_sort(_Mid, _Last, _Count - _Count2, _Tempbuf, _Pred);
			}

		_Buffered_merge(_First, _Mid, _Last,
			_Count2, _Count - _Count2, _Tempbuf, _Pred);	
		}
	}

template<class _BidIt,
	class _Diff,
	class _Ty,
	class _Pr> inline
	void _Stable_sort(_BidIt _First, _BidIt _Last, _Diff *, _Ty *, _Pr _Pred)
	{	
	_Diff _Count = 0;
	_Distance(_First, _Last, _Count);
	_Temp_iterator<_Ty> _Tempbuf((_Count + 1) / 2);
	_Stable_sort(_First, _Last, _Count, _Tempbuf, _Pred);
	}

template<class _BidIt,
	class _Pr> inline
	void stable_sort(_BidIt _First, _BidIt _Last, _Pr _Pred)
	{	
	;
	;
	if (_First != _Last)
		_Stable_sort(_Unchecked(_First), _Unchecked(_Last),
			_Dist_type(_First), _Val_type(_First), _Pred);
	}

		
template<class _BidIt> inline
	void stable_sort(_BidIt _First, _BidIt _Last)
	{	
	::std:: stable_sort(_First, _Last, less<>());
	}

		
template<class _RanIt,
	class _Ty,
	class _Pr> inline
	void _Partial_sort(_RanIt _First, _RanIt _Mid, _RanIt _Last,
		_Pr _Pred, _Ty *)
	{	
	;
	;
	;
	::std:: make_heap(_First, _Mid, _Pred);

	for (_RanIt _Next = _Mid; _Next < _Last; ++_Next)
		if (_Pred(*_Next, *_First))
			{	
			_Ty _Val = _Move(*_Next);
			_Pop_heap(_First, _Mid, _Next, _Move(_Val), _Pred,
				_Dist_type(_First));
			}
	::std:: sort_heap(_First, _Mid, _Pred);
	}

template<class _RanIt,
	class _Pr> inline
	void partial_sort(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred)
	{	
	_Partial_sort(
		_Unchecked(_First), _Unchecked(_Mid), _Unchecked(_Last), _Pred,
		_Val_type(_First));
	}

		
template<class _RanIt> inline
	void partial_sort(_RanIt _First, _RanIt _Mid, _RanIt _Last)
	{	
	::std:: partial_sort(_First, _Mid, _Last, less<>());
	}

		
template<class _InIt,
	class _RanIt,
	class _Diff,
	class _Ty,
	class _Pr> inline
	_RanIt _Partial_sort_copy(_InIt _First1, _InIt _Last1,
		_RanIt _First2, _RanIt _Last2, _Pr _Pred, _Diff *, _Ty *)
	{	
	_RanIt _Mid2 = _First2;
	for (; _First1 != _Last1 && _Mid2 != _Last2; ++_First1, ++_Mid2)
		*_Mid2 = *_First1;	
	::std:: make_heap(_First2, _Mid2, _Pred);

	for (; _First1 != _Last1; ++_First1)
		if (_Pred(*_First1, *_First2))
			_Adjust_heap(_First2, _Diff(0), _Diff(_Mid2 - _First2),
				_Ty(*_First1), _Pred);	

	::std:: sort_heap(_First2, _Mid2, _Pred);
	return (_Mid2);
	}

template<class _InIt,
	class _RanIt,
	class _Pr> inline
	_RanIt partial_sort_copy(_InIt _First1, _InIt _Last1,
		_RanIt _First2, _RanIt _Last2, _Pr _Pred)
	{	
	;
	;
	;
	return (_First1 == _Last1 || _First2 == _Last2 ? _First2
		: _Rechecked(_First2,
			_Partial_sort_copy(
				_Unchecked(_First1), _Unchecked(_Last1),
				_Unchecked(_First2), _Unchecked(_Last2), _Pred,
				_Dist_type(_First2), _Val_type(_First1))));
	}

		
template<class _InIt,
	class _RanIt> inline
	_RanIt partial_sort_copy(_InIt _First1, _InIt _Last1,
		_RanIt _First2, _RanIt _Last2)
	{	
	return (::std:: partial_sort_copy(_First1, _Last1, _First2, _Last2,
		less<>()));
	}

		
template<class _RanIt,
	class _Pr> inline
	void _Nth_element(_RanIt _First, _RanIt _Nth, _RanIt _Last, _Pr _Pred)
	{	
	for (; _ISORT_MAX < _Last - _First; )
		{	
		pair<_RanIt, _RanIt> _Mid =
			_Unguarded_partition(_First, _Last, _Pred);

		if (_Mid.second <= _Nth)
			_First = _Mid.second;
		else if (_Mid.first <= _Nth)
			return;	
		else
			_Last = _Mid.first;
		}

	_Insertion_sort(_First, _Last, _Pred);	
	}

template<class _RanIt,
	class _Pr> inline
	void nth_element(_RanIt _First, _RanIt _Nth, _RanIt _Last, _Pr _Pred)
	{	
	;
	;
	_Nth_element(
		_Unchecked(_First), _Unchecked(_Nth), _Unchecked(_Last), _Pred);
	}

		
template<class _RanIt> inline
	void nth_element(_RanIt _First, _RanIt _Nth, _RanIt _Last)
	{	
	::std:: nth_element(_First, _Nth, _Last, less<>());
	}

		
template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool _Includes(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
	{	
	for (; _First1 != _Last1 && _First2 != _Last2; )
		if (_Pred(*_First2, *_First1))
			return (false);
		else if (_Pred(*_First1, *_First2))
			++_First1;
		else
			{	
			++_First1;
			++_First2;
			}
	return (_First2 == _Last2);
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool includes(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
	{	
	;
	;
	return (_Includes(_Unchecked(_First1), _Unchecked(_Last1),
		_Unchecked(_First2), _Unchecked(_Last2), _Pred));
	}

		
template<class _InIt1,
	class _InIt2> inline
	bool includes(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2)
	{	
	return (::std:: includes(_First1, _Last1, _First2, _Last2,
		less<>()));
	}

		
template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt _Set_union(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred)
	{	
	for (; _First1 != _Last1 && _First2 != _Last2; )
		if (_Pred(*_First1, *_First2))
			{	
			*_Dest++ = *_First1;
			++_First1;
			}
		else if (_Pred(*_First2, *_First1))
			{	
			*_Dest++ = *_First2;
			++_First2;
			}
		else
			{	
			*_Dest++ = *_First1;
			++_First1;
			++_First2;
			}
	_Dest = ::std:: copy(_First1, _Last1, _Dest);
	return (::std:: copy(_First2, _Last2, _Dest));
	}

 
template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt set_union(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred)
	{	
	return (_Set_union(_Unchecked(_First1), _Unchecked(_Last1),
		_Unchecked(_First2), _Unchecked(_Last2),
		_Dest, _Pred));
	}

 

























































#line 3555 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\algorithm"

		
template<class _InIt1,
	class _InIt2,
	class _OutIt> inline
	_OutIt set_union(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _OutIt _Dest)
	{	
	return (::std:: set_union(_First1, _Last1, _First2, _Last2, _Dest,
		less<>()));
	}

 










#line 3579 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\algorithm"

		
template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt _Set_intersection(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred)
	{	
	for (; _First1 != _Last1 && _First2 != _Last2; )
		if (_Pred(*_First1, *_First2))
			++_First1;
		else if (_Pred(*_First2, *_First1))
			++_First2;
		else
			{	
			*_Dest++ = *_First1++;
			++_First2;
			}
	return (_Dest);
	}

 
template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt set_intersection(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred)
	{	
	return (_Set_intersection(_Unchecked(_First1), _Unchecked(_Last1),
		_Unchecked(_First2), _Unchecked(_Last2),
		_Dest, _Pred));
	}

 

























































#line 3673 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\algorithm"

		
template<class _InIt1,
	class _InIt2,
	class _OutIt> inline
	_OutIt set_intersection(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _OutIt _Dest)
	{	
	return (::std:: set_intersection(_First1, _Last1, _First2, _Last2, _Dest,
		less<>()));
	}

 










#line 3697 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\algorithm"

		
template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt _Set_difference(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest, _Pr _Pred)
	{	
	for (; _First1 != _Last1 && _First2 != _Last2; )
		if (_Pred(*_First1, *_First2))
			{	
			*_Dest++ = *_First1;
			++_First1;
			}
		else if (_Pred(*_First2, *_First1))
			++_First2;
		else
			{	
			++_First1;
			++_First2;
			}
	return (::std:: copy(_First1, _Last1, _Dest));
	}

 
template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt set_difference(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest, _Pr _Pred)
	{	
	return (_Set_difference(_Unchecked(_First1), _Unchecked(_Last1),
		_Unchecked(_First2), _Unchecked(_Last2),
		_Dest, _Pred));
	}

 



























































#line 3798 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\algorithm"

		
template<class _InIt1,
	class _InIt2,
	class _OutIt> inline
	_OutIt set_difference(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest)
	{	
	return (::std:: set_difference(_First1, _Last1, _First2, _Last2, _Dest,
		less<>()));
	}

 











#line 3824 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\algorithm"

		
template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt _Set_symmetric_difference(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest, _Pr _Pred)
	{	
	for (; _First1 != _Last1 && _First2 != _Last2; )
		if (_Pred(*_First1, *_First2))
			{	
			*_Dest++ = *_First1;
			++_First1;
			}
		else if (_Pred(*_First2, *_First1))
			{	
			*_Dest++ = *_First2;
			++_First2;
			}
		else
			{	
			++_First1;
			++_First2;
			}
	_Dest = ::std:: copy(_First1, _Last1, _Dest);
	return (::std:: copy(_First2, _Last2, _Dest));
	}

 
template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt set_symmetric_difference(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest, _Pr _Pred)
	{	
	return (_Set_symmetric_difference(
		_Unchecked(_First1), _Unchecked(_Last1),
		_Unchecked(_First2), _Unchecked(_Last2),
		_Dest, _Pred));
	}

 




























































#line 3931 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\algorithm"

		
template<class _InIt1,
	class _InIt2,
	class _OutIt> inline
	_OutIt set_symmetric_difference(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest)
	{	
	return (::std:: set_symmetric_difference(_First1, _Last1, _First2, _Last2,
		_Dest, less<>()));
	}

 











#line 3957 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\algorithm"

		
template<class _FwdIt,
	class _Pr> inline
	_FwdIt _Max_element(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	_FwdIt _Found = _First;
	if (_First != _Last)
		for (; ++_First != _Last; )
			if (_Pred(*_Found, *_First))
				_Found = _First;
	return (_Found);
	}

template<class _FwdIt,
	class _Pr> inline
	_FwdIt max_element(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	;
	;
	return (_Rechecked(_First,
		_Max_element(_Unchecked(_First), _Unchecked(_Last), _Pred)));
	}

		
template<class _FwdIt> inline
	_FwdIt max_element(_FwdIt _First, _FwdIt _Last)
	{	
	return (::std:: max_element(_First, _Last, less<>()));
	}

		
template<class _FwdIt,
	class _Pr> inline
	_FwdIt _Min_element(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	_FwdIt _Found = _First;
	if (_First != _Last)
		for (; ++_First != _Last; )
			if (_Pred(*_First, *_Found))
				_Found = _First;
	return (_Found);
	}

template<class _FwdIt,
	class _Pr> inline
	_FwdIt min_element(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	;
	;
	return (_Rechecked(_First,
		_Min_element(_Unchecked(_First), _Unchecked(_Last), _Pred)));
	}

		
template<class _FwdIt> inline
	_FwdIt min_element(_FwdIt _First, _FwdIt _Last)
	{	
	return (::std:: min_element(_First, _Last, less<>()));
	}

		
template<class _FwdIt,
	class _Pr> inline
	pair<_FwdIt, _FwdIt>
		_Minmax_element(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	pair<_FwdIt, _FwdIt> _Found(_First, _First);

	if (_First != _Last)
		for (; ++_First != _Last; )
			{	
			_FwdIt _Next = _First;
			if (++_Next == _Last)
				{	
				if (_Pred(*_First, *_Found.first))
					_Found.first = _First;
				else if (!_Pred(*_First, *_Found.second))
					_Found.second = _First;
				}
			else
				{	
				if (_Pred(*_Next, *_First))
					{	
					if (_Pred(*_Next, *_Found.first))
						_Found.first = _Next;
					if (!_Pred(*_First, *_Found.second))
						_Found.second = _First;
					}
				else
					{	
					if (_Pred(*_First, *_Found.first))
						_Found.first = _First;
					if (!_Pred(*_Next, *_Found.second))
						_Found.second = _Next;
					}
				_First = _Next;
				}
			}
	return (_Found);
	}

template<class _FwdIt,
	class _Pr> inline
	pair<_FwdIt, _FwdIt>
		minmax_element(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	;
	;
	pair<typename _Get_unchecked_type<_FwdIt>::type, typename _Get_unchecked_type<_FwdIt>::type> _Ans(
		_Minmax_element(_Unchecked(_First), _Unchecked(_Last), _Pred));
	return (pair<_FwdIt, _FwdIt>(
		_Rechecked(_First, _Ans.first),
		_Rechecked(_Last, _Ans.second)));
	}

		
template<class _FwdIt> inline
	pair<_FwdIt, _FwdIt>
		minmax_element(_FwdIt _First, _FwdIt _Last)
	{	
	return (::std:: minmax_element(_First, _Last, less<>()));
	}

		
template<class _Ty> inline

	 

	const _Ty& (max)(const _Ty& _Left, const _Ty& _Right)
	{	
	return (((_Left) < (_Right)) ? _Right : _Left);
	}

template<class _Ty> inline
	_Ty (max)(::std:: initializer_list<_Ty> _Ilist)
	{	
	const _Ty *_Res = ::std:: max_element(_Ilist.begin(), _Ilist.end());
	return (*_Res);
	}

		
template<class _Ty,
	class _Pr> inline
	const _Ty& (max)(const _Ty& _Left, const _Ty& _Right, _Pr _Pred)
	{	
	return (_Pred(_Left, _Right) ? _Right : _Left);
	}

template<class _Ty,
	class _Pr> inline
	_Ty (max)(::std:: initializer_list<_Ty> _Ilist, _Pr _Pred)
	{	
	const _Ty *_Res = ::std:: max_element(_Ilist.begin(), _Ilist.end(), _Pred);
	return (*_Res);
	}

		
template<class _Ty> inline

	 

	const _Ty& (min)(const _Ty& _Left, const _Ty& _Right)
	{	
	return (((_Right) < (_Left)) ? _Right : _Left);
	}

template<class _Ty> inline
	_Ty (min)(::std:: initializer_list<_Ty> _Ilist)
	{	
	const _Ty *_Res = ::std:: min_element(_Ilist.begin(), _Ilist.end());
	return (*_Res);
	}

		
template<class _Ty,
	class _Pr> inline
	const _Ty& (min)(const _Ty& _Left, const _Ty& _Right, _Pr _Pred)
	{	
	return (_Pred(_Right, _Left) ? _Right : _Left);
	}

template<class _Ty,
	class _Pr> inline
	_Ty (min)(::std:: initializer_list<_Ty> _Ilist, _Pr _Pred)
	{	
	const _Ty *_Res = ::std:: min_element(_Ilist.begin(), _Ilist.end(), _Pred);
	return (*_Res);
	}

		
template<class _Ty> inline
	pair<const _Ty&, const _Ty&>
		minmax(const _Ty& _Left, const _Ty& _Right)
	{	
	return (_Right < _Left
		? pair<const _Ty&, const _Ty&>(_Right, _Left)
		: pair<const _Ty&, const _Ty&>(_Left, _Right));
	}

template<class _Ty> inline
	pair<_Ty, _Ty> minmax(::std:: initializer_list<_Ty> _Ilist)
	{	
	pair<const _Ty *, const _Ty *> _Res = ::std:: minmax_element(
		_Ilist.begin(), _Ilist.end());
	return (pair<_Ty, _Ty>(*_Res.first, *_Res.second));
	}

		
template<class _Ty,
	class _Pr> inline
	pair<const _Ty&, const _Ty&>
		minmax(const _Ty& _Left, const _Ty& _Right, _Pr _Pred)
	{	
	return (_Pred(_Right, _Left)
		? pair<const _Ty&, const _Ty&>(_Right, _Left)
		: pair<const _Ty&, const _Ty&>(_Left, _Right));
	}

template<class _Ty,
	class _Pr> inline
	pair<_Ty, _Ty> minmax(::std:: initializer_list<_Ty> _Ilist, _Pr _Pred)
	{	
	pair<const _Ty *, const _Ty *> _Res = ::std:: minmax_element(
		_Ilist.begin(), _Ilist.end(), _Pred);
	return (pair<_Ty, _Ty>(*_Res.first, *_Res.second));
	}

		
template<class _BidIt,
	class _Pr> inline
	bool _Next_permutation(_BidIt _First, _BidIt _Last, _Pr _Pred)
	{	
	_BidIt _Next = _Last;
	if (_First == _Last || _First == --_Next)
		return (false);

	for (; ; )
		{	
		_BidIt _Next1 = _Next;
		if (_Pred(*--_Next, *_Next1))
			{	
			_BidIt _Mid = _Last;
			for (; !_Pred(*_Next, *--_Mid); )
				;
			::std:: iter_swap(_Next, _Mid);
			::std:: reverse(_Next1, _Last);
			return (true);
			}

		if (_Next == _First)
			{	
			::std:: reverse(_First, _Last);
			return (false);
			}
		}
	}

template<class _BidIt,
	class _Pr> inline
	bool next_permutation(_BidIt _First, _BidIt _Last, _Pr _Pred)
	{	
	;
	;
	return (_Next_permutation(_Unchecked(_First), _Unchecked(_Last), _Pred));
	}

		
template<class _BidIt> inline
	bool next_permutation(_BidIt _First, _BidIt _Last)
	{	
	return (::std:: next_permutation(_First, _Last, less<>()));
	}

		
template<class _BidIt,
	class _Pr> inline
	bool _Prev_permutation(_BidIt _First, _BidIt _Last, _Pr _Pred)
	{	
	_BidIt _Next = _Last;
	if (_First == _Last || _First == --_Next)
		return (false);

	for (; ; )
		{	
		_BidIt _Next1 = _Next;
		if (_Pred(*_Next1, *--_Next))
			{	
			_BidIt _Mid = _Last;
			for (; !_Pred(*--_Mid, *_Next); )
				;
			::std:: iter_swap(_Next, _Mid);
			::std:: reverse(_Next1, _Last);
			return (true);
			}

		if (_Next == _First)
			{	
			::std:: reverse(_First, _Last);
			return (false);
			}
		}
	}

template<class _BidIt,
	class _Pr> inline
	bool prev_permutation(_BidIt _First, _BidIt _Last, _Pr _Pred)
	{	
	;
	;
	return (_Prev_permutation(_Unchecked(_First), _Unchecked(_Last), _Pred));
	}

		
template<class _BidIt> inline
	bool prev_permutation(_BidIt _First, _BidIt _Last)
	{	
	return (::std:: prev_permutation(_First, _Last, less<>()));
	}

		
template<class _RanIt,
	class _Diff,
	class _Pr> inline
	_RanIt _Is_heap_until(_RanIt _First, _RanIt _Last, _Pr _Pred, _Diff *)
	{	
	_Diff _Size = _Last - _First;

	if (2 <= _Size)
		for (_Diff _Off = 0; ++_Off < _Size; )
			if (_Pred(*(_First + (_Off - 1) / 2), *(_First + _Off)))
#line 4289 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\algorithm"
				return (_First + _Off);
	return (_Last);
	}

template<class _RanIt,
	class _Pr>
	_RanIt is_heap_until(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	;
	;
	return (_Rechecked(_First,
		_Is_heap_until(_Unchecked(_First), _Unchecked(_Last), _Pred,
			_Dist_type(_First))));
	}

template<class _RanIt,
	class _Pr>
	bool is_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	return (_Is_heap_until(_First, _Last, _Pred, _Dist_type(_First))
		== _Last);
	}

		
template<class _RanIt>
	_RanIt is_heap_until(_RanIt _First, _RanIt _Last)
	{	
	return (::std:: is_heap_until(_First, _Last, less<>()));
	}

template<class _RanIt>
	bool is_heap(_RanIt _First, _RanIt _Last)
	{	
	return (::std:: is_heap(_First, _Last, less<>()));
	}

		
template<class _FwdIt,
	class _Pr> inline
	_FwdIt _Is_sorted_until(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	if (_First != _Last)
		for (_FwdIt _Next = _First; ++_Next != _Last; ++_First)
			if (_Pred(*_Next, *_First))
				return (_Next);
	return (_Last);
	}

template<class _FwdIt,
	class _Pr> inline
	_FwdIt is_sorted_until(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	;
	;
	return (_Rechecked(_First,
		_Is_sorted_until(_Unchecked(_First), _Unchecked(_Last), _Pred)));
	}

template<class _FwdIt,
	class _Pr> inline
	bool is_sorted(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	return (::std:: is_sorted_until(_First, _Last, _Pred) == _Last);
	}

		
template<class _FwdIt> inline
	_FwdIt is_sorted_until(_FwdIt _First, _FwdIt _Last)
	{	
	return (::std:: is_sorted_until(_First, _Last, less<>()));
	}

template<class _FwdIt> inline
	bool is_sorted(_FwdIt _First, _FwdIt _Last)
	{	
	return (::std:: is_sorted(_First, _Last, less<>()));
	}
}
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 4371 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\algorithm"
#line 4372 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\algorithm"























#line 85 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/stdlib/dinkumware.hpp"
#line 86 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/stdlib/dinkumware.hpp"





#line 92 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/stdlib/dinkumware.hpp"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\typeinfo"














#pragma once







#pragma pack(push,8)
#pragma warning(push,3)


#pragma warning(disable: 4275)

 



 

#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\typeinfo"

struct __type_info_node {
    void *_MemPtr;
    __type_info_node* _Next;
};

extern __type_info_node __type_info_root_node;

class type_info {
public:
	size_t hash_code() const throw ()
		{	
		return (::std:: _Hash_seq((const unsigned char *) name(),
			:: strlen(name())));
		}



#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\typeinfo"
    


    virtual ~type_info() throw ();



#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\typeinfo"
     bool  operator==(const type_info& _Rhs) const;
     bool  operator!=(const type_info& _Rhs) const;
#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\typeinfo"
     bool  before(const type_info& _Rhs) const;
     const char*  name(__type_info_node* __ptype_info_node = &__type_info_root_node) const;
     const char*  raw_name() const;
private:
    void *_M_data;
    char _M_d_name[1];
     type_info(const type_info& _Rhs);
    type_info&  operator=(const type_info& _Rhs);
     static const char *__cdecl _Name_base(const type_info *,__type_info_node* __ptype_info_node);
     static void __cdecl _Type_info_dtor(type_info *);











#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\typeinfo"
};

 

 namespace std {

using ::type_info;

 }






 namespace std {

class  bad_cast : public exception {
public:


















     bad_cast(const char * _Message = "bad cast");
     bad_cast(const bad_cast &);
    virtual  ~bad_cast() throw ();





#line 134 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\typeinfo"
#line 135 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\typeinfo"
};

class  bad_typeid : public exception {
public:










     bad_typeid(const char * _Message = "bad typeid");
     bad_typeid(const bad_typeid &);
    virtual  ~bad_typeid() throw ();
#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\typeinfo"

};

class  __non_rtti_object : public bad_typeid {
public:










     __non_rtti_object(const char * _Message);
     __non_rtti_object(const __non_rtti_object &);
    virtual  ~__non_rtti_object() throw ();
#line 172 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\typeinfo"
};

 }
#line 176 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\typeinfo"

 























































#line 234 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\typeinfo"

#line 236 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\typeinfo"


#pragma pack(pop)
#pragma warning(pop)

#line 242 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\typeinfo"







#line 94 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/stdlib/dinkumware.hpp"


#line 97 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/stdlib/dinkumware.hpp"


















#line 116 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/stdlib/dinkumware.hpp"



#line 120 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/stdlib/dinkumware.hpp"













#line 134 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/stdlib/dinkumware.hpp"










#line 145 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/stdlib/dinkumware.hpp"





#line 151 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/stdlib/dinkumware.hpp"









#line 45 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config.hpp"
#line 46 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config.hpp"



#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/select_platform_config.hpp"



















#line 21 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/select_platform_config.hpp"



#line 25 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/select_platform_config.hpp"



#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/select_platform_config.hpp"



#line 33 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/select_platform_config.hpp"



#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/select_platform_config.hpp"



#line 41 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/select_platform_config.hpp"





























































#line 103 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/select_platform_config.hpp"



#line 50 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config.hpp"
#line 51 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/platform/win32.hpp"

















#line 19 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/platform/win32.hpp"



#line 23 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/platform/win32.hpp"









#line 33 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/platform/win32.hpp"








#line 42 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/platform/win32.hpp"





#line 48 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/platform/win32.hpp"














#line 63 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/platform/win32.hpp"



#line 67 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/platform/win32.hpp"






#line 74 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/platform/win32.hpp"
#line 54 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config.hpp"
#line 55 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"


































#line 36 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"












#line 49 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"














#line 65 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"






#line 72 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"













#line 87 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"









#line 98 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"







#line 106 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"







#line 114 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"







#line 123 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"






#line 131 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"






#line 139 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"






#line 147 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"







#line 156 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"







#line 166 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"







#line 176 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"






#line 183 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"






#line 190 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"






#line 197 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"






#line 204 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"






#line 211 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"






#line 218 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"






#line 225 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"






#line 232 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"








#line 242 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"









#line 254 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"






#line 261 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"






#line 270 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"


























#line 297 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"







#line 305 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"



#line 309 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"






#line 316 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"






#line 323 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"






#line 330 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"






#line 337 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"



#line 341 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"













#line 355 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"







#line 363 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"



#line 367 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"
















#line 384 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"











#line 396 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"

























#line 422 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"


#line 425 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"















#line 441 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"










#line 452 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"
















#line 469 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"





#line 475 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"







namespace boost{




   typedef long long long_long_type;
   typedef unsigned long long ulong_long_type;
#line 490 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"
}
#line 492 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"











#line 504 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"






























































#line 567 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"














#line 582 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"






#line 589 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"















































#line 637 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"











#line 649 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"
#line 650 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"






#line 657 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"










#line 668 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"




#line 673 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"




#line 678 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"



#line 682 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"



#line 686 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"



#line 690 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"



#line 694 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"



#line 698 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"






#line 705 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"



#line 709 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"




#line 714 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"



#line 718 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"



#line 722 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"



#line 726 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"



#line 730 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"



#line 734 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"



#line 738 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"



#line 742 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"



#line 746 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"



#line 750 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"



#line 754 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"









#line 764 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"



#line 768 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"



#line 772 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"



#line 776 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"



#line 780 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"



#line 784 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"



#line 788 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"



#line 792 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"



#line 796 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"



#line 800 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"



#line 804 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"



#line 808 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"



#line 812 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"



#line 816 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"



#line 820 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"



#line 824 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"



#line 828 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"



#line 832 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"



#line 836 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"



#line 840 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"



#line 844 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"



#line 848 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"



#line 852 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"



#line 856 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"



#line 860 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"



#line 864 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"



#line 868 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"


















#line 887 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"









#line 897 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"










#line 908 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"








#line 917 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"






#line 924 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"






#line 931 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"


#line 934 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/suffix.hpp"

#line 58 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config.hpp"

#line 60 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config.hpp"











#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/config.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/workaround.hpp"














































#line 48 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/workaround.hpp"




#line 53 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/workaround.hpp"




#line 58 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/workaround.hpp"




#line 63 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/workaround.hpp"




#line 68 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/workaround.hpp"




#line 73 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/workaround.hpp"




#line 78 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/workaround.hpp"




#line 83 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/workaround.hpp"




#line 88 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/workaround.hpp"




#line 93 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/workaround.hpp"




#line 98 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/workaround.hpp"




#line 103 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/workaround.hpp"




#line 108 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/workaround.hpp"




#line 113 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/workaround.hpp"




#line 118 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/workaround.hpp"




#line 123 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/workaround.hpp"




#line 128 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/workaround.hpp"




#line 133 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/workaround.hpp"




#line 138 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/workaround.hpp"




#line 143 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/workaround.hpp"




#line 148 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/workaround.hpp"




#line 153 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/workaround.hpp"




#line 158 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/workaround.hpp"




#line 163 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/workaround.hpp"




#line 168 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/workaround.hpp"





#line 174 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/workaround.hpp"




#line 179 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/workaround.hpp"




#line 184 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/workaround.hpp"




#line 189 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/workaround.hpp"




#line 194 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/workaround.hpp"




#line 199 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/workaround.hpp"




#line 204 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/workaround.hpp"




#line 209 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/workaround.hpp"





#line 215 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/workaround.hpp"




#line 220 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/workaround.hpp"




#line 225 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/workaround.hpp"




#line 230 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/workaround.hpp"





























#line 260 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/workaround.hpp"





#line 266 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/workaround.hpp"

#line 268 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/workaround.hpp"
#line 21 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/config.hpp"





#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/config.hpp"







#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/config.hpp"





#line 45 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/config.hpp"





#line 57 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/config.hpp"





#line 63 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/config.hpp"

#line 65 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/config.hpp"





#line 73 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/config.hpp"





#line 79 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/config.hpp"



#line 83 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/config.hpp"









#line 93 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/config.hpp"

#line 95 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/config.hpp"



#line 99 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/config.hpp"



#line 103 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/config.hpp"

#line 105 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/config.hpp"
#line 21 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/class_properties.hpp"



#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/for_each.hpp"














#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/arithmetic/dec.hpp"
















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/config/config.hpp"





























#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/config/config.hpp"

#line 33 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/config/config.hpp"

#line 35 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/config/config.hpp"





#line 41 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/config/config.hpp"

#line 43 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/config/config.hpp"

#line 45 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/config/config.hpp"

#line 47 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/config/config.hpp"

#line 49 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/config/config.hpp"



#line 53 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/config/config.hpp"
#line 54 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/config/config.hpp"





#line 60 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/config/config.hpp"








#line 69 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/config/config.hpp"
#line 70 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/config/config.hpp"








#line 79 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/config/config.hpp"





#line 85 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/config/config.hpp"








#line 94 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/config/config.hpp"









#line 104 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/config/config.hpp"

#line 106 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/config/config.hpp"
#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/arithmetic/dec.hpp"








#line 27 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/arithmetic/dec.hpp"





































































































































































































































































#line 289 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/arithmetic/dec.hpp"
#line 16 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/for_each.hpp"

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/for.hpp"
















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/cat.hpp"

























#line 27 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/cat.hpp"



#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/cat.hpp"


#line 34 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/cat.hpp"

#line 36 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/cat.hpp"
#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/for.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/debug/error.hpp"





















#line 23 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/debug/error.hpp"










#line 34 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/debug/error.hpp"
#line 19 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/for.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/detail/auto_rec.hpp"















#line 17 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/detail/auto_rec.hpp"




#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/control/iif.hpp"





















#line 23 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/control/iif.hpp"



#line 27 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/control/iif.hpp"


#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/control/iif.hpp"




#line 35 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/control/iif.hpp"
#line 22 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/detail/auto_rec.hpp"














































































































































































































































































#line 293 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/detail/auto_rec.hpp"
#line 294 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/detail/auto_rec.hpp"
#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/for.hpp"





#line 26 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/for.hpp"











#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/for.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/detail/msvc/for.hpp"
















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/control/if.hpp"


















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/logical/bool.hpp"

























#line 27 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/logical/bool.hpp"





































































































































































































































































#line 289 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/logical/bool.hpp"
#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/control/if.hpp"








#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/control/if.hpp"

#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/control/if.hpp"
#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/detail/msvc/for.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/tuple/eat.hpp"

























#line 27 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/tuple/eat.hpp"













#line 41 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/tuple/eat.hpp"

































































#line 107 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/tuple/eat.hpp"
#line 19 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/detail/msvc/for.hpp"


































































































































































































































































#line 278 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/detail/msvc/for.hpp"

#line 39 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/for.hpp"




#line 44 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/for.hpp"






































































































































































































































































#line 307 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/for.hpp"
#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/for_each.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/seq.hpp"















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/elem.hpp"
















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/facilities/empty.hpp"




















#line 22 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/facilities/empty.hpp"
#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/elem.hpp"







#line 26 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/elem.hpp"



















#line 46 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/elem.hpp"


































































































































































































































































#line 305 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/elem.hpp"
#line 17 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/seq.hpp"











#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/seq.hpp"







#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/seq.hpp"







#line 45 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/seq.hpp"
#line 19 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/for_each.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/size.hpp"





















#line 23 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/size.hpp"






#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/size.hpp"





































































































































































































































































































































































































































































































































#line 548 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/size.hpp"

#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/for_each.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/tuple/elem.hpp"



















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/facilities/overload.hpp"
















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/variadic/size.hpp"

























#line 27 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/variadic/size.hpp"

#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/variadic/size.hpp"

#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/variadic/size.hpp"
#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/facilities/overload.hpp"





#line 24 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/facilities/overload.hpp"

#line 26 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/facilities/overload.hpp"
#line 21 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/tuple/elem.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/tuple/rem.hpp"

























#line 27 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/tuple/rem.hpp"













#line 41 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/tuple/rem.hpp"










































































#line 116 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/tuple/rem.hpp"
















#line 133 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/tuple/rem.hpp"

#line 135 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/tuple/rem.hpp"
#line 22 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/tuple/elem.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/variadic/elem.hpp"


























#line 28 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/variadic/elem.hpp"
































































#line 93 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/variadic/elem.hpp"

#line 95 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/variadic/elem.hpp"
#line 23 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/tuple/elem.hpp"








#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/tuple/elem.hpp"


















































































































































#line 179 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/tuple/elem.hpp"












#line 192 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/tuple/elem.hpp"

#line 21 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/for_each.hpp"









#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/for_each.hpp"





#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/for_each.hpp"

#line 39 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/for_each.hpp"






#line 46 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/for_each.hpp"

#line 48 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/for_each.hpp"










#line 59 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/for_each.hpp"

#line 61 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/for_each.hpp"
#line 25 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/class_properties.hpp"
#line 26 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/class_properties.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/call_traits.hpp"




















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/call_traits.hpp"

























#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_arithmetic.hpp"












#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_integral.hpp"














#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"













#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"









#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/int.hpp"
















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/int_fwd.hpp"
















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/adl_barrier.hpp"
















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/adl.hpp"
















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/msvc.hpp"




















#line 22 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/msvc.hpp"
#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/adl.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/intel.hpp"




















#line 22 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/intel.hpp"
#line 19 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/adl.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/gcc.hpp"


















#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/gcc.hpp"

#line 22 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/gcc.hpp"

#line 24 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/gcc.hpp"
#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/adl.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/workaround.hpp"


















#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/workaround.hpp"
#line 21 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/adl.hpp"











#line 39 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/adl.hpp"

#line 41 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/adl.hpp"
#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/adl_barrier.hpp"





















#line 40 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/adl_barrier.hpp"






#line 47 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/adl_barrier.hpp"

#line 49 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/adl_barrier.hpp"
#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/int_fwd.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/nttp_decl.hpp"
















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/nttp.hpp"




































#line 40 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/nttp.hpp"

#line 42 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/nttp.hpp"
#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/nttp_decl.hpp"











#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/nttp_decl.hpp"



#line 34 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/nttp_decl.hpp"

#line 36 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/nttp_decl.hpp"
#line 19 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/int_fwd.hpp"

namespace boost { namespace mpl {

template< int N > struct int_;

}}


#line 28 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/int_fwd.hpp"
#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/int.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/integral_wrapper.hpp"















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/integral_c_tag.hpp"


















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/static_constant.hpp"






















#line 24 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/static_constant.hpp"

#line 26 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/static_constant.hpp"
#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/integral_c_tag.hpp"

namespace boost { namespace mpl {
struct integral_c_tag { static const int value = 0; };
}}


#line 27 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/integral_c_tag.hpp"
#line 17 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/integral_wrapper.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/static_cast.hpp"




















#line 24 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/static_cast.hpp"

#line 26 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/static_cast.hpp"

#line 28 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/static_cast.hpp"
#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/integral_wrapper.hpp"








#line 27 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/integral_wrapper.hpp"



#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/integral_wrapper.hpp"




#line 36 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/integral_wrapper.hpp"

#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/integral_wrapper.hpp"
#line 39 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/integral_wrapper.hpp"

namespace boost { namespace mpl {

template< int N >
struct int_
{
    static const int value = N;




#line 51 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/integral_wrapper.hpp"
    typedef int_ type;
#line 53 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/integral_wrapper.hpp"
    typedef int value_type;
    typedef integral_c_tag tag;











#line 67 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/integral_wrapper.hpp"


#line 72 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/integral_wrapper.hpp"
    typedef boost::mpl::int_< static_cast<int>((value + 1)) > next;
    typedef boost::mpl::int_< static_cast<int>((value - 1)) > prior;
#line 75 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/integral_wrapper.hpp"

    
    
    
    
    operator int() const { return static_cast<int>(this->value); } 
};


template< int N >
int const boost::mpl::int_< N >::value;
#line 87 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/integral_wrapper.hpp"

}}





#line 21 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/int.hpp"

#line 23 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/int.hpp"
#line 11 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/template_arity_fwd.hpp"
















namespace boost { namespace mpl { namespace aux {

template< typename F > struct template_arity;

}}}

#line 24 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/template_arity_fwd.hpp"
#line 12 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/preprocessor/params.hpp"
















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/preprocessor.hpp"






















#line 28 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/preprocessor.hpp"



#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/preprocessor.hpp"



#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/preprocessor.hpp"


#line 40 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/preprocessor.hpp"
#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/preprocessor/params.hpp"

























#line 44 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/preprocessor/params.hpp"

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/comma_if.hpp"














#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/punctuation/comma_if.hpp"



















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/punctuation/comma.hpp"




















#line 22 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/punctuation/comma.hpp"
#line 21 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/punctuation/comma_if.hpp"








#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/punctuation/comma_if.hpp"

#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/punctuation/comma_if.hpp"
#line 16 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/comma_if.hpp"

#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/comma_if.hpp"
#line 46 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/preprocessor/params.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repeat.hpp"














#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/repeat.hpp"



















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/detail/auto_rec.hpp"















#line 17 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/detail/auto_rec.hpp"




















































































































































































































































































#line 294 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/detail/auto_rec.hpp"
#line 21 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/repeat.hpp"






#line 28 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/repeat.hpp"





























































































































































































































































































































































































































































































































































































































































































































































































































#line 826 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/repeat.hpp"

#line 16 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repeat.hpp"

#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repeat.hpp"
#line 47 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/preprocessor/params.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/inc.hpp"














#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/arithmetic/inc.hpp"

























#line 27 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/arithmetic/inc.hpp"





































































































































































































































































#line 289 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/arithmetic/inc.hpp"
#line 16 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/inc.hpp"

#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/inc.hpp"
#line 48 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/preprocessor/params.hpp"















#line 64 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/preprocessor/params.hpp"

#line 66 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/preprocessor/params.hpp"
#line 13 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/lambda.hpp"
















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/ttp.hpp"
























#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/ttp.hpp"






#line 40 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/ttp.hpp"

#line 42 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/ttp.hpp"
#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/lambda.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/ctps.hpp"























#line 27 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/ctps.hpp"



#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/ctps.hpp"
#line 19 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/lambda.hpp"








#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/lambda.hpp"

#line 33 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/lambda.hpp"
#line 14 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/overload_resolution.hpp"






















#line 28 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/overload_resolution.hpp"

#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/overload_resolution.hpp"
#line 15 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"













#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/integral_constant.hpp"









#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/bool.hpp"
















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/bool_fwd.hpp"


















namespace boost { namespace mpl {

template< bool C_ > struct bool_;


typedef bool_<true> true_;
typedef bool_<false> false_;

}}





#line 34 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/bool_fwd.hpp"
#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/bool.hpp"



namespace boost { namespace mpl {

template< bool C_ > struct bool_
{
    static const bool value = C_;
    typedef integral_c_tag tag;
    typedef bool_ type;
    typedef bool value_type;
    operator bool() const { return this->value; }
};


template< bool C_ >
bool const bool_<C_>::value;
#line 36 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/bool.hpp"

}}

#line 40 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/bool.hpp"
#line 11 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/integral_constant.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/integral_c.hpp"
















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/integral_c_fwd.hpp"



















namespace boost { namespace mpl {




#line 26 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/integral_c_fwd.hpp"
template< typename T, T N > struct integral_c;
#line 28 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/integral_c_fwd.hpp"

}}


#line 33 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/integral_c_fwd.hpp"
#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/integral_c.hpp"







#line 26 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/integral_c.hpp"

#line 28 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/integral_c.hpp"




#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/integral_wrapper.hpp"

























#line 27 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/integral_wrapper.hpp"



#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/integral_wrapper.hpp"







#line 39 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/integral_wrapper.hpp"

namespace boost { namespace mpl {

template< typename T, T N >
struct integral_c
{
    static const T value = N;




#line 51 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/integral_wrapper.hpp"
    typedef integral_c type;
#line 53 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/integral_wrapper.hpp"
    typedef T value_type;
    typedef integral_c_tag tag;











#line 67 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/integral_wrapper.hpp"


#line 72 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/integral_wrapper.hpp"
    typedef integral_c< T, static_cast<T>((value + 1)) > next;
    typedef integral_c< T, static_cast<T>((value - 1)) > prior;
#line 75 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/integral_wrapper.hpp"

    
    
    
    
    operator T() const { return static_cast<T>(this->value); } 
};


template< typename T, T N >
T const integral_c< T, N >::value;
#line 87 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/integral_wrapper.hpp"

}}





#line 33 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/integral_c.hpp"



namespace boost { namespace mpl {

template< bool C >
struct integral_c<bool, C>
{
    static const bool value = C;
    typedef integral_c_tag tag;
    typedef integral_c type;
    typedef bool value_type;
    operator bool() const { return this->value; }
};
}}
#line 50 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/integral_c.hpp"

#line 52 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/integral_c.hpp"
#line 12 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/integral_constant.hpp"

namespace boost{



#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/integral_constant.hpp"
template <class T, T val>
#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/integral_constant.hpp"
struct integral_constant : public mpl::integral_c<T, val>
{
   typedef integral_constant<T,val> type;
};

template<> struct integral_constant<bool,true> : public mpl::true_ 
{






#line 34 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/integral_constant.hpp"
   typedef integral_constant<bool,true> type;
};
template<> struct integral_constant<bool,false> : public mpl::false_ 
{






#line 45 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/integral_constant.hpp"
   typedef integral_constant<bool,false> type;
};

typedef integral_constant<bool,true> true_type;
typedef integral_constant<bool,false> false_type;

}

#line 54 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/integral_constant.hpp"
#line 16 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/lambda_support.hpp"






































































































































































#line 168 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/lambda_support.hpp"

#line 170 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/lambda_support.hpp"
#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"































#line 50 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"






#line 57 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



#line 61 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



#line 65 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



































































































































#line 197 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"
#line 16 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_integral.hpp"

namespace boost {






#line 25 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_integral.hpp"
template< typename T > struct is_integral : public ::boost::integral_constant<bool,false> { public:   }; 

template<> struct is_integral< unsigned char > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< unsigned char const > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< unsigned char volatile > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< unsigned char const volatile > : public ::boost::integral_constant<bool,true> { public:   };
template<> struct is_integral< unsigned short > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< unsigned short const > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< unsigned short volatile > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< unsigned short const volatile > : public ::boost::integral_constant<bool,true> { public:   };
template<> struct is_integral< unsigned int > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< unsigned int const > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< unsigned int volatile > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< unsigned int const volatile > : public ::boost::integral_constant<bool,true> { public:   };
template<> struct is_integral< unsigned long > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< unsigned long const > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< unsigned long volatile > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< unsigned long const volatile > : public ::boost::integral_constant<bool,true> { public:   };

template<> struct is_integral< signed char > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< signed char const > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< signed char volatile > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< signed char const volatile > : public ::boost::integral_constant<bool,true> { public:   };
template<> struct is_integral< signed short > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< signed short const > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< signed short volatile > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< signed short const volatile > : public ::boost::integral_constant<bool,true> { public:   };
template<> struct is_integral< signed int > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< signed int const > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< signed int volatile > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< signed int const volatile > : public ::boost::integral_constant<bool,true> { public:   };
template<> struct is_integral< signed long > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< signed long const > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< signed long volatile > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< signed long const volatile > : public ::boost::integral_constant<bool,true> { public:   };

template<> struct is_integral< bool > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< bool const > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< bool volatile > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< bool const volatile > : public ::boost::integral_constant<bool,true> { public:   };
template<> struct is_integral< char > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< char const > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< char volatile > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< char const volatile > : public ::boost::integral_constant<bool,true> { public:   };





template<> struct is_integral< wchar_t > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< wchar_t const > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< wchar_t volatile > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< wchar_t const volatile > : public ::boost::integral_constant<bool,true> { public:   };
#line 46 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_integral.hpp"














#line 63 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_integral.hpp"


template<> struct is_integral< ::boost::ulong_long_type > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< ::boost::ulong_long_type const > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< ::boost::ulong_long_type volatile > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< ::boost::ulong_long_type const volatile > : public ::boost::integral_constant<bool,true> { public:   };
template<> struct is_integral< ::boost::long_long_type > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< ::boost::long_long_type const > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< ::boost::long_long_type volatile > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_integral< ::boost::long_long_type const volatile > : public ::boost::integral_constant<bool,true> { public:   };



#line 71 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_integral.hpp"
        





#line 78 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_integral.hpp"

} 

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_undef.hpp"




























#line 82 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_integral.hpp"

#line 84 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_integral.hpp"
#line 14 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_arithmetic.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_float.hpp"












#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"













#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"



























#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"


































#line 50 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"






#line 57 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



#line 61 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



#line 65 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



































































































































#line 197 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"
#line 14 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_float.hpp"

namespace boost {


template< typename T > struct is_float : public ::boost::integral_constant<bool,false> { public:   }; 
template<> struct is_float< float > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_float< float const > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_float< float volatile > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_float< float const volatile > : public ::boost::integral_constant<bool,true> { public:   };
template<> struct is_float< double > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_float< double const > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_float< double volatile > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_float< double const volatile > : public ::boost::integral_constant<bool,true> { public:   };
template<> struct is_float< long double > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_float< long double const > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_float< long double volatile > : public ::boost::integral_constant<bool,true> { public:   }; template<> struct is_float< long double const volatile > : public ::boost::integral_constant<bool,true> { public:   };

} 

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_undef.hpp"




























#line 26 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_float.hpp"

#line 28 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_float.hpp"
#line 15 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_arithmetic.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/ice_or.hpp"












namespace boost {
namespace type_traits {

template <bool b1, bool b2, bool b3 = false, bool b4 = false, bool b5 = false, bool b6 = false, bool b7 = false>
struct ice_or;

template <bool b1, bool b2, bool b3, bool b4, bool b5, bool b6, bool b7>
struct ice_or
{
    static const bool value = true;
};

template <>
struct ice_or<false, false, false, false, false, false, false>
{
    static const bool value = false;
};

} 
} 

#line 35 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/ice_or.hpp"
#line 16 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_arithmetic.hpp"

#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_arithmetic.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"













#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"



























#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"


































#line 50 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"






#line 57 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



#line 61 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



#line 65 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



































































































































#line 197 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"
#line 21 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_arithmetic.hpp"

namespace boost {


namespace detail {

template< typename T >
struct is_arithmetic_impl
{ 
    static const bool value = (::boost::type_traits::ice_or< ::boost::is_integral<T>::value, ::boost::is_float<T>::value >::value); 
#line 35 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_arithmetic.hpp"
};

} 
#line 39 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_arithmetic.hpp"




#line 44 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_arithmetic.hpp"
template< typename T > struct is_arithmetic : public ::boost::integral_constant<bool,::boost::detail::is_arithmetic_impl<T>::value> { public:   }; 
#line 46 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_arithmetic.hpp"

} 

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_undef.hpp"




























#line 50 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_arithmetic.hpp"

#line 52 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_arithmetic.hpp"
#line 27 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/call_traits.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_enum.hpp"













#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/intrinsics.hpp"











#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/config.hpp"


























#line 28 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/config.hpp"





#line 43 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/config.hpp"



#line 47 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/config.hpp"







#line 55 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/config.hpp"








#line 64 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/config.hpp"








#line 73 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/config.hpp"

#line 75 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/config.hpp"


#line 13 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/intrinsics.hpp"
#line 14 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/intrinsics.hpp"




































































#line 83 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/intrinsics.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_same.hpp"






























#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"













#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"



























#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"


































#line 50 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"






#line 57 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



#line 61 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



#line 65 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



































































































































#line 197 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"
#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_same.hpp"

namespace boost {



template< typename T, typename U > struct is_same : public ::boost::integral_constant<bool,false> { public:   }; 
template< typename T > struct is_same< T,T > : public ::boost::integral_constant<bool,true> { public:   };




#line 44 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_same.hpp"




















































#line 97 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_same.hpp"

} 

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_undef.hpp"




























#line 101 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_same.hpp"

#line 103 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_same.hpp"

#line 87 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/intrinsics.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_function.hpp"













#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_reference.hpp"















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_lvalue_reference.hpp"































#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"













#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"



























#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"


































#line 50 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"






#line 57 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



#line 61 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



#line 65 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



































































































































#line 197 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"
#line 33 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_lvalue_reference.hpp"

namespace boost {



#line 39 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_lvalue_reference.hpp"

template< typename T > struct is_lvalue_reference : public ::boost::integral_constant<bool,false> { public:   }; 
template< typename T > struct is_lvalue_reference< T& > : public ::boost::integral_constant<bool,true> { public:  };









#line 52 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_lvalue_reference.hpp"













#line 66 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_lvalue_reference.hpp"













































#line 112 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_lvalue_reference.hpp"

} 

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_undef.hpp"




























#line 116 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_lvalue_reference.hpp"

#line 118 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_lvalue_reference.hpp"

#line 17 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_reference.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_rvalue_reference.hpp"














#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"













#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"



























#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"


































#line 50 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"






#line 57 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



#line 61 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



#line 65 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



































































































































#line 197 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"
#line 16 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_rvalue_reference.hpp"

namespace boost {

template< typename T > struct is_rvalue_reference : public ::boost::integral_constant<bool,false> { public:   }; 

template< typename T > struct is_rvalue_reference< T&& > : public ::boost::integral_constant<bool,true> { public:  };
#line 23 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_rvalue_reference.hpp"

} 

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_undef.hpp"




























#line 27 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_rvalue_reference.hpp"

#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_rvalue_reference.hpp"

#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_reference.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/ice.hpp"













#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/yes_no_type.hpp"













namespace boost {
namespace type_traits {

typedef char yes_type;
struct no_type
{
   char padding[8];
};

} 
} 

#line 27 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/yes_no_type.hpp"
#line 15 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/ice.hpp"

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/ice_and.hpp"













namespace boost {
namespace type_traits {

template <bool b1, bool b2, bool b3 = true, bool b4 = true, bool b5 = true, bool b6 = true, bool b7 = true>
struct ice_and;

template <bool b1, bool b2, bool b3, bool b4, bool b5, bool b6, bool b7>
struct ice_and
{
    static const bool value = false;
};

template <>
struct ice_and<true, true, true, true, true, true, true>
{
    static const bool value = true;
};

} 
} 

#line 36 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/ice_and.hpp"
#line 17 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/ice.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/ice_not.hpp"












namespace boost {
namespace type_traits {

template <bool b>
struct ice_not
{
    static const bool value = true;
};

template <>
struct ice_not<true>
{
    static const bool value = false;
};

} 
} 

#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/ice_not.hpp"
#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/ice.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/ice_eq.hpp"












namespace boost {
namespace type_traits {

template <int b1, int b2>
struct ice_eq
{
    static const bool value = (b1 == b2);
};

template <int b1, int b2>
struct ice_ne
{
    static const bool value = (b1 != b2);
};


template <int b1, int b2> bool const ice_eq<b1,b2>::value;
template <int b1, int b2> bool const ice_ne<b1,b2>::value;
#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/ice_eq.hpp"

} 
} 

#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/ice_eq.hpp"
#line 19 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/ice.hpp"

#line 21 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/ice.hpp"
#line 19 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_reference.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"













#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"



























#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"


































#line 50 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"






#line 57 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



#line 61 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



#line 65 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



































































































































#line 197 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"
#line 22 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_reference.hpp"

namespace boost {

namespace detail {

template <typename T>
struct is_reference_impl
{
   static const bool value = (::boost::type_traits::ice_or< ::boost::is_lvalue_reference<T>::value, ::boost::is_rvalue_reference<T>::value >::value);
#line 34 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_reference.hpp"
};

} 

template< typename T > struct is_reference : public ::boost::integral_constant<bool,::boost::detail::is_reference_impl<T>::value> { public:   }; 

} 

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_undef.hpp"




























#line 43 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_reference.hpp"

#line 45 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_reference.hpp"

#line 15 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_function.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/false_result.hpp"













namespace boost {
namespace type_traits {


struct false_result
{
    template <typename T> struct result_
    {
        static const bool value = false;
    };
};

}} 

#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/false_result.hpp"
#line 16 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_function.hpp"




#line 21 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_function.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"























#line 25 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"

namespace boost {
namespace type_traits {



no_type __cdecl is_function_ptr_tester(...);





template <class R >
yes_type is_function_ptr_tester(R (*)());

template <class R >
yes_type is_function_ptr_tester(R (*)( ...));
#line 43 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"

template <class R >
yes_type is_function_ptr_tester(R (__stdcall*)());
template <class R >
yes_type is_function_ptr_tester(R (__stdcall*)( ...));

template <class R >
yes_type is_function_ptr_tester(R (__fastcall*)());
template <class R >
yes_type is_function_ptr_tester(R (__fastcall*)( ...));
#line 54 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"
template <class R >
yes_type is_function_ptr_tester(R (__cdecl*)());
template <class R >
yes_type is_function_ptr_tester(R (__cdecl*)( ...));
#line 59 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"
template <class R , class T0 >
yes_type is_function_ptr_tester(R (*)( T0));

template <class R , class T0 >
yes_type is_function_ptr_tester(R (*)( T0 ...));
#line 65 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"

template <class R , class T0 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0));
template <class R , class T0 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 ...));

template <class R , class T0 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0));
template <class R , class T0 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 ...));
#line 76 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"
template <class R , class T0 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0));
template <class R , class T0 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 ...));
#line 81 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"
template <class R , class T0 , class T1 >
yes_type is_function_ptr_tester(R (*)( T0 , T1));

template <class R , class T0 , class T1 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 ...));
#line 87 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"

template <class R , class T0 , class T1 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1));
template <class R , class T0 , class T1 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 ...));

template <class R , class T0 , class T1 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1));
template <class R , class T0 , class T1 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 ...));
#line 98 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"
template <class R , class T0 , class T1 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1));
template <class R , class T0 , class T1 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 ...));
#line 103 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"
template <class R , class T0 , class T1 , class T2 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2));

template <class R , class T0 , class T1 , class T2 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 ...));
#line 109 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"

template <class R , class T0 , class T1 , class T2 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2));
template <class R , class T0 , class T1 , class T2 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 ...));

template <class R , class T0 , class T1 , class T2 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2));
template <class R , class T0 , class T1 , class T2 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 ...));
#line 120 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"
template <class R , class T0 , class T1 , class T2 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2));
template <class R , class T0 , class T1 , class T2 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 ...));
#line 125 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"
template <class R , class T0 , class T1 , class T2 , class T3 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3));

template <class R , class T0 , class T1 , class T2 , class T3 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 ...));
#line 131 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"

template <class R , class T0 , class T1 , class T2 , class T3 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3));
template <class R , class T0 , class T1 , class T2 , class T3 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 ...));

template <class R , class T0 , class T1 , class T2 , class T3 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3));
template <class R , class T0 , class T1 , class T2 , class T3 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 ...));
#line 142 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"
template <class R , class T0 , class T1 , class T2 , class T3 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3));
template <class R , class T0 , class T1 , class T2 , class T3 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 ...));
#line 147 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 ...));
#line 153 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 ...));
#line 164 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 ...));
#line 169 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 ...));
#line 175 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 ...));
#line 186 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 ...));
#line 191 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 ...));
#line 197 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 ...));
#line 208 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 ...));
#line 213 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 ...));
#line 219 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 ...));
#line 230 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 ...));
#line 235 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 ...));
#line 241 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 ...));
#line 252 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 ...));
#line 257 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 ...));
#line 263 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 ...));
#line 274 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 ...));
#line 279 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 ...));
#line 285 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 ...));
#line 296 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 ...));
#line 301 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 ...));
#line 307 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 ...));
#line 318 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 ...));
#line 323 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 ...));
#line 329 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 ...));
#line 340 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 ...));
#line 345 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 ...));
#line 351 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 ...));
#line 362 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 ...));
#line 367 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 ...));
#line 373 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 ...));
#line 384 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 ...));
#line 389 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 ...));
#line 395 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 ...));
#line 406 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 ...));
#line 411 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 ...));
#line 417 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 ...));
#line 428 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 ...));
#line 433 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 ...));
#line 439 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 ...));
#line 450 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 ...));
#line 455 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 ...));
#line 461 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 ...));
#line 472 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 ...));
#line 477 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 ...));
#line 483 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 ...));
#line 494 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 ...));
#line 499 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 ...));
#line 505 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 ...));
#line 516 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 ...));
#line 521 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 ...));
#line 527 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 ...));
#line 538 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 ...));
#line 543 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 ...));
#line 549 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 ...));
#line 560 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 ...));
#line 565 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 ...));
#line 571 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 ...));
#line 582 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 ...));
#line 587 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_function_ptr_tester(R (*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 ...));
#line 593 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_function_ptr_tester(R (__stdcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 ...));

template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_function_ptr_tester(R (__fastcall*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 ...));
#line 604 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24));
template <class R , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_function_ptr_tester(R (__cdecl*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 ...));
#line 609 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"






#line 616 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"

} 
} 

#line 621 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"

































#line 655 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_function_ptr_tester.hpp"

#line 22 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_function.hpp"

#line 24 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_function.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"













#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"



























#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"


































#line 50 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"






#line 57 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



#line 61 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



#line 65 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



































































































































#line 197 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"
#line 27 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_function.hpp"







namespace boost {



namespace detail {
























#line 64 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_function.hpp"

template <typename T>
struct is_function_impl
{

#pragma warning(push)
#pragma warning(disable:6334)
#line 72 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_function.hpp"
    static T* t;
    static const bool value = sizeof(::boost::type_traits::is_function_ptr_tester(t)) == sizeof(::boost::type_traits::yes_type);
#line 77 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_function.hpp"

#pragma warning(pop)
#line 80 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_function.hpp"
};


template <typename T>
struct is_function_impl<T&> : public false_type
{};

template <typename T>
struct is_function_impl<T&&> : public false_type
{};
#line 91 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_function.hpp"
#line 92 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_function.hpp"

#line 94 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_function.hpp"

} 

#line 98 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_function.hpp"



#line 102 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_function.hpp"
template< typename T > struct is_function : public ::boost::integral_constant<bool,::boost::detail::is_function_impl<T>::value> { public:   }; 

template< typename T > struct is_function< T&& > : public ::boost::integral_constant<bool,false> { public:  };
#line 106 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_function.hpp"
#line 107 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_function.hpp"
} 

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_undef.hpp"




























#line 110 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_function.hpp"

#line 112 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_function.hpp"
#line 88 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/intrinsics.hpp"


























#line 115 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/intrinsics.hpp"


#line 118 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/intrinsics.hpp"















#line 134 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/intrinsics.hpp"




































































#line 203 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/intrinsics.hpp"





































#line 241 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/intrinsics.hpp"


























#line 268 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/intrinsics.hpp"




























#line 297 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/intrinsics.hpp"

#line 299 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/intrinsics.hpp"







#line 15 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_enum.hpp"

















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"













#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"



























#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"


































#line 50 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"






#line 57 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



#line 61 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



#line 65 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



































































































































#line 197 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"
#line 33 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_enum.hpp"

namespace boost {


















































































































































template< typename T > struct is_enum : public ::boost::integral_constant<bool,__is_enum(T)> { public:   }; 

#line 184 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_enum.hpp"

} 

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_undef.hpp"




























#line 188 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_enum.hpp"

#line 190 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_enum.hpp"
#line 28 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/call_traits.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_pointer.hpp"























#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_member_pointer.hpp"



























#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_member_function_pointer.hpp"
























#line 27 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_member_function_pointer.hpp"

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_array.hpp"


























#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"













#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"



























#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"


































#line 50 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"






#line 57 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



#line 61 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



#line 65 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



































































































































#line 197 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"
#line 28 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_array.hpp"

namespace boost {



#line 34 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_array.hpp"
template< typename T > struct is_array : public ::boost::integral_constant<bool,false> { public:   }; 

template< typename T, std::size_t N > struct is_array< T[N] > : public ::boost::integral_constant<bool,true> { public:  };
template< typename T, std::size_t N > struct is_array< T const[N] > : public ::boost::integral_constant<bool,true> { public:  };
template< typename T, std::size_t N > struct is_array< T volatile[N] > : public ::boost::integral_constant<bool,true> { public:  };
template< typename T, std::size_t N > struct is_array< T const volatile[N] > : public ::boost::integral_constant<bool,true> { public:  };

template< typename T > struct is_array< T[] > : public ::boost::integral_constant<bool,true> { public:  };
template< typename T > struct is_array< T const[] > : public ::boost::integral_constant<bool,true> { public:  };
template< typename T > struct is_array< T volatile[] > : public ::boost::integral_constant<bool,true> { public:  };
template< typename T > struct is_array< T const volatile[] > : public ::boost::integral_constant<bool,true> { public:  };
#line 46 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_array.hpp"
#line 47 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_array.hpp"






































#line 86 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_array.hpp"

} 

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_undef.hpp"




























#line 90 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_array.hpp"

#line 92 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_array.hpp"
#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_member_function_pointer.hpp"



#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"























#line 25 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

namespace boost {
namespace type_traits {

no_type __cdecl is_mem_fun_pointer_tester(...);





template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)());

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)() const);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)() volatile);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)() const volatile);


template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( ...));

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( ...) const);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( ...) volatile);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( ...) const volatile);
#line 60 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)());

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)() const);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)() volatile);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)() const volatile);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( ...));

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( ...) const);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( ...) volatile);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( ...) const volatile);


template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)());

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)() const);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)() volatile);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)() const volatile);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( ...));

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( ...) const);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( ...) volatile);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( ...) const volatile);
#line 110 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)());

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)() const);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)() volatile);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)() const volatile);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( ...));

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( ...) const);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( ...) volatile);

template <class R, class T >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( ...) const volatile);
#line 135 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"
template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0));

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0) const);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0) volatile);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0) const volatile);


template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 ...));

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 ...) const);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 ...) volatile);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 ...) const volatile);
#line 160 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0));

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0) const);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0) volatile);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0) const volatile);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 ...));

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 ...) const);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 ...) volatile);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 ...) const volatile);


template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0));

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0) const);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0) volatile);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0) const volatile);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 ...));

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 ...) const);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 ...) volatile);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 ...) const volatile);
#line 210 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0));

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0) const);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0) volatile);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0) const volatile);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 ...));

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 ...) const);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 ...) volatile);

template <class R, class T , class T0 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 ...) const volatile);
#line 235 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"
template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1));

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1) const);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1) volatile);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1) const volatile);


template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 ...));

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 ...) const);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 ...) volatile);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 ...) const volatile);
#line 260 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1));

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1) const);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1) volatile);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1) const volatile);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 ...));

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 ...) const);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 ...) volatile);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 ...) const volatile);


template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1));

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1) const);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1) volatile);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1) const volatile);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 ...));

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 ...) const);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 ...) volatile);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 ...) const volatile);
#line 310 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1));

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1) const);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1) volatile);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1) const volatile);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 ...));

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 ...) const);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 ...) volatile);

template <class R, class T , class T0 , class T1 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 ...) const volatile);
#line 335 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"
template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2));

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2) const);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2) volatile);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2) const volatile);


template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 ...));

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 ...) const);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 ...) const volatile);
#line 360 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2));

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2) const);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2) volatile);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2) const volatile);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 ...));

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 ...) const);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 ...) const volatile);


template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2));

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2) const);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2) volatile);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2) const volatile);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 ...));

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 ...) const);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 ...) const volatile);
#line 410 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2));

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2) const);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2) volatile);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2) const volatile);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 ...));

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 ...) const);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 ...) const volatile);
#line 435 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"
template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3));

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 ...) const volatile);
#line 460 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3));

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 ...) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3));

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 ...) const volatile);
#line 510 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3));

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 ...) const volatile);
#line 535 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"
template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 ...) const volatile);
#line 560 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 ...) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 ...) const volatile);
#line 610 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 ...) const volatile);
#line 635 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"
template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 ...) const volatile);
#line 660 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 ...) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 ...) const volatile);
#line 710 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 ...) const volatile);
#line 735 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"
template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 ...) const volatile);
#line 760 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 ...) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 ...) const volatile);
#line 810 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 ...) const volatile);
#line 835 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"
template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 ...) const volatile);
#line 860 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 ...) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 ...) const volatile);
#line 910 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 ...) const volatile);
#line 935 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"
template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 ...) const volatile);
#line 960 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 ...) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 ...) const volatile);
#line 1010 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 ...) const volatile);
#line 1035 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"
template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 ...) const volatile);
#line 1060 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 ...) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 ...) const volatile);
#line 1110 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 ...) const volatile);
#line 1135 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"
template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 ...) const volatile);
#line 1160 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 ...) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 ...) const volatile);
#line 1210 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 ...) const volatile);
#line 1235 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"
template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 ...) const volatile);
#line 1260 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 ...) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 ...) const volatile);
#line 1310 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 ...) const volatile);
#line 1335 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"
template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 ...) const volatile);
#line 1360 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 ...) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 ...) const volatile);
#line 1410 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 ...) const volatile);
#line 1435 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"
template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 ...) const volatile);
#line 1460 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 ...) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 ...) const volatile);
#line 1510 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 ...) const volatile);
#line 1535 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"
template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 ...) const volatile);
#line 1560 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 ...) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 ...) const volatile);
#line 1610 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 ...) const volatile);
#line 1635 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"
template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 ...) const volatile);
#line 1660 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 ...) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 ...) const volatile);
#line 1710 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 ...) const volatile);
#line 1735 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"
template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 ...) const volatile);
#line 1760 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 ...) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 ...) const volatile);
#line 1810 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 ...) const volatile);
#line 1835 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"
template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 ...) const volatile);
#line 1860 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 ...) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 ...) const volatile);
#line 1910 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 ...) const volatile);
#line 1935 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"
template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 ...) const volatile);
#line 1960 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 ...) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 ...) const volatile);
#line 2010 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 ...) const volatile);
#line 2035 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"
template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 ...) const volatile);
#line 2060 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 ...) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 ...) const volatile);
#line 2110 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 ...) const volatile);
#line 2135 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"
template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 ...) const volatile);
#line 2160 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 ...) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 ...) const volatile);
#line 2210 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 ...) const volatile);
#line 2235 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"
template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 ...) const volatile);
#line 2260 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 ...) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 ...) const volatile);
#line 2310 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 ...) const volatile);
#line 2335 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"
template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 ...) const volatile);
#line 2360 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 ...) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 ...) const volatile);
#line 2410 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 ...) const volatile);
#line 2435 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"
template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 ...) const volatile);
#line 2460 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 ...) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 ...) const volatile);
#line 2510 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 ...) const volatile);
#line 2535 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"
template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 ...) const volatile);
#line 2560 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__stdcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 ...) const volatile);


template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__fastcall T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 ...) const volatile);
#line 2610 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24) const volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 ...));

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 ...) const);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 ...) volatile);

template <class R, class T , class T0 , class T1 , class T2 , class T3 , class T4 , class T5 , class T6 , class T7 , class T8 , class T9 , class T10 , class T11 , class T12 , class T13 , class T14 , class T15 , class T16 , class T17 , class T18 , class T19 , class T20 , class T21 , class T22 , class T23 , class T24 >
yes_type is_mem_fun_pointer_tester(R (__cdecl T::*const volatile*)( T0 , T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 , T20 , T21 , T22 , T23 , T24 ...) const volatile);
#line 2635 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"







#line 2643 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

} 
} 

#line 2648 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"















































































































#line 2760 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/is_mem_fun_pointer_tester.hpp"

#line 33 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_member_function_pointer.hpp"
#line 34 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_member_function_pointer.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"













#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"



























#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"


































#line 50 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"






#line 57 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



#line 61 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



#line 65 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



































































































































#line 197 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"
#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_member_function_pointer.hpp"

namespace boost {



#line 43 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_member_function_pointer.hpp"







#line 51 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_member_function_pointer.hpp"

namespace detail {



template <bool>
struct is_mem_fun_pointer_select
    : public ::boost::type_traits::false_result
{
};

template <>
struct is_mem_fun_pointer_select<false>
{
    template <typename T> struct result_
    {

#pragma warning(push)
#pragma warning(disable:6334)
#line 71 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_member_function_pointer.hpp"
        static T* make_t;
        typedef result_<T> self_type;

        static const bool value = ( 1 == sizeof(::boost::type_traits::is_mem_fun_pointer_tester(self_type::make_t)) );
#line 78 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_member_function_pointer.hpp"

#pragma warning(pop)
#line 81 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_member_function_pointer.hpp"
    };
};

template <typename T>
struct is_member_function_pointer_impl
    : public is_mem_fun_pointer_select<
          ::boost::type_traits::ice_or<
              ::boost::is_reference<T>::value
            , ::boost::is_array<T>::value
            >::value
        >::template result_<T>
{
};


template <typename T>
struct is_member_function_pointer_impl<T&> : public false_type{};
#line 99 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_member_function_pointer.hpp"


















#line 118 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_member_function_pointer.hpp"

template<> struct is_member_function_pointer_impl< void > { public: static const bool value = (false); };

template<> struct is_member_function_pointer_impl< void const > { public: static const bool value = (false); };
template<> struct is_member_function_pointer_impl< void volatile > { public: static const bool value = (false); };
template<> struct is_member_function_pointer_impl< void const volatile > { public: static const bool value = (false); };
#line 125 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_member_function_pointer.hpp"

} 

template< typename T > struct is_member_function_pointer : public ::boost::integral_constant<bool,::boost::detail::is_member_function_pointer_impl<T>::value> { public:   }; 

#line 131 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_member_function_pointer.hpp"

} 

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_undef.hpp"




























#line 135 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_member_function_pointer.hpp"

#line 137 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_member_function_pointer.hpp"
#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_member_pointer.hpp"







#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_member_pointer.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"













#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"



























#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"


































#line 50 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"






#line 57 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



#line 61 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



#line 65 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



































































































































#line 197 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"
#line 40 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_member_pointer.hpp"

namespace boost {



#line 46 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_member_pointer.hpp"



#line 50 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_member_pointer.hpp"
template< typename T > struct is_member_pointer : public ::boost::integral_constant<bool,::boost::is_member_function_pointer<T>::value> { public:   }; 
template< typename T, typename U > struct is_member_pointer< U T::* > : public ::boost::integral_constant<bool,true> { public:  };


template< typename T, typename U > struct is_member_pointer< U T::*const > : public ::boost::integral_constant<bool,true> { public:  };
template< typename T, typename U > struct is_member_pointer< U T::*volatile > : public ::boost::integral_constant<bool,true> { public:  };
template< typename T, typename U > struct is_member_pointer< U T::*const volatile > : public ::boost::integral_constant<bool,true> { public:  };
#line 58 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_member_pointer.hpp"




















































#line 111 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_member_pointer.hpp"

} 

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_undef.hpp"




























#line 115 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_member_pointer.hpp"

#line 117 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_member_pointer.hpp"
#line 25 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_pointer.hpp"




#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/remove_cv.hpp"













#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/broken_compiler_spec.hpp"























#line 25 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/broken_compiler_spec.hpp"



































































#line 94 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/broken_compiler_spec.hpp"





#line 100 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/broken_compiler_spec.hpp"

















#line 118 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/broken_compiler_spec.hpp"
#line 15 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/remove_cv.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/cv_traits_impl.hpp"






















namespace boost {
namespace detail {





#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/cv_traits_impl.hpp"

template <typename T> struct cv_traits_imp {};

template <typename T>
struct cv_traits_imp<T*>
{
    static const bool is_const = false;
    static const bool is_volatile = false;
    typedef T unqualified_type;
};

template <typename T>
struct cv_traits_imp<const T*>
{
    static const bool is_const = true;
    static const bool is_volatile = false;
    typedef T unqualified_type;
};

template <typename T>
struct cv_traits_imp<volatile T*>
{
    static const bool is_const = false;
    static const bool is_volatile = true;
    typedef T unqualified_type;
};

template <typename T>
struct cv_traits_imp<const volatile T*>
{
    static const bool is_const = true;
    static const bool is_volatile = true;
    typedef T unqualified_type;
};

























#line 91 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/cv_traits_impl.hpp"

} 
} 

#line 96 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/cv_traits_impl.hpp"

#line 98 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/cv_traits_impl.hpp"
#line 16 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/remove_cv.hpp"







#line 24 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/remove_cv.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/type_trait_def.hpp"













#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"



























#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/type_trait_def.hpp"





















































#line 27 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/remove_cv.hpp"

namespace boost {



namespace detail{

template <class T>
struct rvalue_ref_filter_rem_cv
{
   typedef typename boost::detail::cv_traits_imp<T*>::unqualified_type type;
};






template <class T>
struct rvalue_ref_filter_rem_cv<T&&>
{
   typedef T&& type;
};
#line 51 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/remove_cv.hpp"

}



template< typename T > struct remove_cv { public: typedef typename boost::detail::rvalue_ref_filter_rem_cv<T>::type type;  }; 
template< typename T > struct remove_cv<T&> { public: typedef T& type; };

template< typename T, std::size_t N > struct remove_cv<T const[N]> { public: typedef T type[N]; };
template< typename T, std::size_t N > struct remove_cv<T volatile[N]> { public: typedef T type[N]; };
template< typename T, std::size_t N > struct remove_cv<T const volatile[N]> { public: typedef T type[N]; };
#line 63 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/remove_cv.hpp"















#line 79 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/remove_cv.hpp"

} 

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/type_trait_undef.hpp"



















#line 83 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/remove_cv.hpp"

#line 85 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/remove_cv.hpp"
#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_pointer.hpp"
#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_pointer.hpp"










#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"













#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"



























#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"


































#line 50 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"






#line 57 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



#line 61 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



#line 65 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



































































































































#line 197 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"
#line 42 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_pointer.hpp"

namespace boost {



#line 48 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_pointer.hpp"

namespace detail {

template< typename T > struct is_pointer_helper
{
    static const bool value = false;
};








template< typename T > struct is_pointer_helper<T*> { static const bool value = true; };



template< typename T >
struct is_pointer_impl
{









#line 80 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_pointer.hpp"
    static const bool value = (::boost::type_traits::ice_and< ::boost::detail::is_pointer_helper<typename remove_cv<T>::type>::value , ::boost::type_traits::ice_not< ::boost::is_member_pointer<T>::value >::value >::value);
#line 88 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_pointer.hpp"
#line 89 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_pointer.hpp"
};

} 

template< typename T > struct is_pointer : public ::boost::integral_constant<bool,::boost::detail::is_pointer_impl<T>::value> { public:   }; 






#line 101 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_pointer.hpp"























































#line 157 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_pointer.hpp"

} 

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_undef.hpp"




























#line 161 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_pointer.hpp"

#line 163 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_pointer.hpp"
#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/call_traits.hpp"


namespace boost{

namespace detail{

template <typename T, bool small_>
struct ct_imp2
{
   typedef const T& param_type;
};

template <typename T>
struct ct_imp2<T, true>
{
   typedef const T param_type;
};

template <typename T, bool isp, bool b1, bool b2>
struct ct_imp
{
   typedef const T& param_type;
};

template <typename T, bool isp, bool b2>
struct ct_imp<T, isp, true, b2>
{
   typedef typename ct_imp2<T, sizeof(T) <= sizeof(void*)>::param_type param_type;
};

template <typename T, bool isp, bool b1>
struct ct_imp<T, isp, b1, true>
{
   typedef typename ct_imp2<T, sizeof(T) <= sizeof(void*)>::param_type param_type;
};

template <typename T, bool b1, bool b2>
struct ct_imp<T, true, b1, b2>
{
   typedef const T param_type;
};

}

template <typename T>
struct call_traits
{
public:
   typedef T value_type;
   typedef T& reference;
   typedef const T& const_reference;
   
   
   
   
   
   
   typedef typename boost::detail::ct_imp<
      T,
      ::boost::is_pointer<T>::value,
      ::boost::is_arithmetic<T>::value,
      ::boost::is_enum<T>::value
   >::param_type param_type;
};

template <typename T>
struct call_traits<T&>
{
   typedef T& value_type;
   typedef T& reference;
   typedef const T& const_reference;
   typedef T& param_type;  
};







































#line 142 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/call_traits.hpp"

template <typename T, std::size_t N>
struct call_traits<T [N]>
{
private:
   typedef T array_type[N];
public:
   
   typedef const T* value_type;
   typedef array_type& reference;
   typedef const array_type& const_reference;
   typedef const T* const param_type;
};

template <typename T, std::size_t N>
struct call_traits<const T [N]>
{
private:
   typedef const T array_type[N];
public:
   
   typedef const T* value_type;
   typedef array_type& reference;
   typedef const array_type& const_reference;
   typedef const T* const param_type;
};
#line 169 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/call_traits.hpp"

}

#line 173 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/call_traits.hpp"
#line 22 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/call_traits.hpp"
#line 23 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/call_traits.hpp"

#line 25 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/call_traits.hpp"
#line 27 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/class_properties.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/add_pointer.hpp"











#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/remove_reference.hpp"

















#line 19 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/remove_reference.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/type_trait_def.hpp"













#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"



























#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/type_trait_def.hpp"





















































#line 22 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/remove_reference.hpp"

namespace boost {



namespace detail{




template <class T>
struct remove_rvalue_ref
{
   typedef T type;
};

template <class T>
struct remove_rvalue_ref<T&&>
{
   typedef T type;
};
#line 44 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/remove_reference.hpp"

} 

template< typename T > struct remove_reference { public: typedef typename boost::detail::remove_rvalue_ref<T>::type type;  }; 
template< typename T > struct remove_reference<T&> { public: typedef T type; };









#line 59 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/remove_reference.hpp"





#line 65 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/remove_reference.hpp"

} 

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/type_trait_undef.hpp"



















#line 69 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/remove_reference.hpp"

#line 71 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/remove_reference.hpp"
#line 13 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/add_pointer.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/type_trait_def.hpp"













#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"



























#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/type_trait_def.hpp"





















































#line 16 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/add_pointer.hpp"

namespace boost {

namespace detail {

































#line 54 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/add_pointer.hpp"

template <typename T>
struct add_pointer_impl
{
    typedef typename remove_reference<T>::type no_ref_type;
    typedef no_ref_type* type;
};

#line 63 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/add_pointer.hpp"

} 

template< typename T > struct add_pointer { public: typedef typename boost::detail::add_pointer_impl<T>::type type;  }; 

} 

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/type_trait_undef.hpp"



















#line 71 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/add_pointer.hpp"

#line 73 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/add_pointer.hpp"
#line 28 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/class_properties.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/add_const.hpp"















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/type_trait_def.hpp"













#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"



























#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/type_trait_def.hpp"





















































#line 17 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/add_const.hpp"

namespace boost {










#pragma warning(push)
#pragma warning(disable:4181) 
#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/add_const.hpp"

template< typename T > struct add_const { public: typedef T const type;  }; 


#pragma warning(pop)
#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/add_const.hpp"


template< typename T > struct add_const<T&> { public: typedef T& type; };
#line 42 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/add_const.hpp"

} 

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/type_trait_undef.hpp"



















#line 46 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/add_const.hpp"

#line 48 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/add_const.hpp"
#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/class_properties.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/addressof.hpp"

















namespace boost
{

namespace detail
{

template<class T> struct addr_impl_ref
{
    T & v_;

    inline addr_impl_ref( T & v ): v_( v ) {}
    inline operator T& () const { return v_; }

private:
    addr_impl_ref & operator=(const addr_impl_ref &);
};

template<class T> struct addressof_impl
{
    static inline T * f( T & v, long )
    {
        return reinterpret_cast<T*>(
            &const_cast<char&>(reinterpret_cast<const volatile char &>(v)));
    }

    static inline T * f( T * v, int )
    {
        return v;
    }
};

} 

template<class T> T * addressof( T & v )
{




#line 58 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/addressof.hpp"

    return boost::detail::addressof_impl<T>::f( boost::detail::addr_impl_ref<T>( v ), 0 );

#line 62 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/addressof.hpp"
}



















#line 83 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/addressof.hpp"















#line 99 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/addressof.hpp"

} 

#line 103 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/addressof.hpp"
#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/class_properties.hpp"




#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/suppress_warnings.hpp"















#pragma warning(push)
#pragma warning(disable: 4511) 
#pragma warning(disable: 4512) 
#pragma warning(disable: 4100) 
#pragma warning(disable: 4996) 
#pragma warning(disable: 4355) 
#pragma warning(disable: 4706) 
#pragma warning(disable: 4251) 
#pragma warning(disable: 4127) 
#pragma warning(disable: 4290) 
#pragma warning(disable: 4180) 
#pragma warning(disable: 4275) 
#pragma warning(disable: 4267) 
#pragma warning(disable: 4511) 
#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/suppress_warnings.hpp"

#line 35 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/class_properties.hpp"



namespace boost {

namespace unit_test {





template<class PropertyType>
class class_property {
protected:
    typedef typename call_traits<PropertyType>::const_reference     read_access_t;
    typedef typename call_traits<PropertyType>::param_type          write_param_t;
    typedef typename add_pointer<typename add_const<PropertyType>::type>::type address_res_t;
public:
    
                    class_property() : value( PropertyType() ) {}
    explicit        class_property( write_param_t init_value )
    : value( init_value ) {}

    
    operator        read_access_t() const   { return value; }
    read_access_t   get() const             { return value; }
    bool            operator!() const       { return !value; }
    address_res_t   operator&() const       { return &value; }

    

protected:
#line 68 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/class_properties.hpp"
    PropertyType        value;
};











template<typename CharT1, typename Tr,class PropertyType>
inline std::basic_ostream<CharT1,Tr>&
operator<<( std::basic_ostream<CharT1,Tr>& os, class_property<PropertyType> const& p )

#line 86 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/class_properties.hpp"
{
    return os << p.get();
}

























template<class PropertyType> inline bool operator ==( PropertyType const& lhs, class_property<PropertyType> const& rhs ) { return lhs == rhs.get(); } template<class PropertyType> inline bool operator ==( class_property<PropertyType> const& lhs, PropertyType const& rhs ) { return lhs.get() == rhs; } template<class PropertyType> inline bool operator ==( class_property<PropertyType> const& lhs, class_property<PropertyType> const& rhs ) { return lhs.get() == rhs.get(); }
template<class PropertyType> inline bool operator !=( PropertyType const& lhs, class_property<PropertyType> const& rhs ) { return lhs != rhs.get(); } template<class PropertyType> inline bool operator !=( class_property<PropertyType> const& lhs, PropertyType const& rhs ) { return lhs.get() != rhs; } template<class PropertyType> inline bool operator !=( class_property<PropertyType> const& lhs, class_property<PropertyType> const& rhs ) { return lhs.get() != rhs.get(); }























#line 140 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/class_properties.hpp"





template<class PropertyType>
class readonly_property : public class_property<PropertyType> {
    typedef class_property<PropertyType>         base_prop;
    typedef typename base_prop::address_res_t    arrow_res_t;
protected:
    typedef typename base_prop::write_param_t    write_param_t;
public:
    
                    readonly_property() {}
    explicit        readonly_property( write_param_t init_value ) : base_prop( init_value ) {}

    
    arrow_res_t     operator->() const      { return boost::addressof( base_prop::value ); }
};







#line 167 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/class_properties.hpp"
















#line 184 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/class_properties.hpp"





template<class PropertyType>
class readwrite_property : public class_property<PropertyType> {
    typedef class_property<PropertyType>                base_prop;
    typedef typename add_pointer<PropertyType>::type    arrow_res_t;
    typedef typename base_prop::address_res_t           const_arrow_res_t;
    typedef typename base_prop::write_param_t           write_param_t;
public:
                    readwrite_property() : base_prop() {}
    explicit        readwrite_property( write_param_t init_value ) : base_prop( init_value ) {}

    
    void            set( write_param_t v )  { base_prop::value = v; }
    arrow_res_t     operator->()            { return boost::addressof( base_prop::value ); }
    const_arrow_res_t operator->() const    { return boost::addressof( base_prop::value ); }


    using           base_prop::value;
#line 207 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/class_properties.hpp"
};



} 

} 



#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/enable_warnings.hpp"















#pragma warning(default: 4511) 
#pragma warning(default: 4512) 
#pragma warning(default: 4100) 
#pragma warning(default: 4996) 
#pragma warning(default: 4355) 
#pragma warning(default: 4706) 
#pragma warning(default: 4251) 
#pragma warning(default: 4127) 
#pragma warning(default: 4290) 
#pragma warning(default: 4180) 
#pragma warning(default: 4275) 
#pragma warning(default: 4267) 
#pragma warning(default: 4511) 
#pragma warning(pop)
#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/enable_warnings.hpp"
#line 218 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/class_properties.hpp"



#line 222 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/class_properties.hpp"
#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/predicate_result.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/wrap_stringstream.hpp"

























#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\sstream"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\string"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\iterator"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\istream"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\ostream"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\ios"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocnum"

#pragma once







#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\streambuf"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xiosbase"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocale"

#pragma once





#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdexcept"

#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xstring"

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

namespace std {
 #pragma warning(disable: 4127)

  #pragma warning(disable: 4251)

template<class _Elem,
	class _Traits = char_traits<_Elem>,
	class _Ax = allocator<_Elem> >
	class basic_string;

  
  
  

		
template<class _Mystr>
	class _String_const_iterator
		: public _Iterator012<random_access_iterator_tag,
			typename _Mystr::value_type,
			typename _Mystr::difference_type,
			typename _Mystr::const_pointer,
			typename _Mystr::const_reference,
			_Iterator_base>
	{	
public:
	typedef _String_const_iterator<_Mystr> _Myiter;
	typedef random_access_iterator_tag iterator_category;

	typedef typename _Mystr::value_type value_type;
	typedef typename _Mystr::difference_type difference_type;
	typedef typename _Mystr::const_pointer pointer;
	typedef typename _Mystr::const_reference reference;

	_String_const_iterator()
		{	
		this->_Ptr = 0;
		}

	_String_const_iterator(pointer _Parg, const _Container_base *_Pstring)
		{	
		this->_Adopt(_Pstring);
		this->_Ptr = _Parg;
		}

	typedef pointer _Unchecked_type;

	_Myiter& _Rechecked(_Unchecked_type _Right)
		{	
		this->_Ptr = _Right;
		return (*this);
		}

	_Unchecked_type _Unchecked() const
		{	
		return (_Unchecked_type(this->_Ptr));
		}

	reference operator*() const
		{	
 










#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xstring"





#line 90 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xstring"

		;

		return (*this->_Ptr);
		}

	pointer operator->() const
		{	
		return (::std:: pointer_traits<pointer>::pointer_to(**this));
		}

	_Myiter& operator++()
		{	
 









#line 114 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xstring"




#line 119 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xstring"

		++this->_Ptr;
		return (*this);
		}

	_Myiter operator++(int)
		{	
		_Myiter _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Myiter& operator--()
		{	
 








#line 143 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xstring"



#line 147 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xstring"

		--this->_Ptr;
		return (*this);
		}

	_Myiter operator--(int)
		{	
		_Myiter _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	_Myiter& operator+=(difference_type _Off)
		{	
 










#line 173 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xstring"





#line 179 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xstring"

		_Ptr += _Off;
		return (*this);
		}

	_Myiter operator+(difference_type _Off) const
		{	
		_Myiter _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Myiter& operator-=(difference_type _Off)
		{	
		return (*this += -_Off);
		}

	_Myiter operator-(difference_type _Off) const
		{	
		_Myiter _Tmp = *this;
		return (_Tmp -= _Off);
		}

	difference_type operator-(const _Myiter& _Right) const
		{	
		_Compat(_Right);
		return (this->_Ptr - _Right._Ptr);
		}

	reference operator[](difference_type _Off) const
		{	
		return (*(*this + _Off));
		}

	bool operator==(const _Myiter& _Right) const
		{	
		_Compat(_Right);
		return (this->_Ptr == _Right._Ptr);
		}

	bool operator!=(const _Myiter& _Right) const
		{	
		return (!(*this == _Right));
		}

	bool operator<(const _Myiter& _Right) const
		{	
		_Compat(_Right);
		return (this->_Ptr < _Right._Ptr);
		}

	bool operator>(const _Myiter& _Right) const
		{	
		return (_Right < *this);
		}

	bool operator<=(const _Myiter& _Right) const
		{	
		return (!(_Right < *this));
		}

	bool operator>=(const _Myiter& _Right) const
		{	
		return (!(*this < _Right));
		}

 










#line 256 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xstring"






#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xstring"
	void _Compat(const _Myiter&) const
		{	
		}
 #line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xstring"

	pointer _Ptr;	
	};

template<class _Mystr> inline
	typename _String_const_iterator<_Mystr>::_Unchecked_type
		_Unchecked(_String_const_iterator<_Mystr> _Iter)
	{	
	return (_Iter._Unchecked());
	}

template<class _Mystr> inline
	_String_const_iterator<_Mystr>
		_Rechecked(_String_const_iterator<_Mystr>& _Iter,
			typename _String_const_iterator<_Mystr>
				::_Unchecked_type _Right)
	{	
	return (_Iter._Rechecked(_Right));
	}

template<class _Mystr> inline
	_String_const_iterator<_Mystr> operator+(
		typename _String_const_iterator<_Mystr>
			::difference_type _Off,
		_String_const_iterator<_Mystr> _Next)
	{	
	return (_Next += _Off);
	}

		
template<class _Mystr>
	class _String_iterator
		: public _String_const_iterator<_Mystr>
	{	
public:
	typedef _String_iterator<_Mystr> _Myiter;
	typedef _String_const_iterator<_Mystr> _Mybase;
	typedef random_access_iterator_tag iterator_category;

	typedef typename _Mystr::value_type value_type;
	typedef typename _Mystr::difference_type difference_type;
	typedef typename _Mystr::pointer pointer;
	typedef typename _Mystr::reference reference;

	_String_iterator()
		{	
		}

	_String_iterator(pointer _Parg, const _Container_base *_Pstring)
		: _Mybase(_Parg, _Pstring)
		{	
		}

	typedef pointer _Unchecked_type;

	_Myiter& _Rechecked(_Unchecked_type _Right)
		{	
		this->_Ptr = _Right;
		return (*this);
		}

	_Unchecked_type _Unchecked() const
		{	
		return (_Unchecked_type(this->_Ptr));
		}

	reference operator*() const
		{	
		return ((reference)**(_Mybase *)this);
		}

	pointer operator->() const
		{	
		return (::std:: pointer_traits<pointer>::pointer_to(**this));
		}

	_Myiter& operator++()
		{	
		++*(_Mybase *)this;
		return (*this);
		}

	_Myiter operator++(int)
		{	
		_Myiter _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Myiter& operator--()
		{	
		--*(_Mybase *)this;
		return (*this);
		}

	_Myiter operator--(int)
		{	
		_Myiter _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	_Myiter& operator+=(difference_type _Off)
		{	
		*(_Mybase *)this += _Off;
		return (*this);
		}

	_Myiter operator+(difference_type _Off) const
		{	
		_Myiter _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Myiter& operator-=(difference_type _Off)
		{	
		return (*this += -_Off);
		}

	_Myiter operator-(difference_type _Off) const
		{	
		_Myiter _Tmp = *this;
		return (_Tmp -= _Off);
		}

	difference_type operator-(const _Mybase& _Right) const
		{	
		return ((_Mybase)*this - _Right);
		}

	reference operator[](difference_type _Off) const
		{	
		return (*(*this + _Off));
		}
	};

template<class _Mystr> inline
	typename _String_iterator<_Mystr>::_Unchecked_type
		_Unchecked(_String_iterator<_Mystr> _Iter)
	{	
	return (_Iter._Unchecked());
	}

template<class _Mystr> inline
	_String_iterator<_Mystr>
		_Rechecked(_String_iterator<_Mystr>& _Iter,
			typename _String_iterator<_Mystr>
				::_Unchecked_type _Right)
	{	
	return (_Iter._Rechecked(_Right));
	}

template<class _Mystr> inline
	_String_iterator<_Mystr> operator+(
		typename _String_iterator<_Mystr>
			::difference_type _Off,
		_String_iterator<_Mystr> _Next)
	{	
	return (_Next += _Off);
	}

		
template<class _Value_type,
	class _Size_type,
	class _Difference_type,
	class _Pointer,
	class _Const_pointer,
	class _Reference,
	class _Const_reference>
	struct _String_iter_types
	{	
	typedef _Value_type value_type;
	typedef _Size_type size_type;
	typedef _Difference_type difference_type;
	typedef _Pointer pointer;
	typedef _Const_pointer const_pointer;
	typedef _Reference reference;
	typedef _Const_reference const_reference;
	};

template<class _Ty,
	class _Alloc0>
	struct _String_base_types
	{	
	typedef _Alloc0 _Alloc;
	typedef _String_base_types<_Ty, _Alloc> _Myt;

	typedef _Wrap_alloc<_Alloc> _Alty0;
	typedef typename _Alty0::template rebind<_Ty>::other _Alty;


	typedef typename _Alty::pointer _Tptr;
	typedef typename _Alty::template rebind<_Tptr>::other _Alpty;

	typedef typename _If<_Is_simple_alloc<_Alty>::value,
		_Simple_types<typename _Alty::value_type>,
		_String_iter_types<typename _Alty::value_type,
			typename _Alty::size_type,
			typename _Alty::difference_type,
			typename _Alty::pointer,
			typename _Alty::const_pointer,
			typename _Alty::reference,
			typename _Alty::const_reference> >::type
		_Val_types;
	};

		
template<class _Val_types>
	class _String_val
		: public _Container_base
	{	
public:
	typedef _String_val<_Val_types> _Myt;

	typedef typename _Val_types::value_type value_type;
	typedef typename _Val_types::size_type size_type;
	typedef typename _Val_types::difference_type difference_type;
	typedef typename _Val_types::pointer pointer;
	typedef typename _Val_types::const_pointer const_pointer;
	typedef typename _Val_types::reference reference;
	typedef typename _Val_types::const_reference const_reference;

	typedef _String_iterator<_Myt> iterator;
	typedef _String_const_iterator<_Myt> const_iterator;

	_String_val()
		{	
		_Mysize = 0;
		_Myres = 0;
		}

	enum	{	
		_BUF_SIZE = 16 / sizeof (value_type) < 1 ? 1
			: 16 / sizeof (value_type)};
	enum	{	
		_ALLOC_MASK = sizeof (value_type) <= 1 ? 15
			: sizeof (value_type) <= 2 ? 7
			: sizeof (value_type) <= 4 ? 3
			: sizeof (value_type) <= 8 ? 1 : 0};

	value_type *_Myptr()
		{	
		return (this->_BUF_SIZE <= this->_Myres
			? ::std:: addressof(*this->_Bx._Ptr)
			: this->_Bx._Buf);
		}

	const value_type *_Myptr() const
		{	
		return (this->_BUF_SIZE <= this->_Myres
			? ::std:: addressof(*this->_Bx._Ptr)
			: this->_Bx._Buf);
		}

	union _Bxty
		{	
		value_type _Buf[_BUF_SIZE];
		pointer _Ptr;
		char _Alias[_BUF_SIZE];	
		} _Bx;

	size_type _Mysize;	
	size_type _Myres;	
	};

		
template<bool _Al_has_storage,
	class _Alloc_types>
	class _String_alloc
		: public _String_val<typename _Alloc_types::_Val_types>
	{	
public:
	typename _Alloc_types::_Alty _Alval;	

	typedef _String_alloc<_Al_has_storage, _Alloc_types> _Myt;
	typedef typename _Alloc_types::_Alloc _Alloc;
	typedef typename _Alloc_types::_Alty _Alty;

 
	_String_alloc(const _Alloc& _Al = _Alloc())
		: _Alval(_Al)
		{	
		}

	void _Change_alloc(const _Alty& _Al)
		{	
		this->_Alval = _Al;
		}

	void _Swap_alloc(_Myt& _Right)
		{	
		_Swap_adl(this->_Alval, _Right._Alval);
		}

 










































#line 607 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xstring"

	_Alty& _Getal()
		{	
		return (this->_Alval);
		}

	const _Alty& _Getal() const
		{	
		return (this->_Alval);
		}
	};

template<class _Alloc_types>
	class _String_alloc<false, _Alloc_types>
		: public _String_val<typename _Alloc_types::_Val_types>
	{	
public:
	typedef _String_alloc<false, _Alloc_types> _Myt;
	typedef typename _Alloc_types::_Alloc _Alloc;

	typedef typename _Alloc_types::_Alty _Alty;

 
	_String_alloc(const _Alloc& = _Alloc())
		{	
		}

	void _Change_alloc(const _Alty&)
		{	
		}

	void _Swap_alloc(_Myt&)
		{	
		}

 





































#line 681 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xstring"

	_Alty _Getal() const
		{	
		return (_Alty());
		}
	};

		
template<class _Elem,
	class _Traits,
	class _Alloc>
	class basic_string
		: public _String_alloc<!is_empty<_Alloc>::value,
			_String_base_types<_Elem, _Alloc> >
	{	
public:
	typedef basic_string<_Elem, _Traits, _Alloc> _Myt;
	typedef _String_alloc<!is_empty<_Alloc>::value,
		_String_base_types<_Elem, _Alloc> > _Mybase;
	typedef _Traits traits_type;
	typedef _Alloc allocator_type;

	typedef typename _Mybase::_Alty _Alty;

	typedef typename _Mybase::value_type value_type;
	typedef typename _Mybase::size_type size_type;
	typedef typename _Mybase::difference_type difference_type;
	typedef typename _Mybase::pointer pointer;
	typedef typename _Mybase::const_pointer const_pointer;
	typedef typename _Mybase::reference reference;
	typedef typename _Mybase::const_reference const_reference;

	typedef typename _Mybase::iterator iterator;
	typedef typename _Mybase::const_iterator const_iterator;

	typedef ::std:: reverse_iterator<iterator> reverse_iterator;
	typedef ::std:: reverse_iterator<const_iterator> const_reverse_iterator;

	basic_string(const _Myt& _Right)

		: _Mybase(_Right._Getal().select_on_container_copy_construction())


		{	
		_Tidy();
		assign(_Right, 0, npos);
		}

	basic_string(const _Myt& _Right, const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		_Tidy();
		assign(_Right, 0, npos);
		}

	basic_string()
		: _Mybase()
		{	
		_Tidy();
		}

	explicit basic_string(const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		_Tidy();
		}

	basic_string(const _Myt& _Right, size_type _Roff,
		size_type _Count = npos)
		: _Mybase(_Right._Getal())
		{	
		_Tidy();
		assign(_Right, _Roff, _Count);
		}

	basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
		const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		_Tidy();
		assign(_Right, _Roff, _Count);
		}

	basic_string(const _Elem *_Ptr, size_type _Count)
		: _Mybase()
		{	
		_Tidy();
		assign(_Ptr, _Count);
		}

	basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		_Tidy();
		assign(_Ptr, _Count);
		}

	basic_string(const _Elem *_Ptr)
		: _Mybase()
		{	
		_Tidy();
		assign(_Ptr);
		}

	basic_string(const _Elem *_Ptr, const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		_Tidy();
		assign(_Ptr);
		}

	basic_string(size_type _Count, _Elem _Ch)
		: _Mybase()
		{	
		_Tidy();
		assign(_Count, _Ch);
		}

	basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		_Tidy();
		assign(_Count, _Ch);
		}

	template<class _Iter,
		class = typename enable_if<_Is_iterator<_Iter>::value,
			void>::type>
		basic_string(_Iter _First, _Iter _Last)
		: _Mybase()
		{	
		_Tidy();
		_Construct(_First, _Last, _Iter_cat(_First));
		}

	template<class _Iter,
		class = typename enable_if<_Is_iterator<_Iter>::value,
			void>::type>
		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		_Tidy();
		_Construct(_First, _Last, _Iter_cat(_First));
		}

	template<class _Iter>
		void _Construct(_Iter _First,
			_Iter _Last, input_iterator_tag)
		{	
		try {
		for (; _First != _Last; ++_First)
			append((size_type)1, (_Elem)*_First);
		} catch (...) {
		_Tidy(true);
		throw;
		}
		}

	template<class _Iter>
		void _Construct(_Iter _First,
			_Iter _Last, forward_iterator_tag)
		{	
		;
		size_type _Count = 0;
		_Distance(_First, _Last, _Count);
		reserve(_Count);

		try {
		for (; _First != _Last; ++_First)
			append((size_type)1, (_Elem)*_First);
		} catch (...) {
		_Tidy(true);
		throw;
		}
		}

	basic_string(const_pointer _First, const_pointer _Last)
		: _Mybase()
		{	
		;
		_Tidy();
		if (_First != _Last)
			assign(&*_First, _Last - _First);
		}

	basic_string(const_pointer _First, const_pointer _Last,
		const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		;
		_Tidy();
		if (_First != _Last)
			assign(&*_First, _Last - _First);
		}

	basic_string(const_iterator _First, const_iterator _Last)
		: _Mybase()
		{	
		;
		_Tidy();
		if (_First != _Last)
			assign(&*_First, _Last - _First);
		}

	basic_string(_Myt&& _Right) throw ()
		: _Mybase(_Right._Getal())
		{	
		_Tidy();
		_Assign_rv(::std:: forward<_Myt>(_Right));
		}

	basic_string(_Myt&& _Right, const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		if (this->_Getal() != _Right._Getal())
			assign(_Right.begin(), _Right.end());
		else
			_Assign_rv(::std:: forward<_Myt>(_Right));
		}

	_Myt& operator=(_Myt&& _Right) throw ()
		{	
		if (this != &_Right)
			{	
			_Tidy(true);

			if (_Alty::propagate_on_container_move_assignment::value
				&& this->_Getal() != _Right._Getal())
				this->_Change_alloc(_Right._Getal());

			if (this->_Getal() != _Right._Getal())
				assign(_Right.begin(), _Right.end());
			else
				_Assign_rv(::std:: forward<_Myt>(_Right));
			}
		return (*this);
		}

	_Myt& assign(_Myt&& _Right) throw ()
		{	
		if (this == &_Right)
			;
		else if (get_allocator() != _Right.get_allocator()
			&& this->_BUF_SIZE <= _Right._Myres)
			*this = _Right;
		else
			{	
			_Tidy(true);
			_Assign_rv(::std:: forward<_Myt>(_Right));
			}
		return (*this);
		}

	void _Assign_rv(_Myt&& _Right)
		{	
		if (_Right._Myres < this->_BUF_SIZE)
			_Traits::move(this->_Bx._Buf, _Right._Bx._Buf,
				_Right._Mysize + 1);
		else
			{	
			this->_Getal().construct(&this->_Bx._Ptr, _Right._Bx._Ptr);
			_Right._Bx._Ptr = pointer();
			}
		this->_Mysize = _Right._Mysize;
		this->_Myres = _Right._Myres;
		_Right._Tidy();
		}

	basic_string(::std:: initializer_list<_Elem> _Ilist,
		const _Alloc& _Al = allocator_type())
		: _Mybase(_Al)
		{	
		_Tidy();
		assign(_Ilist.begin(), _Ilist.end());
		}

	_Myt& operator=(::std:: initializer_list<_Elem> _Ilist)
		{	
		return (assign(_Ilist.begin(), _Ilist.end()));
		}

	_Myt& operator+=(::std:: initializer_list<_Elem> _Ilist)
		{	
		return (append(_Ilist.begin(), _Ilist.end()));
		}

	_Myt& assign(::std:: initializer_list<_Elem> _Ilist)
		{	
		return (assign(_Ilist.begin(), _Ilist.end()));
		}

	_Myt& append(::std:: initializer_list<_Elem> _Ilist)
		{	
		return (append(_Ilist.begin(), _Ilist.end()));
		}

	iterator insert(const_iterator _Where,
		::std:: initializer_list<_Elem> _Ilist)
		{	
		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
		}

	_Myt& replace(const_iterator _First, const_iterator _Last,
		::std:: initializer_list<_Elem> _Ilist)
		{	
		return (replace(_First, _Last, _Ilist.begin(), _Ilist.end()));
		}

	~basic_string() throw ()
		{	
		_Tidy(true);
		}

	 static const size_type npos;	

	_Myt& operator=(const _Myt& _Right)
		{	
		if (this != &_Right)
			{	
			if (this->_Getal() != _Right._Getal()
				&& _Alty::propagate_on_container_copy_assignment::value)
				{	
				_Tidy(true);
				this->_Change_alloc(_Right._Getal());
				}

			assign(_Right);
			}
		return (*this);
		}

	_Myt& operator=(const _Elem *_Ptr)
		{	
		return (assign(_Ptr));
		}

	_Myt& operator=(_Elem _Ch)
		{	
		return (assign(1, _Ch));
		}

	_Myt& operator+=(const _Myt& _Right)
		{	
		return (append(_Right));
		}

	_Myt& operator+=(const _Elem *_Ptr)
		{	
		return (append(_Ptr));
		}

	_Myt& operator+=(_Elem _Ch)
		{	
		return (append((size_type)1, _Ch));
		}

	_Myt& append(const _Myt& _Right)
		{	
		return (append(_Right, 0, npos));
		}

	_Myt& append(const _Myt& _Right,
		size_type _Roff, size_type _Count)
		{	
		if (_Right.size() < _Roff)
			_Xran();	
		size_type _Num = _Right.size() - _Roff;
		if (_Num < _Count)
			_Count = _Num;	
		if (npos - this->_Mysize <= _Count)
			_Xlen();	

		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
			{	
			_Traits::copy(this->_Myptr() + this->_Mysize,
				_Right._Myptr() + _Roff, _Count);
			_Eos(_Num);
			}
		return (*this);
		}

	_Myt& append(const _Elem *_Ptr, size_type _Count)
		{	
 


#line 1068 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xstring"

		if (_Inside(_Ptr))
			return (append(*this,
				_Ptr - this->_Myptr(), _Count));	
		if (npos - this->_Mysize <= _Count)
			_Xlen();	

		size_type _Num;
		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
			{	
			_Traits::copy(this->_Myptr() + this->_Mysize, _Ptr, _Count);
			_Eos(_Num);
			}
		return (*this);
		}

	_Myt& append(const _Elem *_Ptr)
		{	
		;
		return (append(_Ptr, _Traits::length(_Ptr)));
		}

	_Myt& append(size_type _Count, _Elem _Ch)
		{	
		if (npos - this->_Mysize <= _Count)
			_Xlen();	

		size_type _Num;
		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
			{	
			_Chassign(this->_Mysize, _Count, _Ch);
			_Eos(_Num);
			}
		return (*this);
		}

	template<class _Iter>
		typename enable_if<_Is_iterator<_Iter>::value,
			_Myt&>::type
		append(_Iter _First, _Iter _Last)
		{	
		return (replace(end(), end(), _First, _Last));
		}

	_Myt& append(const_pointer _First, const_pointer _Last)
		{	
		return (replace(end(), end(), _First, _Last));
		}

	_Myt& append(const_iterator _First, const_iterator _Last)
		{	
		return (replace(end(), end(), _First, _Last));
		}

	_Myt& assign(const _Myt& _Right)
		{	
		return (assign(_Right, 0, npos));
		}

	_Myt& assign(const _Myt& _Right,
		size_type _Roff, size_type _Count)
		{	
		if (_Right.size() < _Roff)
			_Xran();	
		size_type _Num = _Right.size() - _Roff;
		if (_Count < _Num)
			_Num = _Count;	

		if (this == &_Right)
			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	
		else if (_Grow(_Num))
			{	
			_Traits::copy(this->_Myptr(),
				_Right._Myptr() + _Roff, _Num);
			_Eos(_Num);
			}
		return (*this);
		}

	_Myt& assign(const _Elem *_Ptr, size_type _Count)
		{	
 


#line 1153 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xstring"

		if (_Inside(_Ptr))
			return (assign(*this,
				_Ptr - this->_Myptr(), _Count));	

		if (_Grow(_Count))
			{	
			_Traits::copy(this->_Myptr(), _Ptr, _Count);
			_Eos(_Count);
			}
		return (*this);
		}

	_Myt& assign(const _Elem *_Ptr)
		{	
		;
		return (assign(_Ptr, _Traits::length(_Ptr)));
		}

	_Myt& assign(size_type _Count, _Elem _Ch)
		{	
		if (_Count == npos)
			_Xlen();	

		if (_Grow(_Count))
			{	
			_Chassign(0, _Count, _Ch);
			_Eos(_Count);
			}
		return (*this);
		}

	template<class _Iter>
		typename enable_if<_Is_iterator<_Iter>::value,
			_Myt&>::type
		assign(_Iter _First, _Iter _Last)
		{	
		return (replace(begin(), end(), _First, _Last));
		}

	_Myt& assign(const_pointer _First, const_pointer _Last)
		{	
		return (replace(begin(), end(), _First, _Last));
		}

	_Myt& assign(const_iterator _First, const_iterator _Last)
		{	
		return (replace(begin(), end(), _First, _Last));
		}

	_Myt& insert(size_type _Off, const _Myt& _Right)
		{	
		return (insert(_Off, _Right, 0, npos));
		}

	_Myt& insert(size_type _Off,
		const _Myt& _Right, size_type _Roff, size_type _Count)
		{	
		if (this->_Mysize < _Off || _Right.size() < _Roff)
			_Xran();	
		size_type _Num = _Right.size() - _Roff;
		if (_Num < _Count)
			_Count = _Num;	
		if (npos - this->_Mysize <= _Count)
			_Xlen();	

		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
			{	
			_Traits::move(this->_Myptr() + _Off + _Count,
				this->_Myptr() + _Off,
				this->_Mysize - _Off);	
			if (this == &_Right)
				_Traits::move(this->_Myptr() + _Off,
					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
						_Count);	
			else
				_Traits::copy(this->_Myptr() + _Off,
					_Right._Myptr() + _Roff, _Count);	
			_Eos(_Num);
			}
		return (*this);
		}

	_Myt& insert(size_type _Off,
		const _Elem *_Ptr, size_type _Count)
		{	
 


#line 1243 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xstring"

		if (_Inside(_Ptr))
			return (insert(_Off, *this,
				_Ptr - this->_Myptr(), _Count));	
		if (this->_Mysize < _Off)
			_Xran();	
		if (npos - this->_Mysize <= _Count)
			_Xlen();	
		size_type _Num;
		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
			{	
			_Traits::move(this->_Myptr() + _Off + _Count,
				this->_Myptr() + _Off,
				this->_Mysize - _Off);	
			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	
			_Eos(_Num);
			}
		return (*this);
		}

	_Myt& insert(size_type _Off, const _Elem *_Ptr)
		{	
		;
		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
		}

	_Myt& insert(size_type _Off,
		size_type _Count, _Elem _Ch)
		{	
		if (this->_Mysize < _Off)
			_Xran();	
		if (npos - this->_Mysize <= _Count)
			_Xlen();	
		size_type _Num;
		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
			{	
			_Traits::move(this->_Myptr() + _Off + _Count,
				this->_Myptr() + _Off,
				this->_Mysize - _Off);	
			_Chassign(_Off, _Count, _Ch);	
			_Eos(_Num);
			}
		return (*this);
		}

	iterator insert(const_iterator _Where)
		{	
		return (insert(_Where, _Elem()));
		}

	iterator insert(const_iterator _Where, _Elem _Ch)
		{	
		size_type _Off = _Pdif(_Where, begin());
		insert(_Off, 1, _Ch);
		return (begin() + _Off);
		}

	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
		{	
		size_type _Off = _Pdif(_Where, begin());
		insert(_Off, _Count, _Ch);
		return (begin() + _Off);
		}

	template<class _Iter>
		typename enable_if<_Is_iterator<_Iter>::value,
			iterator>::type
		insert(const_iterator _Where, _Iter _First, _Iter _Last)
		{	
		size_type _Off = _Pdif(_Where, begin());
		replace(_Where, _Where, _First, _Last);
		return (begin() + _Off);
		}

	iterator insert(const_iterator _Where,
		const_pointer _First, const_pointer _Last)
		{	
		size_type _Off = _Pdif(_Where, begin());
		replace(_Where, _Where, _First, _Last);
		return (begin() + _Off);
		}

	iterator insert(const_iterator _Where,
		const_iterator _First, const_iterator _Last)
		{	
		size_type _Off = _Pdif(_Where, begin());
		replace(_Where, _Where, _First, _Last);
		return (begin() + _Off);
		}

	_Myt& erase(size_type _Off = 0)
		{	
		if (this->_Mysize < _Off)
			_Xran();	
		_Eos(_Off);
		return (*this);
		}

	_Myt& erase(size_type _Off, size_type _Count)
		{	
		if (this->_Mysize < _Off)
			_Xran();	
		if (this->_Mysize - _Off <= _Count)
			_Eos(_Off);	
		else if (0 < _Count)
			{	
			value_type *_Ptr = this->_Myptr() + _Off;
			size_type _Newsize = this->_Mysize - _Count;
			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
			_Eos(_Newsize);
			}
		return (*this);
		}

	iterator erase(const_iterator _Where)
		{	
		size_type _Count = _Pdif(_Where, begin());
		erase(_Count, 1);
		return (iterator(this->_Myptr() + _Count, this));
		}

	iterator erase(const_iterator _First, const_iterator _Last)
		{	
		;
		size_type _Count = _Pdif(_First, begin());
		erase(_Count, _Pdif(_Last, _First));
		return (iterator(this->_Myptr() + _Count, this));
		}

	void clear() throw ()
		{	
		_Eos(0);
		}

	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
		{	
		return (replace(_Off, _N0, _Right, 0, npos));
		}

	_Myt& replace(size_type _Off,
		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
		{	
		if (this->_Mysize < _Off || _Right.size() < _Roff)
			_Xran();	
		if (this->_Mysize - _Off < _N0)
			_N0 = this->_Mysize - _Off;	
		size_type _Num = _Right.size() - _Roff;
		if (_Num < _Count)
			_Count = _Num;	
		if (npos - _Count <= this->_Mysize - _N0)
			_Xlen();	

		size_type _Nm = this->_Mysize - _N0 - _Off;	
		size_type _Newsize = this->_Mysize + _Count - _N0;
		if (this->_Mysize < _Newsize)
			_Grow(_Newsize);

		if (this != &_Right)
			{	
			_Traits::move(this->_Myptr() + _Off + _Count,
				this->_Myptr() + _Off + _N0, _Nm);	
			_Traits::copy(this->_Myptr() + _Off,
				_Right._Myptr() + _Roff, _Count);	
			}
		else if (_Count <= _N0)
			{	
			_Traits::move(this->_Myptr() + _Off,
				this->_Myptr() + _Roff, _Count);	
			_Traits::move(this->_Myptr() + _Off + _Count,
				this->_Myptr() + _Off + _N0, _Nm);	
			}
		else if (_Roff <= _Off)
			{	
			_Traits::move(this->_Myptr() + _Off + _Count,
				this->_Myptr() + _Off + _N0, _Nm);	
			_Traits::move(this->_Myptr() + _Off,
				this->_Myptr() + _Roff, _Count);	
			}
		else if (_Off + _N0 <= _Roff)
			{	
			_Traits::move(this->_Myptr() + _Off + _Count,
				this->_Myptr() + _Off + _N0, _Nm);	
			_Traits::move(this->_Myptr() + _Off,
				this->_Myptr() + (_Roff + _Count - _N0),
				_Count);	
			}
		else
			{	
			_Traits::move(this->_Myptr() + _Off,
				this->_Myptr() + _Roff, _N0);	
			_Traits::move(this->_Myptr() + _Off + _Count,
				this->_Myptr() + _Off + _N0, _Nm);	
			_Traits::move(this->_Myptr() + _Off + _N0,
				this->_Myptr() + _Roff + _Count,
				_Count - _N0);	
			}

		_Eos(_Newsize);
		return (*this);
		}

	_Myt& replace(size_type _Off,
		size_type _N0, const _Elem *_Ptr, size_type _Count)
		{	
 


#line 1451 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xstring"

		if (_Inside(_Ptr))
			return (replace(_Off, _N0, *this,
				_Ptr - this->_Myptr(),
				_Count));	
		if (this->_Mysize < _Off)
			_Xran();	
		if (this->_Mysize - _Off < _N0)
			_N0 = this->_Mysize - _Off;	
		if (npos - _Count <= this->_Mysize - _N0)
			_Xlen();	
		size_type _Nm = this->_Mysize - _N0 - _Off;

		if (_Count < _N0)
			_Traits::move(this->_Myptr() + _Off + _Count,
				this->_Myptr() + _Off + _N0,
				_Nm);	
		size_type _Num;
		if ((0 < _Count || 0 < _N0)
			&& _Grow(_Num = this->_Mysize + _Count - _N0))
			{	
			if (_N0 < _Count)
				_Traits::move(this->_Myptr() + _Off + _Count,
					this->_Myptr() + _Off + _N0, _Nm);	
			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	
			_Eos(_Num);
			}
		return (*this);
		}

	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
		{	
		;
		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
		}

	_Myt& replace(size_type _Off,
		size_type _N0, size_type _Count, _Elem _Ch)
		{	
		if (this->_Mysize < _Off)
			_Xran();	
		if (this->_Mysize - _Off < _N0)
			_N0 = this->_Mysize - _Off;	
		if (npos - _Count <= this->_Mysize - _N0)
			_Xlen();	
		size_type _Nm = this->_Mysize - _N0 - _Off;

		if (_Count < _N0)
			_Traits::move(this->_Myptr() + _Off + _Count,
				this->_Myptr() + _Off + _N0,
				_Nm);	
		size_type _Num;
		if ((0 < _Count || 0 < _N0)
			&& _Grow(_Num = this->_Mysize + _Count - _N0))
			{	
			if (_N0 < _Count)
				_Traits::move(this->_Myptr() + _Off + _Count,
					this->_Myptr() + _Off + _N0, _Nm);	
			_Chassign(_Off, _Count, _Ch);	
			_Eos(_Num);
			}
		return (*this);
		}

	_Myt& replace(const_iterator _First, const_iterator _Last,
		const _Myt& _Right)
		{	
		return (replace(
			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
		}

	_Myt& replace(const_iterator _First, const_iterator _Last,
		const _Elem *_Ptr, size_type _Count)
		{	
		return (replace(
			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
		}

	_Myt& replace(const_iterator _First, const_iterator _Last,
		const _Elem *_Ptr)
		{	
		return (replace(
			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
		}

	_Myt& replace(const_iterator _First, const_iterator _Last,
		size_type _Count, _Elem _Ch)
		{	
		return (replace(
			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
		}

	template<class _Iter>
		typename enable_if<_Is_iterator<_Iter>::value,
			_Myt&>::type
		replace(const_iterator _First, const_iterator _Last,
			_Iter _First2, _Iter _Last2)
		{	
		_Myt _Right(_First2, _Last2);
		replace(_First, _Last, _Right);
		return (*this);
		}

	_Myt& replace(const_iterator _First, const_iterator _Last,
		const_pointer _First2, const_pointer _Last2)
		{	
		if (_First2 == _Last2)
			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
		else
			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
				&*_First2, _Last2 - _First2);
		return (*this);
		}

	_Myt& replace(const_iterator _First, const_iterator _Last,
		pointer _First2, pointer _Last2)
		{	
		if (_First2 == _Last2)
			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
		else
			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
				&*_First2, _Last2 - _First2);
		return (*this);
		}

	_Myt& replace(const_iterator _First, const_iterator _Last,
		const_iterator _First2, const_iterator _Last2)
		{	
		if (_First2 == _Last2)
			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
		else
			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
				&*_First2, _Last2 - _First2);
		return (*this);
		}

	_Myt& replace(const_iterator _First, const_iterator _Last,
		iterator _First2, iterator _Last2)
		{	
		if (_First2 == _Last2)
			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
		else
			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
				&*_First2, _Last2 - _First2);
		return (*this);
		}

	iterator begin() throw ()
		{	
		return (iterator(this->_Myptr(), this));
		}

	const_iterator begin() const throw ()
		{	
		return (const_iterator(this->_Myptr(), this));
		}

	iterator end() throw ()
		{	
		return (iterator(this->_Myptr() + this->_Mysize, this));
		}

	const_iterator end() const throw ()
		{	
		return (const_iterator(this->_Myptr() + this->_Mysize, this));
		}

	reverse_iterator rbegin() throw ()
		{	
		return (reverse_iterator(end()));
		}

	const_reverse_iterator rbegin() const throw ()
		{	
		return (const_reverse_iterator(end()));
		}

	reverse_iterator rend() throw ()
		{	
		return (reverse_iterator(begin()));
		}

	const_reverse_iterator rend() const throw ()
		{	
		return (const_reverse_iterator(begin()));
		}

	const_iterator cbegin() const throw ()
		{	
		return (((const _Myt *)this)->begin());
		}

	const_iterator cend() const throw ()
		{	
		return (((const _Myt *)this)->end());
		}

	const_reverse_iterator crbegin() const throw ()
		{	
		return (((const _Myt *)this)->rbegin());
		}

	const_reverse_iterator crend() const throw ()
		{	
		return (((const _Myt *)this)->rend());
		}

	void shrink_to_fit()
		{	
		if ((size() | this->_ALLOC_MASK) < capacity())
			{	
			_Myt _Tmp(*this);
			swap(_Tmp);
			}
		}

	reference at(size_type _Off)
		{	
		if (this->_Mysize <= _Off)
			_Xran();	
		return (this->_Myptr()[_Off]);
		}

	const_reference at(size_type _Off) const
		{	
		if (this->_Mysize <= _Off)
			_Xran();	
		return (this->_Myptr()[_Off]);
		}

	reference operator[](size_type _Off)
		{	
 



#line 1688 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xstring"

#line 1690 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xstring"

		return (this->_Myptr()[_Off]);
		}

	const_reference operator[](size_type _Off) const
		{	
 



#line 1701 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xstring"

#line 1703 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xstring"

		return (this->_Myptr()[_Off]);
		}

	void push_back(_Elem _Ch)
		{	
		insert(end(), _Ch);
		}

	void pop_back()
		{	
		erase(this->_Mysize - 1);	
		}

	reference front()
		{	
		return (*begin());
		}

	const_reference front() const
		{	
		return (*begin());
		}

	reference back()
		{	
		return (*(end() - 1));
		}

	const_reference back() const
		{	
		return (*(end() - 1));
		}

	const _Elem *c_str() const throw ()
		{	
		return (this->_Myptr());
		}

	const _Elem *data() const throw ()
		{	
		return (c_str());
		}

	size_type length() const throw ()
		{	
		return (this->_Mysize);
		}

	size_type size() const throw ()
		{	
		return (this->_Mysize);
		}

	size_type max_size() const throw ()
		{	
		size_type _Num = this->_Getal().max_size();
		return (_Num <= 1 ? 1 : _Num - 1);
		}

	void resize(size_type _Newsize)
		{	
		resize(_Newsize, _Elem());
		}

	void resize(size_type _Newsize, _Elem _Ch)
		{	
		if (_Newsize <= this->_Mysize)
			_Eos(_Newsize);
		else
			append(_Newsize - this->_Mysize, _Ch);
		}

	size_type capacity() const throw ()
		{	
		return (this->_Myres);
		}

	void reserve(size_type _Newcap = 0)
		{	
		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
			{	
			size_type _Size = this->_Mysize;
			if (_Grow(_Newcap, true))
				_Eos(_Size);
			}
		}

	bool empty() const throw ()
		{	
		return (this->_Mysize == 0);
		}

	

	size_type copy(_Elem *_Ptr,
		size_type _Count, size_type _Off = 0) const
		{	
 


#line 1805 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xstring"

		if (this->_Mysize < _Off)
			_Xran();	
		if (this->_Mysize - _Off < _Count)
			_Count = this->_Mysize - _Off;
		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
		return (_Count);
		}

	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
		size_type _Count, size_type _Off = 0) const
		{	
 


#line 1821 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xstring"

		if (this->_Mysize < _Off)
			_Xran();	
		if (this->_Mysize - _Off < _Count)
			_Count = this->_Mysize - _Off;
		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
		return (_Count);
		}

	void _Swap_bx(_Myt& _Right)
		{	
		if (this->_BUF_SIZE <= this->_Myres)
			if (this->_BUF_SIZE <= _Right._Myres)
				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
			else
				{	
				pointer _Ptr = this->_Bx._Ptr;
				this->_Getal().destroy(&this->_Bx._Ptr);
				_Traits::copy(this->_Bx._Buf,
					_Right._Bx._Buf, _Right._Mysize + 1);
				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
				}
		else
			if (_Right._Myres < this->_BUF_SIZE)
				::std:: swap(this->_Bx._Buf, _Right._Bx._Buf);
			else
				{	
				pointer _Ptr = _Right._Bx._Ptr;
				this->_Getal().destroy(&_Right._Bx._Ptr);
				_Traits::copy(_Right._Bx._Buf,
					this->_Bx._Buf, this->_Mysize + 1);
				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
				}
		}

	void swap(_Myt& _Right)
		{	
		if (this == &_Right)
			;	
		else if (this->_Getal() == _Right._Getal())
			{	
			this->_Swap_all(_Right);
			_Swap_bx(_Right);
			::std:: swap(this->_Mysize, _Right._Mysize);
			::std:: swap(this->_Myres, _Right._Myres);
			}

		else if (_Alty::propagate_on_container_swap::value)
			{	
			this->_Swap_alloc(_Right);
			_Swap_bx(_Right);
			::std:: swap(this->_Bx, _Right._Bx);	
			::std:: swap(this->_Mysize, _Right._Mysize);
			::std:: swap(this->_Myres, _Right._Myres);
			}

		else
			{	
			_Myt _Tmp = *this;

			*this = _Right;
			_Right = _Tmp;
			}
		}

	size_type find(const _Myt& _Right, size_type _Off = 0) const throw ()
		{	
		return (find(_Right._Myptr(), _Off, _Right.size()));
		}

	size_type find(const _Elem *_Ptr,
		size_type _Off, size_type _Count) const
		{	
 


#line 1898 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xstring"

		if (_Count == 0 && _Off <= this->_Mysize)
			return (_Off);	

		size_type _Nm;
		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
			{	
			const _Elem *_Uptr, *_Vptr;
			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
					return (_Uptr - this->_Myptr());	
			}

		return (npos);	
		}

	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
		{	
		;
		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
		}

	size_type find(_Elem _Ch, size_type _Off = 0) const
		{	
		return (find((const _Elem *)&_Ch, _Off, 1));
		}

	size_type rfind(const _Myt& _Right, size_type _Off = npos) const throw ()
		{	
		return (rfind(_Right._Myptr(), _Off, _Right.size()));
		}

	size_type rfind(const _Elem *_Ptr,
		size_type _Off, size_type _Count) const
		{	
 


#line 1939 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xstring"

		if (_Count == 0)
			return (_Off < this->_Mysize ? _Off
				: this->_Mysize);	
		if (_Count <= this->_Mysize)
			{	
			const _Elem *_Uptr = this->_Myptr() +
				(_Off < this->_Mysize - _Count ? _Off
					: this->_Mysize - _Count);
			for (; ; --_Uptr)
				if (_Traits::eq(*_Uptr, *_Ptr)
					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
					return (_Uptr - this->_Myptr());	
				else if (_Uptr == this->_Myptr())
					break;	
			}

		return (npos);	
		}

	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
		{	
		;
		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
		}

	size_type rfind(_Elem _Ch, size_type _Off = npos) const
		{	
		return (rfind((const _Elem *)&_Ch, _Off, 1));
		}

	size_type find_first_of(const _Myt& _Right,
		size_type _Off = 0) const throw ()
		{	
		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
		}

	size_type find_first_of(const _Elem *_Ptr,
		size_type _Off, size_type _Count) const
		{	
 


#line 1983 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xstring"

		if (0 < _Count && _Off < this->_Mysize)
			{	
			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
			for (const _Elem *_Uptr = this->_Myptr() + _Off;
				_Uptr < _Vptr; ++_Uptr)
				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
					return (_Uptr - this->_Myptr());	
			}

		return (npos);	
		}

	size_type find_first_of(const _Elem *_Ptr,
		size_type _Off = 0) const
		{	
		;
		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
		}

	size_type find_first_of(_Elem _Ch,
		size_type _Off = 0) const
		{	
		return (find((const _Elem *)&_Ch, _Off, 1));
		}

	size_type find_last_of(const _Myt& _Right,
		size_type _Off = npos) const throw ()
		{	
		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
		}

	size_type find_last_of(const _Elem *_Ptr,
		size_type _Off, size_type _Count) const
		{	
 


#line 2022 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xstring"

		if (0 < _Count && 0 < this->_Mysize)
			{	
			const _Elem *_Uptr = this->_Myptr()
				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
			for (; ; --_Uptr)
				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
					return (_Uptr - this->_Myptr());	
				else if (_Uptr == this->_Myptr())
					break;	
			}

		return (npos);	
		}

	size_type find_last_of(const _Elem *_Ptr,
		size_type _Off = npos) const
		{	
		;
		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
		}

	size_type find_last_of(_Elem _Ch,
		size_type _Off = npos) const
		{	
		return (rfind((const _Elem *)&_Ch, _Off, 1));
		}

	size_type find_first_not_of(const _Myt& _Right,
		size_type _Off = 0) const throw ()
		{	
		return (find_first_not_of(_Right._Myptr(), _Off,
			_Right.size()));
		}

	size_type find_first_not_of(const _Elem *_Ptr,
		size_type _Off, size_type _Count) const
		{	
 


#line 2064 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xstring"

		if (_Off < this->_Mysize)
			{	
			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
			for (const _Elem *_Uptr = this->_Myptr() + _Off;
				_Uptr < _Vptr; ++_Uptr)
				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
					return (_Uptr - this->_Myptr());
			}
		return (npos);
		}

	size_type find_first_not_of(const _Elem *_Ptr,
		size_type _Off = 0) const
		{	
		;
		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
		}

	size_type find_first_not_of(_Elem _Ch,
		size_type _Off = 0) const
		{	
		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
		}

	size_type find_last_not_of(const _Myt& _Right,
		size_type _Off = npos) const throw ()
		{	
		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
		}

	size_type find_last_not_of(const _Elem *_Ptr,
		size_type _Off, size_type _Count) const
		{	
 


#line 2102 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xstring"

		if (0 < this->_Mysize)
			{	
			const _Elem *_Uptr = this->_Myptr()
				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
			for (; ; --_Uptr)
				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
					return (_Uptr - this->_Myptr());
				else if (_Uptr == this->_Myptr())
					break;
			}
		return (npos);
		}

	size_type find_last_not_of(const _Elem *_Ptr,
		size_type _Off = npos) const
		{	
		;
		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
		}

	size_type find_last_not_of(_Elem _Ch,
		size_type _Off = npos) const
		{	
		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
		}

	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
		{	
		return (_Myt(*this, _Off, _Count, get_allocator()));
		}

	int compare(const _Myt& _Right) const throw ()
		{	
		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
		}

	int compare(size_type _Off, size_type _N0,
		const _Myt& _Right) const
		{	
		return (compare(_Off, _N0, _Right, 0, npos));
		}

	int compare(size_type _Off,
		size_type _N0, const _Myt& _Right,
		size_type _Roff, size_type _Count) const
		{	
		if (_Right.size() < _Roff)
			_Xran();	
		if (_Right._Mysize - _Roff < _Count)
			_Count = _Right._Mysize - _Roff;	
		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
		}

	int compare(const _Elem *_Ptr) const
		{	
		;
		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
		}

	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
		{	
		;
		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
		}

	int compare(size_type _Off,
		size_type _N0, const _Elem *_Ptr, size_type _Count) const
		{	
 


#line 2175 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xstring"

		if (this->_Mysize < _Off)
			_Xran();	
		if (this->_Mysize - _Off < _N0)
			_N0 = this->_Mysize - _Off;	

		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
			_N0 < _Count ? _N0 : _Count);
		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
			: _N0 == _Count ? 0 : +1);
		}

	allocator_type get_allocator() const throw ()
		{	
		return (this->_Getal());
		}

	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
		{	
		if (_Count == 1)
			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
		else
			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
		}

	void _Copy(size_type _Newsize, size_type _Oldlen)
		{	
		size_type _Newres = _Newsize | this->_ALLOC_MASK;
		if (max_size() < _Newres)
			_Newres = _Newsize;	
		else if (this->_Myres / 2 <= _Newres / 3)
			;
		else if (this->_Myres <= max_size() - this->_Myres / 2)
			_Newres = this->_Myres
				+ this->_Myres / 2;	
		else
			_Newres = max_size();	

		_Elem *_Ptr;
		try {
			_Ptr = this->_Getal().allocate(_Newres + 1);
		} catch (...) {
			_Newres = _Newsize;	
			try {
				_Ptr = this->_Getal().allocate(_Newres + 1);
			} catch (...) {
			_Tidy(true);	
			throw;
			}
		}

		if (0 < _Oldlen)
			_Traits::copy(_Ptr, this->_Myptr(),
				_Oldlen);	
		_Tidy(true);
		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
		this->_Myres = _Newres;
		_Eos(_Oldlen);
		}

	void _Eos(size_type _Newsize)
		{	
		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());
		}

	bool _Grow(size_type _Newsize,
		bool _Trim = false)
		{	
		if (max_size() < _Newsize)
			_Xlen();	
		if (this->_Myres < _Newsize)
			_Copy(_Newsize, this->_Mysize);	
		else if (_Trim && _Newsize < this->_BUF_SIZE)
			_Tidy(true,	
				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);
		else if (_Newsize == 0)
			_Eos(0);	
		return (0 < _Newsize);	
		}

	bool _Inside(const _Elem *_Ptr)
		{	
		if (_Ptr == 0 || _Ptr < this->_Myptr()
			|| this->_Myptr() + this->_Mysize <= _Ptr)
			return (false);	
		else
			return (true);
		}

	static size_type _Pdif(const_iterator _P2,
		const_iterator _P1)
		{	
		return ((_P2)._Ptr == 0 ? 0 : _P2 - _P1);
		}

	void _Tidy(bool _Built = false,
		size_type _Newsize = 0)
		{	
		if (!_Built)
			;
		else if (this->_BUF_SIZE <= this->_Myres)
			{	
			pointer _Ptr = this->_Bx._Ptr;
			this->_Getal().destroy(&this->_Bx._Ptr);
			if (0 < _Newsize)
				_Traits::copy(this->_Bx._Buf,
					::std:: addressof(*_Ptr), _Newsize);
			this->_Getal().deallocate(_Ptr, this->_Myres + 1);
			}
		this->_Myres = this->_BUF_SIZE - 1;
		_Eos(_Newsize);
		}

	__declspec(noreturn) void _Xlen() const
		{	
		_Xlength_error("string too long");
		}

	__declspec(noreturn) void _Xran() const
		{	
		_Xout_of_range("invalid string position");
		}
	};

		
template<class _Elem,
	class _Traits,
	class _Alloc>
	 const typename basic_string<_Elem, _Traits, _Alloc>::size_type
		basic_string<_Elem, _Traits, _Alloc>::npos =
			(typename basic_string<_Elem, _Traits, _Alloc>::size_type)(-1);

		

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	void swap(basic_string<_Elem, _Traits, _Alloc>& _Left,
		basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	_Left.swap(_Right);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	basic_string<_Elem, _Traits, _Alloc> _Ans;
	_Ans.reserve(_Left.size() + _Right.size());
	_Ans += _Left;
	_Ans += _Right;
	return (_Ans);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		const _Elem *_Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	basic_string<_Elem, _Traits, _Alloc> _Ans;
	_Ans.reserve(_Traits::length(_Left) + _Right.size());
	_Ans += _Left;
	_Ans += _Right;
	return (_Ans);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		const _Elem _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	basic_string<_Elem, _Traits, _Alloc> _Ans;
	_Ans.reserve(1 + _Right.size());
	_Ans += _Left;
	_Ans += _Right;
	return (_Ans);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const _Elem *_Right)
	{	
	basic_string<_Elem, _Traits, _Alloc> _Ans;
	_Ans.reserve(_Left.size() + _Traits::length(_Right));
	_Ans += _Left;
	_Ans += _Right;
	return (_Ans);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const _Elem _Right)
	{	
	basic_string<_Elem, _Traits, _Alloc> _Ans;
	_Ans.reserve(_Left.size() + 1);
	_Ans += _Left;
	_Ans += _Right;
	return (_Ans);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		basic_string<_Elem, _Traits, _Alloc>&& _Right)
	{	
	return (::std:: move(_Right.insert(0, _Left)));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		basic_string<_Elem, _Traits, _Alloc>&& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (::std:: move(_Left.append(_Right)));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		basic_string<_Elem, _Traits, _Alloc>&& _Left,
		basic_string<_Elem, _Traits, _Alloc>&& _Right)
	{	
	if (_Right.size() <= _Left.capacity() - _Left.size()
		|| _Right.capacity() - _Right.size() < _Left.size())
		return (::std:: move(_Left.append(_Right)));
	else
		return (::std:: move(_Right.insert(0, _Left)));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		const _Elem *_Left,
		basic_string<_Elem, _Traits, _Alloc>&& _Right)
	{	
	return (::std:: move(_Right.insert(0, _Left)));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		const _Elem _Left,
		basic_string<_Elem, _Traits, _Alloc>&& _Right)
	{	
	return (::std:: move(_Right.insert(0, 1, _Left)));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		basic_string<_Elem, _Traits, _Alloc>&& _Left,
		const _Elem *_Right)
	{	
	return (::std:: move(_Left.append(_Right)));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		basic_string<_Elem, _Traits, _Alloc>&& _Left,
		const _Elem _Right)
	{	
	return (::std:: move(_Left.append(1, _Right)));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator==(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (_Left.compare(_Right) == 0);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator==(
		const _Elem * _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (_Right.compare(_Left) == 0);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator==(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const _Elem *_Right)
	{	
	return (_Left.compare(_Right) == 0);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator!=(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator!=(
		const _Elem *_Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator!=(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const _Elem *_Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator<(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (_Left.compare(_Right) < 0);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator<(
		const _Elem * _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (_Right.compare(_Left) > 0);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator<(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const _Elem *_Right)
	{	
	return (_Left.compare(_Right) < 0);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator>(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator>(
		const _Elem * _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator>(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const _Elem *_Right)
	{	
	return (_Right < _Left);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator<=(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator<=(
		const _Elem * _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator<=(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const _Elem *_Right)
	{	
	return (!(_Right < _Left));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator>=(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (!(_Left < _Right));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator>=(
		const _Elem * _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (!(_Left < _Right));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator>=(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const _Elem *_Right)
	{	
	return (!(_Left < _Right));
	}

typedef basic_string<char, char_traits<char>, allocator<char> >
	string;
typedef basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t> >
	wstring;

	
template<class _Elem,
	class _Traits,
	class _Alloc>
	struct hash<basic_string<_Elem, _Traits, _Alloc> >
		: public unary_function<basic_string<_Elem, _Traits, _Alloc>, size_t>
	{	
	typedef basic_string<_Elem, _Traits, _Alloc> _Kty;

	size_t operator()(const _Kty& _Keyval) const
		{	
		return (_Hash_seq((const unsigned char *)_Keyval.c_str(),
			_Keyval.size() * sizeof (_Elem)));
		}
	};

typedef basic_string<char16_t, char_traits<char16_t>, allocator<char16_t> >
	u16string;
typedef basic_string<char32_t, char_traits<char32_t>, allocator<char32_t> >
	u32string;
}

 
 #pragma warning(pop)
 #pragma pack(pop)
#line 2673 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xstring"
#line 2674 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xstring"






#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdexcept"

 #pragma pack(push,8)
 #pragma warning(push,3)
 
 
namespace std {










		
class logic_error
	: public ::std:: exception
	{	
public:
	typedef ::std:: exception _Mybase;

	explicit logic_error(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit logic_error(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 





#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdexcept"
	};

		
class domain_error
	: public logic_error
	{	
public:
	typedef logic_error _Mybase;

	explicit domain_error(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit domain_error(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 





#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdexcept"
	};

		
class invalid_argument
	: public logic_error
	{	
public:
	typedef logic_error _Mybase;

	explicit invalid_argument(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit invalid_argument(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 





#line 106 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdexcept"
	};

		
class length_error
	: public logic_error
	{	
public:
	typedef logic_error _Mybase;

	explicit length_error(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit length_error(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 





#line 134 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdexcept"
	};

		
class out_of_range
	: public logic_error
	{	
public:
	typedef logic_error _Mybase;

	explicit out_of_range(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit out_of_range(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 





#line 162 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdexcept"
	};

		
class runtime_error
	: public ::std:: exception
	{	
public:
	typedef ::std:: exception _Mybase;

	explicit runtime_error(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit runtime_error(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 





#line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdexcept"
	};

		
class overflow_error
	: public runtime_error
	{	
public:
	typedef runtime_error _Mybase;

	explicit overflow_error(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit overflow_error(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 





#line 218 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdexcept"
	};

		
class underflow_error
	: public runtime_error
	{	
public:
	typedef runtime_error _Mybase;

	explicit underflow_error(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit underflow_error(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 





#line 246 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdexcept"
	};

		
class range_error
	: public runtime_error
	{	
public:
	typedef runtime_error _Mybase;

	explicit range_error(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit range_error(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 





#line 274 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdexcept"
	};
}
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 280 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdexcept"
#line 281 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdexcept"





#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocale"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocinfo"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocinfo.h"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\ctype.h"













#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"







































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\ctype.h"


extern "C" {
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\ctype.h"

















































































                                













   int __cdecl _isctype(  int _C,   int _Type);
   int __cdecl _isctype_l(  int _C,   int _Type,   _locale_t _Locale);
    int __cdecl isalpha(  int _C);
   int __cdecl _isalpha_l(  int _C,   _locale_t _Locale);
    int __cdecl isupper(  int _C);
   int __cdecl _isupper_l(  int _C,   _locale_t _Locale);
    int __cdecl islower(  int _C);
   int __cdecl _islower_l(  int _C,   _locale_t _Locale);
    int __cdecl isdigit(  int _C);
   int __cdecl _isdigit_l(  int _C,   _locale_t _Locale);
   int __cdecl isxdigit(  int _C);
   int __cdecl _isxdigit_l(  int _C,   _locale_t _Locale);
    int __cdecl isspace(  int _C);
   int __cdecl _isspace_l(  int _C,   _locale_t _Locale);
   int __cdecl ispunct(  int _C);
   int __cdecl _ispunct_l(  int _C,   _locale_t _Locale);
   int __cdecl isblank(  int _C);
   int __cdecl _isblank_l(  int _C,   _locale_t _Locale);
    int __cdecl isalnum(  int _C);
   int __cdecl _isalnum_l(  int _C,   _locale_t _Locale);
   int __cdecl isprint(  int _C);
   int __cdecl _isprint_l(  int _C,   _locale_t _Locale);
   int __cdecl isgraph(  int _C);
   int __cdecl _isgraph_l(  int _C,   _locale_t _Locale);
   int __cdecl iscntrl(  int _C);
   int __cdecl _iscntrl_l(  int _C,   _locale_t _Locale);
    int __cdecl toupper(  int _C);
    int __cdecl tolower(  int _C);
    int __cdecl _tolower(  int _C);
   int __cdecl _tolower_l(  int _C,   _locale_t _Locale);
    int __cdecl _toupper(  int _C);
   int __cdecl _toupper_l(  int _C,   _locale_t _Locale);
   int __cdecl __isascii(  int _C);
   int __cdecl __toascii(  int _C);
   int __cdecl __iscsymf(  int _C);
   int __cdecl __iscsym(  int _C);

#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\ctype.h"






























































































#line 252 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\ctype.h"




























#line 281 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\ctype.h"






#line 288 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\ctype.h"













































































#line 366 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\ctype.h"
















#line 383 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\ctype.h"

#line 385 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\ctype.h"


}
#line 389 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\ctype.h"

#line 391 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\ctype.h"
#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocinfo.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\locale.h"













#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"







































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\locale.h"





#pragma pack(push,8)


extern "C" {
#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\locale.h"

























struct lconv {
        char *decimal_point;
        char *thousands_sep;
        char *grouping;
        char *int_curr_symbol;
        char *currency_symbol;
        char *mon_decimal_point;
        char *mon_thousands_sep;
        char *mon_grouping;
        char *positive_sign;
        char *negative_sign;
        char int_frac_digits;
        char frac_digits;
        char p_cs_precedes;
        char p_sep_by_space;
        char n_cs_precedes;
        char n_sep_by_space;
        char p_sign_posn;
        char n_sign_posn;
        wchar_t *_W_decimal_point;
        wchar_t *_W_thousands_sep;
        wchar_t *_W_int_curr_symbol;
        wchar_t *_W_currency_symbol;
        wchar_t *_W_mon_decimal_point;
        wchar_t *_W_mon_thousands_sep;
        wchar_t *_W_positive_sign;
        wchar_t *_W_negative_sign;
        };

#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\locale.h"




















#line 106 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\locale.h"

  int __cdecl _configthreadlocale(  int _Flag);
  char * __cdecl setlocale(  int _Category,   const char * _Locale);
  struct lconv * __cdecl localeconv(void);
  _locale_t __cdecl _get_current_locale(void);
  _locale_t __cdecl _create_locale(  int _Category,   const char * _Locale);
 void __cdecl _free_locale(  _locale_t _Locale);



  __declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "_get_current_locale" " instead. See online help for details."))  _locale_t __cdecl __get_current_locale(void);
  __declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "_create_locale" " instead. See online help for details."))  _locale_t __cdecl __create_locale(  int _Category,   const char * _Locale);
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "_free_locale" " instead. See online help for details."))  void __cdecl __free_locale(  _locale_t _Locale);
#line 120 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\locale.h"












}
#line 134 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\locale.h"

#pragma pack(pop)

#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\locale.h"
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocinfo.h"



 #pragma pack(push,8)
 #pragma warning(push,3)
 
 


 
  
extern "C" {
  #line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocinfo.h"
 #line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocinfo.h"

		












		










 
 
 
 
 
 
 
 

typedef struct _Collvec
	{	
	unsigned int _Page;		
	wchar_t *_LocaleName;
	} _Collvec;

typedef struct _Ctypevec
	{	
	unsigned int _Page;		
	const short *_Table;
	int _Delfl;
	wchar_t *_LocaleName;
	} _Ctypevec;

typedef struct _Cvtvec
	{	
	unsigned int _Page;		
	unsigned int _Mbcurmax;
	int _Isclocale;	
	unsigned char _Isleadbyte[32];	
	} _Cvtvec;

		
 _Collvec __cdecl _Getcoll();
 _Ctypevec __cdecl _Getctype();
 _Cvtvec __cdecl _Getcvt();
 int __cdecl _Getdateorder();

 








 int __cdecl _Mbrtowc(  wchar_t *, const char *, size_t,
	mbstate_t *, const _Cvtvec *);
 #line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocinfo.h"

 float __cdecl _Stof(const char *,
	    char **, long);
 double __cdecl _Stod(const char *,
	    char **, long);
 long double __cdecl _Stold(const char *,
	    char **, long);

 int __cdecl _Strcoll(const char *, const char *,
	const char *, const char *, const _Collvec *);
 size_t __cdecl _Strxfrm(
	    char *_String1,
	  char *_End1, const char *, const char *, const _Collvec *);
 int __cdecl _Tolower(int, const _Ctypevec *);
 int __cdecl _Toupper(int, const _Ctypevec *);
 int __cdecl _Wcrtomb(  char *, wchar_t, mbstate_t *,
	const _Cvtvec *);
 int __cdecl _Wcscoll(const wchar_t *, const wchar_t *,
	const wchar_t *, const wchar_t *, const _Collvec *);
 size_t __cdecl _Wcsxfrm(
	    wchar_t *_String1,
	  wchar_t *_End1, const wchar_t *, const wchar_t *, const _Collvec *);

 short __cdecl _Getwctype(wchar_t, const _Ctypevec *);
 const wchar_t *__cdecl _Getwctypes(const wchar_t *,
	const wchar_t *, short *, const _Ctypevec *);
 wchar_t __cdecl _Towlower(wchar_t, const _Ctypevec *);
 wchar_t __cdecl _Towupper(wchar_t, const _Ctypevec *);

 
  
}
  #line 129 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocinfo.h"
 #line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocinfo.h"


extern "C" {
 char *__cdecl _Getdays();
 char *__cdecl _Getmonths();
 void *__cdecl _Gettnames();
 size_t __cdecl _Strftime(  char *,
	  size_t _Maxsize,     const char *,
	  const struct tm *, void *);

 wchar_t *__cdecl _W_Getdays();
 wchar_t *__cdecl _W_Getmonths();
 void *__cdecl _W_Gettnames();
 size_t __cdecl _Wcsftime(  wchar_t *,
	  size_t _Maxsize,     const wchar_t *,
	  const struct tm *, void *);
}

 







 _locale_t __cdecl _GetLocaleForCP(unsigned int);
 #line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocinfo.h"

 
 #pragma warning(pop)
 #pragma pack(pop)
#line 163 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocinfo.h"
#line 164 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocinfo.h"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocinfo"



 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 #pragma warning(disable: 4412)

namespace std {
		
class  _Timevec
	{	
public:
	 _Timevec(void *_Ptr = 0)
		: _Timeptr(_Ptr)
		{	
		}

	 _Timevec(const _Timevec& _Right)
		{	
		*this = _Right;
		}

	 ~_Timevec() throw ()
		{	
		free(_Timeptr);
		}

	_Timevec&  operator=(const _Timevec& _Right)
		{	
		_Timeptr = _Right._Timeptr;
		((_Timevec *)&_Right)->_Timeptr = 0;
		return (*this);
		}

	void * _Getptr() const
		{	
		return (_Timeptr);
		}

private:
	void *_Timeptr;	
	};

		
class  _Locinfo
	{	
public:
	typedef ::_Collvec _Collvec;
	typedef ::_Ctypevec _Ctypevec;
	typedef ::_Cvtvec _Cvtvec;
	typedef ::std:: _Timevec _Timevec;

	static  void __cdecl _Locinfo_ctor(
		_Locinfo *, const char *);
	static  void __cdecl _Locinfo_ctor(
		_Locinfo *, int, const char *);
	static  void __cdecl _Locinfo_dtor(
		_Locinfo *);
	static  _Locinfo& __cdecl _Locinfo_Addcats(
		_Locinfo *, int, const char *);

	 _Locinfo(const char *_Pch = "C")
 
		: _Lock(0)
 #line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocinfo"

		{	
		if (_Pch == 0)
			throw runtime_error("bad locale name");
		_Locinfo_ctor(this, _Pch);
		}

	 _Locinfo(int _Cat, const char *_Pch)
 
		: _Lock(0)
 #line 86 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocinfo"

		{	
		if (_Pch == 0)
			throw runtime_error("bad locale name");
		_Locinfo_ctor(this, _Cat, _Pch);
		}

	 ~_Locinfo() throw ()
		{	
		_Locinfo_dtor(this);
		}

	_Locinfo&  _Addcats(int _Cat, const char *_Pch)
		{	
		if (_Pch == 0)
			throw runtime_error("bad locale name");
		return (_Locinfo_Addcats(this, _Cat, _Pch));
		}

	const char * _Getname() const
		{	
		return (_Newlocname._C_str());
		}

	_Collvec  _Getcoll() const
		{	
		return (::_Getcoll());
		}

	_Ctypevec  _Getctype() const
		{	
		return (::_Getctype());
		}

	_Cvtvec  _Getcvt() const
		{	
		return (::_Getcvt());
		}

	const lconv * _Getlconv() const
		{	
		return (localeconv());
		}

	_Timevec  _Gettnames() const
		{	
		return (_Timevec(::_Gettnames()));
		}

	const char * _Getdays() const
		{	
		const char *_Ptr = ::_Getdays();

		if (_Ptr != 0)
			{	
			((_Locinfo *)this)->_Days = _Ptr;
			free((void *)_Ptr);
			}
		return (!_Days._Empty() ? _Days._C_str()
			: ":Sun:Sunday:Mon:Monday:Tue:Tuesday:Wed:Wednesday"
				":Thu:Thursday:Fri:Friday:Sat:Saturday");
		}

	const char * _Getmonths() const
		{	
		const char *_Ptr = ::_Getmonths();

		if (_Ptr != 0)
			{	
			((_Locinfo *)this)->_Months = _Ptr;
			free((void *)_Ptr);
			}
		return (!_Months._Empty() ? _Months._C_str()
			: ":Jan:January:Feb:February:Mar:March"
				":Apr:April:May:May:Jun:June"
				":Jul:July:Aug:August:Sep:September"
				":Oct:October:Nov:November:Dec:December");
		}

	const char * _Getfalse() const
		{	
		return ("false");
		}

	const char * _Gettrue() const
		{	
		return ("true");
		}

	int  _Getdateorder() const
		{	
		return (::_Getdateorder());
		}

	_Timevec  _W_Gettnames() const
		{	
		return (_Timevec(::_W_Gettnames()));
		}

	const unsigned short * _W_Getdays() const
		{	
		const wchar_t *_Ptr = ::_W_Getdays();

		if (_Ptr != 0)
			{	
			((_Locinfo *)this)->_W_Days = _Ptr;
			free((void *)_Ptr);
			}
		return ((const unsigned short *)(!_W_Days._Empty()
			? _W_Days._C_str()
			: L":Sun:Sunday:Mon:Monday:Tue:Tuesday:Wed:Wednesday"
				L":Thu:Thursday:Fri:Friday:Sat:Saturday"));
		}

	const unsigned short * _W_Getmonths() const
		{	
		const wchar_t *_Ptr = ::_W_Getmonths();

		if (_Ptr != 0)
			{	
			((_Locinfo *)this)->_W_Months = _Ptr;
			free((void *)_Ptr);
			}
		return ((const unsigned short *)(!_W_Months._Empty()
			? _W_Months._C_str()
			: L":Jan:January:Feb:February:Mar:March"
				L":Apr:April:May:May:Jun:June"
				L":Jul:July:Aug:August:Sep:September"
				L":Oct:October:Nov:November:Dec:December"));
		}

private:



 



	_Lockit _Lock;	
 #line 227 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocinfo"

	_Yarn<char> _Days;	
	_Yarn<char> _Months;	
	_Yarn<wchar_t> _W_Days;	
	_Yarn<wchar_t> _W_Months;	
	_Yarn<char> _Oldlocname;	
	_Yarn<char> _Newlocname;	
	};

		
template<class _Elem> inline
	int __cdecl _LStrcoll(const _Elem *_First1, const _Elem *_Last1,
		const _Elem *_First2, const _Elem *_Last2,
			const _Locinfo::_Collvec *)
	{	
	for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, ++_First2)
		if (*_First1 < *_First2)
			return (-1);	
		else if (*_First2 < *_First1)
			return (+1);	
	return (_First2 != _Last2 ? -1 : _First1 != _Last1 ? +1 : 0);
	}

template<> inline
	int __cdecl _LStrcoll(const char *_First1, const char *_Last1,
		const char *_First2, const char *_Last2,
			const _Locinfo::_Collvec *_Vector)
	{	
	return (_Strcoll(_First1, _Last1, _First2, _Last2, _Vector));
	}

template<> inline
	int __cdecl _LStrcoll(const wchar_t *_First1, const wchar_t *_Last1,
		const wchar_t *_First2, const wchar_t *_Last2,
			const _Locinfo::_Collvec *_Vector)
	{	
	return (_Wcscoll(_First1, _Last1, _First2, _Last2, _Vector));
	}

		
template<class _Elem> inline
	size_t __cdecl _LStrxfrm(_Elem *_First1, _Elem *_Last1,
		const _Elem *_First2, const _Elem *_Last2,
			const _Locinfo::_Collvec *)
	{	
	size_t _Count = _Last2 - _First2;
	if (_Count <= (size_t)(_Last1 - _First1))
		::memcpy_s((_First1), ((_Last1 - _First1) * sizeof (_Elem)), (_First2), (_Count * sizeof (_Elem)));
#line 276 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocinfo"
	return (_Count);
	}

template<> inline
	size_t __cdecl _LStrxfrm( 
		  char *_First1,   char *_Last1,
		const char *_First2, const char *_Last2,
			const _Locinfo::_Collvec *_Vector)
	{	
	return (_Strxfrm(_First1, _Last1, _First2, _Last2, _Vector));
	}

template<> inline
	size_t __cdecl _LStrxfrm( 
		  wchar_t *_First1,   wchar_t *_Last1,
		const wchar_t *_First2, const wchar_t *_Last2,
			const _Locinfo::_Collvec *_Vector)
	{	
	return (_Wcsxfrm(_First1, _Last1, _First2, _Last2, _Vector));
	}
}
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 301 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocinfo"
#line 302 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocinfo"





#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocale"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xdebug"

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)

 
  
 
  

namespace std {
struct _DebugHeapTag_t
	{	
	int _Type;
	};
}

		

 










































#line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xdebug"
   
   
   
  #line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xdebug"

 
 

 #pragma warning(pop)
 #pragma pack(pop)


#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xdebug"
#line 83 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xdebug"





#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocale"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xfacet"

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 
 






namespace std {
	
class  _Facet_base
	{	
public:
	virtual  ~_Facet_base() throw ()
		{	
		}

	
	virtual void  _Incref() = 0;

	
	virtual _Facet_base *  _Decref() = 0;
	};

 


#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xfacet"
void __cdecl _Facet_Register(_Facet_base *);
 #line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xfacet"
}
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xfacet"
#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xfacet"

 



#line 14 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocale"

 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 #pragma warning(disable: 4412 28197)

namespace std {
		
template<class _Dummy>
	class _Locbase
	{	
public:
	 static const int collate = ((1 << (1)) >> 1);
	 static const int ctype = ((1 << (2)) >> 1);
	 static const int monetary = ((1 << (3)) >> 1);
	 static const int numeric = ((1 << (4)) >> 1);
	 static const int time = ((1 << (5)) >> 1);
	 static const int messages = ((1 << (6)) >> 1);
	 static const int all = (((1 << ((6 + 1))) >> 1) - 1);
	 static const int none = 0;
	};

template<class _Dummy>
	const int _Locbase<_Dummy>::collate;
template<class _Dummy>
	const int _Locbase<_Dummy>::ctype;
template<class _Dummy>
	const int _Locbase<_Dummy>::monetary;
template<class _Dummy>
	const int _Locbase<_Dummy>::numeric;
template<class _Dummy>
	const int _Locbase<_Dummy>::time;
template<class _Dummy>
	const int _Locbase<_Dummy>::messages;
template<class _Dummy>
	const int _Locbase<_Dummy>::all;
template<class _Dummy>
	const int _Locbase<_Dummy>::none;

		
class locale;
template<class _Facet>
	const _Facet& __cdecl use_facet(const locale&);
template<class _Elem>
	class collate;

class locale
	: public _Locbase<int>
	{	
public:
	typedef int category;

			
	class  id
		{	
	public:
		 id(size_t _Val = 0)
			: _Id(_Val)
			{	
			}

		 operator size_t()
			{	
			if (_Id == 0)
				{	
				{ ::std:: _Lockit _Lock(0);
					if (_Id == 0)
						_Id = ++_Id_cnt;
				}
				}
			return (_Id);
			}

	private:
		size_t _Id;	

		 static int _Id_cnt;

		 id(const id&);	
		id&  operator=(const id&);	
		};

	class _Locimp;

			
	class  facet
		: public _Facet_base
		{	
		friend class locale;
		friend class _Locimp;

		template<class _Ty>
			friend void __cdecl _DebugHeapDelete(_Ty *_Ptr);

	public:
		static size_t __cdecl _Getcat(const facet ** = 0,
			const locale * = 0)
			{	
			return ((size_t)(-1));
			}

  






















#line 141 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocale"

		virtual void  _Incref()
			{   
			_InterlockedIncrement(reinterpret_cast<volatile long *>(&_Refs));
			}

		virtual _Facet_base * _Decref()
			{   
			if (_InterlockedDecrement(reinterpret_cast<volatile long *>(&_Refs)) == 0)
				return (this);
			else
				return (0);
			}

private:
	_Atomic_counter_t _Refs;	

	protected:
		explicit  facet(size_t _Initrefs = 0)
			{	
			_Init_atomic_counter(_Refs, (_Atomic_integral_t)_Initrefs);
			}

		virtual  ~facet() throw ()
			{	
			}

		private:
			 facet(const facet&);	

		facet&  operator=(const facet&);	
		};

			
 #pragma warning(push)
 #pragma warning(disable: 4275)

	class  _Locimp
		: public facet
		{	
	protected:
		 ~_Locimp() throw ()
		{	
		_Locimp_dtor(this);
		}

	private:
		static  _Locimp *__cdecl
			_New_Locimp(bool _Transparent = false);
		static  _Locimp *__cdecl
			_New_Locimp(const _Locimp& _Right);

		static  void __cdecl
			_Locimp_dtor(_Locimp *);
		static  void __cdecl
			_Locimp_Addfac(_Locimp *, facet *, size_t);	
		static void __cdecl
			_Locimp_ctor(_Locimp *, const _Locimp&);

		friend class locale;

		 _Locimp(bool _Transparent)
			: locale::facet(1), _Facetvec(0), _Facetcount(0),
				_Catmask(none), _Xparent(_Transparent),
					_Name("*")
			{	
			}

		 _Locimp(const _Locimp& _Right)
			: locale::facet(1), _Facetvec(0), _Facetcount(_Right._Facetcount),
				_Catmask(_Right._Catmask), _Xparent(_Right._Xparent),
					_Name(_Right._Name.c_str())
			{	
			_Locimp_ctor(this, _Right);
			}

		void  _Addfac(facet *_Pfacet, size_t _Id)
			{	
			_Locimp_Addfac(this, _Pfacet, _Id);
			}

		static _Locimp *__cdecl _Makeloc(const _Locinfo&,
			category, _Locimp *, const locale *);	

		static void __cdecl _Makewloc(const _Locinfo&,
			category, _Locimp *, const locale *);	

 
		static void __cdecl _Makeushloc(const _Locinfo&,
			category, _Locimp *, const locale *);	
 #line 232 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocale"

		static void __cdecl _Makexloc(const _Locinfo&,
			category, _Locimp *, const locale *);	

		facet **_Facetvec;	
		size_t _Facetcount;	
		category _Catmask;	
		bool _Xparent;	
		_Yarn<char> _Name;	

		 static _Locimp *_Clocptr;

private:
		_Locimp&  operator=(const _Locimp&);	
		};

 #pragma warning(pop)

	template<class _Elem,
		class _Traits,
		class _Alloc>
		bool operator()(const basic_string<_Elem, _Traits, _Alloc>& _Left,
			const basic_string<_Elem, _Traits, _Alloc>& _Right) const
		{	
		const ::std:: collate<_Elem>& _Coll_fac =
			use_facet<::std:: collate<_Elem> >(*this);

		return (_Coll_fac.compare(_Left.c_str(), _Left.c_str() + _Left.size(),
			_Right.c_str(), _Right.c_str() + _Right.size()) < 0);
		}

	template<class _Facet>
		locale combine(const locale& _Loc) const
		{	
		_Facet *_Facptr;

		try {
			_Facptr = (_Facet *)&use_facet<_Facet>(_Loc);
		} catch (...) {
			_Xruntime_error("locale::combine facet missing");
		}

		_Locimp *_Newimp = _Locimp::_New_Locimp(*_Ptr);
		_Newimp->_Addfac(_Facptr, _Facet::id);
		_Newimp->_Catmask = 0;
		_Newimp->_Name = "*";
		return (locale(_Newimp));
		}

	template<class _Facet>
		locale(const locale& _Loc, const _Facet *_Facptr)
			: _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
		{	
		if (_Facptr != 0)
			{	
			_Ptr->_Addfac((_Facet *)_Facptr, _Facet::id);
			if (_Facet::_Getcat() != (size_t)(-1))
				{	
				_Ptr->_Catmask = 0;
				_Ptr->_Name = "*";
				}
			}
		}

	locale(_Uninitialized)
		{	
		}

 



















#line 321 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocale"
	locale(const locale& _Right) throw ()
		: _Ptr(_Right._Ptr)
		{	
		_Ptr->_Incref();
		}

	locale() throw ()
		: _Ptr(_Init(true))
		{	
		}

 
	locale(const locale& _Loc, const locale& _Other,
		category _Cat)
		: _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
		{	
		try {
		{ _Locinfo _Lobj(_Loc._Ptr->_Catmask, _Loc._Ptr->_Name.c_str());
			_Locimp::_Makeloc(_Lobj._Addcats(_Cat & _Other._Ptr->_Catmask,
				_Other._Ptr->_Name.c_str()), _Cat, _Ptr, &_Other);
		}
		} catch (...) {
		delete (_Ptr->_Decref());
		throw;
		}
		}

private:
	void _Construct(const string &_Str,
		category _Cat)	
		{	
		bool _Bad = false;
		try {
		_Init();
		{ _Locinfo _Lobj(_Cat, _Str.c_str());
			if (_Badname(_Lobj))
				_Bad = true;
			else
				_Locimp::_Makeloc(_Lobj, _Cat, _Ptr, 0);
		}
		} catch (...) {
		delete (_Ptr->_Decref());
		throw;
		}

		if (_Bad)
			{	
			delete (_Ptr->_Decref());
			_Xruntime_error("bad locale name");
			}
		}

	void _Construct(const locale& _Loc, const string &_Str,
		category _Cat)
		{	
		bool _Bad = false;
		try {
		{ _Locinfo _Lobj(_Loc._Ptr->_Catmask, _Loc._Ptr->_Name.c_str());
			bool _Hadname = !_Badname(_Lobj);
			_Lobj._Addcats(_Cat, _Str.c_str());

			if (_Hadname && _Badname(_Lobj))
				_Bad = true;
			else
				_Locimp::_Makeloc(_Lobj, _Cat, _Ptr, 0);
		}
		} catch (...) {
		delete (_Ptr->_Decref());
		throw;
		}

		if (_Bad)
			{	
			delete (_Ptr->_Decref());
			_Xruntime_error("bad locale name");
			}
		}

public:
	explicit locale(const char *_Locname,
		category _Cat = all)	
		: _Ptr(_Locimp::_New_Locimp())
		{	
		
		
		if (_Locname == 0)
			_Xruntime_error("bad locale name");
		_Construct(_Locname, _Cat);
		}

	locale(const locale& _Loc, const char *_Locname,
		category _Cat)
		: _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
		{	
		
		
		if (_Locname == 0)
			_Xruntime_error("bad locale name");
		_Construct(_Loc, _Locname, _Cat);
		}

	explicit locale(const string& _Str,
		category _Cat = all)	
		: _Ptr(_Locimp::_New_Locimp())
		{	
		_Construct(_Str, _Cat);
		}

	locale(const locale& _Loc, const string& _Str,
		category _Cat)
		: _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
		{	
		_Construct(_Loc, _Str, _Cat);
		}
 #line 436 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocale"

	~locale() throw ()
		{	
		if (_Ptr != 0)
			delete (_Ptr->_Decref());
		}

	locale& operator=(const locale& _Right) throw ()
		{	
		if (_Ptr != _Right._Ptr)
			{	
			delete (_Ptr->_Decref());
			_Ptr = _Right._Ptr;
			_Ptr->_Incref();
			}
		return (*this);
		}
 #line 454 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocale"

	string name() const
		{	
		return (_Ptr == 0 ? string() : _Ptr->_Name.c_str());
		}

	const char *c_str() const
		{	
		return (_Ptr == 0 ? "" : _Ptr->_Name.c_str());
		}

	const facet *_Getfacet(size_t _Id) const
		{	
		const facet *_Facptr = _Id < _Ptr->_Facetcount
			? _Ptr->_Facetvec[_Id] : 0;	
		if (_Facptr != 0 || !_Ptr->_Xparent)
			return (_Facptr);	
		else
			{	
			locale::_Locimp *_Ptr = _Getgloballocale();
			return (_Id < _Ptr->_Facetcount
				? _Ptr->_Facetvec[_Id]	
				: 0);	
			}
		}

	bool operator==(const locale& _Loc) const
		{	
		return (_Ptr == _Loc._Ptr
			|| (name().compare("*") != 0
				&& name().compare(_Loc.name()) == 0));
		}

	bool operator!=(const locale& _Right) const
		{	
		return (!(*this == _Right));
		}

	static  const locale& __cdecl
		classic();	

	static  locale __cdecl
		global(const locale&);	

	static  locale __cdecl
		empty();	

private:
	locale(_Locimp *_Ptrimp)
		: _Ptr(_Ptrimp)
		{	
		}

    static  _Locimp *__cdecl
		_Init(bool _Do_incref = false);	
	static  _Locimp *__cdecl
		_Getgloballocale();
	static  void __cdecl
		_Setgloballocale(void *);

	bool _Badname(const _Locinfo& _Lobj)
		{	
		return (:: strcmp(_Lobj._Getname(), "*") == 0);
		}

	_Locimp *_Ptr;	
	};

		

 
















#line 542 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocale"

template<class _Facet>
	struct _Facetptr
	{	
	 static const locale::facet *_Psave;
	};

template<class _Facet>
	 const locale::facet *_Facetptr<_Facet>::
		_Psave = 0;

  

  


template<class _Facet> inline
	const _Facet& __cdecl use_facet(const locale& _Loc)

	{	
 



#line 567 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocale"
	{ ::std:: _Lockit _Lock(0);	
		const locale::facet *_Psave =
			_Facetptr<_Facet>::_Psave;	

		size_t _Id = _Facet::id;
		const locale::facet *_Pf = _Loc._Getfacet(_Id);

		if (_Pf != 0)
			;	
		else if (_Psave != 0)
			_Pf = _Psave;	
		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

 

			throw ::std:: bad_cast();	

 

#line 587 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocale"

		else
			{	
			_Pf = _Psave;
			_Facetptr<_Facet>::_Psave = _Psave;

			locale::facet *_Pfmod = (_Facet *)_Psave;
			_Pfmod->_Incref();

 


#line 600 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocale"
			_Facet_Register(_Pfmod);
 #line 602 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocale"
			}

		return ((const _Facet&)(*_Pf));	
	}
 #line 607 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocale"
	}	

		
template<class _Elem,
	class _InIt> inline
	int __cdecl _Getloctxt(_InIt& _First, _InIt& _Last, size_t _Numfields,
		const _Elem *_Ptr)
	{	
	for (size_t _Off = 0; _Ptr[_Off] != (_Elem)0; ++_Off)
		if (_Ptr[_Off] == _Ptr[0])
			++_Numfields;	
	string _Str(_Numfields, '\0');	

	int _Ans = -2;	
	for (size_t _Column = 1; ; ++_Column, ++_First, _Ans = -1)
		{	
		bool _Prefix = false;	
		size_t _Off = 0;	
		size_t _Field = 0;	

		for (; _Field < _Numfields; ++_Field)
			{	
			for (; _Ptr[_Off] != (_Elem)0 && _Ptr[_Off] != _Ptr[0]; ++_Off)
				;	

			if (_Str[_Field] != '\0')
				_Off += _Str[_Field];	
			else if (_Ptr[_Off += _Column] == _Ptr[0]
				|| _Ptr[_Off] == (_Elem)0)
				{	
				_Str[_Field] = (char)(_Column < 127
					? _Column : 127);	
				_Ans = (int)_Field;	
				}
			else if (_First == _Last || _Ptr[_Off] != *_First)
				_Str[_Field] = (char)(_Column < 127
					? _Column : 127);	
			else
				_Prefix = true;	
			}

		if (!_Prefix || _First == _Last)
			break;	
		}
	return (_Ans);	
	}

		



template<class _Elem> inline
	char __cdecl _Maklocbyte(_Elem _Char,
		const _Locinfo::_Cvtvec&)
	{	
	return ((char)(unsigned char)_Char);
	}

template<> inline
	char __cdecl _Maklocbyte(wchar_t _Char,
		const _Locinfo::_Cvtvec& _Cvt)
	{	
	char _Byte = '\0';
	mbstate_t _Mbst1 = {0};
	_Wcrtomb(&_Byte, _Char, &_Mbst1, &_Cvt);
	return (_Byte);
	}

 
template<> inline
	char __cdecl _Maklocbyte(unsigned short _Char,
		const _Locinfo::_Cvtvec &_Cvt)
	{	
	char _Byte = '\0';
	mbstate_t _Mbst1 = {0};
	_Wcrtomb(&_Byte, (wchar_t)_Char, &_Mbst1, &_Cvt);
	return (_Byte);
	}
 #line 686 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocale"

		



template<class _Elem> inline
	_Elem __cdecl _Maklocchr(char _Byte, _Elem *,
		const _Locinfo::_Cvtvec&)
	{	
	return ((_Elem)(unsigned char)_Byte);
	}

template<> inline
	wchar_t __cdecl _Maklocchr(char _Byte, wchar_t *,
		const _Locinfo::_Cvtvec& _Cvt)
	{	
	wchar_t _Wc = L'\0';
	mbstate_t _Mbst1 = {0};
	_Mbrtowc(&_Wc, &_Byte, 1, &_Mbst1, &_Cvt);
	return (_Wc);
	}

 
template<> inline
	unsigned short __cdecl _Maklocchr(char _Byte, unsigned short *,
		const _Locinfo::_Cvtvec &_Cvt)
	{	
	unsigned short _Wc = (unsigned short)0;
	mbstate_t _Mbst1 = {0};
	_Mbrtowc((wchar_t *)&_Wc, &_Byte, 1, &_Mbst1, &_Cvt);
	return (_Wc);
	}
 #line 719 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocale"

		



template<class _Elem> inline
	_Elem *__cdecl _Maklocstr(const char *_Ptr, _Elem *,
		const _Locinfo::_Cvtvec&)
	{	
	size_t _Count = :: strlen(_Ptr) + 1;
	_Elem *_Ptrdest = new _Elem[_Count];

 #pragma warning(push)
 #pragma warning(disable: 6011)	
	for (_Elem *_Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr)
		*_Ptrnext = (_Elem)(unsigned char)*_Ptr;
 #pragma warning(pop)

	return (_Ptrdest);
	}

template<> inline
	wchar_t *__cdecl _Maklocstr(const char *_Ptr, wchar_t *,
		const _Locinfo::_Cvtvec& _Cvt)
	{	
	size_t _Count, _Count1;
	size_t _Wchars;
	const char *_Ptr1;
	int _Bytes;
	wchar_t _Wc;
	mbstate_t _Mbst1 = {0};

	_Count1 = :: strlen(_Ptr) + 1;
	for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;
		_Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars)
		if ((_Bytes = _Mbrtowc(&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0)
			break;
	++_Wchars;	

	wchar_t *_Ptrdest = new wchar_t[_Wchars];
	wchar_t *_Ptrnext = _Ptrdest;
	mbstate_t _Mbst2 = {0};

 #pragma warning(push)
 #pragma warning(disable: 6011)	
	for (; 0 < _Wchars;
		_Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext)
		if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0)
			break;
	*_Ptrnext = L'\0';
 #pragma warning(pop)

	return (_Ptrdest);
	}

 
template<> inline
	unsigned short *__cdecl _Maklocstr(const char *_Ptr, unsigned short *,
		const _Locinfo::_Cvtvec &_Cvt)
	{	
	size_t _Count, _Count1;
	size_t _Wchars;
	const char *_Ptr1;
	int _Bytes;
	unsigned short _Wc;
	mbstate_t _Mbst1 = {0};

	_Count1 = :: strlen(_Ptr) + 1;
	for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;
		_Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars)
		if ((_Bytes =
			_Mbrtowc((wchar_t *)&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0)
			break;
	++_Wchars;	

	wchar_t *_Ptrdest = new wchar_t[_Wchars];
	wchar_t *_Ptrnext = _Ptrdest;
	mbstate_t _Mbst2 = {0};
	for (; 0 < _Wchars;
		_Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext)
		if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0)
			break;
	*_Ptrnext = L'\0';
	return ((unsigned short *)_Ptrdest);
	}
 #line 805 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocale"

		
 #pragma warning(push)
 #pragma warning(disable: 4275)

class  codecvt_base
	: public locale::facet
	{	
public:
	enum	{	
		ok, partial, error, noconv};
	typedef int result;

	 codecvt_base(size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		}

	bool  always_noconv() const throw ()
		{	
		return (do_always_noconv());
		}

	int  max_length() const throw ()
		{	
		return (do_max_length());
		}

	int  encoding() const throw ()
		{	
		return (do_encoding());
		}

	 ~codecvt_base() throw ()
		{	
		}

protected:
	virtual bool  do_always_noconv() const throw ()
		{	
		return (false);
		}

	virtual int  do_max_length() const throw ()
		{	
		return (1);
		}

	virtual int  do_encoding() const throw ()
		{	
		return (1);	
		}
	};

 #pragma warning(pop)

		
template<class _Elem,
	class _Byte,
	class _Statype>
	class codecvt
		: public codecvt_base
	{	
public:
	typedef _Elem intern_type;
	typedef _Byte extern_type;
	typedef _Statype state_type;

	result  in(_Statype& _State,
		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
		{	
		return (do_in(_State,
			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
		}

	result  out(_Statype& _State,
		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		return (do_out(_State,
			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
		}

	result  unshift(_Statype& _State,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		return (do_unshift(_State, _First2, _Last2, _Mid2));
		}

	int  length(_Statype& _State, const _Byte *_First1,
		const _Byte *_Last1, size_t _Count) const
		{	
		return (do_length(_State, _First1, _Last1, _Count));
		}

	 static locale::id id;	

	explicit  codecvt(size_t _Refs = 0)
		: codecvt_base(_Refs)
		{	
		_Init(_Locinfo());
		}

	 codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
		: codecvt_base(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new codecvt<_Elem, _Byte, _Statype>(
				_Locinfo(_Ploc->c_str()));
		return (2);
		}

protected:
	virtual  ~codecvt() throw ()
		{	
		}

	void  _Init(const _Locinfo&)
		{	
		}

	virtual bool  do_always_noconv() const throw ()
		{	
		return (is_same<_Byte, _Elem>::value);
		}

	virtual result  do_in(_Statype&,
		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
		{	
		_Mid1 = _First1, _Mid2 = _First2;
		if (is_same<_Byte, _Elem>::value)
			return (noconv);	
		else
			{	
			for (; _Mid1 != _Last1 && _Mid2 != _Last2; ++_Mid1, ++_Mid2)
				*_Mid2 = (_Elem)*_Mid1;
			return (ok);
			}
		}

	virtual result  do_out(_Statype&,
		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		_Mid1 = _First1, _Mid2 = _First2;
		if (is_same<_Byte, _Elem>::value)
			return (noconv);	
		else
			{	
			for (; _Mid1 != _Last1 && _Mid2 != _Last2; ++_Mid1, ++_Mid2)
				*_Mid2 = (_Byte)*_Mid1;
			return (ok);
			}
		}

	virtual result  do_unshift(_Statype&,
		_Byte *_First2, _Byte *, _Byte *&_Mid2) const
		{	
		_Mid2 = _First2;
		return (ok);	
		}

	virtual int  do_length(_Statype&, const _Byte *_First1,
		const _Byte *_Last1, size_t _Count) const
		{	
		return ((int)(_Count < (size_t)(_Last1 - _First1)
			? _Count : _Last1 - _First1));	
		}
	};

		
template<class _Elem,
	class _Byte,
	class _Statype>
	 locale::id codecvt<_Elem, _Byte, _Statype>::id;

 




















































































































































































































































































































































































































































































































































































































#line 1588 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocale"

		
template<>
	class  codecvt<wchar_t, char, _Mbstatet>
	: public codecvt_base
	{	
public:
	typedef wchar_t _Elem;
	typedef char _Byte;
	typedef _Mbstatet _Statype;
	typedef _Elem intern_type;
	typedef _Byte extern_type;
	typedef _Statype state_type;

	result  in(_Statype& _State,
		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
		{	
		return (do_in(_State,
			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
		}

	result  out(_Statype& _State,
		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		return (do_out(_State,
			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
		}

	result  unshift(_Statype& _State,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		return (do_unshift(_State,
			_First2, _Last2, _Mid2));
		}

	int  length(_Statype& _State, const _Byte *_First1,
		const _Byte *_Last1, size_t _Count) const
		{	
		return (do_length(_State, _First1, _Last1, _Count));
		}

	 static locale::id id;

	explicit  codecvt(size_t _Refs = 0)
		: codecvt_base(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
		: codecvt_base(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new codecvt<_Elem, _Byte, _Statype>(
				_Locinfo(_Ploc->c_str()));
		return (2);
		}

protected:
	virtual  ~codecvt() throw ()
		{	
		}

	void  _Init(const _Locinfo& _Lobj)
		{	
		_Cvt = _Lobj._Getcvt();
		}

	virtual result  do_in(_Statype& _State,
		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
			_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
		{	
		;
		;
		_Mid1 = _First1, _Mid2 = _First2;
		result _Ans = _Mid1 == _Last1 ? ok : partial;
		int _Bytes;

		while (_Mid1 != _Last1 && _Mid2 != _Last2)
			switch (_Bytes = _Mbrtowc(_Mid2, _Mid1, _Last1 - _Mid1,
				&_State, &_Cvt))
			{	
			case -2:	
				_Mid1 = _Last1;
				return (_Ans);

			case -1:	
				return (error);

			case 0:	
				if (*_Mid2 == (_Elem)0)
					_Bytes = (int):: strlen(_Mid1) + 1;
				

			default:	
				if (_Bytes == -3)
					_Bytes = 0;	
				_Mid1 += _Bytes;
				++_Mid2;
				_Ans = ok;
			}
		return (_Ans);
		}

	virtual result  do_out(_Statype& _State,
		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
			_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		;
		;
		_Mid1 = _First1, _Mid2 = _First2;
		result _Ans = _Mid1 == _Last1 ? ok : partial;
		int _Bytes;

		while (_Mid1 != _Last1 && _Mid2 != _Last2)
			if ((int)___mb_cur_max_func() <= _Last2 - _Mid2)
				if ((_Bytes = _Wcrtomb(_Mid2, *_Mid1,
					&_State, &_Cvt)) < 0)
					return (error);	
				else
					++_Mid1, _Mid2 += _Bytes, _Ans = ok;
			else
				{	
				_Byte _Buf[5];
				_Statype _Stsave = _State;

				if ((_Bytes = _Wcrtomb(_Buf, *_Mid1,
					&_State, &_Cvt)) < 0)
					return (error);	
				else if (_Last2 - _Mid2 < _Bytes)
					{	
					_State = _Stsave;
					return (_Ans);
					}
				else
					{	
					:: memcpy(_Mid2, _Buf, _Bytes);
					++_Mid1, _Mid2 += _Bytes, _Ans = ok;
					}
				}
		return (_Ans);
		}

	virtual result  do_unshift(_Statype& _State,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		;
		_Mid2 = _First2;
		result _Ans = ok;
		int _Bytes;
		_Byte _Buf[5];
		_Statype _Stsave = _State;

		if ((_Bytes = _Wcrtomb(_Buf, L'\0', &_State, &_Cvt)) <= 0)
			_Ans = error;	
		else if (_Last2 - _Mid2 < --_Bytes)
			{	
			_State = _Stsave;
			_Ans = partial;
			}
		else if (0 < _Bytes)
			{	
			:: memcpy(_Mid2, _Buf, _Bytes);
			_Mid2 += _Bytes;
			}
		return (_Ans);
		}

	virtual int  do_length(_Statype& _State, const _Byte *_First1,
		const _Byte *_Last1, size_t _Count) const
		{	
		;
		int _Wchars;
		const _Byte *_Mid1;
		_Statype _Mystate = _State;

		for (_Wchars = 0, _Mid1 = _First1;
			(size_t)_Wchars < _Count && _Mid1 != _Last1; )
			{	
			int _Bytes;
			_Elem _Ch;

			switch (_Bytes = _Mbrtowc(&_Ch, _Mid1, _Last1 - _Mid1,
				&_Mystate, &_Cvt))
				{	
			case -2:	
				return (_Wchars);

			case -1:	
				return (_Wchars);

			case 0:	
				if (_Ch == (_Elem)0)
					_Bytes = (int):: strlen(_Mid1) + 1;
				

			default:	
				if (_Bytes == -3)
					_Bytes = 0;	
				_Mid1 += _Bytes;
				++_Wchars;
				}
			}
		return (_Wchars);
		}

	virtual bool  do_always_noconv() const throw ()
		{	
		return (false);
		}

	virtual int  do_max_length() const throw ()
		{	
		return (5);
		}

	virtual int  do_encoding() const throw ()
		{	
		return (0);	
		}

private:
	_Locinfo::_Cvtvec _Cvt;	
	};

 
		
template<>
	class  codecvt<unsigned short, char, _Mbstatet>
	: public codecvt_base
	{	
public:
	typedef unsigned short _Elem;
	typedef char _Byte;
	typedef _Mbstatet _Statype;
	typedef _Elem intern_type;
	typedef _Byte extern_type;
	typedef _Statype state_type;

	result  in(_Statype& _State,
		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
		{	
		return (do_in(_State,
			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
		}

	result  out(_Statype& _State,
		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		return (do_out(_State,
			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
		}

	result  unshift(_Statype& _State,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		return (do_unshift(_State,
			_First2, _Last2, _Mid2));
		}

	int  length(_Statype& _State, const _Byte *_First1,
		const _Byte *_Last1, size_t _Count) const
		{	
		return (do_length(_State, _First1, _Last1, _Count));
		}

	 static locale::id id;

	explicit  codecvt(size_t _Refs = 0)
		: codecvt_base(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
		: codecvt_base(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new codecvt<_Elem, _Byte, _Statype>(
				_Locinfo(_Ploc->c_str()));
		return (2);
		}

protected:
	virtual  ~codecvt() throw ()
		{	
		}

	void  _Init(const _Locinfo& _Lobj)
		{	
		_Cvt = _Lobj._Getcvt();
		}

	virtual result  do_in(_Statype& _State,
		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
			_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
		{	
		;
		;
		_Mid1 = _First1, _Mid2 = _First2;
		result _Ans = _Mid1 == _Last1 ? ok : partial;
		int _Bytes;

		while (_Mid1 != _Last1 && _Mid2 != _Last2)
			switch (_Bytes = _Mbrtowc((wchar_t *)_Mid2, _Mid1, _Last1 - _Mid1,
				&_State, &_Cvt))
			{	
			case -2:	
				_Mid1 = _Last1;
				return (_Ans);

			case -1:	
				return (error);

			case 0:	
				if (*_Mid2 == (_Elem)0)
					_Bytes = (int):: strlen(_Mid1) + 1;
				

			default:	
				if (_Bytes == -3)
					_Bytes = 0;	
				_Mid1 += _Bytes;
				++_Mid2;
				_Ans = ok;
			}
		return (_Ans);
		}

	virtual result  do_out(_Statype& _State,
		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
			_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		;
		;
		_Mid1 = _First1, _Mid2 = _First2;
		result _Ans = _Mid1 == _Last1 ? ok : partial;
		int _Bytes;

		while (_Mid1 != _Last1 && _Mid2 != _Last2)
			if ((int)___mb_cur_max_func() <= _Last2 - _Mid2)
				if ((_Bytes = _Wcrtomb(_Mid2, *_Mid1,
					&_State, &_Cvt)) < 0)
					return (error);	
				else
					++_Mid1, _Mid2 += _Bytes, _Ans = ok;
			else
				{	
				_Byte _Buf[5];
				_Statype _Stsave = _State;

				if ((_Bytes = _Wcrtomb(_Buf, *_Mid1,
					&_State, &_Cvt)) < 0)
					return (error);	
				else if (_Last2 - _Mid2 < _Bytes)
					{	
					_State = _Stsave;
					return (_Ans);
					}
				else
					{	
					:: memcpy(_Mid2, _Buf, _Bytes);
					++_Mid1, _Mid2 += _Bytes, _Ans = ok;
					}
				}
		return (_Ans);
		}

	virtual result  do_unshift(_Statype& _State,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		;
		_Mid2 = _First2;
		result _Ans = ok;
		int _Bytes;
		_Byte _Buf[5];
		_Statype _Stsave = _State;

		if ((_Bytes = _Wcrtomb(_Buf, L'\0', &_State, &_Cvt)) <= 0)
			_Ans = error;	
		else if (_Last2 - _Mid2 < --_Bytes)
			{	
			_State = _Stsave;
			_Ans = partial;
			}
		else if (0 < _Bytes)
			{	
			:: memcpy(_Mid2, _Buf, _Bytes);
			_Mid2 += _Bytes;
			}
		return (_Ans);
		}

	virtual int  do_length(_Statype& _State, const _Byte *_First1,
		const _Byte *_Last1, size_t _Count) const
		{	
		;
		int _Wchars;
		const _Byte *_Mid1;
		_Statype _Mystate = _State;

		for (_Wchars = 0, _Mid1 = _First1;
			(size_t)_Wchars < _Count && _Mid1 != _Last1; )
			{	
			int _Bytes;
			_Elem _Ch;

			switch (_Bytes = _Mbrtowc((wchar_t *)&_Ch, _Mid1, _Last1 - _Mid1,
				&_Mystate, &_Cvt))
				{	
			case -2:	
				return (_Wchars);

			case -1:	
				return (_Wchars);

			case 0:	
				if (_Ch == (_Elem)0)
					_Bytes = (int):: strlen(_Mid1) + 1;
				

			default:	
				if (_Bytes == -3)
					_Bytes = 0;	
				_Mid1 += _Bytes;
				++_Wchars;
				}
			}
		return (_Wchars);
		}

	virtual bool  do_always_noconv() const throw ()
		{	
		return (false);
		}

	virtual int  do_max_length() const throw ()
		{	
		return (5);
		}

	virtual int  do_encoding() const throw ()
		{	
		return (0);	
		}

private:
	_Locinfo::_Cvtvec _Cvt;	
	};
 #line 2058 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocale"

		
template<class _Elem,
	class _Byte,
	class _Statype>
	class codecvt_byname
		: public codecvt<_Elem, _Byte, _Statype>
	{	
public:
	explicit  codecvt_byname(const char *_Locname, size_t _Refs = 0)
		: codecvt<_Elem, _Byte, _Statype>(_Locinfo(_Locname), _Refs)
		{	
		}

	explicit  codecvt_byname(const string& _Str, size_t _Refs = 0)
		: codecvt<_Elem, _Byte, _Statype>(_Locinfo(_Str.c_str()), _Refs)
		{	
		}

protected:
	virtual  ~codecvt_byname() throw ()
		{	
		}
	};

		
 #pragma warning(push)
 #pragma warning(disable: 4275)

struct  ctype_base
	: public locale::facet
	{	
	enum	{	
		alnum = 0x4 | 0x2 | 0x1 | 0x100, alpha = 0x2 | 0x1 | 0x100,
		cntrl = 0x20, digit = 0x4, graph = 0x4 | 0x2 | 0x10 | 0x1 | 0x100,
		lower = 0x2, print = 0x4 | 0x2 | 0x10 | 0x40 | 0x1 | 0x100 | 0x80,
		punct = 0x10, space = 0x8 | 0x40 | 0x000, upper = 0x1,
		xdigit = 0x80, blank = 0x8 | 0x40 | 0x000 | 0x000};
	typedef short mask;	

	 ctype_base(size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		}

	 ~ctype_base() throw ()
		{	
		}
	};

 #pragma warning(pop)

		
template<class _Elem>
	class ctype
		: public ctype_base
	{	
public:
	typedef _Elem char_type;

	bool  is(mask _Maskval, _Elem _Ch) const
		{	
		return (do_is(_Maskval, _Ch));
		}

	const _Elem * is(const _Elem *_First, const _Elem *_Last,
		mask *_Dest) const
		{	
		return (do_is(_First, _Last, _Dest));
		}

	const _Elem * scan_is(mask _Maskval, const _Elem *_First,
		const _Elem *_Last) const
		{	
		return (do_scan_is(_Maskval, _First, _Last));
		}

	const _Elem * scan_not(mask _Maskval, const _Elem *_First,
		const _Elem *_Last) const
		{	
		return (do_scan_not(_Maskval, _First, _Last));
		}

	_Elem  tolower(_Elem _Ch) const
		{	
		return (do_tolower(_Ch));
		}

	const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
		{	
		return (do_tolower(_First, _Last));
		}

	_Elem  toupper(_Elem _Ch) const
		{	
		return (do_toupper(_Ch));
		}

	const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
		{	
		return (do_toupper(_First, _Last));
		}

	_Elem  widen(char _Byte) const
		{	
		return (do_widen(_Byte));
		}

	const char * widen(const char *_First, const char *_Last,
		_Elem *_Dest) const
		{	
		return (do_widen(_First, _Last, _Dest));
		}

	char  narrow(_Elem _Ch, char _Dflt = '\0') const
		{	
		return (do_narrow(_Ch, _Dflt));
		}

	const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
		char _Dflt, char *_Dest) const
		{	
		return (do_narrow(_First, _Last, _Dflt, _Dest));
		}

	 static locale::id id;

	explicit  ctype(size_t _Refs = 0)
		: ctype_base(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
		: ctype_base(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new ctype<_Elem>(
				_Locinfo(_Ploc->c_str()));
		return (2);
		}

protected:
	virtual  ~ctype() throw ()
		{	
		if (_Ctype._Delfl)
			free((void *)_Ctype._Table);

		free((void *)_Ctype._LocaleName);
		}

	void  _Init(const _Locinfo& _Lobj)
		{	
		_Ctype = _Lobj._Getctype();
		_Cvt = _Lobj._Getcvt();
		}

	virtual bool  do_is(mask _Maskval, _Elem _Ch) const
		{	
		return ((_Ctype._Table[(unsigned char)narrow(_Ch)]
			& _Maskval) != 0);
		}

	virtual const _Elem * do_is(const _Elem *_First, const _Elem *_Last,
		mask *_Dest) const
		{	
		;
		;
		for (; _First != _Last; ++_First, ++_Dest)
			*_Dest = _Ctype._Table[(unsigned char)narrow(*_First)];
		return (_First);
		}

	virtual const _Elem * do_scan_is(mask _Maskval,
		const _Elem *_First, const _Elem *_Last) const
		{	
		;
		for (; _First != _Last && !is(_Maskval, *_First); ++_First)
			;
		return (_First);
		}

	virtual const _Elem * do_scan_not(mask _Maskval,
		const _Elem *_First, const _Elem *_Last) const
		{	
		;
		for (; _First != _Last && is(_Maskval, *_First); ++_First)
			;
		return (_First);
		}

	virtual _Elem  do_tolower(_Elem _Ch) const
		{	
		unsigned char _Byte = (unsigned char)narrow(_Ch, '\0');
		if (_Byte == '\0')
			return (_Ch);
		else
			return (widen((char)_Tolower(_Byte, &_Ctype)));
		}

	virtual const _Elem * do_tolower(_Elem *_First,
		const _Elem *_Last) const
		{	
		;
		for (; _First != _Last; ++_First)
			{	
			unsigned char _Byte = (unsigned char)narrow(*_First, '\0');
			if (_Byte != '\0')
				*_First = (widen((char)_Tolower(_Byte, &_Ctype)));
			}
		return ((const _Elem *)_First);
		}

	virtual _Elem  do_toupper(_Elem _Ch) const
		{	
		unsigned char _Byte = (unsigned char)narrow(_Ch, '\0');
		if (_Byte == '\0')
			return (_Ch);
		else
			return (widen((char)_Toupper(_Byte, &_Ctype)));
		}

	virtual const _Elem * do_toupper(_Elem *_First,
		const _Elem *_Last) const
		{	
		;
		for (; _First != _Last; ++_First)
			{	
			unsigned char _Byte = (unsigned char)narrow(*_First, '\0');
			if (_Byte != '\0')
				*_First = (widen((char)_Toupper(_Byte, &_Ctype)));
			}
		return ((const _Elem *)_First);
		}

	virtual _Elem  do_widen(char _Byte) const
		{	
		return (_Maklocchr(_Byte, (_Elem *)0, _Cvt));
		}

	virtual const char * do_widen(const char *_First,
		const char *_Last, _Elem *_Dest) const
		{	
		;
		;
		for (; _First != _Last; ++_First, ++_Dest)
			*_Dest = _Maklocchr(*_First, (_Elem *)0, _Cvt);
		return (_First);
		}

	char  _Donarrow(_Elem _Ch, char _Dflt) const
		{	
		char _Byte;
		if (_Ch == (_Elem)0)
			return ('\0');
		else if ((_Byte = _Maklocbyte((_Elem)_Ch, _Cvt)) == '\0')
			return (_Dflt);
		else
			return (_Byte);
		}

	virtual char  do_narrow(_Elem _Ch, char _Dflt) const
		{	
		return (_Donarrow(_Ch, _Dflt));
		}

	virtual const _Elem * do_narrow(const _Elem *_First,
		const _Elem *_Last, char _Dflt, char *_Dest) const
		{	
		;
		;
		for (; _First != _Last; ++_First, ++_Dest)
			*_Dest = _Donarrow(*_First, _Dflt);
		return (_First);
		}

private:
	_Locinfo::_Ctypevec _Ctype;	
	_Locinfo::_Cvtvec _Cvt;		
	};

		
template<class _Elem>
	locale::id ctype<_Elem>::id;

		
template<>
	class  ctype<char>
	: public ctype_base
	{	
	typedef ctype<char> _Myt;

public:
	typedef char _Elem;
	typedef _Elem char_type;

	bool  is(mask _Maskval, _Elem _Ch) const
		{	
		return ((_Ctype._Table[(unsigned char)_Ch] & _Maskval) != 0);
		}

	const _Elem * is(const _Elem *_First,
		const _Elem *_Last, mask *_Dest) const
		{	
		;
		;
		for (; _First != _Last; ++_First, ++_Dest)
			*_Dest = _Ctype._Table[(unsigned char)*_First];
		return (_First);
		}

	const _Elem * scan_is(mask _Maskval,
		const _Elem *_First, const _Elem *_Last) const
		{	
		;
		for (; _First != _Last && !is(_Maskval, *_First); ++_First)
			;
		return (_First);
		}

	const _Elem * scan_not(mask _Maskval,
		const _Elem *_First, const _Elem *_Last) const
		{	
		;
		for (; _First != _Last && is(_Maskval, *_First); ++_First)
			;
		return (_First);
		}

	_Elem  tolower(_Elem _Ch) const
		{	
		return (do_tolower(_Ch));
		}

	const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
		{	
		return (do_tolower(_First, _Last));
		}

	_Elem  toupper(_Elem _Ch) const
		{	
		return (do_toupper(_Ch));
		}

	const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
		{	
		return (do_toupper(_First, _Last));
		}

	_Elem  widen(char _Byte) const
		{	
		return (do_widen(_Byte));
		}

	const _Elem * widen(const char *_First, const char *_Last,
		_Elem *_Dest) const
		{	
		return (do_widen(_First, _Last, _Dest));
		}

	_Elem  narrow(_Elem _Ch, char _Dflt = '\0') const
		{	
		return (do_narrow(_Ch, _Dflt));
		}

	const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
		char _Dflt, char *_Dest) const
		{	
		return (do_narrow(_First, _Last, _Dflt, _Dest));
		}

	 static locale::id id;

	explicit  ctype(const mask *_Table = 0,
		bool _Deletetable = false,
		size_t _Refs = 0)
		: ctype_base(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}

		_Tidy();	
		if (_Table != 0)
			{	
			_Ctype._Table = _Table;
			_Ctype._Delfl = _Deletetable ? -1 : 0;
			}
		else
			{	
			_Ctype._Table = classic_table();
			_Ctype._Delfl = 0;
			}
		}

	 ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
		: ctype_base(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new ctype<_Elem>(
				_Locinfo(_Ploc->c_str()));
		return (2);
		}

	const mask * table() const throw ()
		{	
		return (_Ctype._Table);
		}

	static const mask *__cdecl classic_table() throw ()
		{	
		const _Myt& _Ctype_fac = use_facet< _Myt >(locale::classic());
		return (_Ctype_fac.table());
		}

	 static const size_t table_size =
		1 << 8;	

protected:
	virtual  ~ctype() throw ()
		{	
		_Tidy();
		}

	void  _Init(const _Locinfo& _Lobj)
		{	
		_Ctype = _Lobj._Getctype();
		}

	void  _Tidy()
		{	
		if (0 < _Ctype._Delfl)
			free((void *)_Ctype._Table);
		else if (_Ctype._Delfl < 0)
			delete[] (void *)_Ctype._Table;

		free((void *)_Ctype._LocaleName);
		}

	virtual _Elem  do_tolower(_Elem _Ch) const
		{	
		return ((_Elem)_Tolower((unsigned char)_Ch, &_Ctype));
		}

	virtual const _Elem * do_tolower(_Elem *_First,
		const _Elem *_Last) const
		{	
		;
		for (; _First != _Last; ++_First)
			*_First = (_Elem)_Tolower((unsigned char)*_First, &_Ctype);
		return ((const _Elem *)_First);
		}

	virtual _Elem  do_toupper(_Elem _Ch) const
		{	
		return ((_Elem)_Toupper((unsigned char)_Ch, &_Ctype));
		}

	virtual const _Elem * do_toupper(_Elem *_First,
		const _Elem *_Last) const
		{	
		;
		for (; _First != _Last; ++_First)
			*_First = (_Elem)_Toupper((unsigned char)*_First, &_Ctype);
		return ((const _Elem *)_First);
		}

	virtual _Elem  do_widen(char _Byte) const
		{	
		return (_Byte);
		}

	virtual const _Elem * do_widen(const char *_First,
		const char *_Last, _Elem *_Dest) const
		{	
		;
		;
		:: memcpy(_Dest, _First, _Last - _First);
		return (_Last);
		}

	virtual _Elem  do_narrow(_Elem _Ch, char) const
		{	
		return (_Ch);
		}

	virtual const _Elem * do_narrow(const _Elem *_First,
		const _Elem *_Last, char, char *_Dest) const
		{	
		;
		;
		:: memcpy(_Dest, _First, _Last - _First);
		return (_Last);
		}

private:
	_Locinfo::_Ctypevec _Ctype;	
	};

		
template<>
	class  ctype<wchar_t>
	: public ctype_base
	{	
	typedef ctype<wchar_t> _Myt;

public:
	typedef wchar_t _Elem;
	typedef _Elem char_type;

	bool  is(mask _Maskval, _Elem _Ch) const
		{	
		return (do_is(_Maskval, _Ch));
		}

	const _Elem * is(const _Elem *_First, const _Elem *_Last,
		mask *_Dest) const
		{	
		return (do_is(_First, _Last, _Dest));
		}

	const _Elem * scan_is(mask _Maskval, const _Elem *_First,
		const _Elem *_Last) const
		{	
		return (do_scan_is(_Maskval, _First, _Last));
		}

	const _Elem * scan_not(mask _Maskval, const _Elem *_First,
		const _Elem *_Last) const
		{	
		return (do_scan_not(_Maskval, _First, _Last));
		}

	_Elem  tolower(_Elem _Ch) const
		{	
		return (do_tolower(_Ch));
		}

	const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
		{	
		return (do_tolower(_First, _Last));
		}

	_Elem  toupper(_Elem _Ch) const
		{	
		return (do_toupper(_Ch));
		}

	const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
		{	
		return (do_toupper(_First, _Last));
		}

	_Elem  widen(char _Byte) const
		{	
		return (do_widen(_Byte));
		}

	const char * widen(const char *_First, const char *_Last,
		_Elem *_Dest) const
		{	
		return (do_widen(_First, _Last, _Dest));
		}

	char  narrow(_Elem _Ch, char _Dflt = '\0') const
		{	
		return (do_narrow(_Ch, _Dflt));
		}

	const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
		char _Dflt, char *_Dest) const
		{	
		return (do_narrow(_First, _Last, _Dflt, _Dest));
		}

	 static locale::id id;

	explicit  ctype(size_t _Refs = 0)
		: ctype_base(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
		: ctype_base(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new ctype<_Elem>(
				_Locinfo(_Ploc->c_str()));
		return (2);
		}

protected:
	virtual  ~ctype() throw ()
		{	
		if (_Ctype._Delfl)
			free((void *)_Ctype._Table);

		free((void *)_Ctype._LocaleName);
		}

	void  _Init(const _Locinfo& _Lobj)
		{	
		_Ctype = _Lobj._Getctype();
		_Cvt = _Lobj._Getcvt();
		}

	virtual bool  do_is(mask _Maskval, _Elem _Ch) const
		{	
		return ((:: _Getwctype(_Ch, &_Ctype) & _Maskval) != 0);
		}

	virtual const _Elem * do_is(const _Elem *_First,
		const _Elem *_Last, mask *_Dest) const
		{	
		;
		;
		return (:: _Getwctypes(_First, _Last, _Dest, &_Ctype));
		}

	virtual const _Elem * do_scan_is(mask _Maskval,
		const _Elem *_First, const _Elem *_Last) const
		{	
		;
		for (; _First != _Last && !is(_Maskval, *_First); ++_First)
			;
		return (_First);
		}

	virtual const _Elem * do_scan_not(mask _Maskval,
		const _Elem *_First, const _Elem *_Last) const
		{	
		;
		for (; _First != _Last && is(_Maskval, *_First); ++_First)
			;
		return (_First);
		}

	virtual _Elem  do_tolower(_Elem _Ch) const
		{	
		return (_Towlower(_Ch, &_Ctype));
		}

	virtual const _Elem * do_tolower(_Elem *_First,
		const _Elem *_Last) const
		{	
		;
		for (; _First != _Last; ++_First)
			*_First = _Towlower(*_First, &_Ctype);
		return ((const _Elem *)_First);
		}

	virtual _Elem  do_toupper(_Elem _Ch) const
		{	
		return (_Towupper(_Ch, &_Ctype));
		}

	virtual const _Elem * do_toupper(_Elem *_First,
		const _Elem *_Last) const
		{	
		;
		for (; _First != _Last; ++_First)
			*_First = _Towupper(*_First, &_Ctype);
		return ((const _Elem *)_First);
		}

	_Elem  _Dowiden(char _Byte) const
		{	
		mbstate_t _Mbst = {0};
		wchar_t _Wc;
		return (_Mbrtowc(&_Wc, &_Byte, 1, &_Mbst, &_Cvt) < 0
			? (wchar_t)(wint_t)(0xFFFF) : _Wc);
		}

	virtual _Elem  do_widen(char _Byte) const
		{	
		return (_Dowiden(_Byte));
		}

	virtual const char * do_widen(const char *_First,
		const char *_Last, _Elem *_Dest) const
		{	
		;
		;
		for (; _First != _Last; ++_First, ++_Dest)
			*_Dest = _Dowiden(*_First);
		return (_First);
		}

	char  _Donarrow(_Elem _Ch, char _Dflt) const
		{	
		char _Buf[5];
		mbstate_t _Mbst = {0};
		return (_Wcrtomb(_Buf, _Ch, &_Mbst, &_Cvt) != 1
			? _Dflt : _Buf[0]);
		}

	virtual char  do_narrow(_Elem _Ch, char _Dflt) const
		{	
		return (_Donarrow(_Ch, _Dflt));
		}

	virtual const _Elem * do_narrow(const _Elem *_First,
		const _Elem *_Last, char _Dflt, char *_Dest) const
		{	
		;
		;
		for (; _First != _Last; ++_First, ++_Dest)
			*_Dest = _Donarrow(*_First, _Dflt);
		return (_First);
		}

private:
	_Locinfo::_Ctypevec _Ctype;	
	_Locinfo::_Cvtvec _Cvt;		
	};

 
		
template<>
	class  ctype<unsigned short>
	: public ctype_base
	{	
	typedef ctype<unsigned short> _Myt;

public:
	typedef unsigned short _Elem;
	typedef _Elem char_type;

	bool  is(mask _Maskval, _Elem _Ch) const
		{	
		return (do_is(_Maskval, _Ch));
		}

	const _Elem * is(const _Elem *_First, const _Elem *_Last,
		mask *_Dest) const
		{	
		return (do_is(_First, _Last, _Dest));
		}

	const _Elem * scan_is(mask _Maskval, const _Elem *_First,
		const _Elem *_Last) const
		{	
		return (do_scan_is(_Maskval, _First, _Last));
		}

	const _Elem * scan_not(mask _Maskval, const _Elem *_First,
		const _Elem *_Last) const
		{	
		return (do_scan_not(_Maskval, _First, _Last));
		}

	_Elem  tolower(_Elem _Ch) const
		{	
		return (do_tolower(_Ch));
		}

	const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
		{	
		return (do_tolower(_First, _Last));
		}

	_Elem  toupper(_Elem _Ch) const
		{	
		return (do_toupper(_Ch));
		}

	const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
		{	
		return (do_toupper(_First, _Last));
		}

	_Elem  widen(char _Byte) const
		{	
		return (do_widen(_Byte));
		}

	const char * widen(const char *_First, const char *_Last,
		_Elem *_Dest) const
		{	
		return (do_widen(_First, _Last, _Dest));
		}

	char  narrow(_Elem _Ch, char _Dflt = '\0') const
		{	
		return (do_narrow(_Ch, _Dflt));
		}

	const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
		char _Dflt, char *_Dest) const
		{	
		return (do_narrow(_First, _Last, _Dflt, _Dest));
		}

	 static locale::id id;

	explicit  ctype(size_t _Refs = 0)
		: ctype_base(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
		: ctype_base(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new ctype<_Elem>(
				_Locinfo(_Ploc->c_str()));
		return (2);
		}

protected:
	virtual  ~ctype() throw ()
		{	
		if (_Ctype._Delfl)
			free((void *)_Ctype._Table);

		free((void *)_Ctype._LocaleName);
		}

	void  _Init(const _Locinfo& _Lobj)
		{	
		_Ctype = _Lobj._Getctype();
		_Cvt = _Lobj._Getcvt();
		}

	virtual bool  do_is(mask _Maskval, _Elem _Ch) const
		{	
		return ((:: _Getwctype(_Ch, &_Ctype) & _Maskval) != 0);
		}

	virtual const _Elem * do_is(const _Elem *_First,
		const _Elem *_Last, mask *_Dest) const
		{	
		;
		;
		return ((const _Elem *):: _Getwctypes((const wchar_t *)_First,
			(const wchar_t *)_Last, _Dest, &_Ctype));
		}

	virtual const _Elem * do_scan_is(mask _Maskval,
		const _Elem *_First, const _Elem *_Last) const
		{	
		;
		for (; _First != _Last && !is(_Maskval, *_First); ++_First)
			;
		return (_First);
		}

	virtual const _Elem * do_scan_not(mask _Maskval,
		const _Elem *_First, const _Elem *_Last) const
		{	
		;
		for (; _First != _Last && is(_Maskval, *_First); ++_First)
			;
		return (_First);
		}

	virtual _Elem  do_tolower(_Elem _Ch) const
		{	
		return (_Towlower(_Ch, &_Ctype));
		}

	virtual const _Elem * do_tolower(_Elem *_First,
		const _Elem *_Last) const
		{	
		;
		for (; _First != _Last; ++_First)
			*_First = _Towlower(*_First, &_Ctype);
		return ((const _Elem *)_First);
		}

	virtual _Elem  do_toupper(_Elem _Ch) const
		{	
		return (_Towupper(_Ch, &_Ctype));
		}

	virtual const _Elem * do_toupper(_Elem *_First,
		const _Elem *_Last) const
		{	
		;
		for (; _First != _Last; ++_First)
			*_First = _Towupper(*_First, &_Ctype);
		return ((const _Elem *)_First);
		}

	_Elem  _Dowiden(char _Byte) const
		{	
		mbstate_t _Mbst = {0};
		unsigned short _Wc;
		return (_Mbrtowc((wchar_t *)&_Wc, &_Byte, 1, &_Mbst, &_Cvt) < 0
			? (unsigned short)(wint_t)(0xFFFF) : _Wc);
		}

	virtual _Elem  do_widen(char _Byte) const
		{	
		return (_Dowiden(_Byte));
		}

	virtual const char * do_widen(const char *_First,
		const char *_Last, _Elem *_Dest) const
		{	
		;
		;
		for (; _First != _Last; ++_First, ++_Dest)
			*_Dest = _Dowiden(*_First);
		return (_First);
		}

	char  _Donarrow(_Elem _Ch, char _Dflt) const
		{	
		char _Buf[5];
		mbstate_t _Mbst = {0};
		return (_Wcrtomb(_Buf, _Ch, &_Mbst, &_Cvt) != 1
			? _Dflt : _Buf[0]);
		}

	virtual char  do_narrow(_Elem _Ch, char _Dflt) const
		{	
		return (_Donarrow(_Ch, _Dflt));
		}

	virtual const _Elem * do_narrow(const _Elem *_First,
		const _Elem *_Last, char _Dflt, char *_Dest) const
		{	
		;
		;
		for (; _First != _Last; ++_First, ++_Dest)
			*_Dest = _Donarrow(*_First, _Dflt);
		return (_First);
		}

private:
	_Locinfo::_Ctypevec _Ctype;	
	_Locinfo::_Cvtvec _Cvt;		
	};
 #line 3026 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocale"

		
template<class _Elem>
	class ctype_byname
	: public ctype<_Elem>
	{	
public:
	explicit  ctype_byname(const char *_Locname, size_t _Refs = 0)
		: ctype<_Elem>(_Locinfo(_Locname), _Refs)
		{	
		}

	explicit  ctype_byname(const string& _Str, size_t _Refs = 0)
		: ctype<_Elem>(_Locinfo(_Str.c_str()), _Refs)
		{	
		}

protected:
	virtual  ~ctype_byname() throw ()
		{	
		}
	};

		
template<>
	class ctype_byname<char>
	: public ctype<char>
	{	
public:
	explicit  ctype_byname(const char *_Locname, size_t _Refs = 0)
		: ctype<char>(_Locinfo(_Locname), _Refs)
		{	
		}

	explicit  ctype_byname(const string& _Str, size_t _Refs = 0)
		: ctype<char>(_Locinfo(_Str.c_str()), _Refs)
		{	
		}

protected:
	virtual  ~ctype_byname() throw ()
		{	
		}
	};

 




#line 3077 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocale"
}
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 3082 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocale"
#line 3083 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocale"






#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xiosbase"

 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\system_error"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\cerrno"

#pragma once











 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\errno.h"















#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"







































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\errno.h"


extern "C" {
#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\errno.h"



























































#line 86 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\errno.h"
#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\errno.h"
















































}
#line 137 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\errno.h"

#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\errno.h"
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\cerrno"
#line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\cerrno"




#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\cerrno"
#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\cerrno"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\system_error"



 #pragma pack(push,8)
 #pragma warning(push,3)
 
 



namespace std {
		

enum class errc {	
	address_family_not_supported = 102,
	address_in_use = 100,
	address_not_available = 101,
	already_connected = 113,
	argument_list_too_long = 7,
	argument_out_of_domain = 33,
	bad_address = 14,
	bad_file_descriptor = 9,
	bad_message = 104,
	broken_pipe = 32,
	connection_aborted = 106,
	connection_already_in_progress = 103,
	connection_refused = 107,
	connection_reset = 108,
	cross_device_link = 18,
	destination_address_required = 109,
	device_or_resource_busy = 16,
	directory_not_empty = 41,
	executable_format_error = 8,
	file_exists = 17,
	file_too_large = 27,
	filename_too_long = 38,
	function_not_supported = 40,
	host_unreachable = 110,
	identifier_removed = 111,
	illegal_byte_sequence = 42,
	inappropriate_io_control_operation = 25,
	interrupted = 4,
	invalid_argument = 22,
	invalid_seek = 29,
	io_error = 5,
	is_a_directory = 21,
	message_size = 115,
	network_down = 116,
	network_reset = 117,
	network_unreachable = 118,
	no_buffer_space = 119,
	no_child_process = 10,
	no_link = 121,
	no_lock_available = 39,
	no_message_available = 120,
	no_message = 122,
	no_protocol_option = 123,
	no_space_on_device = 28,
	no_stream_resources = 124,
	no_such_device_or_address = 6,
	no_such_device = 19,
	no_such_file_or_directory = 2,
	no_such_process = 3,
	not_a_directory = 20,
	not_a_socket = 128,
	not_a_stream = 125,
	not_connected = 126,
	not_enough_memory = 12,
	not_supported = 129,
	operation_canceled = 105,
	operation_in_progress = 112,
	operation_not_permitted = 1,
	operation_not_supported = 130,
	operation_would_block = 140,
	owner_dead = 133,
	permission_denied = 13,
	protocol_error = 134,
	protocol_not_supported = 135,
	read_only_file_system = 30,
	resource_deadlock_would_occur = 36,
	resource_unavailable_try_again = 11,
	result_out_of_range = 34,
	state_not_recoverable = 127,
	stream_timeout = 137,
	text_file_busy = 139,
	timed_out = 138,
	too_many_files_open_in_system = 23,
	too_many_files_open = 24,
	too_many_links = 31,
	too_many_symbolic_link_levels = 114,
	value_too_large = 132,
	wrong_protocol_type = 136
	};

typedef errc generic_errno;

		

enum class io_errc {	
	stream = 1
	};

typedef io_errc _Io_errc;

		
template<class _Enum>
	struct is_error_code_enum
		: public false_type
	{	
	};

template<>
	struct is_error_code_enum<_Io_errc>
		: public true_type
	{	
	};

		
template<class _Enum>
	struct is_error_condition_enum
		: public false_type
	{	
	};

template<>
	struct is_error_condition_enum<generic_errno>
		: public true_type
	{	
	};

class error_code;
class error_condition;
error_code make_error_code(generic_errno) throw ();
error_code make_error_code(_Io_errc) throw ();
error_condition make_error_condition(generic_errno) throw ();
error_condition make_error_condition(_Io_errc) throw ();

		
class error_category;

const error_category& generic_category() throw ();
const error_category& iostream_category() throw ();
const error_category& system_category() throw ();

class error_category
	{	
public:
	error_category()
		{	
		}

	virtual ~error_category() throw ()
		{	
		}

	virtual const char *name() const throw () = 0;

	virtual string message(int _Errval) const = 0;

	virtual error_condition
		default_error_condition(int _Errval) const throw ();

	virtual bool equivalent(int _Errval,
		const error_condition& _Cond) const throw ();

	virtual bool equivalent(const error_code& _Code,
		int _Errval) const throw ();

	bool operator==(const error_category& _Right) const throw ()
		{	
		return (this == &_Right);
		}

	bool operator!=(const error_category& _Right) const throw ()
		{	
		return (!(*this == _Right));
		}

	bool operator<(const error_category& _Right) const throw ()
		{	
		return (this < &_Right);
		}

private:
	error_category(const error_category&);	

	error_category& operator=(const error_category&);	
	};

		
class error_code
	{	
public:
	typedef error_code _Myt;

	error_code()
		: _Myval(0),
			_Mycat(&system_category())
		{	
		}

	error_code(int _Val, const error_category& _Cat)
		: _Myval(_Val), _Mycat(&_Cat)
		{	
		}

	template<class _Enum,
		class = typename enable_if<is_error_code_enum<_Enum>::value,
			void>::type>
		error_code(_Enum _Errcode)
		: _Myval(0), _Mycat(0)
		{	
		*this = make_error_code(_Errcode);	
		}

	void assign(int _Val, const error_category& _Cat)
		{	
		_Myval = _Val;
		_Mycat = &_Cat;
		}

	template<class _Enum>
		typename enable_if<is_error_code_enum<_Enum>::value,
			error_code>::type& operator=(_Enum _Errcode)
		{	
		*this = make_error_code(_Errcode);	
		return (*this);
		}

	void clear() throw ()
		{	
		_Myval = 0;
		_Mycat = &system_category();
		}

	int value() const
		{	
		return (_Myval);
		}

	const error_category& category() const
		{	
		return (*_Mycat);
		}

	error_condition default_error_condition() const;

	string message() const
		{	
		return (category().message(value()));
		}

	explicit operator bool() const throw ()
		{	
		return (value() != 0);
		}

	bool operator==(const error_code& _Right) const throw ()
		{	
		return (category() == _Right.category()
			&& value() == _Right.value());
		}

	bool operator!=(const error_code& _Right) const throw ()
		{	
		return (!(*this == _Right));
		}

	bool operator<(const error_code& _Right) const throw ()
		{	
		return (category() < _Right.category()
			|| (category() == _Right.category()
				&& value() < _Right.value()));
		}

private:
	int _Myval;	
	const error_category *_Mycat;	
	};

		
class error_condition
	{	
public:
	typedef error_condition _Myt;

	error_condition() throw ()
		: _Myval(0),
			_Mycat(&generic_category())
		{	
		}

	error_condition(int _Val, const error_category& _Cat) throw ()
		: _Myval(_Val), _Mycat(&_Cat)
		{	
		}

	template<class _Enum,
		class = typename enable_if<is_error_condition_enum<_Enum>::value,
			void>::type>
		error_condition(_Enum _Errcode) throw ()
		: _Myval(0), _Mycat(0)
		{	
		*this = make_error_condition(_Errcode);	
		}

	void assign(int _Val, const error_category& _Cat) throw ()
		{	
		_Myval = _Val;
		_Mycat = &_Cat;
		}

	template<class _Enum>
		typename enable_if<is_error_condition_enum<_Enum>::value,
			error_condition>::type& operator=(_Enum _Errcode) throw ()
		{	
		*this = make_error_condition(_Errcode);	
		return (*this);
		}

	void clear() throw ()
		{	
		_Myval = 0;
		_Mycat = &generic_category();
		}

	int value() const throw ()
		{	
		return (_Myval);
		}

	const error_category& category() const throw ()
		{	
		return (*_Mycat);
		}

	string message() const
		{	
		return (category().message(value()));
		}

	explicit operator bool() const throw ()
		{	
		return (value() != 0);
		}

	bool operator==(const error_condition& _Right) const throw ()
		{	
		return (category() == _Right.category()
			&& value() == _Right.value());
		}

	bool operator!=(const error_condition& _Right) const throw ()
		{	
		return (!(*this == _Right));
		}

	bool operator<(const error_condition& _Right) const throw ()
		{	
		return (category() < _Right.category()
			|| (category() == _Right.category()
				&& value() < _Right.value()));
		}

private:
	int _Myval;	
	const error_category *_Mycat;	
	};

		
inline error_condition
	error_category::default_error_condition(int _Errval) const throw ()
	{	
	return (error_condition(_Errval, *this));
	}

inline bool
	error_category::equivalent(int _Errval,
		const error_condition& _Cond) const throw ()
	{	
	return (default_error_condition(_Errval) == _Cond);
	}

inline bool
	error_category::equivalent(const error_code& _Code,
		int _Errval) const throw ()
	{	
	return (*this == _Code.category() && _Code.value() == _Errval);
	}

		
inline error_condition error_code::default_error_condition() const
	{	
	return (category().default_error_condition(value()));
	}

		
inline bool operator==(
	const error_code& _Left,
	const error_condition& _Right) throw ()
	{	
	return (_Left.category().equivalent(_Left.value(), _Right)
		|| _Right.category().equivalent(_Left, _Right.value()));
	}

inline bool operator==(
	const error_condition& _Left,
	const error_code& _Right) throw ()
	{	
	return (_Right.category().equivalent(_Right.value(), _Left)
		|| _Left.category().equivalent(_Right, _Left.value()));
	}

		
inline bool operator!=(
	const error_code& _Left,
	const error_condition& _Right) throw ()
	{	
	return (!(_Left == _Right));
	}

inline bool operator!=(
	const error_condition& _Left,
	const error_code& _Right) throw ()
	{	
	return (!(_Left == _Right));
	}

		
inline error_code make_error_code(generic_errno _Errno) throw ()
	{	
	return (error_code((int)_Errno, generic_category()));
	}

inline error_code make_error_code(_Io_errc _Errno) throw ()
	{	
	return (error_code((int)_Errno, iostream_category()));
	}

		
inline error_condition make_error_condition(generic_errno _Errno) throw ()
	{	
	return (error_condition((int)_Errno, generic_category()));
	}

inline error_condition make_error_condition(_Io_errc _Errno) throw ()
	{	
	return (error_condition((int)_Errno, iostream_category()));
	}

		
template<>
	struct hash<error_code>
		: public unary_function<error_code, size_t>
	{	
	typedef error_code _Kty;

	size_t operator()(const _Kty& _Keyval) const
		{	
		return (hash<int>()(_Keyval.value()));
		}
	};

		
class _System_error
	: public runtime_error
	{	
private:
	static string _Makestr(error_code _Errcode, string _Message)
		{	
		if (!_Message.empty())
			_Message.append(": ");
		_Message.append(_Errcode.message());
		return (_Message);
		}

protected:
	_System_error(error_code _Errcode, const string& _Message)
		: runtime_error(_Makestr(_Errcode, _Message)), _Mycode(_Errcode)
		{	
		}

	error_code _Mycode;	
	};

class system_error
	: public _System_error
	{	
private:
	typedef _System_error _Mybase;

public:
	explicit system_error(error_code _Errcode)
		: _Mybase(_Errcode, "")
		{	
		}

	system_error(error_code _Errcode, const string& _Message)
		: _Mybase(_Errcode, _Message)
		{	
		}

	system_error(error_code _Errcode, const char *_Message)
		: _Mybase(_Errcode, _Message)
		{	
		}

	system_error(int _Errval, const error_category& _Errcat)
		: _Mybase(error_code(_Errval, _Errcat), "")
		{	
		}

	system_error(int _Errval, const error_category& _Errcat,
		const string& _Message)
		: _Mybase(error_code(_Errval, _Errcat), _Message)
		{	
		}

	system_error(int _Errval, const error_category& _Errcat,
		const char *_Message)
		: _Mybase(error_code(_Errval, _Errcat), _Message)
		{	
		}

	const error_code& code() const throw ()
		{	
		return (_Mycode);
		}

 

 





#line 545 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\system_error"
	};

 const char *__cdecl _Syserror_map(int);
 const char *__cdecl _Winerror_map(int);

		
class _Generic_error_category
	: public error_category
	{	
public:
	_Generic_error_category()
		{	
		}

	virtual const char *name() const throw ()
		{	
		return ("generic");
		}

	virtual string message(int _Errcode) const
		{	
		const char *_Name = _Syserror_map(_Errcode);
		return (string(_Name != 0 ? _Name : "unknown error"));
		}
	};

		
class _Iostream_error_category
	: public _Generic_error_category
	{	
public:
	_Iostream_error_category()
		{	
		}

	virtual const char *name() const throw ()
		{	
		return ("iostream");
		}

	virtual string message(int _Errcode) const
		{	
		if (_Errcode == (int)io_errc::stream)
			return ("iostream stream error");
		else
			return (_Generic_error_category::message(_Errcode));
		}
	};

		
class _System_error_category
	: public _Generic_error_category
	{	
public:
	_System_error_category()
		{	
		}

	virtual const char *name() const throw ()
		{	
		return ("system");
		}

	virtual string message(int _Errcode) const
		{	
		const char *_Name = _Winerror_map(_Errcode);
		return (string(_Name != 0 ? _Name : "unknown error"));
		}

	virtual error_condition
		default_error_condition(int _Errval) const throw ()
		{	
		if (_Syserror_map(_Errval))
			return (error_condition(_Errval, generic_category()));
		else
			return (error_condition(_Errval, system_category()));
		}
	};

template<class _Cat>
	struct _Error_objects
	{	
	_Error_objects()
		{	
		}

	static _Generic_error_category _Generic_object;
	static _Iostream_error_category _Iostream_object;
	static _System_error_category _System_object;
	};

template<class _Cat>
	_Generic_error_category _Error_objects<_Cat>::_Generic_object;
template<class _Cat>
	_Iostream_error_category _Error_objects<_Cat>::_Iostream_object;
template<class _Cat>
	_System_error_category _Error_objects<_Cat>::_System_object;

inline const error_category& generic_category() throw ()
	{	
	return (_Error_objects<int>::_Generic_object);
	}

inline const error_category& iostream_category() throw ()
	{	
	return (_Error_objects<int>::_Iostream_object);
	}

inline const error_category& system_category() throw ()
	{	
	return (_Error_objects<int>::_System_object);
	}
}
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 662 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\system_error"
#line 663 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\system_error"





#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xiosbase"

 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\share.h"












#pragma once






#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\share.h"













#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\share.h"

#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\share.h"
#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xiosbase"

 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 #pragma warning(disable: 4412)

 

namespace std {
 
 
 
 
 
 
 
 
 
 
 
 
 
 

 

 
 

 
 
 

		
template<class _Dummy>
	class _Iosb
	{	
public:
	enum _Dummy_enum {_Dummy_enum_val = 1};	
	enum _Fmtflags
		{	
		_Fmtmask = 0xffff, _Fmtzero = 0};

	static const _Fmtflags skipws = (_Fmtflags)0x0001;
	static const _Fmtflags unitbuf = (_Fmtflags)0x0002;
	static const _Fmtflags uppercase = (_Fmtflags)0x0004;
	static const _Fmtflags showbase = (_Fmtflags)0x0008;
	static const _Fmtflags showpoint = (_Fmtflags)0x0010;
	static const _Fmtflags showpos = (_Fmtflags)0x0020;
	static const _Fmtflags left = (_Fmtflags)0x0040;
	static const _Fmtflags right = (_Fmtflags)0x0080;
	static const _Fmtflags internal = (_Fmtflags)0x0100;
	static const _Fmtflags dec = (_Fmtflags)0x0200;
	static const _Fmtflags oct = (_Fmtflags)0x0400;
	static const _Fmtflags hex = (_Fmtflags)0x0800;
	static const _Fmtflags scientific = (_Fmtflags)0x1000;
	static const _Fmtflags fixed = (_Fmtflags)0x2000;

	static const _Fmtflags hexfloat =
		(_Fmtflags)0x3000;	

	static const _Fmtflags boolalpha = (_Fmtflags)0x4000;
	static const _Fmtflags _Stdio = (_Fmtflags)0x8000;
	static const _Fmtflags adjustfield = (_Fmtflags)(0x0040
		| 0x0080 | 0x0100);
	static const _Fmtflags basefield = (_Fmtflags)(0x0200
		| 0x0400 | 0x0800);
	static const _Fmtflags floatfield = (_Fmtflags)(0x1000
		| 0x2000);

	enum _Iostate
		{	
		_Statmask = 0x17};

	static const _Iostate goodbit = (_Iostate)0x0;
	static const _Iostate eofbit = (_Iostate)0x1;
	static const _Iostate failbit = (_Iostate)0x2;
	static const _Iostate badbit = (_Iostate)0x4;
	static const _Iostate _Hardfail = (_Iostate)0x10;

	enum _Openmode
		{	
		_Openmask = 0xff};

	static const _Openmode in = (_Openmode)0x01;
	static const _Openmode out = (_Openmode)0x02;
	static const _Openmode ate = (_Openmode)0x04;
	static const _Openmode app = (_Openmode)0x08;
	static const _Openmode trunc = (_Openmode)0x10;
	static const _Openmode _Nocreate = (_Openmode)0x40;
	static const _Openmode _Noreplace = (_Openmode)0x80;
	static const _Openmode binary = (_Openmode)0x20;

	enum _Seekdir
		{	
		_Seekmask = 0x3};

	static const _Seekdir beg = (_Seekdir)0;
	static const _Seekdir cur = (_Seekdir)1;
	static const _Seekdir end = (_Seekdir)2;

	enum	{	
		_Openprot = 0x40};
	};

template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::skipws;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::unitbuf;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::uppercase;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::showbase;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::showpoint;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::showpos;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::left;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::right;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::internal;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::dec;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::oct;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::hex;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::scientific;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::fixed;

template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags
		_Iosb<_Dummy>::hexfloat;	

template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::boolalpha;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::_Stdio;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::adjustfield;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::basefield;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::floatfield;

template<class _Dummy>
	const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::goodbit;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::eofbit;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::failbit;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::badbit;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::_Hardfail;

template<class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::in;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::out;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::ate;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::app;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::trunc;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::_Nocreate;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::_Noreplace;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::binary;

template<class _Dummy>
	const typename _Iosb<_Dummy>::_Seekdir _Iosb<_Dummy>::beg;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Seekdir _Iosb<_Dummy>::cur;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Seekdir _Iosb<_Dummy>::end;

		
class  ios_base
	: public _Iosb<int>
	{	
public:
	typedef int fmtflags;
	typedef int iostate;
	typedef int openmode;
	typedef int seekdir;

	typedef ::std:: streamoff streamoff;
	typedef ::std:: streampos streampos;

	enum event
		{	
		erase_event, imbue_event, copyfmt_event};

	typedef void (__cdecl *event_callback)(event, ios_base&, int);
	typedef unsigned int io_state, open_mode, seek_dir;

			
	class failure

		: public system_error
		{	
	public:
		explicit failure(const string &_Message,
			const error_code& _Errcode = make_error_code(io_errc::stream))
			: system_error(_Errcode, _Message)
			{	
			}

		explicit failure(const char *_Message,
			const error_code& _Errcode = make_error_code(io_errc::stream))
			: system_error(_Errcode, _Message)
			{	
			}


 

 





#line 246 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xiosbase"
		};

			
	class  Init
		{	
	public:
		 Init()
			{	
			_Init_ctor(this);
			}

		 ~Init() throw ()
			{	
			_Init_dtor(this);
			}

	private:
		static  void __cdecl _Init_ctor(Init *);
		static  void __cdecl _Init_dtor(Init *);

		 static int _Init_cnt;	

		static  int& __cdecl _Init_cnt_func();
		};

	explicit  operator bool() const
		{	
		return (!fail());
		}

	bool  operator!() const
		{	
		return (fail());
		}

	void  clear(iostate _State, bool _Reraise)
		{	
		_Mystate = (iostate)(_State & _Statmask);
		if ((_Mystate & _Except) == 0)
			;
		else if (_Reraise)
			throw;
		else if (_Mystate & _Except & badbit)
			throw failure("ios_base::badbit set");
		else if (_Mystate & _Except & failbit)
			throw failure("ios_base::failbit set");
		else
			throw failure("ios_base::eofbit set");
		}

	void  clear(iostate _State = goodbit)
		{	
		clear(_State, false);
		}

	void  clear(io_state _State)
		{	
		clear((iostate)_State);
		}

	iostate  rdstate() const
		{	
		return (_Mystate);
		}

	void  setstate(iostate _State, bool _Exreraise)
		{	
		if (_State != goodbit)
			clear((iostate)((int)rdstate() | (int)_State), _Exreraise);
		}

	void  setstate(iostate _State)
		{	
		if (_State != goodbit)
			clear((iostate)((int)rdstate() | (int)_State), false);
		}

	void  setstate(io_state _State)
		{	
		setstate((iostate)_State);
		}

	bool  good() const
		{	
		return (rdstate() == goodbit);
		}

	bool  eof() const
		{	
		return ((int)rdstate() & (int)eofbit);
		}

	bool  fail() const
		{	
		return (((int)rdstate()
			& ((int)badbit | (int)failbit)) != 0);
		}

	bool  bad() const
		{	
		return (((int)rdstate() & (int)badbit) != 0);
		}

	iostate  exceptions() const
		{	
		return (_Except);
		}

	void  exceptions(iostate _Newexcept)
		{	
		_Except = (iostate)((int)_Newexcept & (int)_Statmask);
		clear(_Mystate);
		}

	void  exceptions(io_state _State)
		{	
		exceptions((iostate)_State);
		}

	fmtflags  flags() const
		{	
		return (_Fmtfl);
		}

	fmtflags  flags(fmtflags _Newfmtflags)
		{	
		fmtflags _Oldfmtflags = _Fmtfl;
		_Fmtfl = (fmtflags)((int)_Newfmtflags & (int)_Fmtmask);
		return (_Oldfmtflags);
		}

	fmtflags  setf(fmtflags _Newfmtflags)
		{	
		ios_base::fmtflags _Oldfmtflags = _Fmtfl;
		_Fmtfl = (fmtflags)((int)_Fmtfl
			| ((int)_Newfmtflags & (int)_Fmtmask));
		return (_Oldfmtflags);
		}

	fmtflags  setf(fmtflags _Newfmtflags, fmtflags _Mask)
		{	
		ios_base::fmtflags _Oldfmtflags = _Fmtfl;
		_Fmtfl = (fmtflags)(((int)_Fmtfl & (int)~_Mask)
			| ((int)_Newfmtflags & (int)_Mask & (int)_Fmtmask));
		return (_Oldfmtflags);
		}

	void  unsetf(fmtflags _Mask)
		{	
		_Fmtfl = (fmtflags)((int)_Fmtfl & (int)~_Mask);
		}

	streamsize  precision() const
		{	
		return (_Prec);
		}

	streamsize  precision(streamsize _Newprecision)
		{	
		streamsize _Oldprecision = _Prec;
		_Prec = _Newprecision;
		return (_Oldprecision);
		}

	streamsize  width() const
		{	
		return (_Wide);
		}

	streamsize  width(streamsize _Newwidth)
		{	
		streamsize _Oldwidth = _Wide;
		_Wide = _Newwidth;
		return (_Oldwidth);
		}

	locale  getloc() const
		{	
		return (*_Ploc);
		}

	locale  imbue(const locale& _Loc)
		{	
		locale _Oldlocale = *_Ploc;
		*_Ploc = _Loc;
		_Callfns(imbue_event);
		return (_Oldlocale);
		}

	static int __cdecl xalloc()
		{	
		{ ::std:: _Lockit _Lock(2);	
			return (_Index++);
		}
		}

	long&  iword(int _Idx)
		{	
		return (_Findarr(_Idx)._Lo);
		}

	void *&  pword(int _Idx)
		{	
		return (_Findarr(_Idx)._Vp);
		}

	void  register_callback(event_callback _Pfn,
		int _Idx)
		{	
		_Calls = new _Fnarray(_Idx, _Pfn, _Calls);
		}

	ios_base&  copyfmt(const ios_base& _Other)
		{	
		if (this != &_Other)
			{	
			_Tidy();
			*_Ploc = *_Other._Ploc;
			_Fmtfl = _Other._Fmtfl;
			_Prec = _Other._Prec;
			_Wide = _Other._Wide;
			_Iosarray *_Ptr = _Other._Arr;

			for (_Arr = 0; _Ptr != 0; _Ptr = _Ptr->_Next)
				if (_Ptr->_Lo != 0 || _Ptr->_Vp != 0)
					{	
					iword(_Ptr->_Index) = _Ptr->_Lo;
					pword(_Ptr->_Index) = _Ptr->_Vp;
					}

			for (_Fnarray *_Pfa = _Other._Calls; _Pfa != 0;
				_Pfa = _Pfa->_Next)
				register_callback(_Pfa->_Pfn, _Pfa->_Index);

			_Callfns(copyfmt_event);	
			exceptions(_Other._Except);	
			}
		return (*this);
		}

	static bool __cdecl sync_with_stdio(bool _Newsync = true)
		{	
		{ ::std:: _Lockit _Lock(2);	
			const bool _Oldsync = _Sync;
			_Sync = _Newsync;
			return (_Oldsync);
		}
		}

	void  swap(ios_base& _Right)
		{	
		if (this != &_Right)
			{	
			::std:: swap(_Mystate, _Right._Mystate);
			::std:: swap(_Except, _Right._Except);
			::std:: swap(_Fmtfl, _Right._Fmtfl);
			::std:: swap(_Prec, _Right._Prec);
			::std:: swap(_Wide, _Right._Wide);

			::std:: swap(_Arr, _Right._Arr);
			::std:: swap(_Calls, _Right._Calls);
			::std:: swap(_Ploc, _Right._Ploc);
			}
		}

	virtual  ~ios_base() throw ()	
		{	
		_Ios_base_dtor(this);
		}

	static  void __cdecl
		_Addstd(ios_base *);	

	size_t _Stdstr;	

protected:
	 ios_base()
		{	
		}

	void  _Init()
		{	
		_Ploc = 0;
		_Stdstr = 0;
		_Except = goodbit;
		_Fmtfl = (fmtflags)(skipws | dec);
		_Prec = 6;
		_Wide = 0;
		_Arr = 0;
		_Calls = 0;
		clear(goodbit);
		_Ploc = new locale;
		}

private:
			
	struct _Iosarray
		{	
	public:
		 _Iosarray(int _Idx, _Iosarray *_Link)
			: _Next(_Link), _Index(_Idx), _Lo(0), _Vp(0)
			{	
			}

		_Iosarray *_Next;	
		int _Index;	
		long _Lo;	
		void *_Vp;	
		};

			
	struct _Fnarray
		{	
		 _Fnarray(int _Idx, event_callback _Pnew, _Fnarray *_Link)
			: _Next(_Link), _Index(_Idx), _Pfn(_Pnew)
			{	
			}

		_Fnarray *_Next;	
		int _Index;	
		event_callback _Pfn;	
		};

	void  _Callfns(event _Ev)
		{	
		for (_Fnarray *_Pfa = _Calls; _Pfa != 0; _Pfa = _Pfa->_Next)
			(*_Pfa->_Pfn)(_Ev, *this, _Pfa->_Index);
		}

	_Iosarray&  _Findarr(int _Idx)
		{	
		_Iosarray *_Ptr1, *_Ptr2;

		for (_Ptr1 = _Arr, _Ptr2 = 0; _Ptr1 != 0; _Ptr1 = _Ptr1->_Next)
			if (_Ptr1->_Index == _Idx)
				return (*_Ptr1);	
			else if (_Ptr2 == 0 && _Ptr1->_Lo == 0 && _Ptr1->_Vp == 0)
				_Ptr2 = _Ptr1;	

		if (_Ptr2 != 0)
			{	
			_Ptr2->_Index = _Idx;
			return (*_Ptr2);
			}

		_Arr = new _Iosarray(_Idx, _Arr);	
		return (*_Arr);
		}

	void  _Tidy()
		{	
		_Callfns(erase_event);
		_Iosarray *_Ptr1, *_Ptr2;

		for (_Ptr1 = _Arr; _Ptr1 != 0; _Ptr1 = _Ptr2)
			{	
			_Ptr2 = _Ptr1->_Next;
			delete (_Ptr1);
			}
		_Arr = 0;

		_Fnarray *_Pfa1, *_Pfa2;
		for (_Pfa1 = _Calls; _Pfa1 != 0; _Pfa1 = _Pfa2)
			{	
			_Pfa2 = _Pfa1->_Next;
			delete (_Pfa1);
			}
		_Calls = 0;
		}

	iostate _Mystate;	
	iostate _Except;	
	fmtflags _Fmtfl;	
	streamsize _Prec;	
	streamsize _Wide;	
	_Iosarray *_Arr;	
	_Fnarray *_Calls;	
	locale *_Ploc;	

	 static int _Index;
	 static bool _Sync;

	static  void __cdecl
		_Ios_base_dtor(ios_base *);

	ios_base(const ios_base&);	
	ios_base& operator=(const ios_base&);	
	};





}
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 644 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xiosbase"
#line 645 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xiosbase"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\streambuf"

 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 #pragma warning(disable: 4251)

namespace std {
		
template<class _Elem,
	class _Traits>
	class basic_streambuf
	{	
	typedef basic_streambuf<_Elem, _Traits> _Myt;

protected:
	 basic_streambuf()
		: _Plocale(new locale)
		{	
		_Init();
		}

	 basic_streambuf(_Uninitialized)
		{	
		}

	 basic_streambuf(const _Myt& _Right)
		: _Plocale(new locale(_Right.getloc()))
		{	
		_Init();
		setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
		setg(_Right.eback(), _Right.gptr(), _Right.egptr());
		}

	_Myt&  operator=(const _Myt& _Right)
		{	
		if (this != &_Right)
			{	
			setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
			setg(_Right.eback(), _Right.gptr(), _Right.egptr());
			pubimbue(_Right.getloc());
			}
		return (*this);
		}

	void  swap(_Myt& _Right)
		{	
		if (this != &_Right)
			{	
			_Elem *_Pfirst = pbase();
			_Elem *_Pnext = pptr();
			_Elem *_Pend = epptr();
			_Elem *_Gfirst = eback();
			_Elem *_Gnext = gptr();
			_Elem *_Gend = egptr();

			setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
			_Right.setp(_Pfirst, _Pnext, _Pend);

			setg(_Right.eback(), _Right.gptr(), _Right.egptr());
			_Right.setg(_Gfirst, _Gnext, _Gend);

			::std:: swap(_Plocale, _Right._Plocale);
			}
		}

public:
	typedef _Elem char_type;
	typedef _Traits traits_type;

	virtual  ~basic_streambuf() throw ()
		{	
		delete (_Plocale);
		}

	typedef typename _Traits::int_type int_type;
	typedef typename _Traits::pos_type pos_type;
	typedef typename _Traits::off_type off_type;

	pos_type  pubseekoff(off_type _Off,
		ios_base::seekdir _Way,
		ios_base::openmode _Mode = ios_base::in | ios_base::out)
		{	
		return (seekoff(_Off, _Way, _Mode));
		}

	pos_type  pubseekoff(off_type _Off,
		ios_base::seek_dir _Way,
		ios_base::open_mode _Mode)
		{	
		return (pubseekoff(_Off, (ios_base::seekdir)_Way,
			(ios_base::openmode)_Mode));
		}

	pos_type  pubseekpos(pos_type _Pos,
		ios_base::openmode _Mode = ios_base::in | ios_base::out)
		{	
		return (seekpos(_Pos, _Mode));
		}

	pos_type  pubseekpos(pos_type _Pos,
		ios_base::open_mode _Mode)
		{	
		return (seekpos(_Pos, (ios_base::openmode)_Mode));
		}

	_Myt * pubsetbuf(_Elem *_Buffer,
		streamsize _Count)
		{	
		return (setbuf(_Buffer, _Count));
		}

	locale  pubimbue(const locale &_Newlocale)
		{	
		locale _Oldlocale = *_Plocale;
		imbue(_Newlocale);
		*_Plocale = _Newlocale;
		return (_Oldlocale);
		}

	locale  getloc() const
		{	
		return (*_Plocale);
		}

	streamsize  in_avail()
		{	
		streamsize _Res = _Gnavail();
		return (0 < _Res ? _Res : showmanyc());
		}

	int  pubsync()
		{	
		return (sync());
		}

	int_type  sbumpc()
		{	
		return (0 < _Gnavail()
			? _Traits::to_int_type(*_Gninc()) : uflow());
		}

	int_type  sgetc()
		{	
		return (0 < _Gnavail()
			? _Traits::to_int_type(*gptr()) : underflow());
		}

	streamsize  sgetn(_Elem *_Ptr,
		streamsize _Count)
		{	
		return (xsgetn(_Ptr, _Count));
		}

	int_type  snextc()
		{	
		return (1 < _Gnavail()
			? _Traits::to_int_type(*_Gnpreinc())
			: _Traits::eq_int_type(_Traits::eof(), sbumpc())
				? _Traits::eof() : sgetc());
		}

	int_type  sputbackc(_Elem _Ch)
		{	
		return (gptr() != 0 && eback() < gptr()
			&& _Traits::eq(_Ch, gptr()[-1])
			? _Traits::to_int_type(*_Gndec())
			: pbackfail(_Traits::to_int_type(_Ch)));
		}

	void  stossc()
		{	
		if (0 < _Gnavail())
			_Gninc();
		else
			uflow();
		}

	int_type  sungetc()
		{	
		return (gptr() != 0 && eback() < gptr()
			? _Traits::to_int_type(*_Gndec()) : pbackfail());
		}

	int_type  sputc(_Elem _Ch)
		{	
		return (0 < _Pnavail()
			? _Traits::to_int_type(*_Pninc() = _Ch)
			: overflow(_Traits::to_int_type(_Ch)));
		}

	streamsize  sputn(const _Elem *_Ptr,
		streamsize _Count)
		{	
		return (xsputn(_Ptr, _Count));
		}

	virtual void  _Lock()
		{	
		}

	virtual void  _Unlock()
		{	
		}

protected:
	_Elem * eback() const
		{	
		return (*_IGfirst);
		}

	_Elem * gptr() const
		{	
		return (*_IGnext);
		}

	_Elem * pbase() const
		{	
		return (*_IPfirst);
		}

	_Elem * pptr() const
		{	
		return (*_IPnext);
		}

	_Elem * egptr() const
		{	
		return (*_IGnext + *_IGcount);
		}

	void  gbump(int _Off)
		{	
		*_IGcount -= _Off;
		*_IGnext += _Off;
		}

	void  setg(_Elem *_First, _Elem *_Next, _Elem *_Last)
		{	
		*_IGfirst = _First;
		*_IGnext = _Next;
		*_IGcount = (int)(_Last - _Next);
		}

	_Elem * epptr() const
		{	
		return (*_IPnext + *_IPcount);
		}

	_Elem * _Gndec()
		{	
		++*_IGcount;
		return (--*_IGnext);
		}

	_Elem * _Gninc()
		{	
		--*_IGcount;
		return ((*_IGnext)++);
		}

	_Elem * _Gnpreinc()
		{	
		--*_IGcount;
		return (++(*_IGnext));
		}

	streamsize  _Gnavail() const
		{	
		return (*_IGnext != 0 ? *_IGcount : 0);
		}

	void  pbump(int _Off)
		{	
		*_IPcount -= _Off;
		*_IPnext += _Off;
		}

	void  setp(_Elem *_First, _Elem *_Last)
		{	
		*_IPfirst = _First;
		*_IPnext = _First;
		*_IPcount = (int)(_Last - _First);
		}

	void  setp(_Elem *_First, _Elem *_Next, _Elem *_Last)
		{	
		*_IPfirst = _First;
		*_IPnext = _Next;
		*_IPcount = (int)(_Last - _Next);
		}

	_Elem * _Pninc()
		{	
		--*_IPcount;
		return ((*_IPnext)++);
		}

	streamsize  _Pnavail() const
		{	
		return (*_IPnext != 0 ? *_IPcount : 0);
		}

	void  _Init()
		{	
		_IGfirst = &_Gfirst;
		_IPfirst = &_Pfirst;
		_IGnext = &_Gnext;
		_IPnext = &_Pnext;
		_IGcount = &_Gcount;
		_IPcount = &_Pcount;
		setp(0, 0);
		setg(0, 0, 0);
		}

	void  _Init(_Elem **_Gf, _Elem **_Gn, int *_Gc,
		_Elem **_Pf, _Elem **_Pn, int *_Pc)
		{	
		_IGfirst = _Gf;
		_IPfirst = _Pf;
		_IGnext = _Gn;
		_IPnext = _Pn;
		_IGcount = _Gc;
		_IPcount = _Pc;
		}

	virtual int_type  overflow(int_type = _Traits::eof())
		{	
		return (_Traits::eof());
		}

	virtual int_type  pbackfail(int_type = _Traits::eof())
		{	
		return (_Traits::eof());
		}

	virtual streamsize  showmanyc()
		{	
		return (0);
		}

	virtual int_type  underflow()
		{	
		return (_Traits::eof());
		}

	virtual int_type  uflow()
		{	
		return (_Traits::eq_int_type(_Traits::eof(), underflow())
			? _Traits::eof() : _Traits::to_int_type(*_Gninc()));
		}

	virtual streamsize  xsgetn(_Elem * _Ptr,
		streamsize _Count)
		{	
		int_type _Meta;
		streamsize _Size, _Copied;

		for (_Copied = 0; 0 < _Count; )
			if (0 < (_Size = _Gnavail()))
				{	
				if (_Count < _Size)
					_Size = _Count;
				_Traits::copy(_Ptr, gptr(), (size_t)_Size);
				_Ptr += _Size;
				_Copied += _Size;
				_Count -= _Size;
				gbump((int)_Size);
				}
			else if (_Traits::eq_int_type(_Traits::eof(), _Meta = uflow()))
				break;	
			else
				{	
				*_Ptr++ = _Traits::to_char_type(_Meta);
				++_Copied;
				--_Count;
				}

		return (_Copied);
		}

	virtual streamsize  xsputn(const _Elem *_Ptr,
		streamsize _Count)
		{	
		streamsize _Size, _Copied;

		for (_Copied = 0; 0 < _Count; )
			if (0 < (_Size = _Pnavail()))
				{	
				if (_Count < _Size)
					_Size = _Count;
				_Traits::copy(pptr(), _Ptr, (size_t)_Size);
				_Ptr += _Size;
				_Copied += _Size;
				_Count -= _Size;
				pbump((int)_Size);
				}
			else if (_Traits::eq_int_type(_Traits::eof(),
				overflow(_Traits::to_int_type(*_Ptr))))
				break;	
			else
				{	
				++_Ptr;
				++_Copied;
				--_Count;
				}

		return (_Copied);
		}

	virtual pos_type  seekoff(off_type,
		ios_base::seekdir,
		ios_base::openmode = ios_base::in | ios_base::out)
		{	
		return (streampos(_BADOFF));
		}

	virtual pos_type  seekpos(pos_type,
		ios_base::openmode = ios_base::in | ios_base::out)
		{	
		return (streampos(_BADOFF));
		}

	virtual _Myt * setbuf(_Elem *, streamsize)
		{	
		return (this);
		}

	virtual int  sync()
		{	
		return (0);
		}

	virtual void  imbue(const locale&)
		{	
		}

private:
	_Elem *_Gfirst;	
	_Elem *_Pfirst;	
	_Elem **_IGfirst;	
	_Elem **_IPfirst;	
	_Elem *_Gnext;	
	_Elem *_Pnext;	
	_Elem **_IGnext;	
	_Elem **_IPnext;	

	int _Gcount;	
	int _Pcount;	
	int *_IGcount;	
	int *_IPcount;	

protected:
	locale *_Plocale;	
	};

 










#line 476 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\streambuf"

		
template<class _Elem,
	class _Traits>
	class istreambuf_iterator
		: public iterator<input_iterator_tag,
			_Elem, typename _Traits::off_type, const _Elem *, _Elem>
	{	
	typedef istreambuf_iterator<_Elem, _Traits> _Myt;
public:
	typedef _Elem char_type;
	typedef _Traits traits_type;
	typedef basic_streambuf<_Elem, _Traits> streambuf_type;
	typedef basic_istream<_Elem, _Traits> istream_type;

	typedef typename traits_type::int_type int_type;
	typedef const _Elem *pointer;

	istreambuf_iterator(streambuf_type *_Sb = 0) throw ()
		: _Strbuf(_Sb), _Got(_Sb == 0)
		{	
		}

	istreambuf_iterator(istream_type& _Istr) throw ()
		: _Strbuf(_Istr.rdbuf()), _Got(_Istr.rdbuf() == 0)
		{	
		}

	_Elem operator*() const
		{	
		if (!_Got)
			_Peek();

 


#line 513 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\streambuf"

		return (_Val);
		}

	const _Elem *operator->() const
		{	
		return (::std:: pointer_traits<pointer>::pointer_to(**this));
		}

	_Myt& operator++()
		{	
 


#line 528 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\streambuf"

		_Inc();
		return (*this);
		}

	_Myt operator++(int)
		{	
		if (!_Got)
			_Peek();
		_Myt _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	bool equal(const _Myt& _Right) const
		{	
		if (!_Got)
			_Peek();
		if (!_Right._Got)
			_Right._Peek();
		return ((_Strbuf == 0 && _Right._Strbuf == 0)
			|| (_Strbuf != 0 && _Right._Strbuf != 0));
		}

private:
	void _Inc()
		{	
		if (_Strbuf == 0
			|| traits_type::eq_int_type(traits_type::eof(),
				_Strbuf->sbumpc()))
			_Strbuf = 0, _Got = true;
		else
			_Got = false;
		}

	_Elem _Peek() const
		{	
		int_type _Meta;
		if (_Strbuf == 0
			|| traits_type::eq_int_type(traits_type::eof(),
				_Meta = _Strbuf->sgetc()))
			_Strbuf = 0;
		else
			_Val = traits_type::to_char_type(_Meta);
		_Got = true;
		return (_Val);
		}

	mutable streambuf_type *_Strbuf;	
	mutable bool _Got;	
	mutable _Elem _Val;	
	};

template<class _Elem,
	class _Traits>
	struct _Is_checked_helper<istreambuf_iterator<_Elem, _Traits> >
		: public true_type
	{	
	};

		
template<class _Elem,
	class _Traits> inline
	bool  operator==(
		const istreambuf_iterator<_Elem, _Traits>& _Left,
		const istreambuf_iterator<_Elem, _Traits>& _Right)
	{	
	return (_Left.equal(_Right));
	}

template<class _Elem,
	class _Traits> inline
	bool  operator!=(
		const istreambuf_iterator<_Elem, _Traits>& _Left,
		const istreambuf_iterator<_Elem, _Traits>& _Right)
	{	
	return (!(_Left == _Right));
	}

		
template<class _Elem,
	class _Traits>
	class ostreambuf_iterator
		: public _Outit
	{	
	typedef ostreambuf_iterator<_Elem, _Traits> _Myt;
public:
	typedef _Elem char_type;
	typedef _Traits traits_type;
	typedef basic_streambuf<_Elem, _Traits> streambuf_type;
	typedef basic_ostream<_Elem, _Traits> ostream_type;

	ostreambuf_iterator(streambuf_type *_Sb) throw ()
		: _Failed(false), _Strbuf(_Sb)
		{	
		}

	ostreambuf_iterator(ostream_type& _Ostr) throw ()
		: _Failed(false), _Strbuf(_Ostr.rdbuf())
		{	
		}

	_Myt& operator=(_Elem _Right)
		{	
		if (_Strbuf == 0
			|| traits_type::eq_int_type(_Traits::eof(),
				_Strbuf->sputc(_Right)))
			_Failed = true;
		return (*this);
		}

	_Myt& operator*()
		{	
		return (*this);
		}

	_Myt& operator++()
		{	
		return (*this);
		}

	_Myt& operator++(int)
		{	
		return (*this);
		}

	bool failed() const throw ()
		{	
		return (_Failed);
		}

private:
	bool _Failed;	
	streambuf_type *_Strbuf;	
	};

template<class _Elem,
	class _Traits>
	struct _Is_checked_helper<ostreambuf_iterator<_Elem, _Traits> >
		: public true_type
	{	
	};
}

 
 #pragma warning(pop)
 #pragma pack(pop)
#line 676 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\streambuf"
#line 677 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\streambuf"





#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocnum"

 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 #pragma warning(disable: 4189 4275)

		

 
extern "C" {
 #line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocnum"

extern  float __cdecl _Stofx(const char *,
	    char **,
	long, int *);
extern  double __cdecl _Stodx(const char *,
	    char **,
	long, int *);
extern  long double __cdecl _Stoldx(const char *,
	    char **,
	long, int *);
extern  long __cdecl _Stolx(const char *,
	    char **,
	int, int *);
extern  unsigned long __cdecl _Stoulx(const char *,
	    char **,
	int, int *);
extern  __int64 __cdecl _Stollx(const char *,
	    char **,
	int, int *);
extern  unsigned __int64 __cdecl _Stoullx(const char *,
	    char **,
	int, int *);

 
}
 #line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocnum"

namespace std {

template<class _Elem> inline
	size_t _Find_elem(_Elem *_Base, _Elem _Ch)
	{	
	_Elem *_Ptr = _Base;
	for (; *_Ptr != (_Elem)0 && *_Ptr != _Ch; ++_Ptr)
		;
	return ((size_t)(_Ptr - _Base));
	}

inline wchar_t *_Maklocwcs(const wchar_t *_Ptr)
	{	
	size_t _Count = :: wcslen(_Ptr) + 1;
	wchar_t *_Ptrdest = new wchar_t[_Count];
	:: wmemcpy(_Ptrdest, _Ptr, _Count);
	return (_Ptrdest);
	}

		
template<class _Elem>
	class numpunct
		: public locale::facet
	{	
public:
	typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
		string_type;
	typedef _Elem char_type;

	  static locale::id id;	

	_Elem decimal_point() const
		{	
		return (do_decimal_point());
		}

	_Elem thousands_sep() const
		{	
		return (do_thousands_sep());
		}

	string grouping() const
		{	
		return (do_grouping());
		}

	string_type falsename() const
		{	
		return (do_falsename());
		}

	string_type truename() const
		{	
		return (do_truename());
		}

	explicit numpunct(size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
			if (_Kseparator == 0)
				_Kseparator =	
					_Maklocchr(',', (_Elem *)0, _Lobj._Getcvt());
		}
		}

	numpunct(const _Locinfo& _Lobj, size_t _Refs = 0, bool _Isdef = false)
		: locale::facet(_Refs)
		{	
		_Init(_Lobj, _Isdef);
		}

	static size_t _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new numpunct<_Elem>(
				_Locinfo(_Ploc->c_str()), 0, true);
		return (4);
		}

protected:
	virtual  ~numpunct() throw ()
		{	
		_Tidy();
		}

	numpunct(const char *_Locname, size_t _Refs = 0, bool _Isdef = false)
		: locale::facet(_Refs)
		{	
		{ _Locinfo _Lobj(_Locname);
			_Init(_Lobj, _Isdef);
		}
		}

	template<class _Elem2>
		void _Getvals(_Elem2, const lconv *_Ptr, _Locinfo::_Cvtvec _Cvt)
		{	
		_Dp = _Maklocchr(_Ptr->decimal_point[0], (_Elem2 *)0, _Cvt);
		_Kseparator = _Maklocchr(_Ptr->thousands_sep[0], (_Elem2 *)0, _Cvt);
		}

	template<>
		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)
		{	
		_Dp = (_Elem)_Ptr->_W_decimal_point[0];
		_Kseparator = (_Elem)_Ptr->_W_thousands_sep[0];
		}

	void _Init(const _Locinfo& _Lobj, bool _Isdef = false)
		{	
		const lconv *_Ptr = _Lobj._Getlconv();
		_Locinfo::_Cvtvec _Cvt = _Lobj._Getcvt();	

		_Grouping = 0;
		_Falsename = 0;
		_Truename = 0;

		try {
		_Grouping = _Maklocstr(_Isdef ? "" : _Ptr->grouping, (char *)0, _Lobj._Getcvt());
#line 173 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocnum"
		_Falsename = _Maklocstr(_Lobj._Getfalse(), (_Elem *)0, _Cvt);
		_Truename = _Maklocstr(_Lobj._Gettrue(), (_Elem *)0, _Cvt);
		} catch (...) {
		_Tidy();
		throw;
		}

		if (_Isdef)
			{	

			_Dp = _Maklocchr('.', (_Elem *)0, _Cvt);
			_Kseparator = _Maklocchr(',', (_Elem *)0, _Cvt);
			}
		else
			_Getvals((_Elem)0, _Ptr, _Cvt);
		}

	virtual _Elem  do_decimal_point() const
		{	
		return (_Dp);
		}

	virtual _Elem  do_thousands_sep() const
		{	
		return (_Kseparator);
		}

	virtual string  do_grouping() const
		{	
		return (string(_Grouping));
		}

	virtual string_type  do_falsename() const
		{	
		return (string_type(_Falsename));
		}

	virtual string_type  do_truename() const
		{	
		return (string_type(_Truename));
		}

private:
	void _Tidy()
		{	
		delete[] ((void *)_Grouping);
		delete[] ((void *)_Falsename);
		delete[] ((void *)_Truename);
		}

	const char *_Grouping;	
	_Elem _Dp;	
	_Elem _Kseparator;	
	const _Elem *_Falsename;	
	const _Elem *_Truename;	
	};

		
template<class _Elem>
	class numpunct_byname
		: public numpunct<_Elem>
	{	
public:
	explicit numpunct_byname(const char *_Locname, size_t _Refs = 0)
		: numpunct<_Elem>(_Locname, _Refs)
		{	
		}

	explicit numpunct_byname(const string& _Str, size_t _Refs = 0)
		: numpunct<_Elem>(_Str.c_str(), _Refs)
		{	
		}

protected:
	virtual  ~numpunct_byname() throw ()
		{	
		}
	};

		
template<class _Elem>
	 locale::id numpunct<_Elem>::id;

		
template<class _Elem,
	class _InIt = istreambuf_iterator<_Elem, char_traits<_Elem> > >
	class num_get
		: public locale::facet
	{	
public:
	typedef numpunct<_Elem> _Mypunct;
	typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
		_Mystr;

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new num_get<_Elem, _InIt>(
				_Locinfo(_Ploc->c_str()));
		return (4);
		}

	 static locale::id id;	

protected:
	virtual  ~num_get() throw ()
		{	
		}

	void _Init(const _Locinfo&)
		{	
		}

public:
	explicit  num_get(size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 num_get(const _Locinfo& _Lobj, size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		_Init(_Lobj);
		}

	typedef _Elem char_type;
	typedef _InIt iter_type;

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase,	ios_base::iostate& _State,
			_Bool& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase,	ios_base::iostate& _State,
			unsigned short& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase,	ios_base::iostate& _State,
			unsigned int& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			long& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			unsigned long& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

 
	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			__int64& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			unsigned __int64& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}
 #line 355 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocnum"

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			float& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			double& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			long double& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			void *& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

protected:
	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			_Bool& _Val) const
		{	
		;
		int _Ans = -1;	

		if (_Iosbase.flags() & ios_base::boolalpha)
			{	
			typedef typename _Mystr::size_type _Mystrsize;
			const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
			_Mystr _Str((_Mystrsize)1, (char_type)0);
			_Str += _Punct_fac.falsename();
			_Str += (char_type)0;
			_Str += _Punct_fac.truename();	
			_Ans = _Getloctxt(_First, _Last, (size_t)2, _Str.c_str());
			}
		else
			{	
			char _Ac[32], *_Ep;
			int _Errno = 0;
			const unsigned long _Ulo = :: _Stoulx(_Ac, &_Ep,
				_Getifld(_Ac, _First, _Last, _Iosbase.flags(),
					_Iosbase.getloc()), &_Errno);
			if (_Ep != _Ac && _Errno == 0 && _Ulo <= 1)
				_Ans = _Ulo;
			}

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Ans < 0)
			_State |= ios_base::failbit;
		else
			_Val = _Ans != 0;	
		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			unsigned short& _Val) const
		{	
		;
		char _Ac[32], *_Ep;
		int _Errno = 0;
		int _Base = _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
			_Iosbase.getloc());	
		char *_Ptr = _Ac[0] == '-' ? _Ac + 1 : _Ac;	
		const unsigned long _Ans =
			:: _Stoulx(_Ptr, &_Ep, _Base, &_Errno);	

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Ep == _Ptr || _Errno != 0 || 0xffff < _Ans)
			_State |= ios_base::failbit;
		else
			_Val = (unsigned short)(_Ac[0] == '-'
				? 0 -_Ans : _Ans);	
		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			unsigned int& _Val) const
		{	
		;
		char _Ac[32], *_Ep;
		int _Errno = 0;
		int _Base = _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
			_Iosbase.getloc());	
		char *_Ptr = _Ac[0] == '-' ? _Ac + 1 : _Ac;	
		const unsigned long _Ans =
			:: _Stoulx(_Ptr, &_Ep, _Base, &_Errno);	

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Ep == _Ptr || _Errno != 0 || 0xffffffff < _Ans)
			_State |= ios_base::failbit;
		else
			_Val = _Ac[0] == '-' ? 0 -_Ans : _Ans;	
		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			long& _Val) const
		{	
		;
		char _Ac[32], *_Ep;
		int _Errno = 0;
		const long _Ans = :: _Stolx(_Ac, &_Ep,
			_Getifld(_Ac, _First, _Last, _Iosbase.flags(),
				_Iosbase.getloc()), &_Errno);	

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Ep == _Ac || _Errno != 0)
			_State |= ios_base::failbit;
		else
			_Val = _Ans;	
		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			unsigned long& _Val) const
		{	
		;
		char _Ac[32], *_Ep;
		int _Errno = 0;
		const unsigned long _Ans = :: _Stoulx(_Ac, &_Ep,
			_Getifld(_Ac, _First, _Last, _Iosbase.flags(),
				_Iosbase.getloc()), &_Errno);	

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Ep == _Ac || _Errno != 0)
			_State |= ios_base::failbit;
		else
			_Val = _Ans;	
		return (_First);
		}

 
	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			__int64& _Val) const
		{	
		;
		char _Ac[32], *_Ep;
		int _Errno = 0;
		const __int64 _Ans = :: _Stollx(_Ac, &_Ep,
			_Getifld(_Ac, _First, _Last, _Iosbase.flags(),
				_Iosbase.getloc()), &_Errno);	

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Ep == _Ac || _Errno != 0)
			_State |= ios_base::failbit;
		else
			_Val = _Ans;	
		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			unsigned __int64& _Val) const
		{	
		;
		char _Ac[32], *_Ep;
		int _Errno = 0;
		const unsigned __int64 _Ans = :: _Stoullx(_Ac, &_Ep,
			_Getifld(_Ac, _First, _Last, _Iosbase.flags(),
				_Iosbase.getloc()), &_Errno);	

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Ep == _Ac || _Errno != 0)
			_State |= ios_base::failbit;
		else
			_Val = _Ans;	
		return (_First);
		}
 #line 548 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocnum"

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			float& _Val) const
		{	
		;
		char _Ac[8 + 36 + 16], *_Ep;
		int _Errno = 0;
		int _Hexexp = 0;
		float _Ans = :: _Stofx(_Ac, &_Ep,
			_Getffld(_Ac, _First, _Last,
				_Iosbase, &_Hexexp), &_Errno);	

		if (_Hexexp != 0)
			_Ans = :: ldexpf(_Ans, 4 * _Hexexp);

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Ep == _Ac || _Errno != 0)
			_State |= ios_base::failbit;
		else
			_Val = _Ans;	
		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			double& _Val) const
		{	
		;
		char _Ac[8 + 36 + 16], *_Ep;
		int _Errno = 0;
		int _Hexexp = 0;
		double _Ans = :: _Stodx(_Ac, &_Ep,
			_Getffld(_Ac, _First, _Last,
				_Iosbase, &_Hexexp), &_Errno);	

		if (_Hexexp != 0)
			_Ans = :: ldexp(_Ans, 4 * _Hexexp);

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Ep == _Ac || _Errno != 0)
			_State |= ios_base::failbit;
		else
			_Val = _Ans;	
		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			long double& _Val) const
		{	
		;
		char _Ac[8 + 36 + 16], *_Ep;
		int _Errno = 0;
		int _Hexexp = 0;
		long double _Ans = :: _Stoldx(_Ac, &_Ep,
			_Getffld(_Ac, _First, _Last,
				_Iosbase, &_Hexexp), &_Errno);	

		if (_Hexexp != 0)
			_Ans = :: ldexpl(_Ans, 4 * _Hexexp);

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Ep == _Ac || _Errno != 0)
			_State |= ios_base::failbit;
		else
			_Val = _Ans;	
		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			void *& _Val) const
		{	
		;
		char _Ac[32], *_Ep;
		int _Errno = 0;

 
		int _Base = _Getifld(_Ac, _First, _Last, ios_base::hex,
			_Iosbase.getloc());	
		const unsigned __int64 _Ans =
			(sizeof (void *) == sizeof (unsigned long))
				? (unsigned __int64):: _Stoulx(_Ac, &_Ep, _Base, &_Errno)
				: :: _Stoullx(_Ac, &_Ep, _Base, &_Errno);

 



#line 642 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocnum"

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Ep == _Ac || _Errno != 0)
			_State |= ios_base::failbit;
		else
			_Val = (void *)((char *)0 + _Ans);	
		return (_First);
		}

private:
	int __cdecl _Getifld(char *_Ac,
		_InIt& _First, _InIt& _Last, ios_base::fmtflags _Basefield,
			const locale& _Loc) const
		{	
		const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Loc);
		const string _Grouping = _Punct_fac.grouping();
		const _Elem _Kseparator = _Grouping.size() == 0
			? (_Elem)0 : _Punct_fac.thousands_sep();

		enum {
			_NUMGET_SIGNOFF = 22,
			_NUMGET_XOFF = 24};
		static const char _Src[] = {"0123456789ABCDEFabcdef-+Xx"};
		_Elem _Atoms[sizeof (_Src) - 1];
		const ctype<_Elem>& _Ctype_fac =
			use_facet< ctype<_Elem> >(_Loc);
		_Ctype_fac.widen(&_Src[0], &_Src[sizeof (_Src) - 1], _Atoms);

		char *_Ptr = _Ac;

		if (_First == _Last)
			;	
		else if (*_First == _Atoms[_NUMGET_SIGNOFF + 1])
			*_Ptr++ = '+', ++_First;	
		else if (*_First == _Atoms[_NUMGET_SIGNOFF])
			*_Ptr++ = '-', ++_First;	

		_Basefield &= ios_base::basefield;
		int _Base = _Basefield == ios_base::oct ? 8
			: _Basefield == ios_base::hex ? 16
			: _Basefield == ios_base::_Fmtzero ? 0 : 10;

		bool _Seendigit = false;	
		bool _Nonzero = false;	

		if (_First != _Last && *_First == _Atoms[0])
			{	
			_Seendigit = true, ++_First;
			if (_First != _Last && (*_First == _Atoms[_NUMGET_XOFF + 1]
					|| *_First == _Atoms[_NUMGET_XOFF])
				&& (_Base == 0 || _Base == 16))
				_Base = 16, _Seendigit = false, ++_First;
			else if (_Base == 0)
				_Base = 8;
			}

		size_t _Dlen = _Base == 0 || _Base == 10 ? 10
			: _Base == 8 ? 8 : 16 + 6;
		string _Groups((size_t)1, (char)_Seendigit);
		size_t _Group = 0;

		for (char *const _Pe = &_Ac[32 - 1];
			_First != _Last; ++_First)
			{	
			size_t _Idx = _Find_elem(_Atoms, *_First);
			if (_Idx < _Dlen)
				{	
				*_Ptr = _Src[_Idx];
				if ((_Nonzero || *_Ptr != '0') && _Ptr < _Pe)
					++_Ptr, _Nonzero = true;
				_Seendigit = true;
				if (_Groups[_Group] != 127)
					++_Groups[_Group];
				}
			else if (_Groups[_Group] == '\0'
				|| _Kseparator == (_Elem)0
				|| *_First != _Kseparator)
				break;	
			else
				{	
				_Groups.append((string::size_type)1, '\0');
				++_Group;
				}
			}

		if (_Group == 0)
			;	
		else if ('\0' < _Groups[_Group])
			++_Group;	
		else
			_Seendigit = false;	

		for (const char *_Pg = &_Grouping[0]; _Seendigit && 0 < _Group; )
			if (*_Pg == 127)
				break;	
			else if ((0 < --_Group && *_Pg != _Groups[_Group])
				|| (0 == _Group && *_Pg < _Groups[_Group]))
				_Seendigit = false;	
			else if ('\0' < _Pg[1])
				++_Pg;	

		if (_Seendigit && !_Nonzero)
			*_Ptr++ = '0';	
		else if (!_Seendigit)
			_Ptr = _Ac;	
		*_Ptr = '\0';
		return (_Base);
		}

	int __cdecl _Getffld(char *_Ac,
		_InIt& _First, _InIt &_Last,
		ios_base& _Iosbase, int *_Phexexp) const
		{	
		if ((_Iosbase.flags() & ios_base::floatfield) == ios_base::hexfloat)
			return (_Getffldx(_Ac, _First, _Last,
				_Iosbase, _Phexexp));	

		const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
		const string _Grouping = _Punct_fac.grouping();
		char *_Ptr = _Ac;
		bool _Bad = false;

		enum {
			_NUMGET_SIGNOFF = 10,
			_NUMGET_EOFF = 12};
		static const char _Src[] = {"0123456789-+Ee"};
		_Elem _Atoms[sizeof (_Src) - 1];
		const ctype<_Elem>& _Ctype_fac =
			use_facet< ctype<_Elem> >(_Iosbase.getloc());
		_Ctype_fac.widen(&_Src[0], &_Src[sizeof (_Src) - 1], _Atoms);

		if (_First == _Last)
			;	
		else if (*_First == _Atoms[_NUMGET_SIGNOFF + 1])
			*_Ptr++ = '+', ++_First;	
		else if (*_First == _Atoms[_NUMGET_SIGNOFF])
			*_Ptr++ = '-', ++_First;	

		bool _Seendigit = false;	
		int _Significant = 0;	
		int _Pten = 0;	
		size_t _Idx;

		const char *_Pg = &_Grouping[0];
		if (*_Pg == 127 || *_Pg <= '\0')
			for (; _First != _Last
				&& (_Idx = _Find_elem(_Atoms, *_First)) < 10;
					_Seendigit = true, ++_First)
				if (36 <= _Significant)
					++_Pten;	
				else if (_Idx == 0 && _Significant == 0)
					;	
				else
					{	
					*_Ptr++ = _Src[_Idx];
					++_Significant;
					}
		else
			{	
			const _Elem _Kseparator = _Grouping.size() == 0
				? (_Elem)0 : _Punct_fac.thousands_sep();
			string _Groups((size_t)1, '\0');
			size_t _Group = 0;

			for (; _First != _Last; ++_First)
				if ((_Idx = _Find_elem(_Atoms, *_First)) < 10)
					{	
					_Seendigit = true;
					if (36 <= _Significant)
						++_Pten;	
					else if (_Idx == 0 && _Significant == 0)
						;	
					else
						{	
						*_Ptr++ = _Src[_Idx];
						++_Significant;
						}
					if (_Groups[_Group] != 127)
						++_Groups[_Group];
					}
				else if (_Groups[_Group] == '\0'
					|| _Kseparator == (_Elem)0
					|| *_First != _Kseparator)
					break;	
				else
					{	
					_Groups.append((size_t)1, '\0');
					++_Group;
					}
			if (_Group == 0)
				;	
			else if ('\0' < _Groups[_Group])
				++_Group;	
			else
				_Bad = true;	

			while (!_Bad && 0 < _Group)
				if (*_Pg == 127)
					break;	
				else if ((0 < --_Group && *_Pg != _Groups[_Group])
					|| (0 == _Group && *_Pg < _Groups[_Group]))
					_Bad = true;	
				else if ('\0' < _Pg[1])
					++_Pg;	
			}

		if (_Seendigit && _Significant == 0)
			*_Ptr++ = '0';	

		if (_First != _Last && *_First == _Punct_fac.decimal_point())
			*_Ptr++ = localeconv()->decimal_point[0], ++_First;	

		if (_Significant == 0)
			{	
			for (; _First != _Last && *_First == _Atoms[0];
				_Seendigit = true, ++_First)
				--_Pten;	
			if (_Pten < 0)
				*_Ptr++ = '0', ++_Pten;	
			}

		for (; _First != _Last
				&& (_Idx = _Find_elem(_Atoms, *_First)) < 10;
				_Seendigit = true, ++_First)
			if (_Significant < 36)
				{	
				*_Ptr++ = _Src[_Idx];
				++_Significant;
				}

		if (_Seendigit && _First != _Last
			&& (*_First == _Atoms[_NUMGET_EOFF + 1]
				|| *_First == _Atoms[_NUMGET_EOFF]))
			{	
			*_Ptr++ = 'e', ++_First;
			_Seendigit = false, _Significant = 0;

			if (_First == _Last)
				;	
			else if (*_First == _Atoms[_NUMGET_SIGNOFF + 1])
				*_Ptr++ = '+', ++_First;	
			else if (*_First == _Atoms[_NUMGET_SIGNOFF])
				*_Ptr++ = '-', ++_First;	
			for (; _First != _Last && *_First == _Atoms[0]; )
				_Seendigit = true, ++_First;	
			if (_Seendigit)
				*_Ptr++ = '0';	
			for (; _First != _Last
				&& (_Idx = _Find_elem(_Atoms, *_First)) < 10;
				_Seendigit = true, ++_First)
				if (_Significant < 8)
					{	
					*_Ptr++ = _Src[_Idx];
					++_Significant;
					}
			}

		if (_Bad || !_Seendigit)
			_Ptr = _Ac;	
		*_Ptr = '\0';
		return (_Pten);
		}

	int __cdecl _Getffldx(char *_Ac,
		_InIt& _First, _InIt &_Last,
		ios_base& _Iosbase, int *_Phexexp) const
		{	
		const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
		const string _Grouping = _Punct_fac.grouping();

		enum {
			_NUMGET_SIGNOFF = 22,
			_NUMGET_XOFF = 24,
			_NUMGET_POFF = 26};
		static const char _Src[] = {"0123456789ABCDEFabcdef-+XxPp"};
		_Elem _Atoms[sizeof (_Src) - 1];
		const ctype<_Elem>& _Ctype_fac =
			use_facet< ctype<_Elem> >(_Iosbase.getloc());
		_Ctype_fac.widen(&_Src[0], &_Src[sizeof (_Src) - 1], _Atoms);

		char *_Ptr = _Ac;
		bool _Bad = false;
		size_t _Idx;

		if (_First == _Last)
			;	
		else if (*_First == _Atoms[_NUMGET_SIGNOFF + 1])
			*_Ptr++ = '+', ++_First;	
		else if (*_First == _Atoms[_NUMGET_SIGNOFF])
			*_Ptr++ = '-', ++_First;	

		*_Ptr++ = '0';
		*_Ptr++ = 'x';

		bool _Seendigit = false;	
		int _Significant = 0;	
		int _Phex = 0;	

		if (_First == _Last || *_First != _Atoms[0])
			;
		else if (++_First != _Last
			&& (*_First == _Atoms[_NUMGET_XOFF + 1]
				 || *_First == _Atoms[_NUMGET_XOFF]))
			++_First;	
		else
			_Seendigit = true;	

		const char *_Pg = &_Grouping[0];
		if (*_Pg == 127 || *_Pg <= '\0')
			for (; _First != _Last
				&& (_Idx = _Find_elem(_Atoms, *_First)) < _NUMGET_SIGNOFF;
					_Seendigit = true, ++_First)
				if (36 <= _Significant)
					++_Phex;	
				else if (_Idx == 0 && _Significant == 0)
					;	
				else
					{	
					*_Ptr++ = _Src[_Idx];
					++_Significant;
					}
		else
			{	
			const _Elem _Kseparator = _Grouping.size() == 0
				? (_Elem)0 : _Punct_fac.thousands_sep();
			string _Groups((size_t)1, '\0');
			size_t _Group = 0;

			for (; _First != _Last; ++_First)
				if ((_Idx = _Find_elem(_Atoms, *_First)) < _NUMGET_SIGNOFF)
					{	
					_Seendigit = true;
					if (36 <= _Significant)
						++_Phex;	
					else if (_Idx == 0 && _Significant == 0)
						;	
					else
						{	
						*_Ptr++ = _Src[_Idx];
						++_Significant;
						}
					if (_Groups[_Group] != 127)
						++_Groups[_Group];
					}
				else if (_Groups[_Group] == '\0'
					|| _Kseparator == (_Elem)0
					|| *_First != _Kseparator)
					break;	
				else
					{	
					_Groups.append((size_t)1, '\0');
					++_Group;
					}
			if (_Group == 0)
				;	
			else if ('\0' < _Groups[_Group])
				++_Group;	
			else
				_Bad = true;	

			while (!_Bad && 0 < _Group)
				if (*_Pg == 127)
					break;	
				else if ((0 < --_Group && *_Pg != _Groups[_Group])
					|| (0 == _Group && *_Pg < _Groups[_Group]))
					_Bad = true;	
				else if ('\0' < _Pg[1])
					++_Pg;	
			}

		if (_Seendigit && _Significant == 0)
			*_Ptr++ = '0';	

		if (_First != _Last && *_First == _Punct_fac.decimal_point())
			*_Ptr++ = localeconv()->decimal_point[0], ++_First;	

		if (_Significant == 0)
			{	
			for (; _First != _Last && *_First == _Atoms[0];
				_Seendigit = true, ++_First)
				--_Phex;	
			if (_Phex < 0)
				*_Ptr++ = '0', ++_Phex;	
			}

		for (; _First != _Last
				&& (_Idx = _Find_elem(_Atoms, *_First)) < _NUMGET_SIGNOFF;
				_Seendigit = true, ++_First)
			if (_Significant < 36)
				{	
				*_Ptr++ = _Src[_Idx];
				++_Significant;
				}

		if (_Seendigit && _First != _Last
			&& (*_First == _Atoms[_NUMGET_POFF + 1]
				|| *_First == _Atoms[_NUMGET_POFF]))
			{	
			*_Ptr++ = 'p', ++_First;
			_Seendigit = false, _Significant = 0;

			if (_First == _Last)
				;	
			else if (*_First == _Atoms[_NUMGET_SIGNOFF + 1])
				*_Ptr++ = '+', ++_First;	
			else if (*_First == _Atoms[_NUMGET_SIGNOFF])
				*_Ptr++ = '-', ++_First;	
			for (; _First != _Last && *_First == _Atoms[0]; )
				_Seendigit = true, ++_First;	
			if (_Seendigit)
				*_Ptr++ = '0';	
			for (; _First != _Last
				&& (_Idx = _Find_elem(_Atoms, *_First)) < _NUMGET_SIGNOFF;
				_Seendigit = true, ++_First)
				if (_Significant < 8)
					{	
					*_Ptr++ = _Src[_Idx];
					++_Significant;
					}
			}

		if (_Bad || !_Seendigit)
			_Ptr = _Ac;	
		*_Ptr = '\0';
		*_Phexexp = _Phex;	
		return (0);	
		}
	};

		
template<class _Elem,
	class _InIt>
	 locale::id num_get<_Elem, _InIt>::id;

		
template<class _Elem,
	class _OutIt = ostreambuf_iterator<_Elem, char_traits<_Elem> > >
	class num_put
		: public locale::facet
	{	
public:
	typedef numpunct<_Elem> _Mypunct;
	typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
		_Mystr;

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new num_put<_Elem, _OutIt>(
				_Locinfo(_Ploc->c_str()));
		return (4);
		}

	 static locale::id id;	

protected:
	virtual  ~num_put() throw ()
		{	
		}

	void  _Init(const _Locinfo&)
		{	
		}

public:
	explicit  num_put(size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 num_put(const _Locinfo& _Lobj, size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		_Init(_Lobj);
		}

	typedef _Elem char_type;
	typedef _OutIt iter_type;

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, _Bool _Val) const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Val));
		}

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, long _Val) const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Val));
		}

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, unsigned long _Val) const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Val));
		}

 
	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, __int64 _Val) const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Val));
		}

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, unsigned __int64 _Val) const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Val));
		}
 #line 1157 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocnum"

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, double _Val) const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Val));
		}

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, long double _Val) const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Val));
		}

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, const void *_Val) const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Val));
		}

protected:
	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, _Bool _Val) const
		{	
		;
		if (!(_Iosbase.flags() & ios_base::boolalpha))
			return (do_put(_Dest, _Iosbase, _Fill, (long)_Val));
		else
			{	
			const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
			_Mystr _Str;
			if (_Val)
				_Str.assign(_Punct_fac.truename());
			else
				_Str.assign(_Punct_fac.falsename());

			size_t _Fillcount = _Iosbase.width() <= 0
				|| (size_t)_Iosbase.width() <= _Str.size()
					? 0 : (size_t)_Iosbase.width() - _Str.size();

			if ((_Iosbase.flags() & ios_base::adjustfield) != ios_base::left)
				{	
				_Dest = _Rep(_Dest, _Fill, _Fillcount);
				_Fillcount = 0;
				}
			_Dest = _Put(_Dest, _Str.c_str(), _Str.size());	
			_Iosbase.width(0);
			return (_Rep(_Dest, _Fill, _Fillcount));	
			}
		}

	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, long _Val) const
		{	
		char _Buf[2 * 32], _Fmt[6];

		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
			:: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "ld",
				_Iosbase.flags()), _Val)));
		}

	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, unsigned long _Val) const
		{	
		char _Buf[2 * 32], _Fmt[6];

		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
			:: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "lu",
				_Iosbase.flags()), _Val)));
		}

 
	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, __int64 _Val) const
		{	
		char _Buf[2 * 32], _Fmt[8];

		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
			:: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "Ld",
				_Iosbase.flags()), _Val)));
		}

	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, unsigned __int64 _Val) const
		{	
		char _Buf[2 * 32], _Fmt[8];

		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
			:: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "Lu",
				_Iosbase.flags()), _Val)));
		}
 #line 1248 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocnum"

	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, double _Val) const
		{	
		char _Buf[8 + 36 + 64], _Fmt[8];
		streamsize _Precision = _Iosbase.precision() <= 0
			&& !(_Iosbase.flags() & ios_base::fixed)
				? 6 : _Iosbase.precision();	
		int _Significance = 36 < _Precision
			? 36 : (int)_Precision;	
		_Precision -= _Significance;
		size_t _Beforepoint = 0;	
		size_t _Afterpoint = 0;	

		if ((_Iosbase.flags() & ios_base::floatfield) == ios_base::fixed
			&& _Val * 0.5 != _Val)	
			{	
			bool _Signed = _Val < 0;
			if (_Signed)
				_Val = -_Val;

			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)
				_Val /= 1e10;	

			if (0 < _Val)
				for (; 10 <= _Precision && _Val <= 1e-35
					&& _Afterpoint < 5000; _Afterpoint += 10)
					{	
					_Val *= 1e10;
					_Precision -= 10;
					}

			if (_Signed)
				_Val = -_Val;
			}

		return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
			_Beforepoint, _Afterpoint, (size_t)_Precision,
				:: sprintf_s(_Buf, sizeof (_Buf),
					_Ffmt(_Fmt, 0, _Iosbase.flags()),
					_Significance, _Val)));	
		}

	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, long double _Val) const
		{	
		char _Buf[8 + 36 + 64], _Fmt[8];
		streamsize _Precision = _Iosbase.precision() <= 0
			&& !(_Iosbase.flags() & ios_base::fixed)
				? 6 : _Iosbase.precision();	
		int _Significance = 36 < _Precision
			? 36 : (int)_Precision;	
		_Precision -= _Significance;
		size_t _Beforepoint = 0;	
		size_t _Afterpoint = 0;	

		if ((_Iosbase.flags() & ios_base::floatfield) == ios_base::fixed)
			{	
			bool _Signed = _Val < 0;
			if (_Signed)
				_Val = -_Val;

			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)
				_Val /= 1e10;	

			if (0 < _Val)
				for (; 10 <= _Precision && _Val <= 1e-35
					&& _Afterpoint < 5000; _Afterpoint += 10)
					{	
					_Val *= 1e10;
					_Precision -= 10;
					}

			if (_Signed)
				_Val = -_Val;
			}

		return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
			_Beforepoint, _Afterpoint, (size_t)_Precision,
				:: sprintf_s(_Buf, sizeof (_Buf),
					_Ffmt(_Fmt, 'L', _Iosbase.flags()),
					_Significance, _Val)));	
		}

	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, const void *_Val) const
		{	
		char _Buf[2 * 32];

		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
			:: sprintf_s(_Buf, sizeof (_Buf), "%p", _Val)));
		}

private:
	char *__cdecl _Ffmt(char *_Fmt,
		char _Spec, ios_base::fmtflags _Flags) const
		{	
		char *_Ptr = _Fmt;
		*_Ptr++ = '%';

		if (_Flags & ios_base::showpos)
			*_Ptr++ = '+';
		if (_Flags & ios_base::showpoint)
			*_Ptr++ = '#';
		*_Ptr++ = '.';
		*_Ptr++ = '*';	
		if (_Spec != '\0')
			*_Ptr++ = _Spec;	

		ios_base::fmtflags _Ffl = _Flags & ios_base::floatfield;
		if (_Flags & ios_base::uppercase)
			*_Ptr++ = _Ffl == ios_base::fixed ? 'f'
				: _Ffl == ios_base::hexfloat ? 'A'	
				: _Ffl == ios_base::scientific ? 'E' : 'G';	
		else
			*_Ptr++ = _Ffl == ios_base::fixed ? 'f'
				: _Ffl == ios_base::hexfloat ? 'a'	
				: _Ffl == ios_base::scientific ? 'e' : 'g';	

		*_Ptr = '\0';
		return (_Fmt);
		}

	_OutIt __cdecl _Fput(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, const char *_Buf,
			size_t _Beforepoint, size_t _Afterpoint,
				size_t _Trailing, size_t _Count) const
		{	
		;
		size_t _Prefix = 0 < _Count && (*_Buf == '+' || *_Buf == '-')
			? 1 : 0;

		const char *_Exps;
		if ((_Iosbase.flags() & ios_base::floatfield) != ios_base::hexfloat)
			_Exps = "eE";
		else
			{	
			_Exps = "pP";
			if (_Prefix + 2 <= _Count && _Buf[_Prefix] == '0'
				&& (_Buf[_Prefix + 1] == 'x' || _Buf[_Prefix + 1] == 'X'))
				_Prefix += 2;
			}
		const size_t _Eoff =
			:: strcspn(&_Buf[0], _Exps);	
		char _Dp[2] = {"."};
		_Dp[0] = :: localeconv()->decimal_point[0];
		const size_t _Poff =
			:: strcspn(&_Buf[0], &_Dp[0]);	

		const ctype<_Elem>& _Ctype_fac =
			use_facet< ctype<_Elem> >(_Iosbase.getloc());
		const _Elem _E0 = _Ctype_fac.widen('0');
		_Mystr _Groupstring(_Count, _Elem(0));	
		_Ctype_fac.widen(&_Buf[0], &_Buf[_Count], &_Groupstring[0]);

		const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
		const string _Grouping = _Punct_fac.grouping();
		const _Elem _Kseparator = _Punct_fac.thousands_sep();

		size_t _Off = _Beforepoint;	
		if (_Poff == _Count)
			{	
			_Off += _Eoff;
			_Groupstring.insert(_Eoff, _Beforepoint, _E0);
			}
		else
			{	
			_Off += _Poff;
			_Groupstring.insert(_Eoff, _Trailing, _E0);
			_Groupstring.insert(_Poff + 1, _Afterpoint, _E0);
			_Groupstring[_Poff] = _Punct_fac.decimal_point();
			_Groupstring.insert(_Poff, _Beforepoint, _E0);
			}

		const char *_Pg = &_Grouping[0];
		while (*_Pg != 127 && '\0' < *_Pg
			&& (size_t)*_Pg < _Off - _Prefix)
			{	
			_Groupstring.insert(_Off -= *_Pg, (size_t)1, _Kseparator);
			if ('\0' < _Pg[1])
				++_Pg;	
			}

		_Count = _Groupstring.size();
		size_t _Fillcount = _Iosbase.width() <= 0
			|| (size_t)_Iosbase.width() <= _Count
				? 0 : (size_t)_Iosbase.width() - _Count;

		ios_base::fmtflags _Adjustfield =
			_Iosbase.flags() & ios_base::adjustfield;
		if (_Adjustfield != ios_base::left
			&& _Adjustfield != ios_base::internal)
			{	
			_Dest = _Rep(_Dest, _Fill, _Fillcount);
			_Fillcount = 0;
			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);
			}
		else if (_Adjustfield == ios_base::internal)
			{	
			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);
			_Dest = _Rep(_Dest, _Fill, _Fillcount);
			_Fillcount = 0;
			}
		else
			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

		_Dest = _Put(_Dest, &_Groupstring[_Prefix], _Count - _Prefix);
		_Iosbase.width(0);
		return (_Rep(_Dest, _Fill, _Fillcount));	
		}

	char *__cdecl _Ifmt(char *_Fmt,
		const char *_Spec, ios_base::fmtflags _Flags) const
		{	
		char *_Ptr = _Fmt;
		*_Ptr++ = '%';

		if (_Flags & ios_base::showpos)
			*_Ptr++ = '+';
		if (_Flags & ios_base::showbase)
			*_Ptr++ = '#';
		if (_Spec[0] != 'L')
			*_Ptr++ = _Spec[0];	
		else

			{	
			*_Ptr++ = 'I';
			*_Ptr++ = '6';
			*_Ptr++ = '4';
			}

		ios_base::fmtflags _Basefield = _Flags & ios_base::basefield;
		*_Ptr++ = _Basefield == ios_base::oct ? 'o'
			: _Basefield != ios_base::hex ? _Spec[1]	
			: _Flags & ios_base::uppercase ? 'X' : 'x';
		*_Ptr = '\0';
		return (_Fmt);
		}

	_OutIt __cdecl _Iput(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, char *_Buf, size_t _Count) const
		{	
		;
		size_t _Prefix = 0 < _Count && (*_Buf == '+' || *_Buf == '-')
			? 1 : 0;
		if ((_Iosbase.flags() & ios_base::basefield) == ios_base::hex
			&& _Prefix + 2 <= _Count && _Buf[_Prefix] == '0'
			&& (_Buf[_Prefix + 1] == 'x' || _Buf[_Prefix + 1] == 'X'))
			_Prefix += 2;

		const ctype<_Elem>& _Ctype_fac =
			use_facet< ctype<_Elem> >(_Iosbase.getloc());
		_Mystr _Groupstring(_Count, _Elem(0));	
		_Ctype_fac.widen(&_Buf[0], &_Buf[_Count], &_Groupstring[0]);

		const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
		const string _Grouping = _Punct_fac.grouping();
		const char *_Pg = &_Grouping[0];
		if (*_Pg != 127 && '\0' < *_Pg)
			{	
			const _Elem _Kseparator = _Punct_fac.thousands_sep();
			while (*_Pg != 127 && '\0' < *_Pg
				&& (size_t)*_Pg < _Count - _Prefix)
				{	
				_Count -= *_Pg;
				_Groupstring.insert(_Count, 1, _Kseparator);
				if ('\0' < _Pg[1])
					++_Pg;	
				}
			}

		_Count = _Groupstring.size();
		size_t _Fillcount = _Iosbase.width() <= 0
			|| (size_t)_Iosbase.width() <= _Count
				? 0 : (size_t)_Iosbase.width() - _Count;

		ios_base::fmtflags _Adjustfield =
			_Iosbase.flags() & ios_base::adjustfield;
		if (_Adjustfield != ios_base::left
			&& _Adjustfield != ios_base::internal)
			{	
			_Dest = _Rep(_Dest, _Fill, _Fillcount);
			_Fillcount = 0;
			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);
			}
		else if (_Adjustfield == ios_base::internal)
			{	
			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);
			_Dest = _Rep(_Dest, _Fill, _Fillcount);
			_Fillcount = 0;
			}
		else
			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

		_Dest = _Put(_Dest, &_Groupstring[_Prefix], _Count - _Prefix);
		_Iosbase.width(0);
		return (_Rep(_Dest, _Fill, _Fillcount));	
		}

	_OutIt __cdecl _Put(_OutIt _Dest,
		const _Elem *_Ptr, size_t _Count) const
		{	
		for (; 0 < _Count; --_Count, ++_Dest, ++_Ptr)
			*_Dest = *_Ptr;
		return (_Dest);
		}

	_OutIt __cdecl _Rep(_OutIt _Dest,
		_Elem _Ch, size_t _Count) const
		{	
		for (; 0 < _Count; --_Count, ++_Dest)
			*_Dest = _Ch;
		return (_Dest);
		}
	};

		
template<class _Elem,
	class _OutIt>
	 locale::id num_put<_Elem, _OutIt>::id;

 






















#line 1593 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocnum"
}
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 1598 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocnum"
#line 1599 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocnum"






#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\ios"

 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 #pragma warning(disable: 4189)

namespace std {
		
template<class _Elem,
	class _Traits>
	class basic_ios
		: public ios_base
	{	
public:
	typedef basic_ios<_Elem, _Traits> _Myt;
	typedef basic_ostream<_Elem, _Traits> _Myos;
	typedef basic_streambuf<_Elem, _Traits> _Mysb;
	typedef ctype<_Elem> _Ctype;
	typedef _Elem char_type;
	typedef _Traits traits_type;
	typedef typename _Traits::int_type int_type;
	typedef typename _Traits::pos_type pos_type;
	typedef typename _Traits::off_type off_type;

	explicit  basic_ios(_Mysb *_Strbuf)
		{	
		init(_Strbuf);
		}

	virtual  ~basic_ios() throw ()
		{	
		}

	void  clear(iostate _State = goodbit,
		bool _Reraise = false)
		{	
		ios_base::clear((iostate)(_Mystrbuf == 0
			? (int)_State | (int)badbit : (int)_State), _Reraise);
		}

	void  clear(io_state _State)
		{	
		clear((iostate)_State);
		}

	void  setstate(iostate _State,
		bool _Reraise = false)
		{	
		if (_State != goodbit)
			clear((iostate)((int)rdstate() | (int)_State), _Reraise);
		}

	void  setstate(io_state _State)
		{	
		setstate((iostate)_State);
		}

	_Myt&  copyfmt(const _Myt& _Right)
		{	
		_Tiestr = _Right.tie();
		_Fillch = _Right.fill();
		ios_base::copyfmt(_Right);
		return (*this);
		}

	_Myos * tie() const
		{	
		return (_Tiestr);
		}

	_Myos * tie(_Myos *_Newtie)
		{	
		_Myos *_Oldtie = _Tiestr;
		_Tiestr = _Newtie;
		return (_Oldtie);
		}

	_Mysb * rdbuf() const
		{	
		return (_Mystrbuf);
		}

	_Mysb * rdbuf(_Mysb *_Strbuf)
		{	
		_Mysb *_Oldstrbuf = _Mystrbuf;
		_Mystrbuf = _Strbuf;
		clear();
		return (_Oldstrbuf);
		}

	locale  imbue(const locale& _Loc)
		{	
		locale _Oldlocale = ios_base::imbue(_Loc);
		if (rdbuf() != 0)
			rdbuf()->pubimbue(_Loc);
		return (_Oldlocale);
		}

	_Elem  fill() const
		{	
		return (_Fillch);
		}

	_Elem  fill(_Elem _Newfill)
		{	
		_Elem _Oldfill = _Fillch;
		_Fillch = _Newfill;
		return (_Oldfill);
		}

	char  narrow(_Elem _Ch, char _Dflt = '\0') const
		{	
		const _Ctype& _Ctype_fac = use_facet< _Ctype >(getloc());
		return (_Ctype_fac.narrow(_Ch, _Dflt));
		}

	_Elem  widen(char _Byte) const
		{	
		const _Ctype& _Ctype_fac = use_facet< _Ctype >(getloc());
		return (_Ctype_fac.widen(_Byte));
		}

	void  move(_Myt& _Right)
		{	
		if (this != &_Right)
			{	
			_Mystrbuf = 0;
			_Tiestr = 0;
			this->swap(_Right);
			}
		}

	void  move(_Myt&& _Right)
		{	
		if (this != &_Right)
			{	
			_Mystrbuf = 0;
			_Tiestr = 0;
			this->swap(_Right);
			}
		}

	void  swap(_Myt& _Right) throw ()
		{	
		ios_base::swap(_Right);
		::std:: swap(_Fillch, _Right._Fillch);
		::std:: swap(_Tiestr, _Right._Tiestr);
		}

	void  set_rdbuf(_Mysb *_Strbuf)
		{	
		_Mystrbuf = _Strbuf;
		}

protected:
	void  init(_Mysb *_Strbuf = 0,
		bool _Isstd = false)
		{	
		_Init();	
		_Mystrbuf = _Strbuf;
		_Tiestr = 0;
		_Fillch = widen(' ');

		if (_Mystrbuf == 0)
			setstate(badbit);

		if (_Isstd)
			_Addstd(this);	
		}

	 basic_ios()
		{	
		}

private:
	_Mysb *_Mystrbuf;	
	_Myos *_Tiestr;	
	_Elem _Fillch;	

	 basic_ios(const _Myt&);	
	_Myt&  operator=(const _Myt&);	
	};

 












#line 206 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\ios"

		
inline ios_base& __cdecl boolalpha(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::boolalpha);
	return (_Iosbase);
	}

inline ios_base& __cdecl dec(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::dec, ios_base::basefield);
	return (_Iosbase);
	}

inline ios_base& __cdecl defaultfloat(ios_base& _Iosbase)
	{	
	_Iosbase.unsetf(ios_base::floatfield);
	return (_Iosbase);
	}

inline ios_base& __cdecl fixed(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::fixed, ios_base::floatfield);
	return (_Iosbase);
	}

inline ios_base& __cdecl hex(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::hex, ios_base::basefield);
	return (_Iosbase);
	}

inline ios_base& __cdecl hexfloat(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::hexfloat, ios_base::floatfield);
	return (_Iosbase);
	}

namespace tr1 {	
using ::std:: hexfloat;
}	

inline ios_base& __cdecl internal(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::internal, ios_base::adjustfield);
	return (_Iosbase);
	}

inline ios_base& __cdecl left(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::left, ios_base::adjustfield);
	return (_Iosbase);
	}

inline ios_base& __cdecl noboolalpha(ios_base& _Iosbase)
	{	
	_Iosbase.unsetf(ios_base::boolalpha);
	return (_Iosbase);
	}

inline ios_base& __cdecl noshowbase(ios_base& _Iosbase)
	{	
	_Iosbase.unsetf(ios_base::showbase);
	return (_Iosbase);
	}

inline ios_base& __cdecl noshowpoint(ios_base& _Iosbase)
	{	
	_Iosbase.unsetf(ios_base::showpoint);
	return (_Iosbase);
	}

inline ios_base& __cdecl noshowpos(ios_base& _Iosbase)
	{	
	_Iosbase.unsetf(ios_base::showpos);
	return (_Iosbase);
	}

inline ios_base& __cdecl noskipws(ios_base& _Iosbase)
	{	
	_Iosbase.unsetf(ios_base::skipws);
	return (_Iosbase);
	}

inline ios_base& __cdecl nounitbuf(ios_base& _Iosbase)
	{	
	_Iosbase.unsetf(ios_base::unitbuf);
	return (_Iosbase);
	}

inline ios_base& __cdecl nouppercase(ios_base& _Iosbase)
	{	
	_Iosbase.unsetf(ios_base::uppercase);
	return (_Iosbase);
	}

inline ios_base& __cdecl oct(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::oct, ios_base::basefield);
	return (_Iosbase);
	}

inline ios_base& __cdecl right(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::right, ios_base::adjustfield);
	return (_Iosbase);
	}

inline ios_base& __cdecl scientific(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::scientific, ios_base::floatfield);
	return (_Iosbase);
	}

inline ios_base& __cdecl showbase(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::showbase);
	return (_Iosbase);
	}

inline ios_base& __cdecl showpoint(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::showpoint);
	return (_Iosbase);
	}

inline ios_base& __cdecl showpos(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::showpos);
	return (_Iosbase);
	}

inline ios_base& __cdecl skipws(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::skipws);
	return (_Iosbase);
	}

inline ios_base& __cdecl unitbuf(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::unitbuf);
	return (_Iosbase);
	}

inline ios_base& __cdecl uppercase(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::uppercase);
	return (_Iosbase);
	}
}

 
 #pragma warning(pop)
 #pragma pack(pop)
#line 361 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\ios"
#line 362 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\ios"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\ostream"

 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 #pragma warning(disable: 4189 4390)

namespace std {
		

 
 

 



 



 



#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\ostream"

 #pragma vtordisp(push, 2)	

		
template<class _Elem,
	class _Traits>
	class basic_ostream
		: virtual public basic_ios<_Elem, _Traits>
	{	
public:
	typedef basic_ostream<_Elem, _Traits> _Myt;
	typedef basic_ios<_Elem, _Traits> _Myios;
	typedef basic_streambuf<_Elem, _Traits> _Mysb;
	typedef ostreambuf_iterator<_Elem, _Traits> _Iter;
	typedef num_put<_Elem, _Iter> _Nput;

	explicit  basic_ostream(
		basic_streambuf<_Elem, _Traits> *_Strbuf,

		bool _Isstd = false)
		{	
		_Myios::init(_Strbuf, _Isstd);
		}

	 basic_ostream(_Uninitialized, bool _Addit = true)
		{	
		if (_Addit)
			this->_Addstd(this);	
		}

protected:
	 basic_ostream(_Myt&& _Right)
		{	
		_Myios::init();
		_Myios::move(::std:: move(_Right));
		}

	_Myt&  operator=(_Myt&& _Right)
		{	
		this->swap(_Right);
		return (*this);
		}

	void  swap(_Myt& _Right)
		{	
		if (this != &_Right)
			_Myios::swap(_Right);
		}

private:
		 basic_ostream(const _Myt& _Right);	
		_Myt&  operator=(const _Myt&);	

public:
	virtual  ~basic_ostream() throw ()
		{	
		}

	typedef typename _Traits::int_type int_type;
	typedef typename _Traits::pos_type pos_type;
	typedef typename _Traits::off_type off_type;

	class _Sentry_base
		{	
	public:
		 _Sentry_base(_Myt& _Ostr)
			: _Myostr(_Ostr)
			{	
			if (_Myostr.rdbuf() != 0)
				_Myostr.rdbuf()->_Lock();
			}

		 ~_Sentry_base() throw ()
			{	
			if (_Myostr.rdbuf() != 0)
				_Myostr.rdbuf()->_Unlock();
			}

		_Myt& _Myostr;	

	private:
		_Sentry_base& operator=(const _Sentry_base&);
		};

	class sentry
		: public _Sentry_base
		{	
	public:
		explicit  sentry(_Myt& _Ostr)
			: _Sentry_base(_Ostr)
			{	
			if (_Ostr.good() && _Ostr.tie() != 0 && _Ostr.tie() != &_Ostr)
				_Ostr.tie()->flush();
			_Ok = _Ostr.good();	
			}

		 ~sentry() throw ()
			{	
 
			if (!::std:: uncaught_exception())
				this->_Myostr._Osfx();

 

#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\ostream"
			}

		explicit  operator bool() const
			{	
			return (_Ok);
			}

	private:
		bool _Ok;	

		 sentry(const sentry&);	
		sentry&  operator=(const sentry&);	
		};

	bool  opfx()
		{	
		if (this->good() && _Myios::tie() != 0 && _Myios::tie() != this)
			_Myios::tie()->flush();
		return (this->good());
		}

	void  osfx()
		{	
		_Osfx();
		}

	void  _Osfx()
		{	
		try {
		if (this->good() && this->flags() & ios_base::unitbuf)
			if (_Myios::rdbuf()->pubsync() == -1)	
				_Myios::setstate(ios_base::badbit);
		} catch (...) {
		}
		}

  





















	_Myt&  operator<<(_Myt& (__cdecl *_Pfn)(_Myt&))
		{	
		;
		return ((*_Pfn)(*this));
		}

	_Myt&  operator<<(_Myios& (__cdecl *_Pfn)(_Myios&))
		{	
		;
		(*_Pfn)(*(_Myios *)this);
		return (*this);
		}

	_Myt&  operator<<(ios_base& (__cdecl *_Pfn)(ios_base&))
		{	
		;
		(*_Pfn)(*(ios_base *)this);
		return (*this);
		}

	_Myt&  operator<<(_Bool _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator<<(short _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());
			ios_base::fmtflags _Bfl =
				this->flags() & ios_base::basefield;
			long _Tmp = (_Bfl == ios_base::oct
				|| _Bfl == ios_base::hex)
				? (long)(unsigned short)_Val : (long)_Val;

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Tmp).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}










	_Myt&  operator<<(unsigned short _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), (unsigned long)_Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator<<(int _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());
			ios_base::fmtflags _Bfl =
				this->flags() & ios_base::basefield;
			long _Tmp = (_Bfl == ios_base::oct
				|| _Bfl == ios_base::hex)
				? (long)(unsigned int)_Val : (long)_Val;

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Tmp).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator<<(unsigned int _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), (unsigned long)_Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator<<(long _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator<<(unsigned long _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

 
	_Myt&  operator<<(__int64 _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator<<(unsigned __int64 _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}
 #line 417 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\ostream"

	_Myt&  operator<<(float _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), (double)_Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator<<(double _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator<<(long double _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator<<(const void *_Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator<<(_Mysb *_Strbuf)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		bool _Copied = false;
		const sentry _Ok(*this);

		if (_Ok && _Strbuf != 0)
			for (int_type _Meta = _Traits::eof(); ; _Copied = true)
				{	
				try {
				_Meta = _Traits::eq_int_type(_Traits::eof(), _Meta)
					? _Strbuf->sgetc() : _Strbuf->snextc();
				} catch (...) {
					_Myios::setstate(ios_base::failbit);
					throw;
				}

				if (_Traits::eq_int_type(_Traits::eof(), _Meta))
					break;	

				try {
					if (_Traits::eq_int_type(_Traits::eof(),
						_Myios::rdbuf()->sputc(
							_Traits::to_char_type(_Meta))))
						{	
						_State |= ios_base::badbit;
						break;
						}
				} catch (...) { _Myios::setstate(ios_base::badbit, true); }
				}

		this->width(0);
		_Myios::setstate(_Strbuf == 0 ? ios_base::badbit
			: !_Copied ? _State | ios_base::failbit : _State);
		return (*this);
		}

	_Myt&  put(_Elem _Ch)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (!_Ok)
			_State |= ios_base::badbit;
		else
			{	
			try {
			if (_Traits::eq_int_type(_Traits::eof(),
				_Myios::rdbuf()->sputc(_Ch)))
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  write(const _Elem *_Str,
		streamsize _Count)
		{	
 


#line 562 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\ostream"

		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (!_Ok)
			_State |= ios_base::badbit;
		else
			{	
			try {
			if (_Myios::rdbuf()->sputn(_Str, _Count) != _Count)
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  flush()
		{	
		if (_Myios::rdbuf() != 0)
			{	
			const sentry _Ok(*this);

			if (_Ok && _Myios::rdbuf()->pubsync() == -1)
				_Myios::setstate(ios_base::badbit);	
			}
		return (*this);
		}

	_Myt&  seekp(pos_type _Pos)
		{	
		const sentry _Ok(*this);

		if (!this->fail()
			&& (off_type)_Myios::rdbuf()->pubseekpos(_Pos,
				ios_base::out) == _BADOFF)
			_Myios::setstate(ios_base::failbit);
		return (*this);
		}

	_Myt&  seekp(off_type _Off, ios_base::seekdir _Way)
		{	
		const sentry _Ok(*this);

		if (!this->fail()
			&& (off_type)_Myios::rdbuf()->pubseekoff(_Off, _Way,
				ios_base::out) == _BADOFF)
			_Myios::setstate(ios_base::failbit);
		return (*this);
		}

	pos_type  tellp()
		{	
		const sentry _Ok(*this);

		if (!this->fail())
			return (_Myios::rdbuf()->pubseekoff(0,
				ios_base::cur, ios_base::out));
		else
			return (pos_type(_BADOFF));
		}
	};

 #pragma vtordisp(pop)	

	

  

















































 












#line 694 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\ostream"

		

template<class _Elem,
	class _Traits> inline
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr, const char *_Val)
	{	
	ios_base::iostate _State = ios_base::goodbit;
	streamsize _Count = (streamsize):: strlen(_Val);	
	streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
		? 0 : _Ostr.width() - _Count;
	const typename basic_ostream<_Elem, _Traits>::sentry _Ok(_Ostr);

	if (!_Ok)
		_State |= ios_base::badbit;
	else
		{	
		try {
		const ctype<_Elem>& _Ctype_fac = use_facet< ctype<_Elem> >(_Ostr.getloc());
		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
			for (; 0 < _Pad; --_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					{	
					_State |= ios_base::badbit;
					break;
					}

		for (; _State == ios_base::goodbit && 0 < _Count; --_Count, ++_Val)
			if (_Traits::eq_int_type(_Traits::eof(),
				_Ostr.rdbuf()->sputc(_Ctype_fac.widen(*_Val))))
					_State |= ios_base::badbit;

		if (_State == ios_base::goodbit)
			for (; 0 < _Pad; --_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					{	
					_State |= ios_base::badbit;
					break;
					}
		_Ostr.width(0);
		} catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

	_Ostr.setstate(_State);
	return (_Ostr);
	}

template<class _Elem,
	class _Traits> inline
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr, char _Ch)
	{	
	ios_base::iostate _State = ios_base::goodbit;
	const typename basic_ostream<_Elem, _Traits>::sentry _Ok(_Ostr);

	if (_Ok)
		{	
		const ctype<_Elem>& _Ctype_fac = use_facet< ctype<_Elem> >(_Ostr.getloc());
		streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

		try {
		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
			for (; _State == ios_base::goodbit && 0 < _Pad;
				--_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					_State |= ios_base::badbit;

		if (_State == ios_base::goodbit
			&& _Traits::eq_int_type(_Traits::eof(),
				_Ostr.rdbuf()->sputc(_Ctype_fac.widen(_Ch))))
			_State |= ios_base::badbit;

		for (; _State == ios_base::goodbit && 0 < _Pad;
			--_Pad)	
			if (_Traits::eq_int_type(_Traits::eof(),
				_Ostr.rdbuf()->sputc(_Ostr.fill())))
				_State |= ios_base::badbit;
		} catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

	_Ostr.width(0);
	_Ostr.setstate(_State);
	return (_Ostr);
	}

template<class _Traits> inline
	basic_ostream<char, _Traits>& operator<<(
		basic_ostream<char, _Traits>& _Ostr,
		const char *_Val)
	{	
	typedef char _Elem;
	typedef basic_ostream<_Elem, _Traits> _Myos;
	ios_base::iostate _State = ios_base::goodbit;
	streamsize _Count = (streamsize)_Traits::length(_Val);	
	streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
		? 0 : _Ostr.width() - _Count;
	const typename _Myos::sentry _Ok(_Ostr);

	if (!_Ok)
		_State |= ios_base::badbit;
	else
		{	
		try {
		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
			for (; 0 < _Pad; --_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					{	
					_State |= ios_base::badbit;
					break;
					}

		if (_State == ios_base::goodbit
			&& _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)
			_State |= ios_base::badbit;

		if (_State == ios_base::goodbit)
			for (; 0 < _Pad; --_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					{	
					_State |= ios_base::badbit;
					break;
					}
		_Ostr.width(0);
		} catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

	_Ostr.setstate(_State);
	return (_Ostr);
	}

template<class _Traits> inline
	basic_ostream<char, _Traits>& operator<<(
		basic_ostream<char, _Traits>& _Ostr, char _Ch)
	{	
	typedef char _Elem;
	typedef basic_ostream<_Elem, _Traits> _Myos;
	ios_base::iostate _State = ios_base::goodbit;
	const typename _Myos::sentry _Ok(_Ostr);

	if (_Ok)
		{	
		streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

		try {
		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
			for (; _State == ios_base::goodbit && 0 < _Pad;
				--_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					_State |= ios_base::badbit;

		if (_State == ios_base::goodbit
			&& _Traits::eq_int_type(_Traits::eof(),
				_Ostr.rdbuf()->sputc(_Ch)))
			_State |= ios_base::badbit;

		for (; _State == ios_base::goodbit && 0 < _Pad;
			--_Pad)	
			if (_Traits::eq_int_type(_Traits::eof(),
				_Ostr.rdbuf()->sputc(_Ostr.fill())))
				_State |= ios_base::badbit;
		} catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

	_Ostr.width(0);
	_Ostr.setstate(_State);
	return (_Ostr);
	}

template<class _Elem,
	class _Traits> inline
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr, const _Elem *_Val)
	{	
	typedef basic_ostream<_Elem, _Traits> _Myos;

	ios_base::iostate _State = ios_base::goodbit;
	streamsize _Count = (streamsize)_Traits::length(_Val);	
	streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
		? 0 : _Ostr.width() - _Count;
	const typename _Myos::sentry _Ok(_Ostr);

	if (!_Ok)
		_State |= ios_base::badbit;
	else
		{	
		try {
		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
			for (; 0 < _Pad; --_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					{	
					_State |= ios_base::badbit;
					break;
					}

		if (_State == ios_base::goodbit
			&& _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)
			_State |= ios_base::badbit;

		if (_State == ios_base::goodbit)
			for (; 0 < _Pad; --_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					{	
					_State |= ios_base::badbit;
					break;
					}
		_Ostr.width(0);
		} catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

	_Ostr.setstate(_State);
	return (_Ostr);
	}

template<class _Elem,
	class _Traits> inline
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr, _Elem _Ch)
	{	
	typedef basic_ostream<_Elem, _Traits> _Myos;

	ios_base::iostate _State = ios_base::goodbit;
	const typename _Myos::sentry _Ok(_Ostr);

	if (_Ok)
		{	
		streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

		try {
		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
			for (; _State == ios_base::goodbit && 0 < _Pad;
				--_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					_State |= ios_base::badbit;

		if (_State == ios_base::goodbit
			&& _Traits::eq_int_type(_Traits::eof(),
				_Ostr.rdbuf()->sputc(_Ch)))
			_State |= ios_base::badbit;

		for (; _State == ios_base::goodbit && 0 < _Pad;
			--_Pad)	
			if (_Traits::eq_int_type(_Traits::eof(),
				_Ostr.rdbuf()->sputc(_Ostr.fill())))
				_State |= ios_base::badbit;
		} catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

	_Ostr.width(0);
	_Ostr.setstate(_State);
	return (_Ostr);
	}

template<class _Traits> inline
	basic_ostream<char, _Traits>& operator<<(
		basic_ostream<char, _Traits>& _Ostr, const signed char *_Val)
	{	
	return (_Ostr << (const char *)_Val);
	}

template<class _Traits> inline
	basic_ostream<char, _Traits>& operator<<(
		basic_ostream<char, _Traits>& _Ostr, signed char _Ch)
	{	
	return (_Ostr << (char)_Ch);
	}

template<class _Traits> inline
	basic_ostream<char, _Traits>& operator<<(
		basic_ostream<char, _Traits>& _Ostr, const unsigned char *_Val)
	{	
	return (_Ostr << (const char *)_Val);
	}

template<class _Traits> inline
	basic_ostream<char, _Traits>& operator<<(
		basic_ostream<char, _Traits>& _Ostr, unsigned char _Ch)
	{	
	return (_Ostr << (char)_Ch);
	}

template<class _Elem,
	class _Traits,
	class _Ty> inline
	basic_ostream<_Elem, _Traits>&
		operator<<(basic_ostream<_Elem, _Traits>&& _Ostr, const _Ty& _Val)
	{	
	return (_Ostr << _Val);
	}

		
template<class _Elem,
	class _Traits> inline
	basic_ostream<_Elem, _Traits>&
		__cdecl endl(basic_ostream<_Elem, _Traits>& _Ostr)
	{	
	_Ostr.put(_Ostr.widen('\n'));
	_Ostr.flush();
	return (_Ostr);
	}

template<class _Elem,
	class _Traits> inline
	basic_ostream<_Elem, _Traits>&
		__cdecl ends(basic_ostream<_Elem, _Traits>& _Ostr)
	{	
	_Ostr.put(_Elem());
	return (_Ostr);
	}

template<class _Elem,
	class _Traits> inline
	basic_ostream<_Elem, _Traits>&
		__cdecl flush(basic_ostream<_Elem, _Traits>& _Ostr)
	{	
	_Ostr.flush();
	return (_Ostr);
	}

		
template<class _Elem,
	class _Traits> inline
	basic_ostream<_Elem, _Traits>&
		operator<<(basic_ostream<_Elem, _Traits>& _Ostr,
			const error_code& _Errcode)
	{	
	return (_Ostr << _Errcode.category().name() << ':' << _Errcode.value());
	}
}

 
 #pragma warning(pop)
 #pragma pack(pop)
#line 1037 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\ostream"
#line 1038 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\ostream"






#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\istream"

 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 #pragma warning(disable: 4189)

namespace std {
 #pragma vtordisp(push, 2)	

		
template<class _Elem,
	class _Traits>
	class basic_istream
		: virtual public basic_ios<_Elem, _Traits>
	{	
public:
	typedef basic_istream<_Elem, _Traits> _Myt;
	typedef basic_ios<_Elem, _Traits> _Myios;
	typedef basic_streambuf<_Elem, _Traits> _Mysb;
	typedef istreambuf_iterator<_Elem, _Traits> _Iter;
	typedef ctype<_Elem> _Ctype;
	typedef num_get<_Elem, _Iter> _Nget;

  







#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\istream"

	explicit  basic_istream(_Mysb *_Strbuf,
		bool _Isstd = false)

		: _Chcount(0)
		{	
		_Myios::init(_Strbuf, _Isstd);
		}

	 basic_istream(_Uninitialized)
		{	
		this->_Addstd(this);
		}

protected:
	 basic_istream(_Myt&& _Right)
		: _Chcount(_Right._Chcount)
		{	
		_Myios::init();
		_Myios::move(::std:: move(_Right));
		_Right._Chcount = 0;
		}

	_Myt&  operator=(_Myt&& _Right)
		{	
		this->swap(_Right);
		return (*this);
		}

	void  swap(_Myt& _Right)
		{	
		_Myios::swap(_Right);
		::std:: swap(_Chcount, _Right._Chcount);
		}

private:
		 basic_istream(const _Myt& _Right);	
		_Myt&  operator=(const _Myt&);	

public:
	virtual  ~basic_istream() throw ()
		{	
		}

	typedef typename _Traits::int_type int_type;
	typedef typename _Traits::pos_type pos_type;
	typedef typename _Traits::off_type off_type;

		
	class _Sentry_base
		{	
	public:
		 _Sentry_base(_Myt& _Istr)
			: _Myistr(_Istr)
			{	
			if (_Myistr.rdbuf() != 0)
				_Myistr.rdbuf()->_Lock();
			}

		 ~_Sentry_base() throw ()
			{	
			if (_Myistr.rdbuf() != 0)
				_Myistr.rdbuf()->_Unlock();
			}

		_Myt& _Myistr;	

	private:
		_Sentry_base& operator=(const _Sentry_base&);
		};

	class sentry
		: public _Sentry_base
		{	
	public:
		explicit  sentry(_Myt& _Istr, bool _Noskip = false)
			: _Sentry_base(_Istr)
			{	
			_Ok = this->_Myistr._Ipfx(_Noskip);
			}

		explicit  operator bool() const
			{	
			return (_Ok);
			}

	private:
		bool _Ok;	

		 sentry(const sentry&);	
		sentry&  operator=(const sentry&);	
		};

	bool  _Ipfx(bool _Noskip = false)
		{	
		if (this->good())
			{	
			if (_Myios::tie() != 0)
				_Myios::tie()->flush();

			if (!_Noskip && this->flags() & ios_base::skipws)
				{	
				const _Ctype& _Ctype_fac = use_facet< _Ctype >(this->getloc());

				try {
				int_type _Meta = _Myios::rdbuf()->sgetc();

				for (; ; _Meta = _Myios::rdbuf()->snextc())
					if (_Traits::eq_int_type(_Traits::eof(), _Meta))
						{	
						_Myios::setstate(ios_base::eofbit);
						break;
						}
					else if (!_Ctype_fac.is(_Ctype::space,
						_Traits::to_char_type(_Meta)))
						break;	
				} catch (...) { _Myios::setstate(ios_base::badbit, true); }
				}

			if (this->good())
				return (true);
			}
		_Myios::setstate(ios_base::failbit);
		return (false);
		}

	bool  ipfx(bool _Noskip = false)
		{	
		return (_Ipfx(_Noskip));
		}

	void  isfx()
		{	
		}

  





















	_Myt&  operator>>(_Myt& (__cdecl *_Pfn)(_Myt&))
		{	
		;
		return ((*_Pfn)(*this));
		}

	_Myt&  operator>>(_Myios& (__cdecl *_Pfn)(_Myios&))
		{	
		;
		(*_Pfn)(*(_Myios *)this);
		return (*this);
		}

	_Myt&  operator>>(ios_base& (__cdecl *_Pfn)(ios_base&))
		{	
		;
		(*_Pfn)(*(ios_base *)this);
		return (*this);
		}

	_Myt&  operator>>(_Bool& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Val);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator>>(short& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			long _Tmp = 0;
			const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Tmp);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }

			if (_State & ios_base::failbit
				|| _Tmp < (-32768) || 32767 < _Tmp)
				_State |= ios_base::failbit;
			else
				_Val = (short)_Tmp;
			}

		_Myios::setstate(_State);
		return (*this);
		}










	_Myt&  operator>>(unsigned short& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Val);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator>>(int& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			long _Tmp = 0;
			const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Tmp);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }

			if (_State & ios_base::failbit
				|| _Tmp < (-2147483647 - 1) || 2147483647 < _Tmp)
				_State |= ios_base::failbit;
			else
				_Val = _Tmp;
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator>>(unsigned int& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);
		if (_Ok)
			{	
			const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Val);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator>>(long& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());
			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Val);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator>>(unsigned long& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Val);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

 
	_Myt&  operator>>(__int64& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Val);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator>>(unsigned __int64& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);
		if (_Ok)
			{	
			const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Val);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}
 #line 410 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\istream"

	_Myt&  operator>>(float& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Val);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator>>(double& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);
		if (_Ok)
			{	
			const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Val);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator>>(long double& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());
			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Val);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator>>(void *& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Val);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator>>(_Mysb *_Strbuf)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		bool _Copied = false;
		const sentry _Ok(*this);

		if (_Ok && _Strbuf != 0)
			{	
			try {
			int_type _Meta = _Myios::rdbuf()->sgetc();

			for (; ; _Meta = _Myios::rdbuf()->snextc())
				if (_Traits::eq_int_type(_Traits::eof(), _Meta))
					{	
					_State |= ios_base::eofbit;
					break;
					}
				else
					{	
					try {
						if (_Traits::eq_int_type(_Traits::eof(),
							_Strbuf->sputc(_Traits::to_char_type(_Meta))))
							break;
					} catch (...) {
						break;
					}
					_Copied = true;
					}
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(!_Copied ? _State | ios_base::failbit : _State);
		return (*this);
		}

	int_type  get()
		{	
		int_type _Meta = 0;
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);

		if (!_Ok)
			_Meta = _Traits::eof();	
		else
			{	
			try {
			_Meta = _Myios::rdbuf()->sgetc();

			if (_Traits::eq_int_type(_Traits::eof(), _Meta))
				_State |= ios_base::eofbit | ios_base::failbit;	
			else
				{	
				_Myios::rdbuf()->sbumpc();
				++_Chcount;
				}
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (_Meta);
		}

	_Myt&  get(_Elem *_Str, streamsize _Count)
		{	
		return (get(_Str, _Count, _Myios::widen('\n')));
		}

	_Myt&  get(_Elem *_Str,
		streamsize _Count, _Elem _Delim)
		{	
		;
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);

		if (_Ok && 0 < _Count)
			{	
			try {
			int_type _Meta = _Myios::rdbuf()->sgetc();

			for (; 0 < --_Count; _Meta = _Myios::rdbuf()->snextc())
				if (_Traits::eq_int_type(_Traits::eof(), _Meta))
					{	
					_State |= ios_base::eofbit;
					break;
					}
				else if (_Traits::to_char_type(_Meta) == _Delim)
					break;	
				else
					{	
					*_Str++ = _Traits::to_char_type(_Meta);
					++_Chcount;
					}
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_Chcount == 0
			? _State | ios_base::failbit : _State);
		*_Str = _Elem();	
		return (*this);
		}

	_Myt&  get(_Elem& _Ch)
		{	
		int_type _Meta = get();
		if (!_Traits::eq_int_type(_Traits::eof(), _Meta))
			_Ch = _Traits::to_char_type(_Meta);
		return (*this);
		}

	_Myt&  get(_Mysb& _Strbuf)
		{	
		return (get(_Strbuf, _Myios::widen('\n')));
		}

	_Myt&  get(_Mysb& _Strbuf, _Elem _Delim)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);

		if (_Ok)
			{	
			try {
			int_type _Meta = _Myios::rdbuf()->sgetc();

			for (; ; _Meta = _Myios::rdbuf()->snextc())
				if (_Traits::eq_int_type(_Traits::eof(), _Meta))
					{	
					_State |= ios_base::eofbit;
					break;
					}
				else
					{	
					try {
						_Elem _Ch = _Traits::to_char_type(_Meta);
						if (_Ch == _Delim
							|| _Traits::eq_int_type(_Traits::eof(),
								_Strbuf.sputc(_Ch)))
							break;
					} catch (...) {
						break;
					}
					++_Chcount;
					}
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		if (_Chcount == 0)
			_State |= ios_base::failbit;
		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  getline(_Elem *_Str, streamsize _Count)
		{	
		return (getline(_Str, _Count, _Myios::widen('\n')));
		}

	_Myt&  getline(_Elem *_Str,
		streamsize _Count, _Elem _Delim)
		{	
		;
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);

		if (_Ok && 0 < _Count)
			{	
			int_type _Metadelim = _Traits::to_int_type(_Delim);

			try {
			int_type _Meta = _Myios::rdbuf()->sgetc();

			for (; ; _Meta = _Myios::rdbuf()->snextc())
				if (_Traits::eq_int_type(_Traits::eof(), _Meta))
					{	
					_State |= ios_base::eofbit;
					break;
					}
				else if (_Meta == _Metadelim)
					{	
					++_Chcount;
					_Myios::rdbuf()->sbumpc();
					break;
					}
				else if (--_Count <= 0)
					{	
					_State |= ios_base::failbit;
					break;
					}
				else
					{	
					++_Chcount;
					*_Str++ = _Traits::to_char_type(_Meta);
					}
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		*_Str = _Elem();	
		_Myios::setstate(_Chcount == 0 ? _State | ios_base::failbit : _State);
		return (*this);
		}

	_Myt&  ignore(streamsize _Count = 1,
		int_type _Metadelim = _Traits::eof())
		{	
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);

		if (_Ok && 0 < _Count)
			{	
			try {
			for (; ; )
				{	
				int_type _Meta;
				if (_Count != 2147483647 && --_Count < 0)
					break;	
				else if (_Traits::eq_int_type(_Traits::eof(),
					_Meta = _Myios::rdbuf()->sbumpc()))
					{	
					_State |= ios_base::eofbit;
					break;
					}
				else
					{	
					++_Chcount;
					if (_Meta == _Metadelim)
						break;	
					}
				}
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  read(_Elem *_Str, streamsize _Count)
		{	
		;
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);

		if (_Ok)
			{	
			try {
			const streamsize _Num = _Myios::rdbuf()->sgetn(_Str, _Count);
			_Chcount += _Num;
			if (_Num != _Count)
				_State |= ios_base::eofbit | ios_base::failbit;	
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	streamsize  readsome(_Elem *_Str,
		streamsize _Count)
		{	
		;
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);
		streamsize _Num;

		if (!_Ok)
			_State |= ios_base::failbit;	
		else if ((_Num = _Myios::rdbuf()->in_avail()) < 0)
			_State |= ios_base::eofbit;	
		else if (0 < _Num)
			read(_Str, _Num < _Count ? _Num : _Count);	

		_Myios::setstate(_State);
		return (gcount());
		}

	int_type  peek()
		{	
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		int_type _Meta = 0;
		const sentry _Ok(*this, true);

		if (!_Ok)
			_Meta = _Traits::eof();	
		else
			{	
			try {
			if (_Traits::eq_int_type(_Traits::eof(),
				_Meta = _Myios::rdbuf()->sgetc()))
				_State |= ios_base::eofbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (_Meta);
		}

	_Myt&  putback(_Elem _Ch)
		{	
		_Chcount = 0;
		ios_base::iostate _State = ios_base::goodbit;
		ios_base::iostate _Oldstate = _Myios::rdstate();
		_Myios::clear(_Oldstate & ~ios_base::eofbit);
		const sentry _Ok(*this, true);

		if (_Ok)
			{	
			try {
			if (_Traits::eq_int_type(_Traits::eof(),
				_Myios::rdbuf()->sputbackc(_Ch)))
				_State |= ios_base::badbit | _Oldstate;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  unget()
		{	
		_Chcount = 0;
		ios_base::iostate _State = ios_base::goodbit;
		ios_base::iostate _Oldstate = _Myios::rdstate();
		_Myios::clear(_Oldstate & ~ios_base::eofbit);
		const sentry _Ok(*this, true);

		if (_Ok)
			{	
			try {
			if (_Traits::eq_int_type(_Traits::eof(),
				_Myios::rdbuf()->sungetc()))
				_State |= ios_base::badbit | _Oldstate;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	streamsize  gcount() const
		{	
		return (_Chcount);
		}

	int  sync()
		{	
		const sentry _Ok(*this, true);

		if (_Myios::rdbuf() == 0)
			return (-1);
		else if (_Myios::rdbuf()->pubsync() == -1)
			{	
			_Myios::setstate(ios_base::badbit);
			return (-1);
			}
		else
			return (0);
		}

	_Myt&  seekg(pos_type _Pos)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		ios_base::iostate _Oldstate = _Myios::rdstate();
		_Myios::clear(_Oldstate & ~ios_base::eofbit);
		const sentry _Ok(*this, true);

		if (!this->fail()
			&& (off_type)_Myios::rdbuf()->pubseekpos(_Pos,
				ios_base::in) == _BADOFF)
			_Myios::setstate(_State | ios_base::failbit);
		return (*this);
		}

	_Myt&  seekg(off_type _Off, ios_base::seekdir _Way)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		ios_base::iostate _Oldstate = _Myios::rdstate();
		_Myios::clear(_Oldstate & ~ios_base::eofbit);
		const sentry _Ok(*this, true);

		if (!this->fail()
			&& (off_type)_Myios::rdbuf()->pubseekoff(_Off, _Way,
				ios_base::in) == _BADOFF)
			_Myios::setstate(_State | ios_base::failbit);
		return (*this);
		}

	pos_type  tellg()
		{	
		const sentry _Ok(*this, true);

		if (!this->fail())
			return (_Myios::rdbuf()->pubseekoff(0,
				ios_base::cur, ios_base::in));
		else
			return (pos_type(_BADOFF));
		}

private:
	streamsize _Chcount;	
	};

	

 #pragma vtordisp(pop)	

  






















 










#line 932 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\istream"

		
template<class _Elem,
	class _Traits>
	class basic_iostream
	: public basic_istream<_Elem, _Traits>,
		public basic_ostream<_Elem, _Traits>
	{	
public:
	typedef basic_iostream<_Elem, _Traits> _Myt;
	typedef basic_istream<_Elem, _Traits> _Myis;
	typedef basic_ostream<_Elem, _Traits> _Myos;
	typedef basic_ios<_Elem, _Traits> _Myios;
	typedef _Elem char_type;
	typedef _Traits traits_type;
	typedef typename _Traits::int_type int_type;
	typedef typename _Traits::pos_type pos_type;
	typedef typename _Traits::off_type off_type;

	explicit  basic_iostream(basic_streambuf<_Elem, _Traits> *_Strbuf)
		: _Myis(_Strbuf, false),
			_Myos(_Noinit, false)
		{	
		}

protected:
	 basic_iostream(_Myt&& _Right)
		: _Myis(_Right.rdbuf(), false),
			_Myos(_Noinit, false)
		{	
		_Myios::init();
		_Myios::move(::std:: forward<_Myt>(_Right));
		}

	_Myt&  operator=(_Myt&& _Right)
		{	
		this->swap(_Right);
		return (*this);
		}

	void  swap(_Myt& _Right)
		{	
		if (this != &_Right)
			_Myios::swap(_Right);
		}

private:
		 basic_iostream(const _Myt& _Right);	
		_Myt&  operator=(const _Myt&);	
public:
	virtual  ~basic_iostream() throw ()
		{	
		}
	};

	

 










#line 1001 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\istream"

		

template<class _Elem,
	class _Traits> inline
	basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits>& _Istr, _Elem *_Str)
	{	
	;
	typedef basic_istream<_Elem, _Traits> _Myis;
	typedef ctype<_Elem> _Ctype;
	ios_base::iostate _State = ios_base::goodbit;
	_Elem *_Str0 = _Str;
	const typename _Myis::sentry _Ok(_Istr);

	if (_Ok)
		{	
		const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Istr.getloc());

		try {
		streamsize _Count = 0 < _Istr.width() ? _Istr.width() : 2147483647;
		typename _Myis::int_type _Meta = _Istr.rdbuf()->sgetc();
		_Elem _Ch;
		for (; 0 < --_Count; _Meta = _Istr.rdbuf()->snextc())
			if (_Traits::eq_int_type(_Traits::eof(), _Meta))
				{	
				_State |= ios_base::eofbit;
				break;
				}
			else if (_Ctype_fac.is(_Ctype::space,
				_Ch = _Traits::to_char_type(_Meta))
					|| _Ch == _Elem())
				break;	
			else
				*_Str++ = _Traits::to_char_type(_Meta);	
		} catch (...) { (_Istr).setstate(ios_base::badbit, true); }
		}

	*_Str = _Elem();	
	_Istr.width(0);
	_Istr.setstate(_Str == _Str0 ? _State | ios_base::failbit : _State);
	return (_Istr);
	}

template<class _Elem,
	class _Traits> inline
	basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits>& _Istr, _Elem& _Ch)
	{	
	typedef basic_istream<_Elem, _Traits> _Myis;

	typename _Myis::int_type _Meta;
	ios_base::iostate _State = ios_base::goodbit;
	const typename _Myis::sentry _Ok(_Istr);

	if (_Ok)
		{	
		try {
		_Meta = _Istr.rdbuf()->sbumpc();
		if (_Traits::eq_int_type(_Traits::eof(), _Meta))
			_State |= ios_base::eofbit | ios_base::failbit;	
		else
			_Ch = _Traits::to_char_type(_Meta);	
		} catch (...) { (_Istr).setstate(ios_base::badbit, true); }
		}

	_Istr.setstate(_State);
	return (_Istr);
	}

template<class _Traits> inline
	basic_istream<char, _Traits>& operator>>(
		basic_istream<char, _Traits>& _Istr, signed char *_Str)
	{	
	return (_Istr >> (char *)_Str);
	}

template<class _Traits> inline
	basic_istream<char, _Traits>& operator>>(
		basic_istream<char, _Traits>& _Istr, signed char& _Ch)
	{	
	return (_Istr >> (char&)_Ch);
	}

template<class _Traits> inline
	basic_istream<char, _Traits>& operator>>(
		basic_istream<char, _Traits>& _Istr, unsigned char *_Str)
	{	
	return (_Istr >> (char *)_Str);
	}

template<class _Traits> inline
	basic_istream<char, _Traits>& operator>>(
		basic_istream<char, _Traits>& _Istr, unsigned char& _Ch)
	{	
	return (_Istr >> (char&)_Ch);
	}

template<class _Elem,
	class _Traits,
	class _Ty> inline
	basic_istream<_Elem, _Traits>&
		operator>>(basic_istream<_Elem, _Traits>&& _Istr, _Ty& _Val)
	{	
	return (_Istr >> _Val);
	}

		
template<class _Elem,
	class _Traits> inline
	basic_istream<_Elem, _Traits>&
		__cdecl ws(basic_istream<_Elem, _Traits>& _Istr)
	{	
	typedef basic_istream<_Elem, _Traits> _Myis;
	typedef ctype<_Elem> _Ctype;

	if (!_Istr.eof())
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const typename _Myis::sentry _Ok(_Istr, true);

		if (_Ok)
			{	
			const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Istr.getloc());

			try {
			for (typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc(); ;
				_Meta = _Istr.rdbuf()->snextc())
				if (_Traits::eq_int_type(_Traits::eof(), _Meta))
					{	
					_State |= ios_base::eofbit;
					break;
					}
				else if (!_Ctype_fac.is(_Ctype::space,
					_Traits::to_char_type(_Meta)))
					break;	
			} catch (...) { (_Istr).setstate(ios_base::badbit, true); }
			}

		_Istr.setstate(_State);
		}
	return (_Istr);
	}

 inline basic_istream<char, char_traits<char> >&
	__cdecl ws(basic_istream<char, char_traits<char> >& _Istr)
	{	
	typedef char _Elem;
	typedef char_traits<_Elem> _Traits;

	if (!_Istr.eof())
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const basic_istream<_Elem, _Traits>::sentry _Ok(_Istr, true);

		if (_Ok)
			{	
			const ctype<_Elem>& _Ctype_fac =
				use_facet< ctype<_Elem> >(_Istr.getloc());

			try {
			for (_Traits::int_type _Meta = _Istr.rdbuf()->sgetc(); ;
				_Meta = _Istr.rdbuf()->snextc())
				if (_Traits::eq_int_type(_Traits::eof(), _Meta))
					{	
					_State |= ios_base::eofbit;
					break;
					}
				else if (!_Ctype_fac.is(ctype<_Elem>::space,
					_Traits::to_char_type(_Meta)))
					break;	
			} catch (...) { (_Istr).setstate(ios_base::badbit, true); }
			}

		_Istr.setstate(_State);
		}
	return (_Istr);
	}

 inline basic_istream<wchar_t, char_traits<wchar_t> >&
	__cdecl ws(basic_istream<wchar_t, char_traits<wchar_t> >& _Istr)
	{	
	typedef wchar_t _Elem;
	typedef char_traits<_Elem> _Traits;

	if (!_Istr.eof())
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const basic_istream<_Elem, _Traits>::sentry _Ok(_Istr, true);

		if (_Ok)
			{	
			const ctype<_Elem>& _Ctype_fac =
				use_facet< ctype<_Elem> >(_Istr.getloc());

			try {
			for (_Traits::int_type _Meta = _Istr.rdbuf()->sgetc(); ;
				_Meta = _Istr.rdbuf()->snextc())
				if (_Traits::eq_int_type(_Traits::eof(), _Meta))
					{	
					_State |= ios_base::eofbit;
					break;
					}
				else if (!_Ctype_fac.is(ctype<_Elem>::space,
					_Traits::to_char_type(_Meta)))
					break;	
			} catch (...) { (_Istr).setstate(ios_base::badbit, true); }
			}

		_Istr.setstate(_State);
		}
	return (_Istr);
	}

 
 inline basic_istream<unsigned short, char_traits<unsigned short> >&
	__cdecl ws(basic_istream<unsigned short, char_traits<unsigned short> >& _Istr)
	{	
	typedef unsigned short _Elem;
	typedef char_traits<_Elem> _Traits;

	if (!_Istr.eof())
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const basic_istream<_Elem, _Traits>::sentry _Ok(_Istr, true);

		if (_Ok)
			{	
			const ctype<_Elem>& _Ctype_fac =
				use_facet< ctype<_Elem> >(_Istr.getloc());

			try {
			for (_Traits::int_type _Meta = _Istr.rdbuf()->sgetc(); ;
				_Meta = _Istr.rdbuf()->snextc())
				if (_Traits::eq_int_type(_Traits::eof(), _Meta))
					{	
					_State |= ios_base::eofbit;
					break;
					}
				else if (!_Ctype_fac.is(ctype<_Elem>::space,
					_Traits::to_char_type(_Meta)))
					break;	
		} catch (...) { (_Istr).setstate(ios_base::badbit, true); }
			}

		_Istr.setstate(_State);
		}
	return (_Istr);
	}
 #line 1251 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\istream"
}

 
 #pragma warning(pop)
 #pragma pack(pop)
#line 1257 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\istream"
#line 1258 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\istream"






#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\iterator"


 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

namespace std {
		
template<class _Container>
	class back_insert_iterator
		: public _Outit
	{	
public:
	typedef back_insert_iterator<_Container> _Myt;
	typedef _Container container_type;
	typedef typename _Container::value_type _Valty;

	explicit back_insert_iterator(_Container& _Cont)
		: container(::std:: addressof(_Cont))
		{	
		}

	_Myt& operator=(const _Valty& _Val)
		{	
		container->push_back(_Val);
		return (*this);
		}

	_Myt& operator=(_Valty&& _Val)
		{	
		container->push_back(::std:: forward<_Valty>(_Val));
		return (*this);
		}

	_Myt& operator*()
		{	
		return (*this);
		}

	_Myt& operator++()
		{	
		return (*this);
		}

	_Myt operator++(int)
		{	
		return (*this);
		}

protected:
	_Container *container;	
	};

template<class _Container>
	struct _Is_checked_helper<back_insert_iterator<_Container> >
		: public true_type
	{	
	};

		
template<class _Container> inline
	back_insert_iterator<_Container> back_inserter(_Container& _Cont)
	{	
	return (::std:: back_insert_iterator<_Container>(_Cont));
	}

		
template<class _Container>
	class front_insert_iterator
		: public _Outit
	{	
public:
	typedef front_insert_iterator<_Container> _Myt;
	typedef _Container container_type;
	typedef typename _Container::value_type _Valty;

	explicit front_insert_iterator(_Container& _Cont)
		: container(::std:: addressof(_Cont))
		{	
		}

	_Myt& operator=(const _Valty& _Val)
		{	
		container->push_front(_Val);
		return (*this);
		}

	_Myt& operator=(_Valty&& _Val)
		{	
		container->push_front(::std:: forward<_Valty>(_Val));
		return (*this);
		}

	_Myt& operator*()
		{	
		return (*this);
		}

	_Myt& operator++()
		{	
		return (*this);
		}

	_Myt operator++(int)
		{	
		return (*this);
		}

protected:
	_Container *container;	
	};

template<class _Container>
	struct _Is_checked_helper<front_insert_iterator<_Container> >
		: public true_type
	{	
	};

		
template<class _Container> inline
	front_insert_iterator<_Container> front_inserter(_Container& _Cont)
	{	
	return (::std:: front_insert_iterator<_Container>(_Cont));
	}

		
template<class _Container>
	class insert_iterator
		: public _Outit
	{	
public:
	typedef insert_iterator<_Container> _Myt;
	typedef _Container container_type;
	typedef typename _Container::value_type _Valty;

	insert_iterator(_Container& _Cont, typename _Container::iterator _Where)
		: container(::std:: addressof(_Cont)), iter(_Where)
		{	
		}

	_Myt& operator=(const _Valty& _Val)
		{	
		iter = container->insert(iter, _Val);
		++iter;
		return (*this);
		}

	_Myt& operator=(_Valty&& _Val)
		{	
		iter = container->insert(iter, ::std:: forward<_Valty>(_Val));
		++iter;
		return (*this);
		}

	_Myt& operator*()
		{	
		return (*this);
		}

	_Myt& operator++()
		{	
		return (*this);
		}

	_Myt& operator++(int)
		{	
		return (*this);
		}

protected:
	_Container *container;	
	typename _Container::iterator iter;	
	};

template<class _Container>
	struct _Is_checked_helper<insert_iterator<_Container> >
		: public true_type
	{	
	};

		
template<class _Container> inline
	insert_iterator<_Container> inserter(_Container& _Cont,
		typename _Container::iterator _Where)
	{	
	return (::std:: insert_iterator<_Container>(_Cont, _Where));
	}

		

template<class _Ty,
	class _Elem = char,
	class _Traits = char_traits<_Elem>,
	class _Diff = ptrdiff_t>
	class istream_iterator
		: public iterator<input_iterator_tag, _Ty, _Diff,
			const _Ty *, const _Ty&>
	{	
	typedef istream_iterator<_Ty, _Elem, _Traits, _Diff> _Myt;
public:
	typedef _Elem char_type;
	typedef _Traits traits_type;
	typedef basic_istream<_Elem, _Traits> istream_type;

	typedef const _Ty *pointer;

	istream_iterator()
		: _Myistr(0)
		{	
		}

	istream_iterator(istream_type& _Istr)
		: _Myistr(&_Istr)
		{	
		_Getval();
		}

	const _Ty& operator*() const
		{	
		return (_Myval);
		}

	pointer operator->() const
		{	
		return (::std:: pointer_traits<pointer>::pointer_to(**this));
		}

	_Myt& operator++()
		{	
		_Getval();
		return (*this);
		}

	_Myt operator++(int)
		{	
		_Myt _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	bool _Equal(const _Myt& _Right) const
		{	
		return (_Myistr == _Right._Myistr);
		}

protected:
	void _Getval()
		{	
		if (_Myistr != 0 && !(*_Myistr >> _Myval))
			_Myistr = 0;
		}

	istream_type *_Myistr;	
	_Ty _Myval;	
	};

template<class _Ty,
	class _Elem,
	class _Traits,
	class _Diff>
	struct _Is_checked_helper<istream_iterator<_Ty, _Elem, _Traits, _Diff> >
		: public true_type
	{	
	};

		
template<class _Ty,
	class _Elem,
	class _Traits,
	class _Diff> inline
	bool operator==(
		const istream_iterator<_Ty, _Elem, _Traits, _Diff>& _Left,
		const istream_iterator<_Ty, _Elem, _Traits, _Diff>& _Right)
	{	
	return (_Left._Equal(_Right));
	}

template<class _Ty,
	class _Elem,
	class _Traits,
	class _Diff> inline
	bool operator!=(
		const istream_iterator<_Ty, _Elem, _Traits, _Diff>& _Left,
		const istream_iterator<_Ty, _Elem, _Traits, _Diff>& _Right)
	{	
	return (!(_Left == _Right));
	}

		

template<class _Ty,
	class _Elem = char,
	class _Traits = char_traits<_Elem> >
	class ostream_iterator
		: public _Outit
	{	
public:
	typedef _Elem char_type;
	typedef _Traits traits_type;
	typedef basic_ostream<_Elem, _Traits> ostream_type;

	ostream_iterator(ostream_type& _Ostr,
		const _Elem *_Delim = 0)
		: _Myostr(&_Ostr), _Mydelim(_Delim)
		{	
		}

	ostream_iterator<_Ty, _Elem, _Traits>& operator=(const _Ty& _Val)
		{	
		*_Myostr << _Val;
		if (_Mydelim != 0)
			*_Myostr << _Mydelim;
		return (*this);
		}

	ostream_iterator<_Ty, _Elem, _Traits>& operator*()
		{	
		return (*this);
		}

	ostream_iterator<_Ty, _Elem, _Traits>& operator++()
		{	
		return (*this);
		}

	ostream_iterator<_Ty, _Elem, _Traits>& operator++(int)
		{	
		return (*this);
		}

protected:
	const _Elem *_Mydelim;	
	ostream_type *_Myostr;	
	};

template<class _Ty,
	class _Elem,
	class _Traits>
	struct _Is_checked_helper<ostream_iterator<_Ty, _Elem, _Traits> >
		: public true_type
	{	
	};
}

namespace stdext {
using ::std:: iterator_traits;
using ::std:: size_t;

		
template<class _Iterator>
	class checked_array_iterator
	{	
public:
	typedef checked_array_iterator<_Iterator> _Myt;

	typedef typename iterator_traits<_Iterator>::iterator_category
		iterator_category;
	typedef typename iterator_traits<_Iterator>::value_type
		value_type;
	typedef typename iterator_traits<_Iterator>::difference_type
		difference_type;
	typedef typename iterator_traits<_Iterator>::difference_type
		distance_type;	
	typedef typename iterator_traits<_Iterator>::pointer
		pointer;
	typedef typename iterator_traits<_Iterator>::reference
		reference;

	checked_array_iterator()
		: _Myarray(), _Mysize(0), _Myindex(0)
		{	
		}

	checked_array_iterator(_Iterator _Array, size_t _Size,
		size_t _Index = 0)
		: _Myarray(_Array), _Mysize(_Size), _Myindex(_Index)
		{	
		{ if (!(_Index <= _Size)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };
		}

	_Iterator base() const
		{	
		return (_Myarray + _Myindex);
		}

	typedef _Iterator _Unchecked_type;

	_Myt& _Rechecked(_Unchecked_type _Right)
		{	
		_Myindex = _Right - _Myarray;
		return (*this);
		}

	_Unchecked_type _Unchecked() const
		{	
		return (base());
		}

	reference operator*() const
		{	
		{ if (!(_Myarray != 0 && _Myindex < _Mysize)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };
#line 410 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\iterator"
		return (_Myarray[_Myindex]);
		}

	pointer operator->() const
		{	
		return (::std:: pointer_traits<pointer>::pointer_to(**this));
		}

	_Myt& operator++()
		{	
		{ if (!(_Myarray != 0 && _Myindex < _Mysize)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };
#line 422 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\iterator"
		++_Myindex;
		return (*this);
		}

	_Myt operator++(int)
		{	
		_Myt _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Myt& operator--()
		{	
		{ if (!(_Myarray != 0 && 0 < _Myindex)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };
#line 437 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\iterator"
		--_Myindex;
		return (*this);
		}

	_Myt operator--(int)
		{	
		_Myt _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	_Myt& operator+=(difference_type _Off)
		{	
		{ if (!(_Myarray != 0 && _Myindex + _Off <= _Mysize)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };
#line 452 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\iterator"
		_Myindex += _Off;
		return (*this);
		}

	_Myt operator+(difference_type _Off) const
		{	
		_Myt _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Myt& operator-=(difference_type _Off)
		{	
		return (*this += -_Off);
		}

	_Myt operator-(difference_type _Off) const
		{	
		_Myt _Tmp = *this;
		return (_Tmp -= _Off);
		}

	difference_type operator-(const _Myt& _Right) const
		{	
		{ if (!(_Myarray == _Right._Myarray)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };
		return (_Myindex - _Right._Myindex);
		}

	reference operator[](difference_type _Off) const
		{	
		return (*(*this + _Off));
		}

	bool operator==(const _Myt& _Right) const
		{	
		{ if (!(_Myarray == _Right._Myarray)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };
		return (_Myindex == _Right._Myindex);
		}

	bool operator!=(const _Myt& _Right) const
		{	
		return (!(*this == _Right));
		}

	bool operator<(const _Myt& _Right) const
		{	
		{ if (!(_Myarray == _Right._Myarray)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };
		return (_Myindex < _Right._Myindex);
		}

	bool operator>(const _Myt& _Right) const
		{	
		return (_Right < *this);
		}

	bool operator<=(const _Myt& _Right) const
		{	
		return (!(_Right < *this));
		}

	bool operator>=(const _Myt& _Right) const
		{	
		return (!(*this < _Right));
		}

private:
	_Iterator _Myarray;	
	size_t _Mysize;	
	size_t _Myindex;	
	};

template<class _Iterator> inline
	typename checked_array_iterator<_Iterator>::_Unchecked_type
		_Unchecked(checked_array_iterator<_Iterator> _Iter)
	{	
	return (_Iter._Unchecked());
	}

template<class _Iterator> inline
	checked_array_iterator<_Iterator>&
		_Rechecked(checked_array_iterator<_Iterator>& _Iter,
			typename checked_array_iterator<_Iterator>
				::_Unchecked_type _Right)
	{	
	return (_Iter._Rechecked(_Right));
	}

template<class _Iterator> inline
	checked_array_iterator<_Iterator> operator+(
		typename checked_array_iterator<_Iterator>::difference_type _Off,
		checked_array_iterator<_Iterator> _Next)
	{	
	return (_Next += _Off);
	}

template<class _Iterator> inline
	checked_array_iterator<_Iterator> make_checked_array_iterator(
		_Iterator _Array, size_t _Size, size_t _Index = 0)
	{	
	return (checked_array_iterator<_Iterator>(_Array, _Size, _Index));
	}

		
template<class _Iterator>
	class unchecked_array_iterator
	{	
public:
	typedef unchecked_array_iterator<_Iterator> _Myt;

	typedef typename iterator_traits<_Iterator>::iterator_category
		iterator_category;
	typedef typename iterator_traits<_Iterator>::value_type
		value_type;
	typedef typename iterator_traits<_Iterator>::difference_type
		difference_type;
	typedef typename iterator_traits<_Iterator>::difference_type
		distance_type;	
	typedef typename iterator_traits<_Iterator>::pointer
		pointer;
	typedef typename iterator_traits<_Iterator>::reference
		reference;

	unchecked_array_iterator()
		: _Myptr()
		{	
		}

	explicit unchecked_array_iterator(_Iterator _Ptr)
		: _Myptr(_Ptr)
		{	
		}

	_Iterator base() const
		{	
		return (_Myptr);
		}

	typedef _Iterator _Unchecked_type;

	_Myt& _Rechecked(_Unchecked_type _Right)
		{	
		_Myptr = _Right;
		return (*this);
		}

	_Unchecked_type _Unchecked() const
		{	
		return (base());
		}

	reference operator*() const
		{	
		return (*_Myptr);
		}

	pointer operator->() const
		{	
		return (::std:: pointer_traits<pointer>::pointer_to(**this));
		}

	_Myt& operator++()
		{	
		++_Myptr;
		return (*this);
		}

	_Myt operator++(int)
		{	
		_Myt _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Myt& operator--()
		{	
		--_Myptr;
		return (*this);
		}

	_Myt operator--(int)
		{	
		_Myt _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	_Myt& operator+=(difference_type _Off)
		{	
		_Myptr += _Off;
		return (*this);
		}

	_Myt operator+(difference_type _Off) const
		{	
		_Myt _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Myt& operator-=(difference_type _Off)
		{	
		return (*this += -_Off);
		}

	_Myt operator-(difference_type _Off) const
		{	
		_Myt _Tmp = *this;
		return (_Tmp -= _Off);
		}

	difference_type operator-(const _Myt& _Right) const
		{	
		return (_Myptr - _Right._Myptr);
		}

	reference operator[](difference_type _Off) const
		{	
		return (*(*this + _Off));
		}

	bool operator==(const _Myt& _Right) const
		{	
		return (_Myptr == _Right._Myptr);
		}

	bool operator!=(const _Myt& _Right) const
		{	
		return (!(*this == _Right));
		}

	bool operator<(const _Myt& _Right) const
		{	
		return (_Myptr < _Right._Myptr);
		}

	bool operator>(const _Myt& _Right) const
		{	
		return (_Right < *this);
		}

	bool operator<=(const _Myt& _Right) const
		{	
		return (!(_Right < *this));
		}

	bool operator>=(const _Myt& _Right) const
		{	
		return (!(*this < _Right));
		}

private:
	_Iterator _Myptr;	
	};

template<class _Iterator> inline
	typename unchecked_array_iterator<_Iterator>::_Unchecked_type
		_Unchecked(unchecked_array_iterator<_Iterator> _Iter)
	{	
	return (_Iter._Unchecked());
	}

template<class _Iterator> inline
	unchecked_array_iterator<_Iterator>&
		_Rechecked(unchecked_array_iterator<_Iterator>& _Iter,
			typename unchecked_array_iterator<_Iterator>
				::_Unchecked_type _Right)
	{	
	return (_Iter._Rechecked(_Right));
	}

template<class _Iterator> inline
	unchecked_array_iterator<_Iterator> operator+(
		typename unchecked_array_iterator<_Iterator>::difference_type _Off,
		unchecked_array_iterator<_Iterator> _Next)
	{	
	return (_Next += _Off);
	}

template<class _Iterator> inline
	unchecked_array_iterator<_Iterator> make_unchecked_array_iterator(
		_Iterator _Ptr)
	{	
	return (unchecked_array_iterator<_Iterator>(_Ptr));
	}
}

 
 #pragma warning(pop)
 #pragma pack(pop)
#line 740 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\iterator"
#line 741 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\iterator"






















#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\string"

 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 #pragma warning(disable: 4189)
 #pragma warning(disable: 4172)

namespace std {
		
template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits>&& _Istr,
		basic_string<_Elem, _Traits, _Alloc>& _Str)
	{	
	typedef ctype<_Elem> _Ctype;
	typedef basic_istream<_Elem, _Traits> _Myis;
	typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
	typedef typename _Mystr::size_type _Mysizt;

	ios_base::iostate _State = ios_base::goodbit;
	bool _Changed = false;
	const typename _Myis::sentry _Ok(_Istr);

	if (_Ok)
		{	
		const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Istr.getloc());
		_Str.erase();

		try {
		_Mysizt _Size = 0 < _Istr.width()
			&& (_Mysizt)_Istr.width() < _Str.max_size()
				? (_Mysizt)_Istr.width() : _Str.max_size();
		typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc();

		for (; 0 < _Size; --_Size, _Meta = _Istr.rdbuf()->snextc())
			if(_Traits::eq_int_type(_Traits::eof(), _Meta))
				{	
				_State |= ios_base::eofbit;
				break;
				}
			else if (_Ctype_fac.is(_Ctype::space,
				_Traits::to_char_type(_Meta)))
				break;	
			else
				{	
				_Str.append(1, _Traits::to_char_type(_Meta));
				_Changed = true;
				}
		} catch (...) { (_Istr).setstate(ios_base::badbit, true); }
		}

	_Istr.width(0);
	if (!_Changed)
		_State |= ios_base::failbit;
	_Istr.setstate(_State);
	return (_Istr);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_istream<_Elem, _Traits>& getline(
		basic_istream<_Elem, _Traits>&& _Istr,
		basic_string<_Elem, _Traits, _Alloc>& _Str,
		const _Elem _Delim)
	{	
	typedef basic_istream<_Elem, _Traits> _Myis;

	ios_base::iostate _State = ios_base::goodbit;
	bool _Changed = false;
	const typename _Myis::sentry _Ok(_Istr, true);

	if (_Ok)
		{	
		try {
		_Str.erase();
		const typename _Traits::int_type _Metadelim =
			_Traits::to_int_type(_Delim);
		typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc();

		for (; ; _Meta = _Istr.rdbuf()->snextc())
			if (_Traits::eq_int_type(_Traits::eof(), _Meta))
				{	
				_State |= ios_base::eofbit;
				break;
				}
			else if (_Traits::eq_int_type(_Meta, _Metadelim))
				{	
				_Changed = true;
				_Istr.rdbuf()->sbumpc();
				break;
				}
			else if (_Str.max_size() <= _Str.size())
				{	
				_State |= ios_base::failbit;
				break;
				}
			else
				{	
				_Str += _Traits::to_char_type(_Meta);
				_Changed = true;
				}
		} catch (...) { (_Istr).setstate(ios_base::badbit, true); }
		}

	if (!_Changed)
		_State |= ios_base::failbit;
	_Istr.setstate(_State);
	return (_Istr);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_istream<_Elem, _Traits>& getline(
		basic_istream<_Elem, _Traits>&& _Istr,
		basic_string<_Elem, _Traits, _Alloc>& _Str)
	{	
	return (getline(_Istr, _Str, _Istr.widen('\n')));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits>& _Istr,
		basic_string<_Elem, _Traits, _Alloc>& _Str)
	{	
	return (::std:: move(_Istr) >> _Str);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_istream<_Elem, _Traits>& getline(
		basic_istream<_Elem, _Traits>& _Istr,
		basic_string<_Elem, _Traits, _Alloc>& _Str,
		const _Elem _Delim)
	{	
	return (getline(::std:: move(_Istr), _Str, _Delim));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_istream<_Elem, _Traits>& getline(
		basic_istream<_Elem, _Traits>& _Istr,
		basic_string<_Elem, _Traits, _Alloc>& _Str)
	{	
	return (getline(::std:: move(_Istr), _Str, _Istr.widen('\n')));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr,
		const basic_string<_Elem, _Traits, _Alloc>& _Str)
	{	
	typedef basic_ostream<_Elem, _Traits> _Myos;
	typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
	typedef typename _Mystr::size_type _Mysizt;

	ios_base::iostate _State = ios_base::goodbit;
	_Mysizt _Size = _Str.size();
	_Mysizt _Pad = _Ostr.width() <= 0 || (_Mysizt)_Ostr.width() <= _Size
		? 0 : (_Mysizt)_Ostr.width() - _Size;
	const typename _Myos::sentry _Ok(_Ostr);

	if (!_Ok)
		_State |= ios_base::badbit;
	else
		{	
	try {
		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
			for (; 0 < _Pad; --_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					{	
					_State |= ios_base::badbit;
					break;
					}

		if (_State == ios_base::goodbit
			&& _Ostr.rdbuf()->sputn(_Str.c_str(), (streamsize)_Size)
				!= (streamsize)_Size)
				_State |= ios_base::badbit;
		else
			for (; 0 < _Pad; --_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					{	
					_State |= ios_base::badbit;
					break;
					}
		_Ostr.width(0);
		} catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

	_Ostr.setstate(_State);
	return (_Ostr);
	}

		











inline int stoi(const string& _Str, size_t *_Idx = 0,
	int _Base = 10)
	{	
	const char *_Ptr = _Str.c_str();
	char *_Eptr;
	(*_errno()) = 0;
	long _Ans = :: strtol(_Ptr, &_Eptr, _Base);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stoi argument");
	if ((*_errno()) == 34 || _Ans < (-2147483647 - 1) != 2147483647 < _Ans)
		_Xout_of_range("stoi argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return ((int)_Ans);
	}

inline long stol(const string& _Str, size_t *_Idx = 0,
	int _Base = 10)
	{	
	const char *_Ptr = _Str.c_str();
	char *_Eptr;
	(*_errno()) = 0;
	long _Ans = :: strtol(_Ptr, &_Eptr, _Base);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stol argument");
	if ((*_errno()) == 34)
		_Xout_of_range("stol argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline unsigned long stoul(const string& _Str, size_t *_Idx = 0,
	int _Base = 10)
	{	
	const char *_Ptr = _Str.c_str();
	char *_Eptr;
	(*_errno()) = 0;
	unsigned long _Ans = :: strtoul(_Ptr, &_Eptr, _Base);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stoul argument");
	if ((*_errno()) == 34)
		_Xout_of_range("stoul argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline _Longlong stoll(const string& _Str, size_t *_Idx = 0,
	int _Base = 10)
	{	
	const char *_Ptr = _Str.c_str();
	char *_Eptr;
	(*_errno()) = 0;
	_Longlong _Ans = :: _strtoi64(_Ptr, &_Eptr, _Base);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stoll argument");
	if ((*_errno()) == 34)
		_Xout_of_range("stoll argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline _ULonglong stoull(const string& _Str, size_t *_Idx = 0,
	int _Base = 10)
	{	
	const char *_Ptr = _Str.c_str();
	(*_errno()) = 0;
	char *_Eptr;
	_ULonglong _Ans = :: _strtoui64(_Ptr, &_Eptr, _Base);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stoull argument");
	if ((*_errno()) == 34)
		_Xout_of_range("stoull argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline float stof(const string& _Str, size_t *_Idx = 0)
	{	
	const char *_Ptr = _Str.c_str();
	(*_errno()) = 0;
	char *_Eptr;
	float _Ans = (float):: strtod(_Ptr, &_Eptr);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stof argument");
	if ((*_errno()) == 34)
		_Xout_of_range("stof argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline double stod(const string& _Str, size_t *_Idx = 0)
	{	
	const char *_Ptr = _Str.c_str();
	(*_errno()) = 0;
	char *_Eptr;
	double _Ans = :: strtod(_Ptr, &_Eptr);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stod argument");
	if ((*_errno()) == 34)
		_Xout_of_range("stod argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline long double stold(const string& _Str, size_t *_Idx = 0)
	{	
	const char *_Ptr = _Str.c_str();
	(*_errno()) = 0;
	char *_Eptr;
	long double _Ans = :: strtod(_Ptr, &_Eptr);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stold argument");
	if ((*_errno()) == 34)
		_Xout_of_range("stold argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

		
inline int stoi(const wstring& _Str, size_t *_Idx = 0,
	int _Base = 10)
	{	
	const wchar_t *_Ptr = _Str.c_str();
	wchar_t *_Eptr;
	(*_errno()) = 0;
	long _Ans = :: wcstol(_Ptr, &_Eptr, _Base);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stoi argument");
	if ((*_errno()) == 34 || _Ans < (-2147483647 - 1) != 2147483647 < _Ans)
		_Xout_of_range("stoi argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return ((int)_Ans);
	}

inline long stol(const wstring& _Str, size_t *_Idx = 0,
	int _Base = 10)
	{	
	const wchar_t *_Ptr = _Str.c_str();
	wchar_t *_Eptr;
	(*_errno()) = 0;
	long _Ans = :: wcstol(_Ptr, &_Eptr, _Base);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stol argument");
	if ((*_errno()) == 34)
		_Xout_of_range("stol argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline unsigned long stoul(const wstring& _Str, size_t *_Idx = 0,
	int _Base = 10)
	{	
	const wchar_t *_Ptr = _Str.c_str();
	wchar_t *_Eptr;
	(*_errno()) = 0;
	unsigned long _Ans = :: wcstoul(_Ptr, &_Eptr, _Base);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stoul argument");
	if ((*_errno()) == 34)
		_Xout_of_range("stoul argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline _Longlong stoll(const wstring& _Str, size_t *_Idx = 0,
	int _Base = 10)
	{	
	const wchar_t *_Ptr = _Str.c_str();
	wchar_t *_Eptr;
	(*_errno()) = 0;
	_Longlong _Ans = :: _wcstoi64(_Ptr, &_Eptr, _Base);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stoll argument");
	if ((*_errno()) == 34)
		_Xout_of_range("stoll argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline _ULonglong stoull(const wstring& _Str, size_t *_Idx = 0,
	int _Base = 10)
	{	
	const wchar_t *_Ptr = _Str.c_str();
	(*_errno()) = 0;
	wchar_t *_Eptr;
	_ULonglong _Ans = :: _wcstoui64(_Ptr, &_Eptr, _Base);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stoull argument");
	if ((*_errno()) == 34)
		_Xout_of_range("stoull argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline float stof(const wstring& _Str, size_t *_Idx = 0)
	{	
	const wchar_t *_Ptr = _Str.c_str();
	(*_errno()) = 0;
	wchar_t *_Eptr;
	float _Ans = (float):: wcstod(_Ptr, &_Eptr);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stof argument");
	if ((*_errno()) == 34)
		_Xout_of_range("stof argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline double stod(const wstring& _Str, size_t *_Idx = 0)
	{	
	const wchar_t *_Ptr = _Str.c_str();
	(*_errno()) = 0;
	wchar_t *_Eptr;
	double _Ans = :: wcstod(_Ptr, &_Eptr);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stod argument");
	if ((*_errno()) == 34)
		_Xout_of_range("stod argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline long double stold(const wstring& _Str, size_t *_Idx = 0)
	{	
	const wchar_t *_Ptr = _Str.c_str();
	(*_errno()) = 0;
	wchar_t *_Eptr;
	long double _Ans = :: wcstod(_Ptr, &_Eptr);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stold argument");
	if ((*_errno()) == 34)
		_Xout_of_range("stold argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

		

 

 


inline string to_string(int _Val)
	{	
	char _Buf[2 * 32];

	:: sprintf_s(_Buf, sizeof (_Buf), "%d", _Val);
	return (string(_Buf));
	}

inline string to_string(unsigned int _Val)
	{	
	char _Buf[2 * 32];

	:: sprintf_s(_Buf, sizeof (_Buf), "%u", _Val);
	return (string(_Buf));
	}

inline string to_string(long _Val)
	{	
	char _Buf[2 * 32];

	:: sprintf_s(_Buf, sizeof (_Buf), "%ld", _Val);
	return (string(_Buf));
	}

inline string to_string(unsigned long _Val)
	{	
	char _Buf[2 * 32];

	:: sprintf_s(_Buf, sizeof (_Buf), "%lu", _Val);
	return (string(_Buf));
	}

inline string to_string(_Longlong _Val)
	{	
	char _Buf[2 * 32];

	:: sprintf_s(_Buf, sizeof (_Buf), "%I64" "d", _Val);
	return (string(_Buf));
	}

inline string to_string(_ULonglong _Val)
	{	
	char _Buf[2 * 32];

	:: sprintf_s(_Buf, sizeof (_Buf), "%I64" "u", _Val);
	return (string(_Buf));
	}

inline string to_string(long double _Val)
	{	
	typedef back_insert_iterator<string> _Iter;
	typedef num_put<char, _Iter> _Nput;
	const _Nput& _Nput_fac = use_facet<_Nput>(locale());
	ostream _Ios((streambuf *)0);
	string _Str;

	_Ios.setf(ios_base::fixed);
	_Nput_fac.put(_Iter(_Str), _Ios, ' ', _Val);
	return (_Str);
	}

inline string to_string(double _Val)
	{	
	return (to_string((long double)_Val));
	}

inline string to_string(float _Val)
	{	
	return (to_string((long double)_Val));
	}

		

 

 


inline wstring to_wstring(int _Val)
	{	
	wchar_t _Buf[2 * 32];

	:: swprintf_s(_Buf, sizeof (_Buf) / sizeof (wchar_t), L"%d", _Val);
	return (wstring(_Buf));
	}

inline wstring to_wstring(unsigned int _Val)
	{	
	wchar_t _Buf[2 * 32];

	:: swprintf_s(_Buf, sizeof (_Buf) / sizeof (wchar_t), L"%u", _Val);
	return (wstring(_Buf));
	}

inline wstring to_wstring(long _Val)
	{	
	wchar_t _Buf[2 * 32];

	:: swprintf_s(_Buf, sizeof (_Buf) / sizeof (wchar_t), L"%ld", _Val);
	return (wstring(_Buf));
	}

inline wstring to_wstring(unsigned long _Val)
	{	
	wchar_t _Buf[2 * 32];

	:: swprintf_s(_Buf, sizeof (_Buf) / sizeof (wchar_t), L"%lu", _Val);
	return (wstring(_Buf));
	}

inline wstring to_wstring(_Longlong _Val)
	{	
	wchar_t _Buf[2 * 32];

	:: swprintf_s(_Buf, sizeof (_Buf) / sizeof (wchar_t), L"%I64" L"d", _Val);
	return (wstring(_Buf));
	}

inline wstring to_wstring(_ULonglong _Val)
	{	
	wchar_t _Buf[2 * 32];

	:: swprintf_s(_Buf, sizeof (_Buf) / sizeof (wchar_t), L"%I64" L"u", _Val);
	return (wstring(_Buf));
	}

inline wstring to_wstring(long double _Val)
	{	
	typedef back_insert_iterator<wstring> _Iter;
	typedef num_put<wchar_t, _Iter> _Nput;
	const _Nput& _Nput_fac = use_facet<_Nput>(locale());
	ostream _Ios((streambuf *)0);
	wstring _Str;

	_Ios.setf(ios_base::fixed);
	_Nput_fac.put(_Iter(_Str), _Ios, L' ', _Val);
	return (_Str);
	}

inline wstring to_wstring(double _Val)
	{	
	return (to_wstring((long double)_Val));
	}

inline wstring to_wstring(float _Val)
	{	
	return (to_wstring((long double)_Val));
	}
}

 
 #pragma warning(pop)
 #pragma pack(pop)
#line 654 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\string"
#line 655 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\string"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\sstream"

 #pragma pack(push,8)
 #pragma warning(push,3)
 
 
namespace std {
 #pragma warning(disable: 4251)

		
template<class _Elem,
	class _Traits,
	class _Alloc>
	class basic_stringbuf
		: public basic_streambuf<_Elem, _Traits>
	{	
public:
	typedef basic_stringbuf<_Elem, _Traits, _Alloc> _Myt;
	typedef _Alloc allocator_type;
	typedef basic_streambuf<_Elem, _Traits> _Mysb;
	typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;

	explicit basic_stringbuf(ios_base::openmode _Mode =
		ios_base::in | ios_base::out)
		{	
		_Init(0, 0, _Getstate(_Mode));
		}

	explicit basic_stringbuf(const _Mystr& _Str,
		ios_base::openmode _Mode = ios_base::in | ios_base::out)
		{	
		_Init(_Str.c_str(), _Str.size(), _Getstate(_Mode));
		}

	basic_stringbuf(_Myt&& _Right)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		}

	_Myt& operator=(_Myt&& _Right)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		return (*this);
		}

	void _Assign_rv(_Myt&& _Right)
		{	
		if (this != &_Right)
			{	
			_Tidy();
			this->swap(_Right);
			}
		}

	void swap(_Myt& _Right)
		{	
		if (this != &_Right)
			{	
			_Mysb::swap(_Right);
			::std:: swap(_Seekhigh, _Right._Seekhigh);
			::std:: swap(_Mystate, _Right._Mystate);
			_Swap_adl(_Al, _Right._Al);
			}
		}

private:
		basic_stringbuf(const _Myt& _Right);	
		_Myt& operator=(const _Myt&);	
public:
	virtual ~basic_stringbuf() throw ()
		{	
		_Tidy();
		}

	enum	{	
		_Allocated = 1,	
		_Constant = 2,	
		_Noread = 4,	
		_Append = 8,	
		_Atend = 16};	
	typedef int _Strstate;

	typedef typename _Traits::int_type int_type;
	typedef typename _Traits::pos_type pos_type;
	typedef typename _Traits::off_type off_type;

	_Mystr str() const
		{	
		if (!(_Mystate & _Constant) && _Mysb::pptr() != 0)
			{	
			_Mystr _Str(_Mysb::pbase(), (_Seekhigh < _Mysb::pptr()
				? _Mysb::pptr() : _Seekhigh) - _Mysb::pbase());
			return (_Str);
			}
		else if (!(_Mystate & _Noread) && _Mysb::gptr() != 0)
			{	
			_Mystr _Str(_Mysb::eback(), _Mysb::egptr() - _Mysb::eback());
			return (_Str);
			}
		else
			{	
			_Mystr _Nul;
			return (_Nul);
			}
		}

	void str(const _Mystr& _Newstr)
		{	
		_Tidy();
		_Init(_Newstr.c_str(), _Newstr.size(), _Mystate);
		}

protected:
	virtual int_type overflow(int_type _Meta = _Traits::eof())
		{	
		if (_Mystate & _Constant)
			return (_Traits::eof());	
		else if (_Traits::eq_int_type(_Traits::eof(), _Meta))
			return (_Traits::not_eof(_Meta));	

		if (_Mystate & _Append
			&& _Mysb::pptr() != 0 && _Mysb::pptr() < _Seekhigh)
			_Mysb::setp(_Mysb::pbase(), _Seekhigh, _Mysb::epptr());

		if (_Mysb::pptr() != 0
			&& _Mysb::pptr() < _Mysb::epptr())
			{	
			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);
			return (_Meta);
			}
		else
			{	
			size_t _Oldsize = _Mysb::pptr() == 0
				? 0 : _Mysb::epptr() - _Mysb::eback();
			size_t _Newsize = _Oldsize;
			size_t _Inc = _Newsize / 2 < _MINSIZE
				? _MINSIZE : _Newsize / 2;	

			while (0 < _Inc && 2147483647 - _Inc < _Newsize)
				_Inc /= 2;	
			if (_Inc == 0)
				return (_Traits::eof());	

			_Newsize += _Inc;

			_Elem *_Newptr = _Al.allocate(_Newsize);
			_Elem *_Oldptr = _Mysb::eback();

			if (0 < _Oldsize)
				_Traits::copy(_Newptr, _Oldptr, _Oldsize);

			if (_Oldsize == 0)
				{	
				_Seekhigh = _Newptr;
				_Mysb::setp(_Newptr, _Newptr + _Newsize);
				if (_Mystate & _Noread)
					_Mysb::setg(_Newptr, 0, _Newptr);
				else
					_Mysb::setg(_Newptr, _Newptr, _Newptr + 1);
				}
			else
				{	
				_Seekhigh = _Newptr + (_Seekhigh - _Oldptr);
				_Mysb::setp(_Newptr + (_Mysb::pbase() - _Oldptr),
					_Newptr + (_Mysb::pptr() - _Oldptr),
					_Newptr + _Newsize);
				if (_Mystate & _Noread)
					_Mysb::setg(_Newptr, 0, _Newptr);
				else
					_Mysb::setg(_Newptr,
						_Newptr + (_Mysb::gptr() - _Oldptr),
						_Mysb::pptr() + 1);
				}

			if (_Mystate & _Allocated)
				_Al.deallocate(_Oldptr, _Oldsize);
			_Mystate |= _Allocated;

			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);
			return (_Meta);
			}
		}

	virtual int_type pbackfail(int_type _Meta = _Traits::eof())
		{	
		if (_Mysb::gptr() == 0
			|| _Mysb::gptr() <= _Mysb::eback()
			|| (!_Traits::eq_int_type(_Traits::eof(), _Meta)
			&& !_Traits::eq(_Traits::to_char_type(_Meta), _Mysb::gptr()[-1])
			&& _Mystate & _Constant))
			return (_Traits::eof());	
		else
			{	
			_Mysb::gbump(-1);
			if (!_Traits::eq_int_type(_Traits::eof(), _Meta))
				*_Mysb::gptr() = _Traits::to_char_type(_Meta);
			return (_Traits::not_eof(_Meta));
			}
		}

	virtual int_type underflow()
		{	
		if (_Mysb::gptr() == 0)
			return (_Traits::eof());	
		else if (_Mysb::gptr() < _Mysb::egptr())
			return (_Traits::to_int_type(*_Mysb::gptr()));	
		else if (_Mystate & _Noread || _Mysb::pptr() == 0
			|| (_Mysb::pptr() <= _Mysb::gptr() && _Seekhigh <= _Mysb::gptr()))
			return (_Traits::eof());	
		else
			{	
			if (_Seekhigh < _Mysb::pptr())
				_Seekhigh = _Mysb::pptr();
			_Mysb::setg(_Mysb::eback(), _Mysb::gptr(), _Seekhigh);
			return (_Traits::to_int_type(*_Mysb::gptr()));
			}
		}

	virtual pos_type seekoff(off_type _Off,
		ios_base::seekdir _Way,
		ios_base::openmode _Which = ios_base::in | ios_base::out)
		{	
		if (_Mysb::pptr() != 0 && _Seekhigh < _Mysb::pptr())
			_Seekhigh = _Mysb::pptr();	

		if (_Which & ios_base::in && _Mysb::gptr() != 0)
			{	
			if (_Way == ios_base::end)
				_Off += (off_type)(_Seekhigh - _Mysb::eback());
			else if (_Way == ios_base::cur
				&& (_Which & ios_base::out) == 0)
				_Off += (off_type)(_Mysb::gptr() - _Mysb::eback());
			else if (_Way != ios_base::beg)
				_Off = _BADOFF;

			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())
				{	
				_Mysb::gbump((int)(_Mysb::eback() - _Mysb::gptr() + _Off));
				if (_Which & ios_base::out && _Mysb::pptr() != 0)
					_Mysb::setp(_Mysb::pbase(), _Mysb::gptr(),
						_Mysb::epptr());	
				}
			else
				_Off = _BADOFF;
			}
		else if (_Which & ios_base::out && _Mysb::pptr() != 0)
			{	
			if (_Way == ios_base::end)
				_Off += (off_type)(_Seekhigh - _Mysb::eback());
			else if (_Way == ios_base::cur)
				_Off += (off_type)(_Mysb::pptr() - _Mysb::eback());
			else if (_Way != ios_base::beg)
				_Off = _BADOFF;

			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())
				_Mysb::pbump((int)(_Mysb::eback()
					- _Mysb::pptr() + _Off));	
			else
				_Off = _BADOFF;
			}

		else if (_Off != 0)


			_Off = _BADOFF;	
		return (pos_type(_Off));
		}

	virtual pos_type seekpos(pos_type _Ptr,
		ios_base::openmode _Mode = ios_base::in | ios_base::out)
		{	
		streamoff _Off = (streamoff)_Ptr;
		if (_Mysb::pptr() != 0 && _Seekhigh < _Mysb::pptr())
			_Seekhigh = _Mysb::pptr();	

		if (_Off == _BADOFF)
			;
		else if (_Mode & ios_base::in && _Mysb::gptr() != 0)
			{	
			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())
				{	
				_Mysb::gbump((int)(_Mysb::eback() - _Mysb::gptr() + _Off));
				if (_Mode & ios_base::out && _Mysb::pptr() != 0)
					_Mysb::setp(_Mysb::pbase(), _Mysb::gptr(),
						_Mysb::epptr());	
				}
			else
				_Off = _BADOFF;
			}
		else if (_Mode & ios_base::out && _Mysb::pptr() != 0)
			{	
			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())
				_Mysb::pbump((int)(_Mysb::eback()
					- _Mysb::pptr() + _Off));	
			else
				_Off = _BADOFF;
			}
		else
			_Off = _BADOFF;	
		return (streampos(_Off));
		}

	void _Init(const _Elem *_Ptr,
		size_t _Count, _Strstate _State)
		{	
		_Seekhigh = 0;
		_Mystate = _State;

		if (_Count != 0
			&& (_Mystate & (_Noread | _Constant)) != (_Noread | _Constant))
			{	
			_Elem *_Pnew = _Al.allocate(_Count);
			_Traits::copy(_Pnew, _Ptr, _Count);
			_Seekhigh = _Pnew + _Count;

			if (!(_Mystate & _Noread))
				_Mysb::setg(_Pnew, _Pnew,
					_Pnew + _Count);	
			if (!(_Mystate & _Constant))
				{	
				_Mysb::setp(_Pnew,
					(_Mystate & (_Atend | _Append)) ? _Pnew + _Count : _Pnew,
					_Pnew + _Count);
				if (_Mysb::gptr() == 0)
					_Mysb::setg(_Pnew, 0, _Pnew);
				}
			_Mystate |= _Allocated;
			}
		}

	void _Tidy()
		{	
		if (_Mystate & _Allocated)
			_Al.deallocate(_Mysb::eback(),
				(_Mysb::pptr() != 0 ? _Mysb::epptr()
					: _Mysb::egptr()) - _Mysb::eback());
		_Mysb::setg(0, 0, 0);
		_Mysb::setp(0, 0);
		_Seekhigh = 0;
		_Mystate &= ~_Allocated;
		}

private:
	enum	{	
		_MINSIZE = 32};

	_Strstate _Getstate(ios_base::openmode _Mode)
		{	
		_Strstate _State = (_Strstate)0;
		if (!(_Mode & ios_base::in))
			_State |= _Noread;
		if (!(_Mode & ios_base::out))
			_State |= _Constant;
		if (_Mode & ios_base::app)
			_State |= _Append;
		if (_Mode & ios_base::ate)
			_State |= _Atend;
		return (_State);
		}

	_Elem *_Seekhigh;	
	_Strstate _Mystate;	
	allocator_type _Al;	
	};

	
template<class _Elem,
	class _Traits,
	class _Alloc> inline
	void swap(basic_stringbuf<_Elem, _Traits, _Alloc>& _Left,
		basic_stringbuf<_Elem, _Traits, _Alloc>& _Right)
	{	
	_Left.swap(_Right);
	}

		
template<class _Elem,
	class _Traits,
	class _Alloc>
	class basic_istringstream
		: public basic_istream<_Elem, _Traits>
	{	
public:
	typedef basic_istringstream<_Elem, _Traits, _Alloc> _Myt;
	typedef basic_istream<_Elem, _Traits> _Mybase;
	typedef _Alloc allocator_type;
	typedef basic_stringbuf<_Elem, _Traits, _Alloc> _Mysb;
	typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;

	explicit basic_istringstream(ios_base::openmode _Mode = ios_base::in)
		: _Mybase(&_Stringbuffer),
			_Stringbuffer(_Mode | ios_base::in)
		{	
		}

	explicit basic_istringstream(const _Mystr& _Str,
		ios_base::openmode _Mode = ios_base::in)
		: _Mybase(&_Stringbuffer),
			_Stringbuffer(_Str, _Mode | ios_base::in)
		{	
		}

	basic_istringstream(_Myt&& _Right)
		: _Mybase(&_Stringbuffer)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		}

	_Myt& operator=(_Myt&& _Right)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		return (*this);
		}

	void _Assign_rv(_Myt&& _Right)
		{	
		if (this != &_Right)
			{	
			_Stringbuffer.str(_Mystr());
			this->swap(_Right);
			}
		}

	void swap(_Myt& _Right)
		{	
		if (this != &_Right)
			{	
			_Mybase::swap(_Right);
			_Stringbuffer.swap(_Right._Stringbuffer);
			}
		}

private:
		basic_istringstream(const _Myt& _Right);	
		_Myt& operator=(const _Myt&);	
public:
	virtual ~basic_istringstream() throw ()
		{	
		}

	_Mysb *rdbuf() const
		{	
		return ((_Mysb *)&_Stringbuffer);
		}

	_Mystr str() const
		{	
		return (_Stringbuffer.str());
		}

	void str(const _Mystr& _Newstr)
		{	
		_Stringbuffer.str(_Newstr);
		}

private:
	_Mysb _Stringbuffer;	
	};

	
template<class _Elem,
	class _Traits,
	class _Alloc> inline
	void swap(basic_istringstream<_Elem, _Traits, _Alloc>& _Left,
		basic_istringstream<_Elem, _Traits, _Alloc>& _Right)
	{	
	_Left.swap(_Right);
	}

		
template<class _Elem,
	class _Traits,
	class _Alloc>
	class basic_ostringstream
		: public basic_ostream<_Elem, _Traits>
	{	
public:
	typedef basic_ostringstream<_Elem, _Traits, _Alloc> _Myt;
	typedef basic_ostream<_Elem, _Traits> _Mybase;
	typedef _Alloc allocator_type;
	typedef basic_stringbuf<_Elem, _Traits, _Alloc> _Mysb;
	typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;

	explicit basic_ostringstream(ios_base::openmode _Mode = ios_base::out)
		: _Mybase(&_Stringbuffer),
			_Stringbuffer(_Mode | ios_base::out)
		{	
		}

	explicit basic_ostringstream(const _Mystr& _Str,
		ios_base::openmode _Mode = ios_base::out)
		: _Mybase(&_Stringbuffer),
			_Stringbuffer(_Str, _Mode | ios_base::out)
		{	
		}

	basic_ostringstream(_Myt&& _Right)
		: _Mybase(&_Stringbuffer)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		}

	_Myt& operator=(_Myt&& _Right)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		return (*this);
		}

	void _Assign_rv(_Myt&& _Right)
		{	
		if (this != &_Right)
			{	
			_Stringbuffer.str(_Mystr());
			this->swap(_Right);
			}
		}

	void swap(_Myt& _Right)
		{	
		if (this != &_Right)
			{	
			_Mybase::swap(_Right);
			_Stringbuffer.swap(_Right._Stringbuffer);
			}
		}

private:
		basic_ostringstream(const _Myt& _Right);	
		_Myt& operator=(const _Myt&);	
public:
	virtual ~basic_ostringstream() throw ()
		{	
		}

	_Mysb *rdbuf() const
		{	
		return ((_Mysb *)&_Stringbuffer);
		}

	_Mystr str() const
		{	
		return (_Stringbuffer.str());
		}

	void str(const _Mystr& _Newstr)
		{	
		_Stringbuffer.str(_Newstr);
		}

private:
	_Mysb _Stringbuffer;	
	};

	
template<class _Elem,
	class _Traits,
	class _Alloc> inline
	void swap(basic_ostringstream<_Elem, _Traits, _Alloc>& _Left,
		basic_ostringstream<_Elem, _Traits, _Alloc>& _Right)
	{	
	_Left.swap(_Right);
	}

		
template<class _Elem,
	class _Traits,
	class _Alloc>
	class basic_stringstream
		: public basic_iostream<_Elem, _Traits>
	{	
public:
	typedef basic_stringstream<_Elem, _Traits, _Alloc> _Myt;
	typedef basic_iostream<_Elem, _Traits> _Mybase;
	typedef _Elem char_type;
	typedef _Traits traits_type;
	typedef _Alloc allocator_type;
	typedef typename _Traits::int_type int_type;
	typedef typename _Traits::pos_type pos_type;
	typedef typename _Traits::off_type off_type;
	typedef basic_stringbuf<_Elem, _Traits, _Alloc> _Mysb;
	typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;

	explicit basic_stringstream(ios_base::openmode _Mode =
		ios_base::in | ios_base::out)
		: _Mybase(&_Stringbuffer),
			_Stringbuffer(_Mode)
		{	
		}

	explicit basic_stringstream(const _Mystr& _Str,
		ios_base::openmode _Mode = ios_base::in | ios_base::out)
		: _Mybase(&_Stringbuffer),
			_Stringbuffer(_Str, _Mode)
		{	
		}

	basic_stringstream(_Myt&& _Right)
		: _Mybase(&_Stringbuffer)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		}

	_Myt& operator=(_Myt&& _Right)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		return (*this);
		}

	void _Assign_rv(_Myt&& _Right)
		{	
		if (this != &_Right)
			{	
			_Stringbuffer.str(_Mystr());
			this->swap(_Right);
			}
		}

	void swap(_Myt& _Right)
		{	
		if (this != &_Right)
			{	
			_Mybase::swap(_Right);
			_Stringbuffer.swap(_Right._Stringbuffer);
			}
		}

private:
		basic_stringstream(const _Myt& _Right);	
		_Myt& operator=(const _Myt&);	
public:
	virtual ~basic_stringstream() throw ()
		{	
		}

	_Mysb *rdbuf() const
		{	
		return ((_Mysb *)&_Stringbuffer);
		}

	_Mystr str() const
		{	
		return (_Stringbuffer.str());
		}

	void str(const _Mystr& _Newstr)
		{	
		_Stringbuffer.str(_Newstr);
		}

private:
	_Mysb _Stringbuffer;	
	};

	
template<class _Elem,
	class _Traits,
	class _Alloc> inline
	void swap(basic_stringstream<_Elem, _Traits, _Alloc>& _Left,
		basic_stringstream<_Elem, _Traits, _Alloc>& _Right)
	{	
	_Left.swap(_Right);
	}
}
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 675 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\sstream"
#line 676 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\sstream"





#line 27 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/wrap_stringstream.hpp"
#line 28 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/wrap_stringstream.hpp"

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/suppress_warnings.hpp"















#pragma warning(push)
#pragma warning(disable: 4511) 
#pragma warning(disable: 4512) 
#pragma warning(disable: 4100) 
#pragma warning(disable: 4996) 
#pragma warning(disable: 4355) 
#pragma warning(disable: 4706) 
#pragma warning(disable: 4251) 
#pragma warning(disable: 4127) 
#pragma warning(disable: 4290) 
#pragma warning(disable: 4180) 
#pragma warning(disable: 4275) 
#pragma warning(disable: 4267) 
#pragma warning(disable: 4511) 
#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/suppress_warnings.hpp"

#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/wrap_stringstream.hpp"



namespace boost {





template<typename CharT>
class basic_wrap_stringstream {
public:


#line 45 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/wrap_stringstream.hpp"

#line 47 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/wrap_stringstream.hpp"
    typedef std::basic_ostringstream<CharT>  wrapped_stream;
#line 49 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/wrap_stringstream.hpp"
    
    basic_wrap_stringstream&        ref();
    wrapped_stream&                 stream();
    std::basic_string<CharT> const& str();

private:
    
    wrapped_stream                  m_stream;
    std::basic_string<CharT>        m_str;
};



template <typename CharT, typename T>
inline basic_wrap_stringstream<CharT>&
operator<<( basic_wrap_stringstream<CharT>& targ, T const& t )
{
    targ.stream() << t;
    return targ;
}



template <typename CharT>
inline typename basic_wrap_stringstream<CharT>::wrapped_stream&
basic_wrap_stringstream<CharT>::stream()
{
    return m_stream;
}



template <typename CharT>
inline basic_wrap_stringstream<CharT>&
basic_wrap_stringstream<CharT>::ref()
{ 
    return *this;
}



template <typename CharT>
inline std::basic_string<CharT> const&
basic_wrap_stringstream<CharT>::str()
{





    m_str = m_stream.str();
#line 101 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/wrap_stringstream.hpp"

    return m_str;
}



template <typename CharT>
inline basic_wrap_stringstream<CharT>&
operator<<( basic_wrap_stringstream<CharT>& targ, basic_wrap_stringstream<CharT>& src )
{
    targ << src.str();
    return targ;
}





template <typename CharT>
inline basic_wrap_stringstream<CharT>&
operator<<( basic_wrap_stringstream<CharT>& targ, std::ios_base& (__cdecl *man)(std::ios_base&) )
{
    targ.stream() << man;
    return targ;
}



template<typename CharT,typename Elem,typename Tr>
inline basic_wrap_stringstream<CharT>&
operator<<( basic_wrap_stringstream<CharT>& targ, std::basic_ostream<Elem,Tr>& (__cdecl *man)(std::basic_ostream<Elem, Tr>&) )
{
    targ.stream() << man;
    return targ;
}



template<typename CharT,typename Elem,typename Tr>
inline basic_wrap_stringstream<CharT>&
operator<<( basic_wrap_stringstream<CharT>& targ, std::basic_ios<Elem, Tr>& (__cdecl *man)(std::basic_ios<Elem, Tr>&) )
{
    targ.stream() << man;
    return targ;
}



#line 150 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/wrap_stringstream.hpp"





typedef basic_wrap_stringstream<char>       wrap_stringstream;
typedef basic_wrap_stringstream<wchar_t>    wrap_wstringstream;

}  



#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/enable_warnings.hpp"















#pragma warning(default: 4511) 
#pragma warning(default: 4512) 
#pragma warning(default: 4100) 
#pragma warning(default: 4996) 
#pragma warning(default: 4355) 
#pragma warning(default: 4706) 
#pragma warning(default: 4251) 
#pragma warning(default: 4127) 
#pragma warning(default: 4290) 
#pragma warning(default: 4180) 
#pragma warning(default: 4275) 
#pragma warning(default: 4267) 
#pragma warning(default: 4511) 
#pragma warning(pop)
#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/enable_warnings.hpp"
#line 163 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/wrap_stringstream.hpp"

#line 165 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/wrap_stringstream.hpp"
#line 21 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/predicate_result.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/basic_cstring/basic_cstring.hpp"



















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/basic_cstring/basic_cstring_fwd.hpp"




















namespace boost {

namespace unit_test {

template<typename CharT> class      basic_cstring;
typedef basic_cstring<char const>   const_string;


#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/basic_cstring/basic_cstring_fwd.hpp"
typedef const_string const          literal_string;
#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/basic_cstring/basic_cstring_fwd.hpp"

typedef char const* const           c_literal_string;

} 

} 

#line 40 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/basic_cstring/basic_cstring_fwd.hpp"

#line 21 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/basic_cstring/basic_cstring.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/basic_cstring/bcs_char_traits.hpp"



























#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/suppress_warnings.hpp"















#pragma warning(push)
#pragma warning(disable: 4511) 
#pragma warning(disable: 4512) 
#pragma warning(disable: 4100) 
#pragma warning(disable: 4996) 
#pragma warning(disable: 4355) 
#pragma warning(disable: 4706) 
#pragma warning(disable: 4251) 
#pragma warning(disable: 4127) 
#pragma warning(disable: 4290) 
#pragma warning(disable: 4180) 
#pragma warning(disable: 4275) 
#pragma warning(disable: 4267) 
#pragma warning(disable: 4511) 
#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/suppress_warnings.hpp"

#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/basic_cstring/bcs_char_traits.hpp"



namespace boost {

namespace unit_test {

namespace ut_detail {

template<typename CharT> struct bcs_base_char           { typedef CharT type; };

template<> struct bcs_base_char<char const>             { typedef char type; };
template<> struct bcs_base_char<unsigned char>          { typedef char type; };

template<> struct bcs_base_char<unsigned char const>    { typedef char type; };
#line 45 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/basic_cstring/bcs_char_traits.hpp"

template<> struct bcs_base_char<wchar_t const>          { typedef wchar_t type; };





template<typename CharT>
struct bcs_char_traits_impl
{


#line 58 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/basic_cstring/bcs_char_traits.hpp"
    typedef typename boost::add_const<CharT>::type const_char;
#line 60 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/basic_cstring/bcs_char_traits.hpp"
    static bool eq( CharT c1, CharT c2 )
    {
        return c1 == c2;
    }
    static bool lt( CharT c1, CharT c2 )
    {
        return c1 < c2;
    }

    static int compare( const_char* cstr1, const_char* cstr2, std::size_t n )
    {
        while( n > 0 ) {
            if( !eq( *cstr1, *cstr2 ) )
                return lt( *cstr1, *cstr2 ) ? -1 : 1;
            ++cstr1;
            ++cstr2;
            --n;
        }

        return 0;
    }

    static std::size_t length( const_char* cstr )
    {
        const_char null_char = CharT();

        const_char* ptr = cstr;
        while( !eq( *ptr, null_char ) )
            ++ptr;

        return ptr - cstr;
    }

    static const_char* find( const_char* s, std::size_t n, CharT c )
    {
        while( n > 0 ) {
            if( eq( *s, c ) )
                return s;

            ++s;
            --n;
        }
        return 0;
    }
};




















template<> struct bcs_char_traits_impl<char> : std::char_traits<char> {};
template<> struct bcs_char_traits_impl<wchar_t> : std::char_traits<wchar_t> {};
#line 128 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/basic_cstring/bcs_char_traits.hpp"

template<typename CharT>
class bcs_char_traits : public bcs_char_traits_impl<CharT> {
    typedef typename ut_detail::bcs_base_char<CharT>::type                              the_base_char;
public:



    typedef std::basic_string<the_base_char, std::char_traits<the_base_char> >          std_string;
#line 138 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/basic_cstring/bcs_char_traits.hpp"
};

} 

} 

} 



#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/enable_warnings.hpp"















#pragma warning(default: 4511) 
#pragma warning(default: 4512) 
#pragma warning(default: 4100) 
#pragma warning(default: 4996) 
#pragma warning(default: 4355) 
#pragma warning(default: 4706) 
#pragma warning(default: 4251) 
#pragma warning(default: 4127) 
#pragma warning(default: 4290) 
#pragma warning(default: 4180) 
#pragma warning(default: 4275) 
#pragma warning(default: 4267) 
#pragma warning(default: 4511) 
#pragma warning(pop)
#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/enable_warnings.hpp"
#line 149 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/basic_cstring/bcs_char_traits.hpp"

#line 151 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/basic_cstring/bcs_char_traits.hpp"
#line 22 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/basic_cstring/basic_cstring.hpp"




#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/suppress_warnings.hpp"















#pragma warning(push)
#pragma warning(disable: 4511) 
#pragma warning(disable: 4512) 
#pragma warning(disable: 4100) 
#pragma warning(disable: 4996) 
#pragma warning(disable: 4355) 
#pragma warning(disable: 4706) 
#pragma warning(disable: 4251) 
#pragma warning(disable: 4127) 
#pragma warning(disable: 4290) 
#pragma warning(disable: 4180) 
#pragma warning(disable: 4275) 
#pragma warning(disable: 4267) 
#pragma warning(disable: 4511) 
#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/suppress_warnings.hpp"

#line 27 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/basic_cstring/basic_cstring.hpp"



namespace boost {

namespace unit_test {





template<typename CharT>
class basic_cstring {
    typedef basic_cstring<CharT>                        self_type;
public:
    
    typedef ut_detail::bcs_char_traits<CharT>           traits_type;
    typedef typename ut_detail::bcs_char_traits<CharT>::std_string  std_string;

    typedef CharT                                       value_type;
    typedef value_type*                                 pointer;
    typedef value_type const*                           const_pointer;
    typedef value_type&                                 reference;
    typedef const value_type&                           const_reference;
    typedef std::size_t                                 size_type;
    typedef std::ptrdiff_t                              difference_type;

    typedef value_type const*                           const_iterator;
    typedef value_type*                                 iterator;

    


    enum npos_type { npos = static_cast<size_type>(-1) };




#line 66 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/basic_cstring/basic_cstring.hpp"

    static pointer  null_str();

    
    basic_cstring();
    basic_cstring( std_string const& s );
    basic_cstring( pointer s );
    basic_cstring( pointer s, size_type arg_size );
    basic_cstring( pointer first, pointer last );

    
    value_type      operator[]( size_type index ) const;
    value_type      at( size_type index ) const;

    
    size_type       size() const;
    bool            is_empty() const;
    void            clear();
    void            resize( size_type new_len );

    
    bool            empty() const; 

    
    self_type&      trim_right( size_type trim_size );
    self_type&      trim_left( size_type trim_size );
    self_type&      trim_right( iterator it );
    self_type&      trim_left( iterator it );

    self_type&      trim_left( self_type exclusions = self_type() ) ;
    self_type&      trim_right( self_type exclusions = self_type() ) ;
    self_type&      trim( self_type exclusions = self_type() ) ;








#line 107 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/basic_cstring/basic_cstring.hpp"

    
    basic_cstring&  operator=( self_type const& s );
    basic_cstring&  operator=( std_string const& s );
    basic_cstring&  operator=( pointer s );

    template<typename CharT2>
    basic_cstring&  assign( basic_cstring<CharT2> const& s ) { *this = basic_cstring<CharT>( s.begin(), s.end() ); return *this; }
    basic_cstring&  assign( self_type const& s, size_type pos, size_type len );
    basic_cstring&  assign( std_string const& s );
    basic_cstring&  assign( std_string const& s, size_type pos, size_type len );
    basic_cstring&  assign( pointer s );
    basic_cstring&  assign( pointer s, size_type len );
    basic_cstring&  assign( pointer f, pointer l );

    
    void            swap( self_type& s );

    
    iterator        begin();
    const_iterator  begin() const;
    iterator        end();
    const_iterator  end() const;

    

    
    size_type       find( basic_cstring ) const;
    size_type       rfind( basic_cstring ) const;
    self_type       substr( size_type beg_index, size_type end_index = npos ) const;

private:
    static self_type default_trim_ex();

    
    iterator        m_begin;
    iterator        m_end;
};



template<typename CharT>
inline typename basic_cstring<CharT>::pointer
basic_cstring<CharT>::null_str()
{
    static CharT null = 0;
    return &null;
}



template<typename CharT>
inline
basic_cstring<CharT>::basic_cstring()
: m_begin( null_str() )
, m_end( m_begin )
{
}



template<typename CharT>
inline
basic_cstring<CharT>::basic_cstring( std_string const& s )
: m_begin( s.c_str() )
, m_end( m_begin + s.size() )
{
}



template<typename CharT>
inline
basic_cstring<CharT>::basic_cstring( pointer s )
: m_begin( s ? s : null_str() )
, m_end  ( m_begin + (s ? traits_type::length( s ) : 0 ) )
{
}



template<typename CharT>
inline
basic_cstring<CharT>::basic_cstring( pointer s, size_type arg_size )
: m_begin( s ), m_end( m_begin + arg_size )
{
}



template<typename CharT>
inline
basic_cstring<CharT>::basic_cstring( pointer first, pointer last )
: m_begin( first )
, m_end( last )
{
}



template<typename CharT>
inline typename basic_cstring<CharT>::value_type
basic_cstring<CharT>::operator[]( size_type index ) const
{
    return m_begin[index];
}



template<typename CharT>
inline typename basic_cstring<CharT>::value_type
basic_cstring<CharT>::at( size_type index ) const
{
    if( m_begin + index >= m_end )
        return static_cast<value_type>(0);

    return m_begin[index];
}



template<typename CharT>
inline typename basic_cstring<CharT>::size_type
basic_cstring<CharT>::size() const
{
    return m_end - m_begin;
}



template<typename CharT>
inline bool
basic_cstring<CharT>::is_empty() const
{
    return m_end == m_begin;
}



template<typename CharT>
inline bool
basic_cstring<CharT>::empty() const
{
    return is_empty();
}



template<typename CharT>
inline void
basic_cstring<CharT>::clear()
{
    m_begin = m_end;
}



template<typename CharT>
inline void
basic_cstring<CharT>::resize( size_type new_len )
{
    if( m_begin + new_len < m_end )
        m_end = m_begin + new_len;
}



template<typename CharT>
inline basic_cstring<CharT>&
basic_cstring<CharT>::trim_left( size_type trim_size )
{
    m_begin += trim_size;
    if( m_end <= m_begin )
        clear();

    return *this;
}



template<typename CharT>
inline basic_cstring<CharT>&
basic_cstring<CharT>::trim_left( iterator it )
{
    m_begin = it;
    if( m_end <= m_begin )
        clear();

    return *this;
}



template<typename CharT>
inline basic_cstring<CharT>&
basic_cstring<CharT>::trim_left( basic_cstring exclusions )
{
    if( exclusions.is_empty() )
        exclusions = default_trim_ex();

    iterator it;
    for( it = begin(); it != end(); ++it ) {
        if( traits_type::find( exclusions.begin(), exclusions.size(), *it ) == reinterpret_cast<pointer>(0) )
            break;
    }
    
    return trim_left( it );
}



template<typename CharT>
inline basic_cstring<CharT>&
basic_cstring<CharT>::trim_right( size_type trim_size )
{
    m_end  -= trim_size;
    if( m_end <= m_begin )
        clear();

    return *this;
}



template<typename CharT>
inline basic_cstring<CharT>&
basic_cstring<CharT>::trim_right( iterator it )
{
    m_end = it;
    if( m_end <= m_begin )
        clear();

    return *this;
}



template<typename CharT>
inline basic_cstring<CharT>&
basic_cstring<CharT>::trim_right( basic_cstring exclusions )
{
    if( exclusions.is_empty() )
        exclusions = default_trim_ex();

    iterator it;

    for( it = end()-1; it != begin()-1; --it ) {
        if( self_type::traits_type::find( exclusions.begin(),  exclusions.size(), *it ) == reinterpret_cast<pointer>(0) )
            break;
    }
    
    return trim_right( it+1 );
}



template<typename CharT>
inline basic_cstring<CharT>&
basic_cstring<CharT>::trim( basic_cstring exclusions )
{
    trim_left( exclusions );
    trim_right( exclusions );

    return *this;
}



template<typename CharT>
inline basic_cstring<CharT>&
basic_cstring<CharT>::operator=( basic_cstring<CharT> const& s )
{
    m_begin = s.m_begin;
    m_end   = s.m_end;

    return *this;
}



template<typename CharT>
inline basic_cstring<CharT>&
basic_cstring<CharT>::operator=( std_string const& s )
{
    return *this = self_type( s );
}



template<typename CharT>
inline basic_cstring<CharT>&
basic_cstring<CharT>::operator=( pointer s )
{
    return *this = self_type( s );
}



template<typename CharT>
inline basic_cstring<CharT>&
basic_cstring<CharT>::assign( basic_cstring<CharT> const& s, size_type pos, size_type len )
{
    return *this = self_type( s.m_begin + pos, len );
}



template<typename CharT>
inline basic_cstring<CharT>&
basic_cstring<CharT>::assign( std_string const& s )
{
    return *this = self_type( s );
}



template<typename CharT>
inline basic_cstring<CharT>&
basic_cstring<CharT>::assign( std_string const& s, size_type pos, size_type len )
{
    return *this = self_type( s.c_str() + pos, len );
}



template<typename CharT>
inline basic_cstring<CharT>&
basic_cstring<CharT>::assign( pointer s )
{
    return *this = self_type( s );
}



template<typename CharT>
inline basic_cstring<CharT>&
basic_cstring<CharT>::assign( pointer s, size_type len )
{
    return *this = self_type( s, len );
}



template<typename CharT>
inline basic_cstring<CharT>&
basic_cstring<CharT>::assign( pointer f, pointer l )
{
    return *this = self_type( f, l );
}



template<typename CharT>
inline void
basic_cstring<CharT>::swap( basic_cstring<CharT>& s )
{
    
    pointer tmp1    = m_begin;
    pointer tmp2    = m_end;

    m_begin         = s.m_begin;
    m_end           = s.m_end;

    s.m_begin       = tmp1;
    s.m_end         = tmp2;
}



template<typename CharT>
inline typename basic_cstring<CharT>::iterator
basic_cstring<CharT>::begin()
{
    return m_begin;
}



template<typename CharT>
inline typename basic_cstring<CharT>::const_iterator
basic_cstring<CharT>::begin() const
{
    return m_begin;
}



template<typename CharT>
inline typename basic_cstring<CharT>::iterator
basic_cstring<CharT>::end()
{
    return m_end;
}



template<typename CharT>
inline typename basic_cstring<CharT>::const_iterator
basic_cstring<CharT>::end() const
{
    return m_end;
}



template<typename CharT>
inline typename basic_cstring<CharT>::size_type
basic_cstring<CharT>::find( basic_cstring<CharT> str ) const
{
    if( str.is_empty() || str.size() > size() )
        return static_cast<size_type>(npos);

    const_iterator it   = begin();
    const_iterator last = end() - str.size() + 1;

    while( it != last ) {
        if( traits_type::compare( it, str.begin(), str.size() ) == 0 )
            break;

        ++it;
    }

    return it == last ? static_cast<size_type>(npos) : it - begin();
}



template<typename CharT>
inline typename basic_cstring<CharT>::size_type
basic_cstring<CharT>::rfind( basic_cstring<CharT> str ) const
{
    if( str.is_empty() || str.size() > size() )
        return static_cast<size_type>(npos);

    const_iterator it   = end() - str.size();
    const_iterator last = begin()-1;

    while( it != last ) {
        if( traits_type::compare( it, str.begin(), str.size() ) == 0 )
            break;

        --it;
    }

    return it == last ? static_cast<size_type>(npos) : static_cast<size_type>(it - begin());
}



template<typename CharT>
inline basic_cstring<CharT>
basic_cstring<CharT>::substr( size_type beg_index, size_type end_index ) const
{
    return beg_index > size()
            ?       self_type()
            : end_index > size()
                ?   self_type( m_begin + beg_index, m_end )
                :   self_type( m_begin + beg_index, m_begin + end_index );
}



template<typename CharT>
inline basic_cstring<CharT>
basic_cstring<CharT>::default_trim_ex()
{
    static CharT ws[3] = { CharT(' '), CharT('\t'), CharT('\n') }; 

    return self_type( ws, 3 );
}







template<typename CharT1,typename CharT2>
inline bool
operator==( basic_cstring<CharT1> const& s1, basic_cstring<CharT2> const& s2 )
{
    typedef typename basic_cstring<CharT1>::traits_type traits_type;
    return s1.size() == s2.size() && 
               traits_type::compare( s1.begin(), s2.begin(), s1.size() ) == 0;
}



template<typename CharT1,typename CharT2>
inline bool
operator==( basic_cstring<CharT1> const& s1, CharT2* s2 )
{

    return s1 == basic_cstring<CharT2>( s2 );


#line 604 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/basic_cstring/basic_cstring.hpp"
}



template<typename CharT>
inline bool
operator==( basic_cstring<CharT> const& s1, typename basic_cstring<CharT>::std_string const& s2 )
{
    return s1 == basic_cstring<CharT>( s2 );
}



template<typename CharT1,typename CharT2>
inline bool
operator==( CharT1* s2, basic_cstring<CharT2> const& s1 )
{
    return s1 == s2;
}



template<typename CharT>
inline bool
operator==( typename basic_cstring<CharT>::std_string const& s2, basic_cstring<CharT> const& s1 )
{
    return s1 == s2;
}



template<typename CharT>
inline bool
operator!=( basic_cstring<CharT> const& s1, CharT* s2 )
{
    return !(s1 == s2);
}



template<typename CharT>
inline bool
operator!=( CharT* s2, basic_cstring<CharT> const& s1 )
{
    return !(s1 == s2);
}



template<typename CharT>
inline bool
operator!=( basic_cstring<CharT> const& s1, basic_cstring<CharT> const& s2 )
{
    return !(s1 == s2);
}



template<typename CharT>
inline bool
operator!=( basic_cstring<CharT> const& s1, typename basic_cstring<CharT>::std_string const& s2 )
{
    return !(s1 == s2);
}



template<typename CharT>
inline bool
operator!=( typename basic_cstring<CharT>::std_string const& s2, basic_cstring<CharT> const& s1 )
{
    return !(s1 == s2);
}







template<typename CharT>
inline typename basic_cstring<CharT>::value_type
first_char( basic_cstring<CharT> source )
{
    typedef typename basic_cstring<CharT>::value_type string_value_type;

    return source.is_empty() ? static_cast<string_value_type>(0) : *source.begin();
}







template<typename CharT>
inline typename basic_cstring<CharT>::value_type
last_char( basic_cstring<CharT> source )
{
    typedef typename basic_cstring<CharT>::value_type string_value_type;

    return source.is_empty() ? static_cast<string_value_type>(0) : *(source.end()-1);
}







template<typename CharT1, typename CharT2>
inline void
assign_op( std::basic_string<CharT1>& target, basic_cstring<CharT2> src, int )
{
    target.assign( src.begin(), src.size() );
}



} 

} 



#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/enable_warnings.hpp"















#pragma warning(default: 4511) 
#pragma warning(default: 4512) 
#pragma warning(default: 4100) 
#pragma warning(default: 4996) 
#pragma warning(default: 4355) 
#pragma warning(default: 4706) 
#pragma warning(default: 4251) 
#pragma warning(default: 4127) 
#pragma warning(default: 4290) 
#pragma warning(default: 4180) 
#pragma warning(default: 4275) 
#pragma warning(default: 4267) 
#pragma warning(default: 4511) 
#pragma warning(pop)
#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/enable_warnings.hpp"
#line 730 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/basic_cstring/basic_cstring.hpp"

#line 732 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/basic_cstring/basic_cstring.hpp"
#line 22 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/predicate_result.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/shared_ptr.hpp"
















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"




















#line 22 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"





#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/no_tr1/memory.hpp"


















#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/no_tr1/memory.hpp"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\memory"

#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdint.h"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"







































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdint.h"

typedef signed char        int8_t;
typedef short              int16_t;
typedef int                int32_t;
typedef long long          int64_t;
typedef unsigned char      uint8_t;
typedef unsigned short     uint16_t;
typedef unsigned int       uint32_t;
typedef unsigned long long uint64_t;

typedef signed char        int_least8_t;
typedef short              int_least16_t;
typedef int                int_least32_t;
typedef long long          int_least64_t;
typedef unsigned char      uint_least8_t;
typedef unsigned short     uint_least16_t;
typedef unsigned int       uint_least32_t;
typedef unsigned long long uint_least64_t;

typedef signed char        int_fast8_t;
typedef int                int_fast16_t;
typedef int                int_fast32_t;
typedef long long          int_fast64_t;
typedef unsigned char      uint_fast8_t;
typedef unsigned int       uint_fast16_t;
typedef unsigned int       uint_fast32_t;
typedef unsigned long long uint_fast64_t;



















typedef long long          intmax_t;
typedef unsigned long long uintmax_t;














































 
 
 
#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdint.h"

































#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdint.h"
#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\stdint.h"





#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\memory"

 
  
 #line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\memory"

 
 
 

 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 #pragma warning(disable: 28197)

namespace std {
template<class _Ty>
	struct default_delete;

template<class _Ty,
	class _Dx = default_delete<_Ty> >
	class unique_ptr;

	
class bad_weak_ptr
	: public ::std:: exception
	{	
public:
	explicit bad_weak_ptr(const char * = 0) throw ()
		{	
		}

	virtual const char * what() const throw()
		{	
		return ("bad_weak_ptr");
		}
	};

	
class _Ref_count_base
	{	
private:
	virtual void _Destroy() = 0;
	virtual void _Delete_this() = 0;

private:
	_Atomic_counter_t _Uses;
	_Atomic_counter_t _Weaks;

protected:
	_Ref_count_base()
		{	
		_Init_atomic_counter(_Uses, 1);
		_Init_atomic_counter(_Weaks, 1);
		}

public:
	virtual ~_Ref_count_base() throw ()
		{	
		}

	bool _Incref_nz()
		{	
		for (; ; )
			{	
 
			_Atomic_integral_t _Count =
				static_cast<volatile _Atomic_counter_t&>(_Uses);

			if (_Count == 0)
				return (false);

			if (static_cast<_Atomic_integral_t>(_InterlockedCompareExchange(
					reinterpret_cast<volatile long *>(&_Uses),
					_Count + 1, _Count)) == _Count)
				return (true);

 








#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\memory"
			}
		}

	unsigned int _Get_uses() const
		{	
		return (_Get_atomic_count(_Uses));
		}

	void _Incref()
		{	
		_InterlockedIncrement(reinterpret_cast<volatile long *>(&_Uses));
		}

	void _Incwref()
		{	
		_InterlockedIncrement(reinterpret_cast<volatile long *>(&_Weaks));
		}

	void _Decref()
		{	
		if (_InterlockedDecrement(reinterpret_cast<volatile long *>(&_Uses)) == 0)
			{	
			_Destroy();
			_Decwref();
			}
		}

	void _Decwref()
		{	
		if (_InterlockedDecrement(reinterpret_cast<volatile long *>(&_Weaks)) == 0)
			_Delete_this();
		}

	long _Use_count() const
		{	
		return (_Get_uses());
		}

	bool _Expired() const
		{	
		return (_Get_uses() == 0);
		}

	virtual void *_Get_deleter(const  type_info&) const
		{	
		return (0);
		}
	};

	
template<class _Ty>
	class _Ref_count
	: public _Ref_count_base
	{	
public:
	_Ref_count(_Ty *_Px)
		: _Ref_count_base(), _Ptr(_Px)
		{	
		}

private:
	virtual void _Destroy()
		{	
		delete _Ptr;
		}

	virtual void _Delete_this()
		{	
		delete this;
		}

	_Ty * _Ptr;
	};

	
template<class _Ty,
	class _Dx>
	class _Ref_count_del
	: public _Ref_count_base
	{	
public:
	_Ref_count_del(_Ty *_Px, _Dx _Dt)
		: _Ref_count_base(), _Ptr(_Px), _Dtor(_Dt)
		{	
		}

	virtual void *_Get_deleter(const  type_info& _Typeid) const
		{	
		return ((void *)(_Typeid == typeid(_Dx) ? &_Dtor : 0));
		}

private:
	virtual void _Destroy()
		{	
		_Dtor(_Ptr);
		}

	virtual void _Delete_this()
		{	
		delete this;
		}

	_Ty * _Ptr;
	_Dx _Dtor;	
	};

	
template<class _Ty,
	class _Dx,
	class _Alloc>
	class _Ref_count_del_alloc
	: public _Ref_count_base
	{	
public:
	typedef _Ref_count_del_alloc<_Ty, _Dx, _Alloc> _Myty;
	typedef typename _Alloc::template rebind<_Myty>::other _Myalty;

	_Ref_count_del_alloc(_Ty *_Px, _Dx _Dt, _Myalty _Al)
		: _Ref_count_base(), _Ptr(_Px), _Dtor(_Dt), _Myal(_Al)
		{	
		}

	virtual void *_Get_deleter(const  type_info& _Typeid) const
		{	
		return ((void *)(_Typeid == typeid(_Dx) ? &_Dtor : 0));
		}

private:
	virtual void _Destroy()
		{	
		_Dtor(_Ptr);
		}

	virtual void _Delete_this()
		{	
		_Myalty _Al = _Myal;
		_Al.destroy(this);
		_Al.deallocate(this, 1);
		}

	_Ty * _Ptr;
	_Dx _Dtor;	
	_Myalty _Myal;	
	};

	
template<class _Ty>
	class weak_ptr;
template<class _Ty>
	class shared_ptr;
template<class _Ty>
	class enable_shared_from_this;
struct _Static_tag {};
struct _Const_tag {};
struct _Dynamic_tag {};
template<class _Ty1,
	class _Ty2>
	void _Do_enable(_Ty1 *, enable_shared_from_this<_Ty2> *,
		_Ref_count_base *);

template<class _Ty>
	inline void _Enable_shared(_Ty *_Ptr, _Ref_count_base *_Refptr,
		typename _Ty::_EStype * = 0)
	{	
	if (_Ptr)
		_Do_enable(_Ptr,
			(enable_shared_from_this<typename _Ty::_EStype>*)_Ptr, _Refptr);
	}

inline void _Enable_shared(const volatile void *, const volatile void *)
	{	
	}

	
template<class _Ty>
	class _Ptr_base
	{	
public:
	typedef _Ptr_base<_Ty> _Myt;
	typedef _Ty element_type;

	_Ptr_base()
		: _Ptr(0), _Rep(0)
		{	
		}

	_Ptr_base(_Myt&& _Right)
		: _Ptr(0), _Rep(0)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		}

	template<class _Ty2>
		_Ptr_base(_Ptr_base<_Ty2>&& _Right)
		: _Ptr(_Right._Ptr), _Rep(_Right._Rep)
		{	
		_Right._Ptr = 0;
		_Right._Rep = 0;
		}

	_Myt& operator=(_Myt&& _Right)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		return (*this);
		}

	void _Assign_rv(_Myt&& _Right)
		{	
		if (this != &_Right)
			_Swap(_Right);
		}

	long use_count() const throw ()
		{	
		return (_Rep ? _Rep->_Use_count() : 0);
		}

	void _Swap(_Ptr_base& _Right)
		{	
		::std:: swap(_Rep, _Right._Rep);
		::std:: swap(_Ptr, _Right._Ptr);
		}

	template<class _Ty2>
		bool owner_before(const _Ptr_base<_Ty2>& _Right) const
		{	
		return (_Rep < _Right._Rep);
		}

	void *_Get_deleter(const  type_info& _Typeid) const
		{	
		return (_Rep ? _Rep->_Get_deleter(_Typeid) : 0);
		}

	_Ty *_Get() const
		{	
		return (_Ptr);
		}

	bool _Expired() const
		{	
		return (!_Rep || _Rep->_Expired());
		}

	void _Decref()
		{	
		if (_Rep != 0)
			_Rep->_Decref();
		}

	void _Reset()
		{	
		_Reset(0, 0);
		}

	template<class _Ty2>
		void _Reset(const _Ptr_base<_Ty2>& _Other)
		{	
		_Reset(_Other._Ptr, _Other._Rep);
		}

	template<class _Ty2>
		void _Reset(const _Ptr_base<_Ty2>& _Other, bool _Throw)
		{	
		_Reset(_Other._Ptr, _Other._Rep, _Throw);
		}

	template<class _Ty2>
		void _Reset(const _Ptr_base<_Ty2>& _Other, const _Static_tag&)
		{	
		_Reset(static_cast<_Ty *>(_Other._Ptr), _Other._Rep);
		}

	template<class _Ty2>
		void _Reset(const _Ptr_base<_Ty2>& _Other, const _Const_tag&)
		{	
		_Reset(const_cast<_Ty *>(_Other._Ptr), _Other._Rep);
		}

	template<class _Ty2>
		void _Reset(const _Ptr_base<_Ty2>& _Other, const _Dynamic_tag&)
		{	
		_Ty *_Ptr = dynamic_cast<_Ty *>(_Other._Ptr);
		if (_Ptr)
			_Reset(_Ptr, _Other._Rep);
		else
			_Reset();
		}

	template<class _Ty2>
		void _Reset(auto_ptr<_Ty2>&& _Other)
		{	
		_Ty2 *_Px = _Other.get();
		_Reset0(_Px, new _Ref_count<_Ty>(_Px));
		_Other.release();
		_Enable_shared(_Px, _Rep);
		}

	template<class _Ty2>
		void _Reset(_Ty *_Ptr, const _Ptr_base<_Ty2>& _Other)
		{	
		_Reset(_Ptr, _Other._Rep);
		}

	void _Reset(_Ty *_Other_ptr, _Ref_count_base *_Other_rep)
		{	
		if (_Other_rep)
			_Other_rep->_Incref();
		_Reset0(_Other_ptr, _Other_rep);
		}

	void _Reset(_Ty *_Other_ptr, _Ref_count_base *_Other_rep, bool _Throw)
		{	
			
			
		if (_Other_rep && _Other_rep->_Incref_nz())
			_Reset0(_Other_ptr, _Other_rep);
		else if (_Throw)
			throw bad_weak_ptr(0);
		}

	void _Reset0(_Ty *_Other_ptr, _Ref_count_base *_Other_rep)
		{	
		if (_Rep != 0)
			_Rep->_Decref();
		_Rep = _Other_rep;
		_Ptr = _Other_ptr;
		}

	void _Decwref()
		{	
		if (_Rep != 0)
			_Rep->_Decwref();
		}

	void _Resetw()
		{	
		_Resetw((_Ty *)0, 0);
		}

	template<class _Ty2>
		void _Resetw(const _Ptr_base<_Ty2>& _Other)
		{	
		_Resetw(_Other._Ptr, _Other._Rep);
		}

	template<class _Ty2>
		void _Resetw(const _Ty2 *_Other_ptr, _Ref_count_base *_Other_rep)
		{	
		_Resetw(const_cast<_Ty2*>(_Other_ptr), _Other_rep);
		}

	template<class _Ty2>
		void _Resetw(_Ty2 *_Other_ptr, _Ref_count_base *_Other_rep)
		{	
		if (_Other_rep)
			_Other_rep->_Incwref();
		if (_Rep != 0)
			_Rep->_Decwref();
		_Rep = _Other_rep;
		_Ptr = _Other_ptr;
		}

private:
	_Ty *_Ptr;
	_Ref_count_base *_Rep;
	template<class _Ty0>
		friend class _Ptr_base;
	};

	
template<class _Ty>
	class shared_ptr
		: public _Ptr_base<_Ty>
	{	
public:
	typedef shared_ptr<_Ty> _Myt;
	typedef _Ptr_base<_Ty> _Mybase;

	shared_ptr() throw ()
		{	
		}

	template<class _Ux>
		explicit shared_ptr(_Ux *_Px)
		{	
		_Resetp(_Px);
		}

	template<class _Ux,
		class _Dx>
		shared_ptr(_Ux *_Px, _Dx _Dt)
		{	
		_Resetp(_Px, _Dt);
		}

	shared_ptr(nullptr_t)
		{	
		}

	template<class _Dx>
		shared_ptr(nullptr_t, _Dx _Dt)
		{	
		_Resetp((_Ty *)0, _Dt);
		}

	template<class _Dx,
		class _Alloc>
		shared_ptr(nullptr_t, _Dx _Dt, _Alloc _Ax)
		{	
		_Resetp((_Ty *)0, _Dt, _Ax);
		}

	template<class _Ux,
		class _Dx,
		class _Alloc>
		shared_ptr(_Ux *_Px, _Dx _Dt, _Alloc _Ax)
		{	
		_Resetp(_Px, _Dt, _Ax);
		}

	template<class _Ty2>
		shared_ptr(const shared_ptr<_Ty2>& _Right, _Ty *_Px) throw ()
		{	
		this->_Reset(_Px, _Right);
		}

	shared_ptr(const _Myt& _Other) throw ()
		{	
		this->_Reset(_Other);
		}

	template<class _Ty2,
		class = typename enable_if<is_convertible<_Ty2 *, _Ty *>::value,
			void>::type>
		shared_ptr(const shared_ptr<_Ty2>& _Other) throw ()
		{	
		this->_Reset(_Other);
		}

	template<class _Ty2>
		explicit shared_ptr(const weak_ptr<_Ty2>& _Other,
			bool _Throw = true)
		{	
		this->_Reset(_Other, _Throw);
		}

	template<class _Ty2>
		shared_ptr(auto_ptr<_Ty2>&& _Other)
		{	
		this->_Reset(::std:: move(_Other));
		}

	template<class _Ty2>
		shared_ptr(const shared_ptr<_Ty2>& _Other, const _Static_tag& _Tag)
		{	
		this->_Reset(_Other, _Tag);
		}

	template<class _Ty2>
		shared_ptr(const shared_ptr<_Ty2>& _Other, const _Const_tag& _Tag)
		{	
		this->_Reset(_Other, _Tag);
		}

	template<class _Ty2>
		shared_ptr(const shared_ptr<_Ty2>& _Other, const _Dynamic_tag& _Tag)
		{	
		this->_Reset(_Other, _Tag);
		}

	shared_ptr(_Myt&& _Right) throw ()
		: _Mybase(::std:: forward<_Myt>(_Right))
		{	
		}

	template<class _Ty2,
		class = typename enable_if<is_convertible<_Ty2 *, _Ty *>::value,
			void>::type>
		shared_ptr(shared_ptr<_Ty2>&& _Right) throw ()
		: _Mybase(::std:: forward<shared_ptr<_Ty2> >(_Right))
		{	
		}

	template<class _Ux,
		class _Dx>
		shared_ptr(unique_ptr<_Ux, _Dx>&& _Right)
		{	
		_Resetp(_Right.release(), _Right.get_deleter());
		}

	template<class _Ux,
		class _Dx>
		_Myt& operator=(unique_ptr<_Ux, _Dx>&& _Right)
		{	
		shared_ptr(::std:: move(_Right)).swap(*this);
		return (*this);
		}

	_Myt& operator=(_Myt&& _Right) throw ()
		{	
		shared_ptr(::std:: move(_Right)).swap(*this);
		return (*this);
		}

	template<class _Ty2>
		_Myt& operator=(shared_ptr<_Ty2>&& _Right) throw ()
		{	
		shared_ptr(::std:: move(_Right)).swap(*this);
		return (*this);
		}

	~shared_ptr() throw ()
		{	
		this->_Decref();
		}

	_Myt& operator=(const _Myt& _Right) throw ()
		{	
		shared_ptr(_Right).swap(*this);
		return (*this);
		}

	template<class _Ty2>
		_Myt& operator=(const shared_ptr<_Ty2>& _Right) throw ()
		{	
		shared_ptr(_Right).swap(*this);
		return (*this);
		}

	template<class _Ty2>
		_Myt& operator=(auto_ptr<_Ty2>&& _Right)
		{	
		shared_ptr(::std:: move(_Right)).swap(*this);
		return (*this);
		}

	void reset() throw ()
		{	
		shared_ptr().swap(*this);
		}

	template<class _Ux>
		void reset(_Ux *_Px)
		{	
		shared_ptr(_Px).swap(*this);
		}

	template<class _Ux,
		class _Dx>
		void reset(_Ux *_Px, _Dx _Dt)
		{	
		shared_ptr(_Px, _Dt).swap(*this);
		}

	template<class _Ux,
		class _Dx,
		class _Alloc>
		void reset(_Ux *_Px, _Dx _Dt, _Alloc _Ax)
		{	
		shared_ptr(_Px, _Dt, _Ax).swap(*this);
		}

	void swap(_Myt& _Other) throw ()
		{	
		this->_Swap(_Other);
		}

	_Ty *get() const throw ()
		{	
		return (this->_Get());
		}

	typename add_reference<_Ty>::type operator*() const throw ()
		{	
		return (*this->_Get());
		}

	_Ty *operator->() const throw ()
		{	
		return (this->_Get());
		}

	bool unique() const throw ()
		{	
		return (this->use_count() == 1);
		}

	explicit operator bool() const throw ()
		{	
		return (this->_Get() != 0);
		}

private:
	template<class _Ux>
		void _Resetp(_Ux *_Px)
		{	
		try {	
		_Resetp0(_Px, new _Ref_count<_Ux>(_Px));
		} catch (...) {	
		delete _Px;
		throw;
		}
		}

	template<class _Ux,
		class _Dx>
		void _Resetp(_Ux *_Px, _Dx _Dt)
		{	
		try {	
		_Resetp0(_Px, new _Ref_count_del<_Ux, _Dx>(_Px, _Dt));
		} catch (...) {	
		_Dt(_Px);
		throw;
		}
		}

	template<class _Ux,
		class _Dx,
		class _Alloc>
		void _Resetp(_Ux *_Px, _Dx _Dt, _Alloc _Ax)
		{	
		typedef _Ref_count_del_alloc<_Ux, _Dx, _Alloc> _Refd;
		typename _Alloc::template rebind<_Refd>::other _Al = _Ax;

		try {	
		_Refd *_Ptr = _Al.allocate(1);
		::new (_Ptr) _Refd(_Px, _Dt, _Al);
		_Resetp0(_Px, _Ptr);
		} catch (...) {	
		_Dt(_Px);
		throw;
		}
		}

public:
	template<class _Ux>
		void _Resetp0(_Ux *_Px, _Ref_count_base *_Rx)
		{	
		this->_Reset0(_Px, _Rx);
		_Enable_shared(_Px, _Rx);
		}
	};

template<class _Ty1,
	class _Ty2>
	bool operator==(const shared_ptr<_Ty1>& _Left,
		const shared_ptr<_Ty2>& _Right) throw ()
	{	
	return (_Left.get() == _Right.get());
	}

template<class _Ty1,
	class _Ty2>
	bool operator!=(const shared_ptr<_Ty1>& _Left,
		const shared_ptr<_Ty2>& _Right) throw ()
	{	
	return (!(_Left == _Right));
	}

template<class _Ty1,
	class _Ty2>
	bool operator<(const shared_ptr<_Ty1>& _Left,
		const shared_ptr<_Ty2>& _Right) throw ()
	{	
	return (less<decltype(_Always_false<_Ty1>::value
		? _Left.get() : _Right.get())>()(
			_Left.get(), _Right.get()));
	}

template<class _Ty1,
	class _Ty2>
	bool operator>=(const shared_ptr<_Ty1>& _Left,
		const shared_ptr<_Ty2>& _Right) throw ()
	{	
	return (!(_Left < _Right));
	}

template<class _Ty1,
	class _Ty2>
	bool operator>(const shared_ptr<_Ty1>& _Left,
		const shared_ptr<_Ty2>& _Right) throw ()
	{	
	return (_Right < _Left);
	}

template<class _Ty1,
	class _Ty2>
	bool operator<=(const shared_ptr<_Ty1>& _Left,
		const shared_ptr<_Ty2>& _Right) throw ()
	{	
	return (!(_Right < _Left));
	}

template<class _Ty>
	bool operator==(const shared_ptr<_Ty>& _Left,
		nullptr_t) throw ()
	{	
	return (_Left.get() == (_Ty *)0);
	}

template<class _Ty>
	bool operator==(nullptr_t,
		const shared_ptr<_Ty>& _Right) throw ()
	{	
	return ((_Ty *)0 == _Right.get());
	}

template<class _Ty>
	bool operator!=(const shared_ptr<_Ty>& _Left,
		nullptr_t _Right) throw ()
	{	
	return (!(_Left == _Right));
	}

template<class _Ty>
	bool operator!=(nullptr_t _Left,
		const shared_ptr<_Ty>& _Right) throw ()
	{	
	return (!(_Left == _Right));
	}

template<class _Ty>
	bool operator<(const shared_ptr<_Ty>& _Left,
		nullptr_t _Right) throw ()
	{	
	return (less<_Ty *>()(_Left.get(), (_Ty *)0));
	}

template<class _Ty>
	bool operator<(nullptr_t _Left,
		const shared_ptr<_Ty>& _Right) throw ()
	{	
	return (less<_Ty *>()((_Ty *)0, _Right.get()));
	}

template<class _Ty>
	bool operator>=(const shared_ptr<_Ty>& _Left,
		nullptr_t _Right) throw ()
	{	
	return (!(_Left < _Right));
	}

template<class _Ty>
	bool operator>=(nullptr_t _Left,
		const shared_ptr<_Ty>& _Right) throw ()
	{	
	return (!(_Left < _Right));
	}

template<class _Ty>
	bool operator>(const shared_ptr<_Ty>& _Left,
		nullptr_t _Right) throw ()
	{	
	return (_Right < _Left);
	}

template<class _Ty>
	bool operator>(nullptr_t _Left,
		const shared_ptr<_Ty>& _Right) throw ()
	{	
	return (_Right < _Left);
	}

template<class _Ty>
	bool operator<=(const shared_ptr<_Ty>& _Left,
		nullptr_t _Right) throw ()
	{	
	return (!(_Right < _Left));
	}

template<class _Ty>
	bool operator<=(nullptr_t _Left,
		const shared_ptr<_Ty>& _Right) throw ()
	{	
	return (!(_Right < _Left));
	}

template<class _Elem,
	class _Traits,
	class _Ty>
	basic_ostream<_Elem, _Traits>&
	operator<<(basic_ostream<_Elem, _Traits>& _Out,
		const shared_ptr<_Ty>& _Px)
	{	
	return (_Out << _Px.get());
	}

template<class _Ty>
	void swap(shared_ptr<_Ty>& _Left,
		shared_ptr<_Ty>& _Right) throw ()
	{	
	_Left.swap(_Right);
	}

template<class _Ty1,
	class _Ty2>
	shared_ptr<_Ty1>
		static_pointer_cast(const shared_ptr<_Ty2>& _Other) throw ()
	{	
	return (shared_ptr<_Ty1>(_Other, _Static_tag()));
	}

template<class _Ty1,
	class _Ty2>
	shared_ptr<_Ty1>
		const_pointer_cast(const shared_ptr<_Ty2>& _Other) throw ()
	{	
	return (shared_ptr<_Ty1>(_Other, _Const_tag()));
	}

template<class _Ty1,
	class _Ty2>
	shared_ptr<_Ty1>
		dynamic_pointer_cast(const shared_ptr<_Ty2>& _Other) throw ()
	{	
	return (shared_ptr<_Ty1>(_Other, _Dynamic_tag()));
	}

template<class _Dx,
	class _Ty>
	_Dx *get_deleter(const shared_ptr<_Ty>& _Sx) throw ()
	{	
	return ((_Dx *)_Sx._Get_deleter(typeid(_Dx)));
	}

	
template<class _Ty>
	class _Ref_count_obj
	: public _Ref_count_base
	{	
public:
	template<class... _Types>
		_Ref_count_obj(_Types&&... _Args)
		: _Ref_count_base()
		{	
		::new ((void *)&_Storage) _Ty(::std:: forward<_Types>(_Args)...);
		}


	_Ty *_Getptr() const
		{	
		return ((_Ty *)&_Storage);
		}

private:
	virtual void _Destroy()
		{	
		_Getptr()->~_Ty();
		}

	virtual void _Delete_this()
		{	
		delete this;
		}

	typename aligned_storage<sizeof (_Ty),
		alignment_of<_Ty>::value>::type _Storage;
	};

	
template<class _Ty,
	class _Alloc>
	class _Ref_count_obj_alloc
	: public _Ref_count_base
	{	
public:
	typedef _Ref_count_obj_alloc<_Ty, _Alloc> _Myty;
	typedef typename _Alloc::template rebind<_Myty>::other _Myalty;

	template<class... _Types>
		_Ref_count_obj_alloc(_Myalty _Al, _Types&&... _Args)
		: _Ref_count_base(), _Myal(_Al)
		{	
		::new ((void *)&_Storage) _Ty(::std:: forward<_Types>(_Args)...);
		}


	_Ty *_Getptr() const
		{	
		return ((_Ty *)&_Storage);
		}

private:
	virtual void _Destroy()
		{	
		_Getptr()->~_Ty();
		}

	virtual void _Delete_this()
		{	
		_Myalty _Al = _Myal;
		_Al.destroy(this);
		_Al.deallocate(this, 1);
		}

	typename aligned_storage<sizeof (_Ty),
		alignment_of<_Ty>::value>::type _Storage;
	_Myalty _Myal;	
	};

	
template<class _Ty,
	class... _Types> inline
		shared_ptr<_Ty> make_shared(_Types&&... _Args)
	{	
	_Ref_count_obj<_Ty> *_Rx =
		new _Ref_count_obj<_Ty>(::std:: forward<_Types>(_Args)...);

	shared_ptr<_Ty> _Ret;
	_Ret._Resetp0(_Rx->_Getptr(), _Rx);
	return (_Ret);
	}

	
template<class _Ty,
	class _Alloc,
	class... _Types> inline
		shared_ptr<_Ty> allocate_shared(
			const _Alloc& _Al_arg, _Types&&... _Args)
	{	
	typedef _Ref_count_obj_alloc<_Ty, _Alloc> _Refoa;
	typename _Alloc::template rebind<_Refoa>::other _Alref = _Al_arg;

	_Refoa *_Rx = _Alref.allocate(1);

	try {
		::new (_Rx) _Refoa(_Al_arg, ::std:: forward<_Types>(_Args)...);
	} catch (...) {
		_Alref.deallocate(_Rx, 1);
	throw;
	}

	shared_ptr<_Ty> _Ret;
	_Ret._Resetp0(_Rx->_Getptr(), _Rx);
	return (_Ret);
	}


	
template<class _Ty>
	class weak_ptr
		: public _Ptr_base<_Ty>
	{	
public:
	weak_ptr() throw ()
		{	
		}

	weak_ptr(const weak_ptr& _Other) throw ()
		{	
		this->_Resetw(_Other);
		}

	template<class _Ty2,
		class = typename enable_if<is_convertible<_Ty2 *, _Ty *>::value,
			void>::type>
		weak_ptr(const shared_ptr<_Ty2>& _Other) throw ()
		{	
		this->_Resetw(_Other);
		}

	template<class _Ty2,
		class = typename enable_if<is_convertible<_Ty2 *, _Ty *>::value,
			void>::type>
		weak_ptr(const weak_ptr<_Ty2>& _Other) throw ()
		{	
		this->_Resetw(_Other.lock());
		}

	~weak_ptr() throw ()
		{	
		this->_Decwref();
		}

	weak_ptr& operator=(const weak_ptr& _Right) throw ()
		{	
		this->_Resetw(_Right);
		return (*this);
		}

	template<class _Ty2>
		weak_ptr& operator=(const weak_ptr<_Ty2>& _Right) throw ()
		{	
		this->_Resetw(_Right.lock());
		return (*this);
		}

	template<class _Ty2>
		weak_ptr& operator=(const shared_ptr<_Ty2>& _Right) throw ()
		{	
		this->_Resetw(_Right);
		return (*this);
		}

	void reset() throw ()
		{	
		this->_Resetw();
		}

	void swap(weak_ptr& _Other) throw ()
		{	
		this->_Swap(_Other);
		}

	bool expired() const throw ()
		{	
		return (this->_Expired());
		}

	shared_ptr<_Ty> lock() const throw ()
		{	
		return (shared_ptr<_Ty>(*this, false));
		}
	};

template<class _Ty>
	void swap(weak_ptr<_Ty>& _W1, weak_ptr<_Ty>& _W2) throw ()
	{	
	_W1.swap(_W2);
	}

	
template<class _Ty>
	class enable_shared_from_this
	{	
public:
	typedef _Ty _EStype;

	shared_ptr<_Ty> shared_from_this()
		{	
		return (shared_ptr<_Ty>(_Wptr));
		}

	shared_ptr<const _Ty> shared_from_this() const
		{	
		return (shared_ptr<const _Ty>(_Wptr));
		}

protected:
	enable_shared_from_this() throw ()
		{	
		}

	enable_shared_from_this(const enable_shared_from_this&) throw ()
		{	
		}

	enable_shared_from_this&
		operator=(const enable_shared_from_this&) throw ()
		{	
		return (*this);
		}

	~enable_shared_from_this() throw ()
		{	
		}

private:
	template<class _Ty1,
		class _Ty2>
		friend void _Do_enable(
			_Ty1 *,
			enable_shared_from_this<_Ty2>*,
			_Ref_count_base *);

	mutable weak_ptr<_Ty> _Wptr;
	};

template<class _Ty1,
	class _Ty2>
	inline void _Do_enable(
		_Ty1 *_Ptr,
		enable_shared_from_this<_Ty2> *_Es,
		_Ref_count_base *_Refptr)
	{	
	_Es->_Wptr._Resetw(_Ptr, _Refptr);
	}
}

namespace std {
	

	
template<class _Ty>
	struct default_delete
	{	
	typedef default_delete<_Ty> _Myt;

	default_delete() throw ()
		{	
		}

	template<class _Ty2,
		class = typename enable_if<is_convertible<_Ty2 *, _Ty *>::value,
			void>::type>
		default_delete(const default_delete<_Ty2>&) throw ()
		{	
		}

	void operator()(_Ty *_Ptr) const throw ()
		{	
		static_assert(0 < sizeof (_Ty),
			"can't delete an incomplete type");
		delete _Ptr;
		}
	};

template<class _Ty>
	struct default_delete<_Ty[]>
	{	
	typedef default_delete<_Ty> _Myt;

	default_delete() throw ()
		{	
		}

	template<class _Other>
		void operator()(_Other *) const;	

	void operator()(_Ty *_Ptr) const throw ()
		{	
		static_assert(0 < sizeof (_Ty),
			"can't delete an incomplete type");
		delete[] _Ptr;
		}
	};

		
template<class _Val,
	class _Ty>
	struct _Get_deleter_pointer_type
	{ template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::pointer>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<_Val *>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };
#line 1230 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\memory"

	
template<class _Ty,
	class _Dx,
	bool _Empty_deleter>
	class _Unique_ptr_base
	{	
public:
	typedef typename remove_reference<_Dx>::type _Dx_noref;
	typedef typename _Get_deleter_pointer_type<_Ty, _Dx_noref>::type pointer;

	_Unique_ptr_base(pointer _Ptr, _Dx _Dt)
		: _Myptr(_Ptr), _Mydel(_Dt)
		{	
		}

	_Unique_ptr_base(pointer _Ptr)
		: _Myptr(_Ptr)
		{	
		}

	template<class _Ptr2,
		class _Dx2>
		_Unique_ptr_base(_Ptr2 _Ptr, _Dx2 _Dt)
		: _Myptr(_Ptr), _Mydel(_Dt)
		{	
		}

	template<class _Ptr2>
		_Unique_ptr_base(_Ptr2 _Ptr)
		: _Myptr(_Ptr)
		{	
		}

	_Dx_noref& get_deleter()
		{	
		return (_Mydel);
		}

	const _Dx_noref& get_deleter() const
		{	
		return (_Mydel);
		}

	pointer _Myptr;	
	_Dx _Mydel;		
	};

template<class _Ty,
	class _Dx>
	class _Unique_ptr_base<_Ty, _Dx, true>
		: public _Dx
	{	
public:
	typedef _Dx _Mybase;
	typedef typename remove_reference<_Dx>::type _Dx_noref;
	typedef typename _Get_deleter_pointer_type<_Ty, _Dx_noref>::type pointer;

	_Unique_ptr_base(pointer _Ptr, _Dx _Dt) throw ()
		: _Myptr(_Ptr), _Mybase(_Dt)
		{	
		}

	_Unique_ptr_base(pointer _Ptr) throw ()
		: _Myptr(_Ptr)
		{	
		}

	template<class _Ptr2,
		class _Dx2>
		_Unique_ptr_base(_Ptr2 _Ptr, _Dx2 _Dt) throw ()
		: _Myptr(_Ptr), _Mybase(_Dt)
		{	
		}

	template<class _Ptr2>
		_Unique_ptr_base(_Ptr2 _Ptr) throw ()
		: _Myptr(_Ptr)
		{	
		}

	_Dx_noref& get_deleter() throw ()
		{	
		return (*this);
		}

	const _Dx_noref& get_deleter() const throw ()
		{	
		return (*this);
		}

	pointer _Myptr;	
	};

	
template<class _Ty,
	class _Dx>	
	class unique_ptr
		: private _Unique_ptr_base<_Ty, _Dx,
			is_empty<_Dx>::value
				|| is_same<default_delete<_Ty>, _Dx>::value>
	{	
public:
	typedef unique_ptr<_Ty, _Dx> _Myt;
	typedef _Unique_ptr_base<_Ty, _Dx,
		is_empty<_Dx>::value
			|| is_same<default_delete<_Ty>, _Dx>::value> _Mybase;
	typedef typename _Mybase::pointer pointer;
	typedef _Ty element_type;
	typedef _Dx deleter_type;

	using _Mybase::get_deleter;

	unique_ptr() throw ()
		: _Mybase(pointer())
		{	
		static_assert(!is_pointer<_Dx>::value,
			"unique_ptr constructed with null deleter pointer");
		}

	unique_ptr(nullptr_t) throw ()
		: _Mybase(pointer())
		{	
		static_assert(!is_pointer<_Dx>::value,
			"unique_ptr constructed with null deleter pointer");
		}

	_Myt& operator=(nullptr_t) throw ()
		{	
		reset();
		return (*this);
		}

	explicit unique_ptr(pointer _Ptr) throw ()
		: _Mybase(_Ptr)
		{	
		static_assert(!is_pointer<_Dx>::value,
			"unique_ptr constructed with null deleter pointer");
		}

	unique_ptr(pointer _Ptr,
		typename _If<is_reference<_Dx>::value, _Dx,
			const typename remove_reference<_Dx>::type&>::type _Dt) throw ()
		: _Mybase(_Ptr, _Dt)
		{	
		}

	unique_ptr(pointer _Ptr,
		typename remove_reference<_Dx>::type&& _Dt) throw ()
		: _Mybase(_Ptr, ::std:: move(_Dt))
		{	
		static_assert(!is_reference<_Dx>::value,
			"unique_ptr constructed with reference to rvalue deleter");
		}

	unique_ptr(unique_ptr&& _Right) throw ()
		: _Mybase(_Right.release(),
			::std:: forward<_Dx>(_Right.get_deleter()))
		{	
		}

	template<class _Ty2,
		class _Dx2,
		class = typename enable_if<!is_array<_Ty2>::value
			&& is_convertible<typename unique_ptr<_Ty2, _Dx2>::pointer,
				pointer>::value
			&& ((is_reference<_Dx>::value && is_same<_Dx, _Dx2>::value)
				|| (!is_reference<_Dx>::value
					&& is_convertible<_Dx2, _Dx>::value)),
			void>::type>
		unique_ptr(unique_ptr<_Ty2, _Dx2>&& _Right) throw ()
			: _Mybase(_Right.release(),
				::std:: forward<_Dx2>(_Right.get_deleter()))
		{	
		}

	template<class _Ty2,
		class = typename enable_if<is_convertible<_Ty2 *, _Ty *>::value
			&& is_same<_Dx, default_delete<_Ty> >::value,
			void>::type>
		unique_ptr(auto_ptr<_Ty2>&& _Right) throw ()
			: _Mybase(_Right.release())
		{	
		}

	template<class _Ty2,
		class _Dx2>
		typename enable_if<!is_array<_Ty2>::value
			&& is_convertible<typename unique_ptr<_Ty2, _Dx2>::pointer,
				pointer>::value,
			_Myt&>::type
		operator=(unique_ptr<_Ty2, _Dx2>&& _Right) throw ()
		{	
		reset(_Right.release());
		this->get_deleter() = ::std:: forward<_Dx2>(_Right.get_deleter());
		return (*this);
		}

	_Myt& operator=(_Myt&& _Right) throw ()
		{	
		if (this != &_Right)
			{	
			reset(_Right.release());
			this->get_deleter() = ::std:: forward<_Dx>(_Right.get_deleter());
			}
		return (*this);
		}

	void swap(_Myt& _Right) throw ()
		{	
		_Swap_adl(this->_Myptr, _Right._Myptr);
		_Swap_adl(this->get_deleter(),
			_Right.get_deleter());
		}

	~unique_ptr() throw ()
		{	
		if (this->_Myptr != pointer())
			this->get_deleter()(this->_Myptr);
		}

	typename add_reference<_Ty>::type operator*() const
		{	
		return (*this->_Myptr);
		}

	pointer operator->() const throw ()
		{	
		return (::std:: pointer_traits<pointer>::pointer_to(**this));
		}

	pointer get() const throw ()
		{	
		return (this->_Myptr);
		}

	explicit operator bool() const throw ()
		{	
		return (this->_Myptr != pointer());
		}

	pointer release() throw ()
		{	
		pointer _Ans = this->_Myptr;
		this->_Myptr = pointer();
		return (_Ans);
		}

	void reset(pointer _Ptr = pointer()) throw ()
		{	
		pointer _Old = this->_Myptr;
		this->_Myptr = _Ptr;
		if (_Old != pointer())
			this->get_deleter()(_Old);
		}

private:
	unique_ptr(const _Myt&);	
	_Myt& operator=(const _Myt&);	
	};

	
template<class _Ty,
	class _Dx>
	class unique_ptr<_Ty[], _Dx>
		: private _Unique_ptr_base<_Ty, _Dx,
			is_empty<_Dx>::value
				|| is_same<default_delete<_Ty[]>, _Dx>::value>
	{	
public:
	typedef unique_ptr<_Ty[], _Dx> _Myt;
	typedef _Unique_ptr_base<_Ty, _Dx,
		is_empty<_Dx>::value
			|| is_same<default_delete<_Ty[]>, _Dx>::value> _Mybase;
	typedef typename _Mybase::pointer pointer;
	typedef _Ty element_type;
	typedef _Dx deleter_type;

	using _Mybase::get_deleter;

	unique_ptr() throw ()
		: _Mybase(pointer())
		{	
		static_assert(!is_pointer<_Dx>::value,
			"unique_ptr constructed with null deleter pointer");
		}

	explicit unique_ptr(pointer _Ptr) throw ()
		: _Mybase(_Ptr)
		{	
		static_assert(!is_pointer<_Dx>::value,
			"unique_ptr constructed with null deleter pointer");
		}

	unique_ptr(pointer _Ptr,
		typename _If<is_reference<_Dx>::value, _Dx,
			const typename remove_reference<_Dx>::type&>::type _Dt) throw ()
		: _Mybase(_Ptr, _Dt)
		{	
		}

public:
	unique_ptr(pointer _Ptr,
		typename remove_reference<_Dx>::type&& _Dt) throw ()
		: _Mybase(_Ptr, ::std:: move(_Dt))
		{	
		static_assert(!is_reference<_Dx>::value,
			"unique_ptr constructed with reference to rvalue deleter");
		}

	unique_ptr(unique_ptr&& _Right) throw ()
		: _Mybase(_Right.release(),
			::std:: forward<_Dx>(_Right.get_deleter()))
		{	
		}

private:
	template<class _Ty2,
		class _Dx2>
		unique_ptr(unique_ptr<_Ty2, _Dx2>&& _Right);	

	template<class _Ty2,
		class _Dx2>
		_Myt& operator=(unique_ptr<_Ty2, _Dx2>&& _Right);	

public:
	_Myt& operator=(_Myt&& _Right) throw ()
		{	
		if (this != &_Right)
			{	
			reset(_Right.release());
			this->get_deleter() = ::std:: move(_Right.get_deleter());
			}
		return (*this);
		}

	unique_ptr(nullptr_t) throw ()
		: _Mybase(pointer())
		{	
		static_assert(!is_pointer<_Dx>::value,
			"unique_ptr constructed with null deleter pointer");
		}

	_Myt& operator=(nullptr_t) throw ()
		{	
		reset();
		return (*this);
		}

	void reset(nullptr_t) throw ()
		{	
		reset();
		}

	void swap(_Myt& _Right) throw ()
		{	
		_Swap_adl(this->_Myptr, _Right._Myptr);
		_Swap_adl(this->get_deleter(), _Right.get_deleter());
		}

	~unique_ptr() throw ()
		{	
		_Delete();
		}

	typename add_reference<_Ty>::type operator[](size_t _Idx) const
		{	
		return (this->_Myptr[_Idx]);
		}

	pointer get() const throw ()
		{	
		return (this->_Myptr);
		}

	explicit operator bool() const throw ()
		{	
		return (this->_Myptr != pointer());
		}

	pointer release() throw ()
		{	
		pointer _Ans = this->_Myptr;
		this->_Myptr = pointer();
		return (_Ans);
		}

	void reset(pointer _Ptr = pointer()) throw ()
		{	
		_Delete();
		this->_Myptr = _Ptr;
		}

private:
	template<class _Ptr2>
		explicit unique_ptr(_Ptr2);	

	template<class _Ptr2,
		class _Dx2>
		unique_ptr(_Ptr2, _Dx2);	

	unique_ptr(const _Myt&);	
	template<class _Ty2,
		class _Dx2>
		unique_ptr(const unique_ptr<_Ty2, _Dx2>&);	

	_Myt& operator=(const _Myt&);	
	template<class _Ty2,
		class _Dx2>
		_Myt& operator=(const unique_ptr<_Ty2, _Dx2>&);	

	template<class _Ptr2>
		void reset(_Ptr2);	

	void _Delete()
		{	
		if (this->_Myptr != pointer())
			this->get_deleter()(this->_Myptr);
		}
	};

	
template<class _Ty,
	class... _Types> inline
	typename enable_if<!is_array<_Ty>::value,
		unique_ptr<_Ty> >::type make_unique(_Types&&... _Args)
	{	
	return (unique_ptr<_Ty>(new _Ty(::std:: forward<_Types>(_Args)...)));
	}

template<class _Ty> inline
	typename enable_if<is_array<_Ty>::value && extent<_Ty>::value == 0,
		unique_ptr<_Ty> >::type make_unique(size_t _Size)
	{	
	typedef typename remove_extent<_Ty>::type _Elem;
	return (unique_ptr<_Ty>(new _Elem[_Size]()));
	}

template<class _Ty,
	class... _Types>
	typename enable_if<extent<_Ty>::value != 0,
		void>::type make_unique(_Types&&...);	


template<class _Ty,
	class _Dx>
	void swap(unique_ptr<_Ty, _Dx>& _Left,
		unique_ptr<_Ty, _Dx>& _Right) throw ()
	{	
	_Left.swap(_Right);
	}

template<class _Ty1,
	class _Dx1,
	class _Ty2,
	class _Dx2>
	bool operator==(const unique_ptr<_Ty1, _Dx1>& _Left,
		const unique_ptr<_Ty2, _Dx2>& _Right)
	{	
	return (_Left.get() == _Right.get());
	}

template<class _Ty1,
	class _Dx1,
	class _Ty2,
	class _Dx2>
	bool operator!=(const unique_ptr<_Ty1, _Dx1>& _Left,
		const unique_ptr<_Ty2, _Dx2>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Ty1,
	class _Dx1,
	class _Ty2,
	class _Dx2>
	bool operator<(const unique_ptr<_Ty1, _Dx1>& _Left,
		const unique_ptr<_Ty2, _Dx2>& _Right)
	{	
	typedef typename unique_ptr<_Ty1, _Dx1>::pointer _Ptr1;
	typedef typename unique_ptr<_Ty2, _Dx2>::pointer _Ptr2;
	typedef typename common_type<_Ptr1, _Ptr2>::type _Common;
	return (less<_Common>()(_Left.get(), _Right.get()));
	}

template<class _Ty1,
	class _Dx1,
	class _Ty2,
	class _Dx2>
	bool operator>=(const unique_ptr<_Ty1, _Dx1>& _Left,
		const unique_ptr<_Ty2, _Dx2>& _Right)
	{	
	return (!(_Left < _Right));
	}

template<class _Ty1,
	class _Dx1,
	class _Ty2,
	class _Dx2>
	bool operator>(const unique_ptr<_Ty1, _Dx1>& _Left,
		const unique_ptr<_Ty2, _Dx2>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _Ty1,
	class _Dx1,
	class _Ty2,
	class _Dx2>
	bool operator<=(const unique_ptr<_Ty1, _Dx1>& _Left,
		const unique_ptr<_Ty2, _Dx2>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _Ty,
	class _Dx>
	bool operator==(const unique_ptr<_Ty, _Dx>& _Left,
		nullptr_t) throw ()
	{	
	return (!_Left);
	}

template<class _Ty,
	class _Dx>
	bool operator==(nullptr_t,
		const unique_ptr<_Ty, _Dx>& _Right) throw ()
	{	
	return (!_Right);
	}

template<class _Ty,
	class _Dx>
	bool operator!=(const unique_ptr<_Ty, _Dx>& _Left,
		nullptr_t _Right) throw ()
	{	
	return (!(_Left == _Right));
	}

template<class _Ty,
	class _Dx>
	bool operator!=(nullptr_t _Left,
		const unique_ptr<_Ty, _Dx>& _Right) throw ()
	{	
	return (!(_Left == _Right));
	}

template<class _Ty,
	class _Dx>
	bool operator<(const unique_ptr<_Ty, _Dx>& _Left,
		nullptr_t _Right)
	{	
	typedef typename unique_ptr<_Ty, _Dx>::pointer _Ptr;
	return (less<_Ptr>()(_Left.get(), _Right));
	}

template<class _Ty,
	class _Dx>
	bool operator<(nullptr_t _Left,
		const unique_ptr<_Ty, _Dx>& _Right)
	{	
	typedef typename unique_ptr<_Ty, _Dx>::pointer _Ptr;
	return (less<_Ptr>()(_Left, _Right.get()));
	}

template<class _Ty,
	class _Dx>
	bool operator>=(const unique_ptr<_Ty, _Dx>& _Left,
		nullptr_t _Right)
	{	
	return (!(_Left < _Right));
	}

template<class _Ty,
	class _Dx>
	bool operator>=(nullptr_t _Left,
		const unique_ptr<_Ty, _Dx>& _Right)
	{	
	return (!(_Left < _Right));
	}

template<class _Ty,
	class _Dx>
	bool operator>(const unique_ptr<_Ty, _Dx>& _Left,
		nullptr_t _Right)
	{	
	return (_Right < _Left);
	}

template<class _Ty,
	class _Dx>
	bool operator>(nullptr_t _Left,
		const unique_ptr<_Ty, _Dx>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _Ty,
	class _Dx>
	bool operator<=(const unique_ptr<_Ty, _Dx>& _Left,
		nullptr_t _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _Ty,
	class _Dx>
	bool operator<=(nullptr_t _Left,
		const unique_ptr<_Ty, _Dx>& _Right)
	{	
	return (!(_Right < _Left));
	}

		

enum class pointer_safety {	
	relaxed,
	preferred,
	strict
	};

typedef pointer_safety _Pointer_safety;

inline void declare_reachable(void *)
	{	
	}

template<class _Ty> inline
	_Ty *undeclare_reachable(_Ty *_Ptr)
	{	
	return (_Ptr);
	}

inline void declare_no_pointers(char *, size_t)
	{	
	}

inline void undeclare_no_pointers(char *, size_t)
	{	
	}

inline _Pointer_safety get_pointer_safety() throw ()
	{	
	return (pointer_safety::relaxed);
	}

namespace tr1 {	
using ::std:: allocate_shared;
using ::std:: bad_weak_ptr;
using ::std:: const_pointer_cast;
using ::std:: dynamic_pointer_cast;
using ::std:: enable_shared_from_this;
using ::std:: get_deleter;
using ::std:: make_shared;
using ::std:: shared_ptr;
using ::std:: static_pointer_cast;
using ::std:: swap;
using ::std:: weak_ptr;
}	

		
template<class _Ty>
	struct owner_less;	

template<class _Ty>
	struct owner_less<shared_ptr<_Ty> >
		: public binary_function<shared_ptr<_Ty>, shared_ptr<_Ty>, bool>
	{	
	bool operator()(const shared_ptr<_Ty>& _Left,
		const shared_ptr<_Ty>& _Right) const
		{	
		return (_Left.owner_before(_Right));
		}

	bool operator()(const shared_ptr<_Ty>& _Left,
		const weak_ptr<_Ty>& _Right) const
		{	
		return (_Left.owner_before(_Right));
		}

	bool operator()(const weak_ptr<_Ty>& _Left,
		const shared_ptr<_Ty>& _Right) const
		{	
		return (_Left.owner_before(_Right));
		}
	};

template<class _Ty>
	struct owner_less<weak_ptr<_Ty> >
		: public binary_function<weak_ptr<_Ty>, weak_ptr<_Ty>, bool>
	{	
	bool operator()(const weak_ptr<_Ty>& _Left,
		const weak_ptr<_Ty>& _Right) const
		{	
		return (_Left.owner_before(_Right));
		}

	bool operator()(const weak_ptr<_Ty>& _Left,
		const shared_ptr<_Ty>& _Right) const
		{	
		return (_Left.owner_before(_Right));
		}

	bool operator()(const shared_ptr<_Ty>& _Left,
		const weak_ptr<_Ty>& _Right) const
		{	
		return (_Left.owner_before(_Right));
		}
	};

	
template<class _Ty,
	class _Dx>
	struct hash<unique_ptr<_Ty, _Dx> >
		: public unary_function<unique_ptr<_Ty, _Dx>, size_t>
	{	
	typedef unique_ptr<_Ty, _Dx> _Kty;
	typedef typename _Kty::pointer _Ptrtype;

	size_t operator()(const _Kty& _Keyval) const
		{	
		return (hash<_Ptrtype>()(_Keyval.get()));
		}
	};

template<class _Ty>
	struct hash<shared_ptr<_Ty> >
		: public unary_function<shared_ptr<_Ty>, size_t>
	{	
	typedef shared_ptr<_Ty> _Kty;
	typedef _Ty *_Ptrtype;

	size_t operator()(const _Kty& _Keyval) const
		{	
		return (hash<_Ptrtype>()(_Keyval.get()));
		}
	};

		
inline void *align(size_t _Bound, size_t _Size,
	void *& _Ptr, size_t& _Space) throw ()
	{	
	size_t _Off = (size_t)((uintptr_t)_Ptr & (_Bound - 1));
	if (0 < _Off)
		_Off = _Bound - _Off;	
	if (_Space < _Off || _Space - _Off < _Size)
		return (0);
	else
		{	
		_Ptr = (char *)_Ptr + _Off;
		_Space -= _Off;
		return (_Ptr);
		}
	}

		
struct _Shared_ptr_spin_lock
	{	
	_Shared_ptr_spin_lock()
		{	
		_Lock_shared_ptr_spin_lock();
		}

	~_Shared_ptr_spin_lock() throw ()
		{	
		_Unlock_shared_ptr_spin_lock();
		}
	};

template <class _Ty> inline
	bool atomic_is_lock_free(const shared_ptr<_Ty> *)
	{	
	return (false);
	}

template <class _Ty> inline
	shared_ptr<_Ty> atomic_load_explicit(const shared_ptr<_Ty> *_Ptr,
		memory_order)
	{	
	_Shared_ptr_spin_lock _Lock;
	shared_ptr<_Ty> _Result = *_Ptr;
	return (_Result);
	}

template <class _Ty> inline
	shared_ptr<_Ty> atomic_load(const shared_ptr<_Ty> *_Ptr)
	{	
	return (atomic_load_explicit(_Ptr, memory_order_seq_cst));
	}

template <class _Ty> inline
	void atomic_store_explicit(shared_ptr<_Ty> *_Ptr, shared_ptr<_Ty> _Other,
		memory_order)
	{	
	_Shared_ptr_spin_lock _Lock;
	_Ptr->swap(_Other);
	}

template <class _Ty> inline
	void atomic_store(shared_ptr<_Ty> *_Ptr, shared_ptr<_Ty> _Other)
	{	
	atomic_store_explicit(_Ptr, _Other, memory_order_seq_cst);
	}

template <class _Ty> inline
	shared_ptr<_Ty> atomic_exchange_explicit(
		shared_ptr<_Ty> *_Ptr, shared_ptr<_Ty> _Other,
		memory_order)
	{	
	_Shared_ptr_spin_lock _Lock;
	shared_ptr<_Ty> _Result = *_Ptr;
	_Ptr->swap(_Other);
	return (_Result);
	}

template <class _Ty> inline
	shared_ptr<_Ty> atomic_exchange(
		shared_ptr<_Ty> *_Ptr, shared_ptr<_Ty> _Other)
	{	
	return (atomic_exchange_explicit(_Ptr, _Other, memory_order_seq_cst));
	}

template <class _Ty> inline
	bool atomic_compare_exchange_weak_explicit(
		shared_ptr<_Ty> *_Ptr, shared_ptr<_Ty> *_Exp, shared_ptr<_Ty> _Value,
		memory_order, memory_order)
	{	
	_Shared_ptr_spin_lock _Lock;
	bool _Success = _Ptr->get() == _Exp->get();
	if (_Success)
		*_Ptr = _Value;
	else
		{	
		*_Exp = *_Ptr;
		}
	return (_Success);
	}

template <class _Ty> inline
	bool atomic_compare_exchange_weak(
		shared_ptr<_Ty> *_Ptr, shared_ptr<_Ty> *_Exp,
			shared_ptr<_Ty> _Value)
	{	
	return (atomic_compare_exchange_weak_explicit(_Ptr, _Exp, _Value,
		memory_order_seq_cst, memory_order_seq_cst));
	}

template <class _Ty> inline
	bool atomic_compare_exchange_strong_explicit(
		shared_ptr<_Ty> *_Ptr, shared_ptr<_Ty> *_Exp, shared_ptr<_Ty> _Value,
		memory_order, memory_order)
	{	
	return (atomic_compare_exchange_weak_explicit(_Ptr, _Exp, _Value,
		memory_order_seq_cst, memory_order_seq_cst));
	}

template <class _Ty> inline
	bool atomic_compare_exchange_strong(
	shared_ptr<_Ty> *_Ptr, shared_ptr<_Ty> *_Exp,
		shared_ptr<_Ty> _Value)
	{	
	return (atomic_compare_exchange_strong_explicit(_Ptr, _Exp, _Value,
		memory_order_seq_cst, memory_order_seq_cst));
	}
}
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 2099 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\memory"
#line 2100 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\memory"






#line 22 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/no_tr1/memory.hpp"




#line 27 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/no_tr1/memory.hpp"

#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/no_tr1/memory.hpp"
#line 28 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"


































#line 36 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"













#line 50 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\assert.h"




















#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"







































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\assert.h"










extern "C" {
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\assert.h"

 void __cdecl _wassert(  const wchar_t * _Message,   const wchar_t *_File,   unsigned _Line);


}
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\assert.h"



#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\assert.h"
#line 51 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"

#line 53 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"











#line 65 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"













#line 79 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"
  
    
    
    #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\iostream"

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 
 
namespace std {
  











		
 extern  istream cin, *_Ptr_cin;
 extern  ostream cout, *_Ptr_cout;
 extern  ostream cerr, *_Ptr_cerr;
 extern  ostream clog, *_Ptr_clog;

 extern  wistream wcin, *_Ptr_wcin;
 extern  wostream wcout, *_Ptr_wcout;
 extern  wostream wcerr, *_Ptr_wcerr;
 extern  wostream wclog, *_Ptr_wclog;

		
class  _Winit {
public:
	__thiscall _Winit();
	__thiscall ~_Winit() throw ();
private:
	 static int _Init_cnt;
	};
  #line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\iostream"
}
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\iostream"
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\iostream"





#line 83 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"
    #line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/current_function.hpp"






#pragma once
#line 9 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/current_function.hpp"













namespace boost
{

namespace detail
{

inline void current_function_helper()
{





#line 36 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/current_function.hpp"



#line 40 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/current_function.hpp"



















#line 60 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/current_function.hpp"

}

} 

} 

#line 68 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/current_function.hpp"

#line 84 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"

    
    
    
    
    #line 90 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"

    namespace boost
    { 
      namespace assertion 
      { 
        namespace detail
        {
          inline void assertion_failed_msg(char const * expr, char const * msg, char const * function,
            char const * file, long line)
          {
            std::cerr
              << "***** Internal Program Error - assertion (" << expr << ") failed in "
              << function << ":\n"
              << file << '(' << line << "): " << msg << std::endl;
			



				std::abort();
			#line 110 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"
          }
        } 
      } 
    } 
  #line 115 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"

  



#line 121 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"











#line 133 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"



#line 137 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"
#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/checked_delete.hpp"






#pragma once
#line 9 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/checked_delete.hpp"















namespace boost
{



template<class T> inline void checked_delete(T * x)
{
    
    typedef char type_must_be_complete[ sizeof(T)? 1: -1 ];
    (void) sizeof(type_must_be_complete);
    delete x;
}

template<class T> inline void checked_array_delete(T * x)
{
    typedef char type_must_be_complete[ sizeof(T)? 1: -1 ];
    (void) sizeof(type_must_be_complete);
    delete [] x;
}

template<class T> struct checked_deleter
{
    typedef void result_type;
    typedef T * argument_type;

    void operator()(T * x) const
    {
        
        boost::checked_delete(x);
    }
};

template<class T> struct checked_array_deleter
{
    typedef void result_type;
    typedef T * argument_type;

    void operator()(T * x) const
    {
        boost::checked_array_delete(x);
    }
};

} 

#line 70 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/checked_delete.hpp"
#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/throw_exception.hpp"




#line 6 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/throw_exception.hpp"

#pragma warning(push,1)
#line 9 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/throw_exception.hpp"




#pragma once
#line 15 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/throw_exception.hpp"














#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/exception/detail/attribute_noreturn.hpp"














#line 16 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/exception/detail/attribute_noreturn.hpp"

#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/exception/detail/attribute_noreturn.hpp"
#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/throw_exception.hpp"






#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/throw_exception.hpp"



#line 41 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/throw_exception.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/exception/exception.hpp"









#line 11 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/exception/exception.hpp"

#pragma warning(push,1)
#line 14 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/exception/exception.hpp"

namespace
boost
    {
    namespace
    exception_detail
        {
        template <class T>
        class
        refcount_ptr
            {
            public:

            refcount_ptr():
                px_(0)
                {
                }

            ~refcount_ptr()
                {
                release();
                }

            refcount_ptr( refcount_ptr const & x ):
                px_(x.px_)
                {
                add_ref();
                }

            refcount_ptr &
            operator=( refcount_ptr const & x )
                {
                adopt(x.px_);
                return *this;
                }

            void
            adopt( T * px )
                {
                release();
                px_=px;
                add_ref();
                }

            T *
            get() const
                {
                return px_;
                }

            private:

            T * px_;

            void
            add_ref()
                {
                if( px_ )
                    px_->add_ref();
                }

            void
            release()
                {
                if( px_ && px_->release() )
                    px_=0;
                }
            };
        }

    

    template <class Tag,class T>
    class error_info;

    typedef error_info<struct throw_function_,char const *> throw_function;
    typedef error_info<struct throw_file_,char const *> throw_file;
    typedef error_info<struct throw_line_,int> throw_line;

    template <>
    class
    error_info<throw_function_,char const *>
        {
        public:
        typedef char const * value_type;
        value_type v_;
        explicit
        error_info( value_type v ):
            v_(v)
            {
            }
        };

    template <>
    class
    error_info<throw_file_,char const *>
        {
        public:
        typedef char const * value_type;
        value_type v_;
        explicit
        error_info( value_type v ):
            v_(v)
            {
            }
        };

    template <>
    class
    error_info<throw_line_,int>
        {
        public:
        typedef int value_type;
        value_type v_;
        explicit
        error_info( value_type v ):
            v_(v)
            {
            }
        };





#line 140 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/exception/exception.hpp"
    class exception;




#line 146 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/exception/exception.hpp"

    template <class T>
    class shared_ptr;

    namespace
    exception_detail
        {
        class error_info_base;
        struct type_info_;

        struct
        error_info_container
            {
            virtual char const * diagnostic_information( char const * ) const = 0;
            virtual shared_ptr<error_info_base> get( type_info_ const & ) const = 0;
            virtual void set( shared_ptr<error_info_base> const &, type_info_ const & ) = 0;
            virtual void add_ref() const = 0;
            virtual bool release() const = 0;
            virtual refcount_ptr<exception_detail::error_info_container> clone() const = 0;

            protected:

            ~error_info_container() throw()
                {
                }
            };

        template <class>
        struct get_info;

        template <>
        struct get_info<throw_function>;

        template <>
        struct get_info<throw_file>;

        template <>
        struct get_info<throw_line>;

        char const * get_diagnostic_information( exception const &, char const * );

        void copy_boost_exception( exception *, exception const * );

        template <class E,class Tag,class T>
        E const & set_info( E const &, error_info<Tag,T> const & );

        template <class E>
        E const & set_info( E const &, throw_function const & );

        template <class E>
        E const & set_info( E const &, throw_file const & );

        template <class E>
        E const & set_info( E const &, throw_line const & );
        }





#line 207 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/exception/exception.hpp"
    class
    exception
        {
        protected:

        exception():
            throw_function_(0),
            throw_file_(0),
            throw_line_(-1)
            {
            }













        virtual ~exception() throw()

            = 0 
#line 235 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/exception/exception.hpp"
            ;



#line 240 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/exception/exception.hpp"
        private:

        template <class E>
        friend E const & exception_detail::set_info( E const &, throw_function const & );

        template <class E>
        friend E const & exception_detail::set_info( E const &, throw_file const & );

        template <class E>
        friend E const & exception_detail::set_info( E const &, throw_line const & );

        template <class E,class Tag,class T>
        friend E const & exception_detail::set_info( E const &, error_info<Tag,T> const & );

        friend char const * exception_detail::get_diagnostic_information( exception const &, char const * );

        template <class>
        friend struct exception_detail::get_info;
        friend struct exception_detail::get_info<throw_function>;
        friend struct exception_detail::get_info<throw_file>;
        friend struct exception_detail::get_info<throw_line>;
        friend void exception_detail::copy_boost_exception( exception *, exception const * );
#line 263 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/exception/exception.hpp"
        mutable exception_detail::refcount_ptr<exception_detail::error_info_container> data_;
        mutable char const * throw_function_;
        mutable char const * throw_file_;
        mutable int throw_line_;
        };




#line 273 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/exception/exception.hpp"

    inline
    exception::
    ~exception() throw()
        {
        }

    namespace
    exception_detail
        {
        template <class E>
        E const &
        set_info( E const & x, throw_function const & y )
            {
            x.throw_function_=y.v_;
            return x;
            }

        template <class E>
        E const &
        set_info( E const & x, throw_file const & y )
            {
            x.throw_file_=y.v_;
            return x;
            }

        template <class E>
        E const &
        set_info( E const & x, throw_line const & y )
            {
            x.throw_line_=y.v_;
            return x;
            }
        }

    

    namespace
    exception_detail
        {




#line 318 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/exception/exception.hpp"
        template <class T>
        struct
        error_info_injector:
            public T,
            public exception
            {
            explicit
            error_info_injector( T const & x ):
                T(x)
                {
                }

            ~error_info_injector() throw()
                {
                }
            };




#line 339 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/exception/exception.hpp"

        struct large_size { char c[256]; };
        large_size dispatch_boost_exception( exception const * );

        struct small_size { };
        small_size dispatch_boost_exception( void const * );

        template <class,int>
        struct enable_error_info_helper;

        template <class T>
        struct
        enable_error_info_helper<T,sizeof(large_size)>
            {
            typedef T type;
            };

        template <class T>
        struct
        enable_error_info_helper<T,sizeof(small_size)>
            {
            typedef error_info_injector<T> type;
            };

        template <class T>
        struct
        enable_error_info_return_type
            {
            typedef typename enable_error_info_helper<T,sizeof(exception_detail::dispatch_boost_exception(static_cast<T *>(0)))>::type type;
            };
        }

    template <class T>
    inline
    typename
    exception_detail::enable_error_info_return_type<T>::type
    enable_error_info( T const & x )
        {
        typedef typename exception_detail::enable_error_info_return_type<T>::type rt;
        return rt(x);
        }

    

    namespace
    exception_detail
        {




#line 391 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/exception/exception.hpp"
        class
        clone_base
            {
            public:

            virtual clone_base const * clone() const = 0;
            virtual void rethrow() const = 0;

            virtual
            ~clone_base() throw()
                {
                }
            };




#line 409 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/exception/exception.hpp"

        inline
        void
        copy_boost_exception( exception * a, exception const * b )
            {
            refcount_ptr<error_info_container> data;
            if( error_info_container * d=b->data_.get() )
                data = d->clone();
            a->throw_file_ = b->throw_file_;
            a->throw_line_ = b->throw_line_;
            a->throw_function_ = b->throw_function_;
            a->data_ = data;
            }

        inline
        void
        copy_boost_exception( void *, void const * )
            {
            }

        template <class T>
        class
        clone_impl:
            public T,
            public virtual clone_base
            {
            struct clone_tag { };
            clone_impl( clone_impl const & x, clone_tag ):
                T(x)
                {
                copy_boost_exception(this,&x);
                }

            public:

            explicit
            clone_impl( T const & x ):
                T(x)
                {
                copy_boost_exception(this,&x);
                }

            ~clone_impl() throw()
                {
                }

            private:

            clone_base const *
            clone() const
                {
                return new clone_impl(*this,clone_tag());
                }

            void
            rethrow() const
                {
                throw*this;
                }
            };
        }

    template <class T>
    inline
    exception_detail::clone_impl<T>
    enable_current_exception( T const & x )
        {
        return exception_detail::clone_impl<T>(x);
        }
    }


#pragma warning(pop)
#line 483 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/exception/exception.hpp"
#line 484 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/exception/exception.hpp"
#line 44 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/throw_exception.hpp"




#line 49 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/throw_exception.hpp"

namespace boost
{


void throw_exception( std::exception const & e ); 


















#line 74 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/throw_exception.hpp"


    namespace
    exception_detail
    {
        template <class E>
        __declspec(noreturn)
        void
        throw_exception_( E const & x, char const * current_function, char const * file, int line )
        {
            boost::throw_exception(
                set_info(
                    set_info(
                        set_info(
                            enable_error_info(x),
                            throw_function(current_function)),
                        throw_file(file)),
                    throw_line(line)));
        }
    }
#line 95 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/throw_exception.hpp"
} 


#pragma warning(pop)
#line 100 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/throw_exception.hpp"
#line 101 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/throw_exception.hpp"
#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/shared_count.hpp"






#pragma once
#line 9 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/shared_count.hpp"



















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/bad_weak_ptr.hpp"






#pragma once
#line 9 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/bad_weak_ptr.hpp"

















namespace boost
{









#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/bad_weak_ptr.hpp"

class bad_weak_ptr: public std::exception
{
public:

    virtual char const * what() const throw()
    {
        return "tr1::bad_weak_ptr";
    }
};



#line 52 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/bad_weak_ptr.hpp"

} 





#line 60 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/bad_weak_ptr.hpp"
#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/shared_count.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_counted_base.hpp"






#pragma once
#line 9 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_counted_base.hpp"












#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_has_sync.hpp"






#pragma once
#line 9 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_has_sync.hpp"




















#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_has_sync.hpp"



#line 34 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_has_sync.hpp"































#line 66 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_has_sync.hpp"

#line 68 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_has_sync.hpp"

#line 70 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_has_sync.hpp"
#line 22 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_counted_base.hpp"




#line 27 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_counted_base.hpp"


#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_counted_base.hpp"


#line 33 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_counted_base.hpp"


#line 36 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_counted_base.hpp"


#line 39 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_counted_base.hpp"


#line 42 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_counted_base.hpp"


#line 45 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_counted_base.hpp"


#line 48 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_counted_base.hpp"


#line 51 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_counted_base.hpp"


#line 54 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_counted_base.hpp"


#line 57 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_counted_base.hpp"


#line 60 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_counted_base.hpp"


#line 63 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_counted_base.hpp"


#line 66 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_counted_base.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_counted_base_w32.hpp"






#pragma once
#line 9 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_counted_base_w32.hpp"


















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/interlocked.hpp"






#pragma once
#line 9 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/interlocked.hpp"

























#line 35 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/interlocked.hpp"





































#line 73 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/interlocked.hpp"





















#line 95 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/interlocked.hpp"

#pragma intrinsic( _InterlockedIncrement )
#pragma intrinsic( _InterlockedDecrement )
#pragma intrinsic( _InterlockedCompareExchange )
#pragma intrinsic( _InterlockedExchange )
#pragma intrinsic( _InterlockedExchangeAdd )












#line 114 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/interlocked.hpp"






#line 121 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/interlocked.hpp"

























































#line 179 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/interlocked.hpp"

#line 181 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/interlocked.hpp"
#line 28 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_counted_base_w32.hpp"

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/sp_typeinfo.hpp"






#pragma once
#line 9 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/sp_typeinfo.hpp"


































































































#line 108 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/sp_typeinfo.hpp"



namespace boost
{

namespace detail
{





#line 122 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/sp_typeinfo.hpp"

typedef std::type_info sp_typeinfo;

#line 126 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/sp_typeinfo.hpp"

} 

} 



#line 134 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/sp_typeinfo.hpp"

#line 136 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/sp_typeinfo.hpp"
#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_counted_base_w32.hpp"

namespace boost
{

namespace detail
{

class sp_counted_base
{
private:

    sp_counted_base( sp_counted_base const & );
    sp_counted_base & operator= ( sp_counted_base const & );

    long use_count_;        
    long weak_count_;       

public:

    sp_counted_base(): use_count_( 1 ), weak_count_( 1 )
    {
    }

    virtual ~sp_counted_base() 
    {
    }

    
    

    virtual void dispose() = 0; 

    

    virtual void destroy() 
    {
        delete this;
    }

    virtual void * get_deleter( sp_typeinfo const & ti ) = 0;
    virtual void * get_untyped_deleter() = 0;

    void add_ref_copy()
    {
        _InterlockedIncrement( &use_count_ );
    }

    bool add_ref_lock() 
    {
        for( ;; )
        {
            long tmp = static_cast< long const volatile& >( use_count_ );
            if( tmp == 0 ) return false;








#line 92 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_counted_base_w32.hpp"

            if( _InterlockedCompareExchange( &use_count_, tmp + 1, tmp ) == tmp ) return true;

#line 96 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_counted_base_w32.hpp"
        }
    }

    void release() 
    {
        if( _InterlockedDecrement( &use_count_ ) == 0 )
        {
            dispose();
            weak_release();
        }
    }

    void weak_add_ref() 
    {
        _InterlockedIncrement( &weak_count_ );
    }

    void weak_release() 
    {
        if( _InterlockedDecrement( &weak_count_ ) == 0 )
        {
            destroy();
        }
    }

    long use_count() const 
    {
        return static_cast<long const volatile &>( use_count_ );
    }
};

} 

} 

#line 132 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_counted_base_w32.hpp"
#line 67 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_counted_base.hpp"










#line 78 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_counted_base.hpp"

#line 80 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_counted_base.hpp"
#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/shared_count.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_counted_impl.hpp"






#pragma once
#line 9 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_counted_impl.hpp"
















#line 26 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_counted_impl.hpp"






#line 33 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_counted_impl.hpp"



#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_counted_impl.hpp"



namespace boost
{






#line 49 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_counted_impl.hpp"

namespace detail
{

template<class X> class sp_counted_impl_p: public sp_counted_base
{
private:

    X * px_;

    sp_counted_impl_p( sp_counted_impl_p const & );
    sp_counted_impl_p & operator= ( sp_counted_impl_p const & );

    typedef sp_counted_impl_p<X> this_type;

public:

    explicit sp_counted_impl_p( X * px ): px_( px )
    {


#line 71 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_counted_impl.hpp"
    }

    virtual void dispose() 
    {


#line 78 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_counted_impl.hpp"
        boost::checked_delete( px_ );
    }

    virtual void * get_deleter( detail::sp_typeinfo const & )
    {
        return 0;
    }

    virtual void * get_untyped_deleter()
    {
        return 0;
    }













#line 104 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_counted_impl.hpp"













#line 118 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_counted_impl.hpp"
};








template<class P, class D> class sp_counted_impl_pd: public sp_counted_base
{
private:

    P ptr; 
    D del; 

    sp_counted_impl_pd( sp_counted_impl_pd const & );
    sp_counted_impl_pd & operator= ( sp_counted_impl_pd const & );

    typedef sp_counted_impl_pd<P, D> this_type;

public:

    

    sp_counted_impl_pd( P p, D & d ): ptr( p ), del( d )
    {
    }

    sp_counted_impl_pd( P p ): ptr( p ), del()
    {
    }

    virtual void dispose() 
    {
        del( ptr );
    }

    virtual void * get_deleter( detail::sp_typeinfo const & ti )
    {
        return ti == typeid(D)? &reinterpret_cast<char&>( del ): 0;
    }

    virtual void * get_untyped_deleter()
    {
        return &reinterpret_cast<char&>( del );
    }













#line 179 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_counted_impl.hpp"













#line 193 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_counted_impl.hpp"
};

template<class P, class D, class A> class sp_counted_impl_pda: public sp_counted_base
{
private:

    P p_; 
    D d_; 
    A a_; 

    sp_counted_impl_pda( sp_counted_impl_pda const & );
    sp_counted_impl_pda & operator= ( sp_counted_impl_pda const & );

    typedef sp_counted_impl_pda<P, D, A> this_type;

public:

    

    sp_counted_impl_pda( P p, D & d, A a ): p_( p ), d_( d ), a_( a )
    {
    }

    sp_counted_impl_pda( P p, A a ): p_( p ), d_(), a_( a )
    {
    }

    virtual void dispose() 
    {
        d_( p_ );
    }

    virtual void destroy() 
    {
        typedef typename A::template rebind< this_type >::other A2;

        A2 a2( a_ );

        this->~this_type();
        a2.deallocate( this, 1 );
    }

    virtual void * get_deleter( detail::sp_typeinfo const & ti )
    {
        return ti == typeid(D)? &reinterpret_cast<char&>( d_ ): 0;
    }

    virtual void * get_untyped_deleter()
    {
        return &reinterpret_cast<char&>( d_ );
    }
};





} 

} 

#line 255 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_counted_impl.hpp"
#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/shared_count.hpp"






#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\functional"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xfunctional"

#pragma once







 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 #pragma warning(disable: 4100 4180 4244)

 



namespace std {
		


		


		


		
template<class _Ty = void>
	struct divides
		: public binary_function<_Ty, _Ty, _Ty>
	{	
	_Ty operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left / _Right);
		}
	};

		
template<class _Ty = void>
	struct modulus
		: public binary_function<_Ty, _Ty, _Ty>
	{	
	_Ty operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left % _Right);
		}
	};

		
template<class _Ty = void>
	struct negate
		: public unary_function<_Ty, _Ty>
	{	
	_Ty operator()(const _Ty& _Left) const
		{	
		return (-_Left);
		}
	};

		


		
template<class _Ty = void>
	struct not_equal_to
		: public binary_function<_Ty, _Ty, bool>
	{	
	bool operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left != _Right);
		}
	};

		
template<class _Ty = void>
	struct greater
		: public binary_function<_Ty, _Ty, bool>
	{	
	bool operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left > _Right);
		}
	};

		


		
template<class _Ty = void>
	struct greater_equal
		: public binary_function<_Ty, _Ty, bool>
	{	
	bool operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left >= _Right);
		}
	};

		
template<class _Ty = void>
	struct less_equal
		: public binary_function<_Ty, _Ty, bool>
	{	
	bool operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left <= _Right);
		}
	};

		
template<class _Ty = void>
	struct logical_and
		: public binary_function<_Ty, _Ty, bool>
	{	
	bool operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left && _Right);
		}
	};

		
template<class _Ty = void>
	struct logical_or
		: public binary_function<_Ty, _Ty, bool>
	{	
	bool operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left || _Right);
		}
	};

		
template<class _Ty = void>
	struct logical_not
		: public unary_function<_Ty, bool>
	{	
	bool operator()(const _Ty& _Left) const
		{	
		return (!_Left);
		}
	};

		
template<class _Ty = void>
	struct bit_and
		: public binary_function<_Ty, _Ty, _Ty>
	{	
	_Ty operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left & _Right);
		}
	};

		
template<class _Ty = void>
	struct bit_or
		: public binary_function<_Ty, _Ty, _Ty>
	{	
	_Ty operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left | _Right);
		}
	};

		
template<class _Ty = void>
	struct bit_xor
		: public binary_function<_Ty, _Ty, _Ty>
	{	
	_Ty operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left ^ _Right);
		}
	};

		
template<class _Ty = void>
	struct bit_not
		: public unary_function<_Ty, _Ty>
	{	
	_Ty operator()(const _Ty& _Left) const
		{	
		return (~_Left);
		}
	};

		


		


		


		
template<>
	struct divides<void>
	{	
	template<class _Ty1,
		class _Ty2>
		auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(::std:: forward<_Ty1>(_Left) / ::std:: forward<_Ty2>(_Right))
		{	
		return (::std:: forward<_Ty1>(_Left) / ::std:: forward<_Ty2>(_Right));
		}
	};

		
template<>
	struct modulus<void>
	{	
	template<class _Ty1,
		class _Ty2>
		auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(::std:: forward<_Ty1>(_Left) % ::std:: forward<_Ty2>(_Right))
		{	
		return (::std:: forward<_Ty1>(_Left) % ::std:: forward<_Ty2>(_Right));
		}
	};

		
template<>
	struct negate<void>
	{	
	template<class _Ty>
		auto operator()(_Ty&& _Left) const
		-> decltype(-::std:: forward<_Ty>(_Left))
		{	
		return (-::std:: forward<_Ty>(_Left));
		}
	};

		


		
template<>
	struct not_equal_to<void>
	{	
	template<class _Ty1,
		class _Ty2>
		auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(::std:: forward<_Ty1>(_Left) != ::std:: forward<_Ty2>(_Right))
		{	
		return (::std:: forward<_Ty1>(_Left) != ::std:: forward<_Ty2>(_Right));
		}
	};

		
template<>
	struct greater<void>
	{	
	template<class _Ty1,
		class _Ty2>
		auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(::std:: forward<_Ty1>(_Left) > ::std:: forward<_Ty2>(_Right))
		{	
		return (::std:: forward<_Ty1>(_Left) > ::std:: forward<_Ty2>(_Right));
		}
	};

		


		
template<>
	struct greater_equal<void>
	{	
	template<class _Ty1,
		class _Ty2>
		auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(::std:: forward<_Ty1>(_Left) >= ::std:: forward<_Ty2>(_Right))
		{	
		return (::std:: forward<_Ty1>(_Left) >= ::std:: forward<_Ty2>(_Right));
		}
	};

		
template<>
	struct less_equal<void>
	{	
	template<class _Ty1,
		class _Ty2>
		auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(::std:: forward<_Ty1>(_Left) <= ::std:: forward<_Ty2>(_Right))
		{	
		return (::std:: forward<_Ty1>(_Left) <= ::std:: forward<_Ty2>(_Right));
		}
	};

		
template<>
	struct logical_and<void>
	{	
	template<class _Ty1,
		class _Ty2>
		auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(::std:: forward<_Ty1>(_Left) && ::std:: forward<_Ty2>(_Right))
		{	
		return (::std:: forward<_Ty1>(_Left) && ::std:: forward<_Ty2>(_Right));
		}
	};

		
template<>
	struct logical_or<void>
	{	
	template<class _Ty1,
		class _Ty2>
		auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(::std:: forward<_Ty1>(_Left) || ::std:: forward<_Ty2>(_Right))
		{	
		return (::std:: forward<_Ty1>(_Left) || ::std:: forward<_Ty2>(_Right));
		}
	};

		
template<>
	struct logical_not<void>
	{	
	template<class _Ty>
		auto operator()(_Ty&& _Left) const
		-> decltype(!::std:: forward<_Ty>(_Left))
		{	
		return (!::std:: forward<_Ty>(_Left));
		}
	};

		
template<>
	struct bit_and<void>
	{	
	template<class _Ty1,
		class _Ty2>
		auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(::std:: forward<_Ty1>(_Left) & ::std:: forward<_Ty2>(_Right))
		{	
		return (::std:: forward<_Ty1>(_Left) & ::std:: forward<_Ty2>(_Right));
		}
	};

		
template<>
	struct bit_or<void>
	{	
	template<class _Ty1,
		class _Ty2>
		auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(::std:: forward<_Ty1>(_Left) | ::std:: forward<_Ty2>(_Right))
		{	
		return (::std:: forward<_Ty1>(_Left) | ::std:: forward<_Ty2>(_Right));
		}
	};

		
template<>
	struct bit_xor<void>
	{	
	template<class _Ty1,
		class _Ty2>
		auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(::std:: forward<_Ty1>(_Left) ^ ::std:: forward<_Ty2>(_Right))
		{	
		return (::std:: forward<_Ty1>(_Left) ^ ::std:: forward<_Ty2>(_Right));
		}
	};

		
template<>
	struct bit_not<void>
	{	
	template<class _Ty>
		auto operator()(_Ty&& _Left) const
		-> decltype(~::std:: forward<_Ty>(_Left))
		{	
		return (~::std:: forward<_Ty>(_Left));
		}
	};

		
template<class _Fn1>
	class unary_negate
	: public unary_function<typename _Fn1::argument_type, bool>
	{	
public:
	explicit unary_negate(const _Fn1& _Func)
		: _Functor(_Func)
		{	
		}

	bool operator()(const typename _Fn1::argument_type& _Left) const
		{	
		return (!_Functor(_Left));
		}

protected:
	_Fn1 _Functor;	
	};

		
template<class _Fn1> inline
	unary_negate<_Fn1> not1(const _Fn1& _Func)
	{	
	return (::std:: unary_negate<_Fn1>(_Func));
	}

		
template<class _Fn2>
	class binary_negate
		: public binary_function<typename _Fn2::first_argument_type,
			typename _Fn2::second_argument_type, bool>
	{	
public:
	explicit binary_negate(const _Fn2& _Func)
		: _Functor(_Func)
		{	
		}

	bool operator()(const typename _Fn2::first_argument_type& _Left,
		const typename _Fn2::second_argument_type& _Right) const
		{	
		return (!_Functor(_Left, _Right));
		}

protected:
	_Fn2 _Functor;	
	};

		
template<class _Fn2> inline
	binary_negate<_Fn2> not2(const _Fn2& _Func)
	{	
	return (::std:: binary_negate<_Fn2>(_Func));
	}

		
template<class _Fn2>
	class binder1st
		: public unary_function<typename _Fn2::second_argument_type,
			typename _Fn2::result_type>
	{	
public:
	typedef unary_function<typename _Fn2::second_argument_type,
		typename _Fn2::result_type> _Base;
	typedef typename _Base::argument_type argument_type;
	typedef typename _Base::result_type result_type;

	binder1st(const _Fn2& _Func,
		const typename _Fn2::first_argument_type& _Left)
		: op(_Func), value(_Left)
		{	
		}

	result_type operator()(const argument_type& _Right) const
		{	
		return (op(value, _Right));
		}

	result_type operator()(argument_type& _Right) const
		{	
		return (op(value, _Right));
		}

protected:
	_Fn2 op;	
	typename _Fn2::first_argument_type value;	
	};

		
template<class _Fn2,
	class _Ty> inline
	binder1st<_Fn2> bind1st(const _Fn2& _Func, const _Ty& _Left)
		{	
		typename _Fn2::first_argument_type _Val(_Left);
		return (::std:: binder1st<_Fn2>(_Func, _Val));
		}

		
template<class _Fn2>
	class binder2nd
		: public unary_function<typename _Fn2::first_argument_type,
			typename _Fn2::result_type>
	{	
public:
	typedef unary_function<typename _Fn2::first_argument_type,
		typename _Fn2::result_type> _Base;
	typedef typename _Base::argument_type argument_type;
	typedef typename _Base::result_type result_type;

	binder2nd(const _Fn2& _Func,
		const typename _Fn2::second_argument_type& _Right)
		: op(_Func), value(_Right)
		{	
		}

	result_type operator()(const argument_type& _Left) const
		{	
		return (op(_Left, value));
		}

	result_type operator()(argument_type& _Left) const
		{	
		return (op(_Left, value));
		}

protected:
	_Fn2 op;	
	typename _Fn2::second_argument_type value;	
	};

		
template<class _Fn2,
	class _Ty> inline
	binder2nd<_Fn2> bind2nd(const _Fn2& _Func, const _Ty& _Right)
	{	
	typename _Fn2::second_argument_type _Val(_Right);
	return (::std:: binder2nd<_Fn2>(_Func, _Val));
	}

		
template<class _Arg,
	class _Result,
	class _Fn = _Result (*)(_Arg)>
	class pointer_to_unary_function
		: public unary_function<_Arg, _Result>
	{	
public:
	explicit pointer_to_unary_function(_Fn _Left)
		: _Pfun(_Left)
		{	
		}

	_Result operator()(_Arg _Left) const
		{	
		return (_Pfun(_Left));
		}

protected:
	_Fn _Pfun;	
	};

		
template<class _Arg1,
	class _Arg2,
	class _Result,
	class _Fn = _Result (*)(_Arg1, _Arg2)>
	class pointer_to_binary_function
		: public binary_function<_Arg1, _Arg2, _Result>
	{	
public:
	explicit pointer_to_binary_function(_Fn _Left)
		: _Pfun(_Left)
		{	
		}

	_Result operator()(_Arg1 _Left, _Arg2 _Right) const
		{	
		return (_Pfun(_Left, _Right));
		}

protected:
	_Fn _Pfun;	
	};

		
template<class _Arg,
	class _Result> inline
	pointer_to_unary_function<_Arg, _Result,
		_Result (__cdecl *)(_Arg)>
		ptr_fun(_Result (__cdecl *_Left)(_Arg))
	{	
	return (pointer_to_unary_function<_Arg, _Result,
		_Result (__cdecl *)(_Arg)>(_Left));
	}

 
template<class _Arg,
	class _Result> inline
	pointer_to_unary_function<_Arg, _Result,
		_Result (__stdcall *)(_Arg)>
			ptr_fun(_Result (__stdcall *_Left)(_Arg))
	{	
	return (pointer_to_unary_function<_Arg, _Result,
		_Result (__stdcall *)(_Arg)>(_Left));
	}

  
template<class _Arg,
	class _Result> inline
	pointer_to_unary_function<_Arg, _Result,
		_Result (__fastcall *)(_Arg)>
			ptr_fun(_Result (__fastcall *_Left)(_Arg))
	{	
	return (pointer_to_unary_function<_Arg, _Result,
		_Result (__fastcall *)(_Arg)>(_Left));
	}
  #line 603 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xfunctional"
 #line 604 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xfunctional"

 











template<class _Arg1,
	class _Arg2,
	class _Result> inline
	pointer_to_binary_function<_Arg1, _Arg2, _Result,
		_Result (__cdecl *)(_Arg1, _Arg2)>
		ptr_fun(_Result (__cdecl *_Left)(_Arg1, _Arg2))
	{	
	return (pointer_to_binary_function<_Arg1, _Arg2, _Result,
		_Result (__cdecl *)(_Arg1, _Arg2)>(_Left));
	}

 
template<class _Arg1,
	class _Arg2,
	class _Result> inline
	pointer_to_binary_function<_Arg1, _Arg2, _Result,
		_Result(__stdcall *)(_Arg1, _Arg2)>
			ptr_fun(_Result (__stdcall *_Left)(_Arg1, _Arg2))
	{	
	return (pointer_to_binary_function<_Arg1, _Arg2, _Result,
		_Result (__stdcall *)(_Arg1, _Arg2)>(_Left));
	}

  
template<class _Arg1,
	class _Arg2,
	class _Result> inline
	pointer_to_binary_function<_Arg1, _Arg2, _Result,
		_Result(__fastcall *)(_Arg1, _Arg2)>
			ptr_fun(_Result (__fastcall *_Left)(_Arg1, _Arg2))
	{	
	return (pointer_to_binary_function<_Arg1, _Arg2, _Result,
		_Result (__fastcall *)(_Arg1, _Arg2)>(_Left));
	}
  #line 652 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xfunctional"
 #line 653 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xfunctional"

 












		
template<class _Result,
	class _Ty>
	class mem_fun_t
		: public unary_function<_Ty *, _Result>
	{	
public:
	explicit mem_fun_t(_Result (_Ty::*_Pm)())
		: _Pmemfun(_Pm)
		{	
		}

	_Result operator()(_Ty *_Pleft) const
		{	
		return ((_Pleft->*_Pmemfun)());
		}

private:
	_Result (_Ty::*_Pmemfun)();	
	};

		
template<class _Result,
	class _Ty,
	class _Arg>
	class mem_fun1_t
		: public binary_function<_Ty *, _Arg, _Result>
	{	
public:
	explicit mem_fun1_t(_Result (_Ty::*_Pm)(_Arg))
		: _Pmemfun(_Pm)
		{	
		}

	_Result operator()(_Ty *_Pleft, _Arg _Right) const
		{	
		return ((_Pleft->*_Pmemfun)(_Right));
		}

private:
	_Result (_Ty::*_Pmemfun)(_Arg);	
	};

		
template<class _Result,
	class _Ty>
	class const_mem_fun_t
		: public unary_function<const _Ty *, _Result>
	{	
public:
	explicit const_mem_fun_t(_Result (_Ty::*_Pm)() const)
		: _Pmemfun(_Pm)
		{	
		}

	_Result operator()(const _Ty *_Pleft) const
		{	
		return ((_Pleft->*_Pmemfun)());
		}

private:
	_Result (_Ty::*_Pmemfun)() const;	
	};

		
template<class _Result,
	class _Ty,
	class _Arg>
	class const_mem_fun1_t
		: public binary_function<const _Ty *, _Arg, _Result>
	{	
public:
	explicit const_mem_fun1_t(_Result (_Ty::*_Pm)(_Arg) const)
		: _Pmemfun(_Pm)
		{	
		}

	_Result operator()(const _Ty *_Pleft, _Arg _Right) const
		{	
		return ((_Pleft->*_Pmemfun)(_Right));
		}

private:
	_Result (_Ty::*_Pmemfun)(_Arg) const;	
	};

		
template<class _Result,
	class _Ty> inline
	mem_fun_t<_Result, _Ty> mem_fun(_Result (_Ty::*_Pm)())
	{	
	return (mem_fun_t<_Result, _Ty>(_Pm));
	}

template<class _Result,
	class _Ty,
	class _Arg> inline
	mem_fun1_t<_Result, _Ty, _Arg> mem_fun(_Result (_Ty::*_Pm)(_Arg))
	{	
	return (mem_fun1_t<_Result, _Ty, _Arg>(_Pm));
	}

template<class _Result,
	class _Ty> inline
	const_mem_fun_t<_Result, _Ty>
		mem_fun(_Result (_Ty::*_Pm)() const)
	{	
	return (const_mem_fun_t<_Result, _Ty>(_Pm));
	}

template<class _Result,
	class _Ty,
	class _Arg> inline
	const_mem_fun1_t<_Result, _Ty, _Arg>
		mem_fun(_Result (_Ty::*_Pm)(_Arg) const)
	{	
	return (const_mem_fun1_t<_Result, _Ty, _Arg>(_Pm));
	}

		
template<class _Result,
	class _Ty,
	class _Arg> inline
	mem_fun1_t<_Result, _Ty, _Arg> mem_fun1(_Result (_Ty::*_Pm)(_Arg))
	{	
	return (mem_fun1_t<_Result, _Ty, _Arg>(_Pm));
	}

		
template<class _Result,
	class _Ty>
	class mem_fun_ref_t
		: public unary_function<_Ty, _Result>
	{	
public:
	explicit mem_fun_ref_t(_Result (_Ty::*_Pm)())
		: _Pmemfun(_Pm)
		{	
		}

	_Result operator()(_Ty& _Left) const
		{	
		return ((_Left.*_Pmemfun)());
		}

private:
	_Result (_Ty::*_Pmemfun)();	
	};

		
template<class _Result,
	class _Ty,
	class _Arg>
	class mem_fun1_ref_t
		: public binary_function<_Ty, _Arg, _Result>
	{	
public:
	explicit mem_fun1_ref_t(_Result (_Ty::*_Pm)(_Arg))
		: _Pmemfun(_Pm)
		{	
		}

	_Result operator()(_Ty& _Left, _Arg _Right) const
		{	
		return ((_Left.*_Pmemfun)(_Right));
		}

private:
	_Result (_Ty::*_Pmemfun)(_Arg);	
	};

		
template<class _Result,
	class _Ty>
	class const_mem_fun_ref_t
		: public unary_function<_Ty, _Result>
	{	
public:
	explicit const_mem_fun_ref_t(_Result (_Ty::*_Pm)() const)
		: _Pmemfun(_Pm)
		{	
		}

	_Result operator()(const _Ty& _Left) const
		{	
		return ((_Left.*_Pmemfun)());
		}

private:
	_Result (_Ty::*_Pmemfun)() const;	
	};

		
template<class _Result,
	class _Ty,
	class _Arg>
	class const_mem_fun1_ref_t
		: public binary_function<_Ty, _Arg, _Result>
	{	
public:
	explicit const_mem_fun1_ref_t(_Result (_Ty::*_Pm)(_Arg) const)
		: _Pmemfun(_Pm)
		{	
		}

	_Result operator()(const _Ty& _Left, _Arg _Right) const
		{	
		return ((_Left.*_Pmemfun)(_Right));
		}

private:
	_Result (_Ty::*_Pmemfun)(_Arg) const;	
	};

		
template<class _Result,
	class _Ty> inline
	mem_fun_ref_t<_Result, _Ty> mem_fun_ref(_Result (_Ty::*_Pm)())
	{	
	return (mem_fun_ref_t<_Result, _Ty>(_Pm));
	}

template<class _Result,
	class _Ty,
	class _Arg> inline
	mem_fun1_ref_t<_Result, _Ty, _Arg>
		mem_fun_ref(_Result (_Ty::*_Pm)(_Arg))
	{	
	return (mem_fun1_ref_t<_Result, _Ty, _Arg>(_Pm));
	}

template<class _Result,
	class _Ty> inline
	const_mem_fun_ref_t<_Result, _Ty>
		mem_fun_ref(_Result (_Ty::*_Pm)() const)
	{	
	return (const_mem_fun_ref_t<_Result, _Ty>(_Pm));
	}

template<class _Result,
	class _Ty,
	class _Arg> inline
	const_mem_fun1_ref_t<_Result, _Ty, _Arg>
		mem_fun_ref(_Result (_Ty::*_Pm)(_Arg) const)
	{	
	return (const_mem_fun1_ref_t<_Result, _Ty, _Arg>(_Pm));
	}

		
template<class _Result,
	class _Ty,
	class _Arg> inline
	mem_fun1_ref_t<_Result, _Ty, _Arg> mem_fun1_ref(_Result (_Ty::*_Pm)(_Arg))
	{	
	return (mem_fun1_ref_t<_Result, _Ty, _Arg>(_Pm));
	}
}

 
 #pragma warning(pop)
 #pragma pack(pop)
#line 929 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xfunctional"
#line 930 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xfunctional"






















#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\functional"

 #pragma pack(push,8)
 #pragma warning(push,3)
 
 



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\tuple"

#pragma once







 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 #pragma warning(disable: 4100 4521 4522)

namespace std {
	
template<class _Src,
	class _Dest>
	struct _Tuple_enable
	{	
	};

template<>
	struct _Tuple_enable<tuple<>, tuple<> >
	{	
	typedef void ** type;
	};

template<class _Src0,
	class... _Types1,
	class _Dest0,
	class... _Types2>
	struct _Tuple_enable<tuple<_Src0, _Types1...>,
		tuple<_Dest0, _Types2...> >
	: _If<is_convertible<_Src0, _Dest0>::value,
		_Tuple_enable<tuple<_Types1...>, tuple<_Types2...> >,
		_Tuple_enable<int, int>
	>::type
	{	
	};


	
class _Ignore
	{	
public:
	_Ignore()
		{	
		}

	template<class _Ty>
		void operator=(const _Ty&) const
		{	
		}
	};

const _Ignore ignore;

		
struct _Tuple_alloc_t
	{	
	};

const _Tuple_alloc_t _Tuple_alloc = _Tuple_alloc_t();

	
template<class _Ty>
	struct _Tuple_val
	{	
	_Tuple_val()
		: _Val()
		{	
		}

	template<class _Other>
		_Tuple_val(_Other&& _Arg)
		: _Val(::std:: forward<_Other>(_Arg))
		{	
		}

	template<class _Other>
		_Tuple_val& operator=(_Other&& _Right)
		{	
		_Val = ::std:: forward<_Other>(_Right);
		return (*this);
		}

	template<class _Alloc,
		class... _Other>
		_Tuple_val(const _Alloc&,
			typename enable_if<!uses_allocator<_Ty, _Alloc>::value,
				_Tuple_alloc_t>::type, _Other&&... _Arg)
		: _Val(::std:: forward<_Other>(_Arg)...)
		{	
		}

	template<class _Alloc,
		class... _Other>
		_Tuple_val(const _Alloc& _Al,
			typename enable_if<uses_allocator<_Ty, _Alloc>::value
				&& is_constructible<_Ty,
					allocator_arg_t, _Alloc>::value,
				_Tuple_alloc_t>::type, _Other&&... _Arg)
		: _Val(allocator_arg, _Al, ::std:: forward<_Other>(_Arg)...)
		{	
		}

	template<class _Alloc,
		class... _Other>
		_Tuple_val(const _Alloc& _Al,
			typename enable_if<uses_allocator<_Ty, _Alloc>::value
				&& !is_constructible<_Ty,
					allocator_arg_t, _Alloc>::value,
				_Tuple_alloc_t>::type, _Other&&... _Arg)
		: _Val(::std:: forward<_Other>(_Arg)..., _Al)
		{	
		}


	_Ty _Val;
	};

	
template<class... _Types>
	class tuple;

template<>
	class tuple<>
	{	
public:
	typedef tuple<> _Myt;

	tuple()
		{	
		}

	template<class _Alloc>
		tuple(allocator_arg_t, const _Alloc&) throw ()
		{	
		}

	tuple(const tuple&) throw ()
		{	
		}

	template<class _Alloc>
		tuple(allocator_arg_t, const _Alloc&, const tuple&) throw ()
		{	
		}

	void swap(_Myt&) throw ()
		{	
		}

	bool _Equals(const _Myt&) const throw ()
		{	
		return (true);
		}

	bool _Less(const _Myt&) const throw ()
		{	
		return (false);
		}
	};

template<class _This,
	class... _Rest>
	class tuple<_This, _Rest...>
		: private tuple<_Rest...>
	{	
public:
	typedef _This _This_type;
	typedef tuple<_This, _Rest...> _Myt;
	typedef tuple<_Rest...> _Mybase;
	static const size_t _Mysize = 1 + sizeof...(_Rest);

	tuple()
		: _Mybase(),
			_Myfirst()
		{	
		}

	template<class... _Rest2>
		explicit tuple(_Tuple_alloc_t, _Rest2&&... _Rest_arg)
			: _Mybase(::std:: forward<_Rest2>(_Rest_arg)...),
				_Myfirst(allocator_arg)
		{	
		}

	template<class... _Other,
		class = typename _Tuple_enable<
			tuple<const _Other&...>, _Myt>::type>
		tuple(const tuple<_Other...>& _Right)
		: _Mybase(_Right._Get_rest()), _Myfirst(_Right._Myfirst._Val)
		{	
		}

	template<class _Alloc,
		class... _Other,
		class = typename _Tuple_enable<
			tuple<const _Other&...>, _Myt>::type>
		tuple(allocator_arg_t, const _Alloc& _Al,
			const tuple<_Other...>& _Right)
		: _Mybase(allocator_arg, _Al, _Right._Get_rest()),
			_Myfirst(_Al, _Tuple_alloc,
				_Right._Myfirst._Val)
		{	
		}

	explicit tuple(const _This& _This_arg, const _Rest&... _Rest_arg)
		: _Mybase(_Rest_arg...),
			_Myfirst(_This_arg)
		{	
		}

	template<class _Alloc>
		tuple(allocator_arg_t, const _Alloc& _Al,
			const _This& _This_arg, const _Rest&... _Rest_arg)
		: _Mybase(allocator_arg, _Al, _Rest_arg...),
			_Myfirst(_Al, _Tuple_alloc, _This_arg)
		{	
		}

	template<class _This2,
		class... _Rest2,
		class = typename _Tuple_enable<
			tuple<_This2, _Rest2...>, _Myt>::type>
		explicit tuple(_This2&& _This_arg, _Rest2&&... _Rest_arg)
		: _Mybase(::std:: forward<_Rest2>(_Rest_arg)...),
			_Myfirst(::std:: forward<_This2>(_This_arg))
		{	
		}

	template<class _Alloc,
		class _This2,
		class... _Rest2,
		class = typename _Tuple_enable<
			tuple<_This2, _Rest2...>, _Myt>::type>
		tuple(allocator_arg_t, const _Alloc& _Al,
			_This2&& _This_arg, _Rest2&&... _Rest_arg)
		: _Mybase(allocator_arg, _Al,
				::std:: forward<_Rest2>(_Rest_arg)...),
			_Myfirst(_Al, _Tuple_alloc,
				::std:: forward<_This2>(_This_arg))
		{	
		}

	template<class... _Other,
		class = typename _Tuple_enable<
			tuple<_Other...>, _Myt>::type>
		tuple(tuple<_Other...>&& _Right)
		: _Mybase(::std:: forward<typename tuple<_Other...>::_Mybase>
			(_Right._Get_rest())),
			_Myfirst(::std:: forward<typename tuple<_Other...>::_This_type>
				(_Right._Myfirst._Val))
		{	
		}

	template<class _Alloc,
		class... _Other,
		class = typename _Tuple_enable<
			tuple<_Other...>, _Myt>::type>
		tuple(allocator_arg_t, const _Alloc& _Al,
			tuple<_Other...>&& _Right)
		: _Mybase(allocator_arg, _Al,
				::std:: forward<typename tuple<_Other...>::_Mybase>
					(_Right._Get_rest())),
			_Myfirst(_Al, _Tuple_alloc,
				::std:: forward<typename tuple<_Other...>::_This_type>
					(_Right._Myfirst._Val))
		{	
		}

	template<class... _Other>
		_Myt& operator=(const tuple<_Other...>& _Right)
		{	
		_Myfirst._Val = _Right._Myfirst._Val;
		(_Mybase&)*this = _Right._Get_rest();
		return (*this);
		}

	template<class... _Other>
		_Myt& operator=(tuple<_Other...>&& _Right)
		{	
		_Myfirst._Val = ::std:: forward<typename tuple<_Other...>::_This_type>
			(_Right._Myfirst._Val);
		(_Mybase&)*this = ::std:: forward<typename tuple<_Other...>::_Mybase>
			(_Right._Get_rest());
		return (*this);
		}

	template<class... _Other>
		bool _Equals(const tuple<_Other...>& _Right) const
		{	
		static_assert(_Mysize == sizeof...(_Other),
			"comparing tuple to object with different size");
		return (_Myfirst._Val == _Right._Myfirst._Val
			&& _Mybase::_Equals(_Right._Get_rest()));
		}

	template<class... _Other>
		bool _Less(const tuple<_Other...>& _Right) const
		{	
		static_assert(_Mysize == sizeof...(_Other),
			"comparing tuple to object with different size");
		return (_Myfirst._Val < _Right._Myfirst._Val
			|| (!(_Right._Myfirst._Val < _Myfirst._Val)
				&& _Mybase::_Less(_Right._Get_rest())));
		}

	template<class _Alloc>
		tuple(allocator_arg_t, const _Alloc& _Al)
		: _Mybase(allocator_arg, _Al),
			_Myfirst(_Al, _Tuple_alloc)
		{	
		}

	template<class _Alloc>
		tuple(allocator_arg_t, const _Alloc& _Al,
			const _Myt& _Right)
		: _Mybase(allocator_arg, _Al, _Right._Get_rest()),
			_Myfirst(_Al, _Tuple_alloc,
				_Right._Myfirst._Val)
		{	
		}

	template<class _First,
		class _Second,
		class = typename _Tuple_enable<
			tuple<const _First&, const _Second&>, _Myt>::type>
		tuple(const pair<_First, _Second>& _Right)

		: _Mybase(tuple<_Second>(_Right.second)),
			_Myfirst(_Right.first)
		{	
		
		}

	template<class _Alloc,
		class _First,
		class _Second,
		class = typename _Tuple_enable<
			tuple<const _First&, const _Second&>, _Myt>::type>
		tuple(allocator_arg_t, const _Alloc& _Al,
			const pair<_First, _Second>& _Right)

		: _Mybase(allocator_arg, _Al, tuple<_Second>(_Right.second)),
			_Myfirst(_Al, _Tuple_alloc,
				_Right.first)
		{	
		
		}

	_Myt& operator=(const _Myt& _Right)
		{	
		_Myfirst._Val = _Right._Myfirst._Val;
		(_Mybase&)*this = _Right._Get_rest();
		return (*this);
		}

	template<class _First,
		class _Second>
		_Myt& operator=(const pair<_First, _Second>& _Right)
		{	
		static_assert(_Mysize == 2,
			"assigning to tuple from object with different size");
		_Myfirst._Val = _Right.first;
		(_Mybase&)*this = tuple<_Second>(_Right.second);
		return (*this);
		}

	template<class _Alloc>
		tuple(allocator_arg_t, const _Alloc& _Al,
			_Myt&& _Right)
		: _Mybase(allocator_arg, _Al,
				::std:: forward<_Mybase>(_Right._Get_rest())),
			_Myfirst(_Al, _Tuple_alloc,
				::std:: forward<_This>(_Right._Myfirst._Val))
		{	
		}

	template<class _First,
		class _Second,
		class = typename _Tuple_enable<
			tuple<_First, _Second>, _Myt>::type>
		tuple(pair<_First, _Second>&& _Right)

		: _Mybase(tuple<_Second>(::std:: forward<_Second>(_Right.second))),
			_Myfirst(::std:: forward<_First>(_Right.first))
		{	
		
		}

	template<class _Alloc,
		class _First,
		class _Second,
		class = typename _Tuple_enable<
			tuple<_First, _Second>, _Myt>::type>
		tuple(allocator_arg_t, const _Alloc& _Al,
			pair<_First, _Second>&& _Right)

		: _Mybase(allocator_arg, _Al,
				tuple<_Second>(::std:: forward<_Second>(_Right.second))),
			_Myfirst(_Al, _Tuple_alloc,
				::std:: forward<_First>(_Right.first))
		{	
		
		}

	_Myt& operator=(_Myt&& _Right)
		
#line 415 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\tuple"
		{	
		_Myfirst = ::std:: forward<_This>(_Right._Myfirst._Val);
		(_Mybase&)*this = ::std:: forward<_Mybase>(_Right._Get_rest());
		return (*this);
		}

	template<class _First,
		class _Second>
		_Myt& operator=(pair<_First, _Second>&& _Right)
		
#line 428 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\tuple"
		{	
		static_assert(_Mysize == 2,
			"assigning to tuple from object with different size");
		_Myfirst._Val = ::std:: forward<_First>(_Right.first);
		(_Mybase&)*this =
			tuple<_Second>(::std:: forward<_Second>(_Right.second));
		return (*this);
		}

	_Mybase& _Get_rest()
		{	
		return (*this);
		}

	const _Mybase& _Get_rest() const
		{	
		return (*this);
		}

	void swap(tuple& _Right)
		
#line 451 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\tuple"
		{	
		_Swap_adl(_Myfirst._Val, _Right._Myfirst._Val);
		_Mybase::swap((_Mybase&)_Right);
		}

	_Tuple_val<_This> _Myfirst;	
	};


	

template<class... _Types1,
	class... _Types2> inline
	bool operator==(const tuple<_Types1...>& _Left,
		const tuple<_Types2...>& _Right)
	{	
	return (_Left._Equals(_Right));
	}

template<class... _Types1,
	class... _Types2> inline
	bool operator!=(const tuple<_Types1...>& _Left,
		const tuple<_Types2...>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class... _Types1,
	class... _Types2> inline
	bool operator<(const tuple<_Types1...>& _Left,
		const tuple<_Types2...>& _Right)
	{	
	return (_Left._Less(_Right));
	}

template<class... _Types1,
	class... _Types2> inline
	bool operator>=(const tuple<_Types1...>& _Left,
		const tuple<_Types2...>& _Right)
	{	
	return (!(_Left < _Right));
	}

template<class... _Types1,
	class... _Types2> inline
	bool operator>(const tuple<_Types1...>& _Left,
		const tuple<_Types2...>& _Right)
	{	
	return (_Right < _Left);
	}

template<class... _Types1,
	class... _Types2> inline
	bool operator<=(const tuple<_Types1...>& _Left,
		const tuple<_Types2...>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class... _Types> inline
	void swap(tuple<_Types...>& _Left,
		tuple<_Types...>& _Right)
			
	{	
	return (_Left.swap(_Right));
	}


	
template<size_t _Index,
	class _Tuple>
	struct tuple_element;

template<class _This,
	class... _Rest>
	struct tuple_element<0, tuple<_This, _Rest...> >
	{	
	typedef _This type;
	typedef typename add_lvalue_reference<const _This>::type _Ctype;
	typedef typename add_lvalue_reference<_This>::type _Rtype;
	typedef typename add_rvalue_reference<_This>::type _RRtype;
	typedef tuple<_This, _Rest...> _Ttype;
	};

template<size_t _Index,
	class _This,
	class... _Rest>
	struct tuple_element<_Index, tuple<_This, _Rest...> >
		: public tuple_element<_Index - 1, tuple<_Rest...> >
	{	
	};


template<size_t _Index,
	class _Tuple>
	struct tuple_element<_Index, const _Tuple>
	: public tuple_element<_Index, _Tuple>
	{	
	typedef tuple_element<_Index, _Tuple> _Mybase;
	typedef typename add_const<typename _Mybase::type>::type type;
	};

template<size_t _Index,
	class _Tuple>
	struct tuple_element<_Index, volatile _Tuple>
	: public tuple_element<_Index, _Tuple>
	{	
	typedef tuple_element<_Index, _Tuple> _Mybase;
	typedef typename add_volatile<typename _Mybase::type>::type type;
	};

template<size_t _Index,
	class _Tuple>
	struct tuple_element<_Index, const volatile _Tuple>
	: public tuple_element<_Index, _Tuple>
	{	
	typedef tuple_element<_Index, _Tuple> _Mybase;
	typedef typename add_cv<typename _Mybase::type>::type type;
	};

	
template<size_t _Index,
	class... _Types> inline
	typename tuple_element<_Index, tuple<_Types...> >::_Rtype
		get(tuple<_Types...>& _Tuple)
	{	
	typedef typename tuple_element<_Index, tuple<_Types...> >::_Ttype
		_Ttype;
	return (((_Ttype&)_Tuple)._Myfirst._Val);
	}

template<size_t _Index,
	class... _Types> inline
	typename tuple_element<_Index, tuple<_Types...> >::_Ctype
		get(const tuple<_Types...>& _Tuple)
	{	
	typedef typename tuple_element<_Index, tuple<_Types...> >::_Ttype
		_Ttype;
	return (((_Ttype&)_Tuple)._Myfirst._Val);
	}

template<size_t _Index,
	class... _Types> inline
	typename tuple_element<_Index, tuple<_Types...> >::_RRtype
		get(tuple<_Types...>&& _Tuple)
	{	
	typedef typename tuple_element<_Index, tuple<_Types...> >::_Ttype
		_Ttype;
	typedef typename tuple_element<_Index, tuple<_Types...> >::_RRtype
		_RRtype;
	return (::std:: forward<_RRtype>(((_Ttype&)_Tuple)._Myfirst._Val));
	}

	
template<class... _Types> inline
	tuple<typename _Unrefwrap<_Types>::type...>
		make_tuple(_Types&&... _Args)
	{	
	typedef tuple<typename _Unrefwrap<_Types>::type...> _Ttype;
	return (_Ttype(::std:: forward<_Types>(_Args)...));
	}

	
template<class... _Types> inline
	tuple<_Types&...>
		tie(_Types&... _Args) throw ()
	{	
	typedef tuple<_Types&...> _Ttype;
	return (_Ttype(_Args...));
	}


	

template<class... _Types> inline
	tuple<_Types&&...>
		forward_as_tuple(_Types&&... _Args) throw ()
	{	
	return (tuple<_Types&&...>(::std:: forward<_Types>(_Args)...));
	}


	
template<class _Arg_idx_type,
	class... _Types>
	struct _Make_arg_idx1
	{	
	typedef _Arg_idx_type type;
	};

template<size_t... _Indexes,
	class _Ty,
	class... _Types>
	struct _Make_arg_idx1<_Arg_idx<_Indexes...>, _Ty, _Types...>
		: _Make_arg_idx1<_Arg_idx<sizeof...(_Types), _Indexes...>, _Types...>
	{	
	};

template<class... _Types>
	struct _Make_arg_idx
		: _Make_arg_idx1<_Arg_idx<>, _Types...>
	{	
	};

template<class _Arg_idx_type1,
	class _Arg_idx_type2>
	struct _Cat_arg_idx;

template<size_t... _Indexes1,
	size_t... _Indexes2>
	struct _Cat_arg_idx<_Arg_idx<_Indexes1...>, _Arg_idx<_Indexes2...> >
	{	
	typedef _Arg_idx<_Indexes1..., _Indexes2...> type;
	};

template<size_t _Nx,
	class _Ty>
	struct _Repeat_for
		: integral_constant<size_t, _Nx>
	{	
	};

	
template<class _Ret,
	class _Kx_arg,
	class _Ix_arg,
	size_t _Ix_next,
	class... _Tuples>
	struct _Tuple_cat2
	{	
	static_assert(sizeof...(_Tuples) == 0,
		"Unsupported tuple_cat arguments.");
	typedef _Ret type;
	typedef _Kx_arg _Kx_arg_idx;
	typedef _Ix_arg _Ix_arg_idx;
	};

template<class... _Types1,
	class _Kx_arg,
	size_t... _Ix,
	size_t _Ix_next,
	class... _Types2,
	class... _Rest>
	struct _Tuple_cat2<tuple<_Types1...>, _Kx_arg, _Arg_idx<_Ix...>, _Ix_next,
		tuple<_Types2...>, _Rest...>
		: _Tuple_cat2<
			tuple<_Types1..., _Types2...>,
			typename _Cat_arg_idx<_Kx_arg,
				typename _Make_arg_idx<_Types2...>::type>::type,
			_Arg_idx<_Ix..., _Repeat_for<_Ix_next, _Types2>::value...>,
			_Ix_next + 1,
			_Rest...>
	{	
	};

template<class... _Tuples>
	struct _Tuple_cat1
		: _Tuple_cat2<tuple<>, _Arg_idx<>, _Arg_idx<>, 0,
			typename decay<_Tuples>::type...>
	{	
	};

template<class _Ret,
	size_t... _Kx,
	size_t... _Ix,
	class _Ty> inline
	_Ret _Tuple_cat(_Arg_idx<_Kx...>, _Arg_idx<_Ix...>, _Ty&& _Arg)
	{	
	return (_Ret(::std:: get<_Kx>(::std:: get<_Ix>(::std:: forward<_Ty>(_Arg)))...));
	}

template<class... _Tuples> inline
	typename _Tuple_cat1<_Tuples...>::type
		tuple_cat(_Tuples&&... _Tpls)
	{	
	typedef _Tuple_cat1<_Tuples...> _Cat1;
	return (_Tuple_cat<typename _Cat1::type>(
		typename _Cat1::_Kx_arg_idx(), typename _Cat1::_Ix_arg_idx(),
		::std:: forward_as_tuple(::std:: forward<_Tuples>(_Tpls)...)));
	}


	
template<class _Ty1,
	class _Ty2>
	template<class _Tuple1,
		class _Tuple2,
		size_t... _Indexes1,
		size_t... _Indexes2> inline
		pair<_Ty1, _Ty2>::pair(_Tuple1& _Val1,
			_Tuple2& _Val2,
			_Arg_idx<_Indexes1...>,
			_Arg_idx<_Indexes2...>)
		: first(::std:: get<_Indexes1>(::std:: move(_Val1))...),
			second(::std:: get<_Indexes2>(::std:: move(_Val2))...)
		{	
		}

	
template<class _Ty1,
	class _Ty2>
	template<class... _Types1,
		class... _Types2> inline
		pair<_Ty1, _Ty2>::pair(piecewise_construct_t,
			tuple<_Types1...> _Val1,
			tuple<_Types2...> _Val2)
			
#line 759 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\tuple"
		: pair(_Val1, _Val2,
			typename _Make_arg_idx<_Types1...>::type(),
			typename _Make_arg_idx<_Types2...>::type())
		{	
		}
}

namespace std {
	
template<class... _Types,
	class _Alloc>
	struct uses_allocator<tuple<_Types...>, _Alloc>
		: true_type
	{	
	};

}	

namespace std {
namespace tr1 {	
using ::std:: get;
using ::std:: ignore;
using ::std:: make_tuple;
using ::std:: ref;
using ::std:: tie;
using ::std:: tuple;
using ::std:: tuple_element;
}	
}

 
 #pragma warning(pop)
 #pragma pack(pop)
#line 793 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\tuple"
#line 794 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\tuple"





#line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\functional"

 #pragma warning(disable: 4100 4180 4244 4521 4522)

namespace std {

	
template<class _Rx,
	class _Arg0>
	_Call_wrapper<_Callable_pmd<_Rx _Arg0::*const, _Arg0> >
		mem_fn(_Rx _Arg0::*const _Pmd)
	{	
	return (_Call_wrapper<_Callable_pmd<_Rx _Arg0::*const, _Arg0> >(_Pmd));
	}

	
template<class _Rx,
	class _Pmf,
	class _Arg0,
	class... _Types>
	class _Mem_fn_wrap
		: public _Call_wrapper<_Callable_pmf<_Pmf, _Arg0> >,
			public _Fun_class_base<_Rx, _Arg0 *, _Types...>
	{	
public:
	typedef _Rx result_type;
	typedef _Arg0 *argument_type;

	_Mem_fn_wrap(_Pmf _Fx)
		: _Call_wrapper<_Callable_pmf<_Pmf, _Arg0> >(_Fx)
		{	
		}
	};

template<class _Rx,
	class _Pmf,
	class _Arg0,
	class _Arg1>
	class _Mem_fn_wrap<_Rx, _Pmf, _Arg0, _Arg1>
		: public _Call_wrapper<_Callable_pmf<_Pmf, _Arg0> >,
			public _Fun_class_base<_Rx, _Arg0 *, _Arg1>
	{	
public:
	typedef _Rx result_type;
	typedef _Arg0 *first_argument_type;
	typedef _Arg1 second_argument_type;

	_Mem_fn_wrap(_Pmf _Fx)
		: _Call_wrapper<_Callable_pmf<_Pmf, _Arg0> >(_Fx)
		{	
		}
	};

	












template<class _Rx, class _Arg0, class... _Types> _Mem_fn_wrap<_Rx, _Rx(__thiscall _Arg0::*)(_Types...) ,  _Arg0, _Types...> mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Types...) ) { return (_Mem_fn_wrap<_Rx, _Rx(__thiscall _Arg0::*)(_Types...) ,  _Arg0, _Types...>(_Pm)); } template<class _Rx, class _Arg0, class... _Types> _Mem_fn_wrap<_Rx, _Rx(__cdecl _Arg0::*)(_Types...) ,  _Arg0, _Types...> mem_fn(_Rx(__cdecl _Arg0::*_Pm)(_Types...) ) { return (_Mem_fn_wrap<_Rx, _Rx(__cdecl _Arg0::*)(_Types...) ,  _Arg0, _Types...>(_Pm)); } template<class _Rx, class _Arg0, class... _Types> _Mem_fn_wrap<_Rx, _Rx(__stdcall _Arg0::*)(_Types...) ,  _Arg0, _Types...> mem_fn(_Rx(__stdcall _Arg0::*_Pm)(_Types...) ) { return (_Mem_fn_wrap<_Rx, _Rx(__stdcall _Arg0::*)(_Types...) ,  _Arg0, _Types...>(_Pm)); } template<class _Rx, class _Arg0, class... _Types> _Mem_fn_wrap<_Rx, _Rx(__fastcall _Arg0::*)(_Types...) ,  _Arg0, _Types...> mem_fn(_Rx(__fastcall _Arg0::*_Pm)(_Types...) ) { return (_Mem_fn_wrap<_Rx, _Rx(__fastcall _Arg0::*)(_Types...) ,  _Arg0, _Types...>(_Pm)); } template<class _Rx, class _Arg0, class... _Types> _Mem_fn_wrap<_Rx, _Rx(__thiscall _Arg0::*)(_Types...) const, const _Arg0, _Types...> mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Types...) const) { return (_Mem_fn_wrap<_Rx, _Rx(__thiscall _Arg0::*)(_Types...) const, const _Arg0, _Types...>(_Pm)); } template<class _Rx, class _Arg0, class... _Types> _Mem_fn_wrap<_Rx, _Rx(__cdecl _Arg0::*)(_Types...) const, const _Arg0, _Types...> mem_fn(_Rx(__cdecl _Arg0::*_Pm)(_Types...) const) { return (_Mem_fn_wrap<_Rx, _Rx(__cdecl _Arg0::*)(_Types...) const, const _Arg0, _Types...>(_Pm)); } template<class _Rx, class _Arg0, class... _Types> _Mem_fn_wrap<_Rx, _Rx(__stdcall _Arg0::*)(_Types...) const, const _Arg0, _Types...> mem_fn(_Rx(__stdcall _Arg0::*_Pm)(_Types...) const) { return (_Mem_fn_wrap<_Rx, _Rx(__stdcall _Arg0::*)(_Types...) const, const _Arg0, _Types...>(_Pm)); } template<class _Rx, class _Arg0, class... _Types> _Mem_fn_wrap<_Rx, _Rx(__fastcall _Arg0::*)(_Types...) const, const _Arg0, _Types...> mem_fn(_Rx(__fastcall _Arg0::*_Pm)(_Types...) const) { return (_Mem_fn_wrap<_Rx, _Rx(__fastcall _Arg0::*)(_Types...) const, const _Arg0, _Types...>(_Pm)); } template<class _Rx, class _Arg0, class... _Types> _Mem_fn_wrap<_Rx, _Rx(__thiscall _Arg0::*)(_Types...) volatile, volatile _Arg0, _Types...> mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Types...) volatile) { return (_Mem_fn_wrap<_Rx, _Rx(__thiscall _Arg0::*)(_Types...) volatile, volatile _Arg0, _Types...>(_Pm)); } template<class _Rx, class _Arg0, class... _Types> _Mem_fn_wrap<_Rx, _Rx(__cdecl _Arg0::*)(_Types...) volatile, volatile _Arg0, _Types...> mem_fn(_Rx(__cdecl _Arg0::*_Pm)(_Types...) volatile) { return (_Mem_fn_wrap<_Rx, _Rx(__cdecl _Arg0::*)(_Types...) volatile, volatile _Arg0, _Types...>(_Pm)); } template<class _Rx, class _Arg0, class... _Types> _Mem_fn_wrap<_Rx, _Rx(__stdcall _Arg0::*)(_Types...) volatile, volatile _Arg0, _Types...> mem_fn(_Rx(__stdcall _Arg0::*_Pm)(_Types...) volatile) { return (_Mem_fn_wrap<_Rx, _Rx(__stdcall _Arg0::*)(_Types...) volatile, volatile _Arg0, _Types...>(_Pm)); } template<class _Rx, class _Arg0, class... _Types> _Mem_fn_wrap<_Rx, _Rx(__fastcall _Arg0::*)(_Types...) volatile, volatile _Arg0, _Types...> mem_fn(_Rx(__fastcall _Arg0::*_Pm)(_Types...) volatile) { return (_Mem_fn_wrap<_Rx, _Rx(__fastcall _Arg0::*)(_Types...) volatile, volatile _Arg0, _Types...>(_Pm)); } template<class _Rx, class _Arg0, class... _Types> _Mem_fn_wrap<_Rx, _Rx(__thiscall _Arg0::*)(_Types...) const volatile, const volatile _Arg0, _Types...> mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Types...) const volatile) { return (_Mem_fn_wrap<_Rx, _Rx(__thiscall _Arg0::*)(_Types...) const volatile, const volatile _Arg0, _Types...>(_Pm)); } template<class _Rx, class _Arg0, class... _Types> _Mem_fn_wrap<_Rx, _Rx(__cdecl _Arg0::*)(_Types...) const volatile, const volatile _Arg0, _Types...> mem_fn(_Rx(__cdecl _Arg0::*_Pm)(_Types...) const volatile) { return (_Mem_fn_wrap<_Rx, _Rx(__cdecl _Arg0::*)(_Types...) const volatile, const volatile _Arg0, _Types...>(_Pm)); } template<class _Rx, class _Arg0, class... _Types> _Mem_fn_wrap<_Rx, _Rx(__stdcall _Arg0::*)(_Types...) const volatile, const volatile _Arg0, _Types...> mem_fn(_Rx(__stdcall _Arg0::*_Pm)(_Types...) const volatile) { return (_Mem_fn_wrap<_Rx, _Rx(__stdcall _Arg0::*)(_Types...) const volatile, const volatile _Arg0, _Types...>(_Pm)); } template<class _Rx, class _Arg0, class... _Types> _Mem_fn_wrap<_Rx, _Rx(__fastcall _Arg0::*)(_Types...) const volatile, const volatile _Arg0, _Types...> mem_fn(_Rx(__fastcall _Arg0::*_Pm)(_Types...) const volatile) { return (_Mem_fn_wrap<_Rx, _Rx(__fastcall _Arg0::*)(_Types...) const volatile, const volatile _Arg0, _Types...>(_Pm)); }


 
























#line 110 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\functional"




	
class bad_function_call
	: public ::std:: exception
	{	
public:
	explicit bad_function_call(const char * = 0) throw ()
		{	
		}

	virtual const char * what() const throw ()
		{	
		return ("bad function call");
		}
	};

 __declspec(noreturn) void __cdecl _Xbad_function_call();

	
template<class _Rx,
	class... _Types>
	class _Func_base
	{	
public:
	typedef _Func_base<_Rx, _Types...> _Myt;

	virtual _Myt *_Copy(void *) = 0;
	virtual _Myt *_Move(void *) = 0;
	virtual _Rx _Do_call(_Types&&...) = 0;
	virtual const  type_info& _Target_type() const = 0;
	virtual void _Delete_this(bool) = 0;

	const void *_Target(const  type_info& _Info) const
		{	
		return (_Target_type() == _Info ? _Get() : 0);
		}

	virtual ~_Func_base() throw ()
		{	
		}

private:
	virtual const void *_Get() const = 0;
	};

	
template<class _Callable,
	class _Alloc,
	class _Rx,
	class... _Types>
	class _Func_impl
		: public _Func_base<_Rx, _Types...>
	{	
public:
	typedef _Func_impl<_Callable, _Alloc, _Rx, _Types...> _Myt;
	typedef _Func_base<_Rx, _Types...> _Mybase;
	typedef typename _Alloc::template rebind<_Func_impl>::other _Myalty;

	_Func_impl(const _Func_impl& _Right)
		: _Callee(_Right._Callee),
			_Myal(_Right._Myal)
		{	
		}

	_Func_impl(_Func_impl& _Right)
		: _Callee(_Right._Callee),
			_Myal(_Right._Myal)
		{	
		}

	_Func_impl(_Func_impl&& _Right)
		: _Callee(::std:: forward<_Callable>(_Right._Callee)),
			_Myal(_Right._Myal)
		{	
		}

	_Func_impl(typename _Callable::_MyTy&& _Val,
		const _Myalty& _Ax = _Myalty())
		: _Callee(::std:: forward<typename _Callable::_MyTy>(_Val)), _Myal(_Ax)
		{	
		}

	template<class _Other>
		_Func_impl(_Other&& _Val,
			const typename enable_if<!is_same<_Myt,
				typename remove_cv<
					typename remove_reference<_Other>::type>::type>::value,
				_Myalty>::type& _Ax = _Myalty())
		: _Callee(::std:: forward<_Other>(_Val)), _Myal(_Ax)
		{	
		}

	virtual _Mybase *_Copy(void *_Where)
		{	
		if (_Where == 0)
			_Where = _Myal.allocate(1);
		::new (_Where) _Myt(*this);
		return ((_Mybase *)_Where);
		}

	virtual _Mybase *_Move(void *_Where)
		{	
		if (_Where == 0)
			_Where = _Myal.allocate(1);
		::new (_Where) _Myt(::std:: move(*this));
		return ((_Mybase *)_Where);
		}

	virtual ~_Func_impl() throw ()
		{	
		}

	virtual _Rx _Do_call(_Types&&... _Args)
		{	
		return (_Callee.template _ApplyX<_Rx>(
			::std:: forward<_Types>(_Args)...));
		}

	virtual const  type_info& _Target_type() const
		{	
		return (typeid(typename _Callable::_MyTy));
		}

private:
	virtual const void *_Get() const
		{	
		return (reinterpret_cast<const void*>(&_Callee._Get()));
		}

	virtual void _Delete_this(bool _Deallocate)
		{	
		_Myalty _Al = _Myal;
		_Al.destroy(this);
		if (_Deallocate)
			_Al.deallocate(this, 1);
		}

	_Callable _Callee;
	_Myalty _Myal;
	};

	
template<class _Ret,
	class... _Types>
	class _Func_class
		: public _Fun_class_base<_Ret, _Types...>
	{	
public:
	typedef _Func_class<_Ret, _Types...> _Myt;
	typedef _Func_base<_Ret, _Types...> _Ptrt;
	typedef _Ret result_type;

	_Ret operator()(_Types... _Args) const
		{	
		if (_Impl == 0)
			_Xbad_function_call();
		return (_Impl->_Do_call(::std:: forward<_Types>(_Args)...));
		}

	bool _Empty() const
		{	
		return (_Impl == 0);
		}

	~_Func_class() throw ()
		{	
		_Tidy();
		}

protected:
	void _Reset()
		{	
		_Set(0);
		}

	void _Reset(const _Myt& _Right)
		{	
		if (_Right._Impl == 0)
			_Set(0);
		else if (_Right._Local())
			_Set(_Right._Impl->_Copy((void *)&_Space));
		else
			_Set(_Right._Impl->_Copy(0));
		}

	void _Resetm(_Myt&& _Right)
		{	
		if (_Right._Impl == 0)
			_Set(0);
		else if (_Right._Local())
			{	
			_Set(_Right._Impl->_Move((void *)&_Space));
			_Right._Tidy();
			}
		else
			{	
			_Set(_Right._Impl);
			_Right._Set(0);
			}
		}




















template<class _Fret, class... _Ftypes> void _Reset(_Fret (__cdecl *const _Val)(_Ftypes&&... _Fargs)) { _Reset_alloc(_Val, allocator<_Myt>()); } template<class _Fret, class... _Ftypes, class _Alloc> void _Reset_alloc(_Fret (__cdecl *const _Val)(_Ftypes&&... _Fargs), _Alloc _Ax) { typedef _Callable_fun<_Fret (__cdecl *const)(_Ftypes&&...)> _MyWrapper; typedef _Func_impl<_MyWrapper, _Alloc, _Ret, _Types...> _Myimpl; _Do_alloc<_Myimpl>(_Val, _Ax); } template<class _Fret, class... _Ftypes> void _Reset(_Fret (__stdcall *const _Val)(_Ftypes&&... _Fargs)) { _Reset_alloc(_Val, allocator<_Myt>()); } template<class _Fret, class... _Ftypes, class _Alloc> void _Reset_alloc(_Fret (__stdcall *const _Val)(_Ftypes&&... _Fargs), _Alloc _Ax) { typedef _Callable_fun<_Fret (__stdcall *const)(_Ftypes&&...)> _MyWrapper; typedef _Func_impl<_MyWrapper, _Alloc, _Ret, _Types...> _Myimpl; _Do_alloc<_Myimpl>(_Val, _Ax); } template<class _Fret, class... _Ftypes> void _Reset(_Fret (__fastcall *const _Val)(_Ftypes&&... _Fargs)) { _Reset_alloc(_Val, allocator<_Myt>()); } template<class _Fret, class... _Ftypes, class _Alloc> void _Reset_alloc(_Fret (__fastcall *const _Val)(_Ftypes&&... _Fargs), _Alloc _Ax) { typedef _Callable_fun<_Fret (__fastcall *const)(_Ftypes&&...)> _MyWrapper; typedef _Func_impl<_MyWrapper, _Alloc, _Ret, _Types...> _Myimpl; _Do_alloc<_Myimpl>(_Val, _Ax); }


	template<class _Fty>
		void _Reset(_Fty&& _Val)
		{	
		_Reset_alloc(::std:: forward<_Fty>(_Val), allocator<_Myt>());
		}

	template<class _Fty,
		class _Alloc>
		void _Reset_alloc(_Fty&& _Val, _Alloc _Ax)
		{	
		typedef _Callable_obj<typename decay<_Fty>::type>
			_MyWrapper;
		typedef _Func_impl<_MyWrapper, _Alloc, _Ret, _Types...> _Myimpl;

		_Do_alloc<_Myimpl>(::std:: forward<_Fty>(_Val), _Ax);
		}

	template<class _Fret,
		class _Farg0>
		void _Reset(_Fret _Farg0::*const _Val)
		{	
		_Reset_alloc(_Val, allocator<_Myt>());
		}

	template<class _Fret,
		class _Farg0,
		class _Alloc>
		void _Reset_alloc(_Fret _Farg0::*const _Val, _Alloc _Ax)
		{	
		typedef _Callable_pmd<_Fret _Farg0::*const, _Farg0>
			_MyWrapper;
		typedef _Func_impl<_MyWrapper, _Alloc, _Ret, _Farg0>
			_Myimpl;

		_Do_alloc<_Myimpl>(_Val, _Ax);
		}
























template<class _Fret, class _Farg0, class... _Ftypes> void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Ftypes...) ) { _Reset_alloc(_Val, allocator<_Myt>()); } template<class _Fret, class _Farg0, class... _Ftypes, class _Alloc> void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(_Ftypes...) , _Alloc _Ax) { typedef _Callable_pmf< _Fret (__thiscall _Farg0::*const)(_Ftypes...) , _Farg0> _MyWrapper; typedef _Func_impl<_MyWrapper, _Alloc, _Ret, _Farg0, _Ftypes...> _Myimpl; _Do_alloc<_Myimpl>(_Val, _Ax); } template<class _Fret, class _Farg0, class... _Ftypes> void _Reset(_Fret (__cdecl _Farg0::*const _Val)(_Ftypes...) ) { _Reset_alloc(_Val, allocator<_Myt>()); } template<class _Fret, class _Farg0, class... _Ftypes, class _Alloc> void _Reset_alloc(_Fret (__cdecl _Farg0::*const _Val)(_Ftypes...) , _Alloc _Ax) { typedef _Callable_pmf< _Fret (__cdecl _Farg0::*const)(_Ftypes...) , _Farg0> _MyWrapper; typedef _Func_impl<_MyWrapper, _Alloc, _Ret, _Farg0, _Ftypes...> _Myimpl; _Do_alloc<_Myimpl>(_Val, _Ax); } template<class _Fret, class _Farg0, class... _Ftypes> void _Reset(_Fret (__stdcall _Farg0::*const _Val)(_Ftypes...) ) { _Reset_alloc(_Val, allocator<_Myt>()); } template<class _Fret, class _Farg0, class... _Ftypes, class _Alloc> void _Reset_alloc(_Fret (__stdcall _Farg0::*const _Val)(_Ftypes...) , _Alloc _Ax) { typedef _Callable_pmf< _Fret (__stdcall _Farg0::*const)(_Ftypes...) , _Farg0> _MyWrapper; typedef _Func_impl<_MyWrapper, _Alloc, _Ret, _Farg0, _Ftypes...> _Myimpl; _Do_alloc<_Myimpl>(_Val, _Ax); } template<class _Fret, class _Farg0, class... _Ftypes> void _Reset(_Fret (__fastcall _Farg0::*const _Val)(_Ftypes...) ) { _Reset_alloc(_Val, allocator<_Myt>()); } template<class _Fret, class _Farg0, class... _Ftypes, class _Alloc> void _Reset_alloc(_Fret (__fastcall _Farg0::*const _Val)(_Ftypes...) , _Alloc _Ax) { typedef _Callable_pmf< _Fret (__fastcall _Farg0::*const)(_Ftypes...) , _Farg0> _MyWrapper; typedef _Func_impl<_MyWrapper, _Alloc, _Ret, _Farg0, _Ftypes...> _Myimpl; _Do_alloc<_Myimpl>(_Val, _Ax); } template<class _Fret, class _Farg0, class... _Ftypes> void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Ftypes...) const) { _Reset_alloc(_Val, allocator<_Myt>()); } template<class _Fret, class _Farg0, class... _Ftypes, class _Alloc> void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(_Ftypes...) const, _Alloc _Ax) { typedef _Callable_pmf< _Fret (__thiscall _Farg0::*const)(_Ftypes...) const, _Farg0> _MyWrapper; typedef _Func_impl<_MyWrapper, _Alloc, _Ret, _Farg0, _Ftypes...> _Myimpl; _Do_alloc<_Myimpl>(_Val, _Ax); } template<class _Fret, class _Farg0, class... _Ftypes> void _Reset(_Fret (__cdecl _Farg0::*const _Val)(_Ftypes...) const) { _Reset_alloc(_Val, allocator<_Myt>()); } template<class _Fret, class _Farg0, class... _Ftypes, class _Alloc> void _Reset_alloc(_Fret (__cdecl _Farg0::*const _Val)(_Ftypes...) const, _Alloc _Ax) { typedef _Callable_pmf< _Fret (__cdecl _Farg0::*const)(_Ftypes...) const, _Farg0> _MyWrapper; typedef _Func_impl<_MyWrapper, _Alloc, _Ret, _Farg0, _Ftypes...> _Myimpl; _Do_alloc<_Myimpl>(_Val, _Ax); } template<class _Fret, class _Farg0, class... _Ftypes> void _Reset(_Fret (__stdcall _Farg0::*const _Val)(_Ftypes...) const) { _Reset_alloc(_Val, allocator<_Myt>()); } template<class _Fret, class _Farg0, class... _Ftypes, class _Alloc> void _Reset_alloc(_Fret (__stdcall _Farg0::*const _Val)(_Ftypes...) const, _Alloc _Ax) { typedef _Callable_pmf< _Fret (__stdcall _Farg0::*const)(_Ftypes...) const, _Farg0> _MyWrapper; typedef _Func_impl<_MyWrapper, _Alloc, _Ret, _Farg0, _Ftypes...> _Myimpl; _Do_alloc<_Myimpl>(_Val, _Ax); } template<class _Fret, class _Farg0, class... _Ftypes> void _Reset(_Fret (__fastcall _Farg0::*const _Val)(_Ftypes...) const) { _Reset_alloc(_Val, allocator<_Myt>()); } template<class _Fret, class _Farg0, class... _Ftypes, class _Alloc> void _Reset_alloc(_Fret (__fastcall _Farg0::*const _Val)(_Ftypes...) const, _Alloc _Ax) { typedef _Callable_pmf< _Fret (__fastcall _Farg0::*const)(_Ftypes...) const, _Farg0> _MyWrapper; typedef _Func_impl<_MyWrapper, _Alloc, _Ret, _Farg0, _Ftypes...> _Myimpl; _Do_alloc<_Myimpl>(_Val, _Ax); } template<class _Fret, class _Farg0, class... _Ftypes> void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Ftypes...) volatile) { _Reset_alloc(_Val, allocator<_Myt>()); } template<class _Fret, class _Farg0, class... _Ftypes, class _Alloc> void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(_Ftypes...) volatile, _Alloc _Ax) { typedef _Callable_pmf< _Fret (__thiscall _Farg0::*const)(_Ftypes...) volatile, _Farg0> _MyWrapper; typedef _Func_impl<_MyWrapper, _Alloc, _Ret, _Farg0, _Ftypes...> _Myimpl; _Do_alloc<_Myimpl>(_Val, _Ax); } template<class _Fret, class _Farg0, class... _Ftypes> void _Reset(_Fret (__cdecl _Farg0::*const _Val)(_Ftypes...) volatile) { _Reset_alloc(_Val, allocator<_Myt>()); } template<class _Fret, class _Farg0, class... _Ftypes, class _Alloc> void _Reset_alloc(_Fret (__cdecl _Farg0::*const _Val)(_Ftypes...) volatile, _Alloc _Ax) { typedef _Callable_pmf< _Fret (__cdecl _Farg0::*const)(_Ftypes...) volatile, _Farg0> _MyWrapper; typedef _Func_impl<_MyWrapper, _Alloc, _Ret, _Farg0, _Ftypes...> _Myimpl; _Do_alloc<_Myimpl>(_Val, _Ax); } template<class _Fret, class _Farg0, class... _Ftypes> void _Reset(_Fret (__stdcall _Farg0::*const _Val)(_Ftypes...) volatile) { _Reset_alloc(_Val, allocator<_Myt>()); } template<class _Fret, class _Farg0, class... _Ftypes, class _Alloc> void _Reset_alloc(_Fret (__stdcall _Farg0::*const _Val)(_Ftypes...) volatile, _Alloc _Ax) { typedef _Callable_pmf< _Fret (__stdcall _Farg0::*const)(_Ftypes...) volatile, _Farg0> _MyWrapper; typedef _Func_impl<_MyWrapper, _Alloc, _Ret, _Farg0, _Ftypes...> _Myimpl; _Do_alloc<_Myimpl>(_Val, _Ax); } template<class _Fret, class _Farg0, class... _Ftypes> void _Reset(_Fret (__fastcall _Farg0::*const _Val)(_Ftypes...) volatile) { _Reset_alloc(_Val, allocator<_Myt>()); } template<class _Fret, class _Farg0, class... _Ftypes, class _Alloc> void _Reset_alloc(_Fret (__fastcall _Farg0::*const _Val)(_Ftypes...) volatile, _Alloc _Ax) { typedef _Callable_pmf< _Fret (__fastcall _Farg0::*const)(_Ftypes...) volatile, _Farg0> _MyWrapper; typedef _Func_impl<_MyWrapper, _Alloc, _Ret, _Farg0, _Ftypes...> _Myimpl; _Do_alloc<_Myimpl>(_Val, _Ax); } template<class _Fret, class _Farg0, class... _Ftypes> void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Ftypes...) const volatile) { _Reset_alloc(_Val, allocator<_Myt>()); } template<class _Fret, class _Farg0, class... _Ftypes, class _Alloc> void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(_Ftypes...) const volatile, _Alloc _Ax) { typedef _Callable_pmf< _Fret (__thiscall _Farg0::*const)(_Ftypes...) const volatile, _Farg0> _MyWrapper; typedef _Func_impl<_MyWrapper, _Alloc, _Ret, _Farg0, _Ftypes...> _Myimpl; _Do_alloc<_Myimpl>(_Val, _Ax); } template<class _Fret, class _Farg0, class... _Ftypes> void _Reset(_Fret (__cdecl _Farg0::*const _Val)(_Ftypes...) const volatile) { _Reset_alloc(_Val, allocator<_Myt>()); } template<class _Fret, class _Farg0, class... _Ftypes, class _Alloc> void _Reset_alloc(_Fret (__cdecl _Farg0::*const _Val)(_Ftypes...) const volatile, _Alloc _Ax) { typedef _Callable_pmf< _Fret (__cdecl _Farg0::*const)(_Ftypes...) const volatile, _Farg0> _MyWrapper; typedef _Func_impl<_MyWrapper, _Alloc, _Ret, _Farg0, _Ftypes...> _Myimpl; _Do_alloc<_Myimpl>(_Val, _Ax); } template<class _Fret, class _Farg0, class... _Ftypes> void _Reset(_Fret (__stdcall _Farg0::*const _Val)(_Ftypes...) const volatile) { _Reset_alloc(_Val, allocator<_Myt>()); } template<class _Fret, class _Farg0, class... _Ftypes, class _Alloc> void _Reset_alloc(_Fret (__stdcall _Farg0::*const _Val)(_Ftypes...) const volatile, _Alloc _Ax) { typedef _Callable_pmf< _Fret (__stdcall _Farg0::*const)(_Ftypes...) const volatile, _Farg0> _MyWrapper; typedef _Func_impl<_MyWrapper, _Alloc, _Ret, _Farg0, _Ftypes...> _Myimpl; _Do_alloc<_Myimpl>(_Val, _Ax); } template<class _Fret, class _Farg0, class... _Ftypes> void _Reset(_Fret (__fastcall _Farg0::*const _Val)(_Ftypes...) const volatile) { _Reset_alloc(_Val, allocator<_Myt>()); } template<class _Fret, class _Farg0, class... _Ftypes, class _Alloc> void _Reset_alloc(_Fret (__fastcall _Farg0::*const _Val)(_Ftypes...) const volatile, _Alloc _Ax) { typedef _Callable_pmf< _Fret (__fastcall _Farg0::*const)(_Ftypes...) const volatile, _Farg0> _MyWrapper; typedef _Func_impl<_MyWrapper, _Alloc, _Ret, _Farg0, _Ftypes...> _Myimpl; _Do_alloc<_Myimpl>(_Val, _Ax); }


	void _Tidy()
		{	
		if (_Impl != 0)
			{	
			_Impl->_Delete_this(!_Local());
			_Impl = 0;
			}
		}

	void _Swap(_Myt& _Right)
		{	
		if (this == &_Right)
			;	
		else if (!_Local() && !_Right._Local())
			::std:: swap(_Impl, _Right._Impl);	
		else
			{	
			_Myt _Temp;
			_Temp._Resetm(::std:: forward<_Myt>(*this));
			_Tidy();
			_Resetm(::std:: forward<_Myt>(_Right));
			_Right._Tidy();
			_Right._Resetm(::std:: forward<_Myt>(_Temp));
			}
		}

	const  type_info& _Target_type() const
		{	
		return (_Impl ? _Impl->_Target_type() : typeid(void));
		}

	const void *_Target(const  type_info& _Info) const
		{	
		return (_Impl ? _Impl->_Target(_Info) : 0);
		}

private:
	template<class _Myimpl,
		class _Fty,
		class _Alloc>
		void _Do_alloc(_Fty&& _Val,
			_Alloc _Ax)
		{	
		void *_Vptr = 0;
		_Myimpl *_Ptr = 0;
		if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			_Vptr = &_Space;
			_Ptr = ::new (_Vptr) _Myimpl(::std:: forward<_Fty>(_Val));
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Vptr = _Al.allocate(1);
			_Ptr = ::new (_Vptr) _Myimpl(::std:: forward<_Fty>(_Val), _Al);
			}
		_Set(_Ptr);
		}

	void _Set(_Ptrt *_Ptr)
		{	
		_Impl = _Ptr;
		}

	bool _Local() const
		{	
		return ((void *)_Impl == (void *)&_Space);
		}

	typedef void (*_Pfnty)();
	union
		{	
		_Pfnty _Pfn[3];
		void *_Pobj[3];
		long double _Ldbl;	
		char _Alias[3 * sizeof (void *)];	
		} _Space;

	_Ptrt *_Impl;
	};

	
template<class _Tx>
	struct _Get_function_impl;









template<class _Ret, class... _Types> struct _Get_function_impl<_Ret __cdecl (_Types...)> { typedef _Func_class<_Ret, _Types...> type; }; template<class _Ret, class... _Types> struct _Get_function_impl<_Ret __stdcall (_Types...)> { typedef _Func_class<_Ret, _Types...> type; }; template<class _Ret, class... _Types> struct _Get_function_impl<_Ret __fastcall (_Types...)> { typedef _Func_class<_Ret, _Types...> type; };



	
template<class _Fty>
	class function
		: public _Get_function_impl<_Fty>::type
	{	
public:
	typedef function<_Fty> _Myt;
	typedef typename _Get_function_impl<_Fty>::type _Mybase;

	function() throw ()
		{	
		this->_Reset();
		}

	function(nullptr_t) throw ()
		{	
		this->_Reset();
		}

	function(const _Myt& _Right)
		{	
		this->_Reset((const _Mybase&)_Right);
		}

	function(_Myt& _Right)
		{	
		this->_Reset((const _Mybase&)_Right);
		}

	template<class _Fx>
		function(const _Fx& _Func)
		{	
		this->_Reset(_Func);
		}

	template<class _Fx,
		class _Alloc>
		function(_Fx _Func, const _Alloc& _Ax)
		{	
		this->_Reset_alloc(_Func, _Ax);
		}

	template<class _Alloc>
		function(allocator_arg_t, const _Alloc&) throw ()
		{	
		this->_Reset();
		}

	template<class _Alloc>
		function(allocator_arg_t, const _Alloc&, nullptr_t) throw ()
		{	
		this->_Reset();
		}

	template<class _Alloc>
		function(allocator_arg_t, const _Alloc& _Ax, const _Myt& _Right)
		{	
		this->_Reset_alloc((const _Mybase&)_Right, _Ax);
		}

	template<class _Fx,
		class _Alloc>
		function(allocator_arg_t, const _Alloc& _Ax, _Fx _Func)
		{	
		this->_Reset_alloc(_Func, _Ax);
		}

	template<class _Fx>
		function(reference_wrapper<_Fx> _Func)
		{	
		this->_Reset(_Func);
		}

	template<class _Fx,
		class _Alloc>
		function(reference_wrapper<_Fx> _Func, const _Alloc& _Ax)
		{	
		this->_Reset_alloc(_Func, _Ax);
		}

	~function() throw ()
		{	
		this->_Tidy();
		}

	_Myt& operator=(const _Myt& _Right)
		{	
		if (this != &_Right)
			{	
			this->_Tidy();
			this->_Reset((const _Mybase&)_Right);
			}
		return (*this);
		}

	_Myt& operator=(_Myt& _Right)
		{	
		if (this != &_Right)
			{	
			this->_Tidy();
			this->_Reset((const _Mybase&)_Right);
			}
		return (*this);
		}

	function(const _Myt&& _Right)
		{	
		this->_Reset((const _Mybase&)_Right);
		}

	function(_Myt&& _Right)
		{	
		this->_Resetm(::std:: forward<_Myt>(_Right));
		}

	template<class _Alloc>
		function(allocator_arg_t, const _Alloc& _Al, _Myt&& _Right)
		{	
		this->_Resetm(::std:: forward<_Myt>(_Right));
		}

	template<class _Fx>
		function(_Fx&& _Func)
		{	
		this->_Reset(::std:: forward<_Fx>(_Func));
		}

	_Myt& operator=(_Myt&& _Right)
		{	
		if (this != &_Right)
			{	
			this->_Tidy();
			this->_Resetm(::std:: forward<_Myt>(_Right));
			}
		return (*this);
		}

	template<class _Fx>
		_Myt& operator=(_Fx&& _Func)
		{	
		this->_Tidy();
		this->_Reset(::std:: forward<_Fx>(_Func));
		return (*this);
		}

	template<class _Fx,
		class _Alloc>
		void assign(_Fx&& _Func, const _Alloc& _Ax)
		{	
		this->_Tidy();
		this->_Reset_alloc(::std:: forward<_Fx>(_Func), _Ax);
		}

	function& operator=(nullptr_t)
		{	
		this->_Tidy();
		this->_Reset();
		return (*this);
		}

	template<class _Fx>
		_Myt& operator=(reference_wrapper<_Fx> _Func) throw ()
		{	
		this->_Tidy();
		this->_Reset(_Func);
		return (*this);
		}

	template<class _Fx,
		class _Alloc>
		void assign(reference_wrapper<_Fx> _Func, const _Alloc& _Ax)
		{	
		this->_Tidy();
		this->_Reset_alloc(_Func, _Ax);
		}

	void swap(_Myt& _Right) throw ()
		{	
		this->_Swap(_Right);
		}

	explicit operator bool() const throw ()
		{	
		return (!this->_Empty());
		}

	const  type_info& target_type() const throw ()
		{	
		return (this->_Target_type());
		}

	template<class _Fty2>
		_Fty2 *target() throw ()
		{	
		return ((_Fty2*)this->_Target(typeid(_Fty2)));
		}

	template<class _Fty2>
		const _Fty2 *target() const throw ()
		{	
		return ((const _Fty2*)this->_Target(typeid(_Fty2)));
		}

private:
	template<class _Fty2>
		void operator==(const function<_Fty2>&);	
	template<class _Fty2>
		void operator!=(const function<_Fty2>&);	
	};

	
template<class _Fty>
	void swap(function<_Fty>& _Left, function<_Fty>& _Right)
	{	
	_Left.swap(_Right);
	}

	
template<class _Fty>
	bool operator==(const function<_Fty>& _Other,
		nullptr_t) throw ()
	{	
	return (!_Other);
	}

template<class _Fty>
	bool operator==(nullptr_t _Npc,
		const function<_Fty>& _Other) throw ()
	{	
	return (operator==(_Other, _Npc));
	}

template<class _Fty>
	bool operator!=(const function<_Fty>& _Other,
		nullptr_t _Npc) throw ()
	{	
	return (!operator==(_Other, _Npc));
	}

template<class _Fty>
	bool operator!=(nullptr_t _Npc,
		const function<_Fty>& _Other) throw ()
	{	
	return (!operator==(_Other, _Npc));
	}


	
template<int _Nx>
	class _Ph
	{	
	};

template<class _Tx>
	struct is_placeholder
		: integral_constant<int, 0>
	{	
	};

template<int _Nx>
	struct is_placeholder<_Ph<_Nx> >
		: integral_constant<int, _Nx>
	{	
	};

	
template<class _Tx>
	struct is_bind_expression
		: false_type
	{	
	};

	
struct _Notforced
	{	
	};

	
template<bool _Forced,
	class _Ret,
	class _Fun,
	class... _Types>
	class _Bind;












template<bool _Forced, class _Ret, class _Fun, class... _Types> struct is_bind_expression< _Bind<_Forced, _Ret, _Fun, _Types...> > : true_type { }; template<bool _Forced, class _Ret, class _Fun, class... _Types> struct is_bind_expression<const _Bind<_Forced, _Ret, _Fun, _Types...> > : true_type { }; template<bool _Forced, class _Ret, class _Fun, class... _Types> struct is_bind_expression<volatile _Bind<_Forced, _Ret, _Fun, _Types...> > : true_type { }; template<bool _Forced, class _Ret, class _Fun, class... _Types> struct is_bind_expression<const volatile _Bind<_Forced, _Ret, _Fun, _Types...> > : true_type { };



	
template<class _Barg>
	struct _Is_reference_wrapper0
		: false_type
	{	
	};

template<class _Barg>
	struct _Is_reference_wrapper0<reference_wrapper<_Barg> >
		: true_type
	{	
	};

template<class _Barg>
	struct _Is_reference_wrapper
		: _Is_reference_wrapper0<typename decay<_Barg>::type>
		{	
		};

	
enum _Barg_type
	{	
	_Reference_wrapper,
	_Placeholder,
	_Bind_expression,
	_UDT
	};

template<class _Barg>
	struct _Classify_barg
		: integral_constant<_Barg_type,
			_Is_reference_wrapper<_Barg>::value ? _Reference_wrapper
			: 0 < is_placeholder<_Barg>::value ? _Placeholder
			: is_bind_expression<_Barg>::value ? _Bind_expression
			: _UDT>
	{	
	};

	
template<_Barg_type,
	class _Funx,
	class _Barg,
	class _Ftuple>
	struct _Fixarg_ret_base;

template<class _Funx,
	class _Barg,
	class _Ftuple>
	struct _Fixarg_ret_base<_Reference_wrapper, _Funx, _Barg, _Ftuple>
	{	
	typedef typename add_reference<typename _Barg::type>::type type;
	};

template<class _Funx,
	class _Barg,
	class _Ftuple>
	struct _Fixarg_ret_base<_Placeholder, _Funx, _Barg, _Ftuple>
	{	
	typedef typename add_reference<
		typename tuple_element<is_placeholder<_Barg>::value - 1,
			_Ftuple>::type>::type type;
	};

template<class _Bind_t,
	class _Ftuple,
	class _Indexes>
	struct _Call_ret;

template<class _Bind_t,
	class _Ftuple,
	size_t... _Findexes>
	struct _Call_ret<_Bind_t, _Ftuple, _Arg_idx<_Findexes...> >
	{	
	typedef typename result_of<_Bind_t(
		typename tuple_element<_Findexes, _Ftuple>::_Rtype...)>::type type;
	};

template<class _Funx,
	class _Barg,
	class... _Ftypes>
	struct _Fixarg_ret_base<_Bind_expression, _Funx, _Barg,
		tuple<_Ftypes...> >
	{	
	typedef typename _Call_ret<_Barg, tuple<_Ftypes...>,
		typename _Make_arg_idx<_Ftypes...>::type>::type type;
	};


template<class _Funx,
	class _Barg,
	class _Ftuple>
	struct _Fixarg_ret_base<_UDT, _Funx, _Barg, _Ftuple>
	{	
	typedef typename _Copy_cv<_Barg, _Funx>::type type;
	};

	
template<class _Funx,
	class _Barg,
	class _Ftuple>
	struct _Fixarg_ret
		: _Fixarg_ret_base<
			_Classify_barg<typename remove_reference<_Barg>::type>::value,
			_Funx,
			typename remove_reference<_Barg>::type,
			_Ftuple>
	{	
	};

	
template<bool _Forced,
	class _Ret,
	class _Funx,
	class _Btuple,
	class _Ftuple,
	class _Indexes>
	struct _Do_call_ret;

template<bool _Forced,
	class _Ret,
	class _Funx,
	class _Btuple,
	class _Ftuple,
	size_t... _Bindexes>
	struct _Do_call_ret<
		_Forced, _Ret, _Funx, _Btuple, _Ftuple, _Arg_idx<_Bindexes...> >
	{	
	typedef
		typename result_of<
		_Funx(
			typename _Fixarg_ret<_Funx,
				typename tuple_element<_Bindexes, _Btuple>::_Rtype,
				_Ftuple
			>::type...
		)
		>::type type;
	};

template<class _Ret,
	class _Funx,
	class _Btuple,
	class _Ftuple,
	size_t... _Bindexes>
	struct _Do_call_ret<
		true, _Ret, _Funx, _Btuple, _Ftuple, _Arg_idx<_Bindexes...> >
	{	
	typedef _Ret type;
	};


	
template<bool _Forced,
	bool _Fun_has_result_type,
	class _Ret,
	class _Fun>
	struct _Add_result_type
	{	
	};

template<bool _Fun_has_result_type,
	class _Ret,
	class _Fun>
	struct _Add_result_type<true, _Fun_has_result_type, _Ret, _Fun>
	{	
	typedef _Ret result_type;
	};

template<class _Ret,
	class _Fun>
	struct _Add_result_type<false, true, _Ret, _Fun>
	{	
	typedef typename _Fun::result_type result_type;
	};


template<class _Funx,
	class _Barg,
	class _Btuple,
	class _Ftuple> inline
	typename enable_if<_Is_reference_wrapper<_Barg>::value,
		typename _Fixarg_ret<_Funx, _Barg, _Ftuple>::type>::type
	_Fixarg(_Funx&&, _Btuple& _Mybargs,
		_Ftuple& _Myfargs,
		_Barg& _Arg)
	{	
	return (_Arg.get());
	}

template<class _Funx,
	class _Barg,
	class _Btuple,
	class _Ftuple> inline
	typename enable_if<0 < is_placeholder<_Barg>::value,
		typename _Fixarg_ret<_Funx, _Barg, _Ftuple>::type>::type
	_Fixarg(_Funx&&, _Btuple& _Mybargs,
		_Ftuple& _Myfargs,
		_Barg& _Arg)
	{	
	const int _Nx = is_placeholder<_Barg>::value - 1;
	return (::std:: get<_Nx>(_Myfargs));
	}

template<class _Ret,
	class _Barg,
	class... _Ftypes,
	size_t... _Findexes> inline
	_Ret _Do_bind_call(_Barg& _Arg,
		tuple<_Ftypes...>& _Myfargs,
		_Arg_idx<_Findexes...>)
	{	
	return (_Arg(::std:: get<_Findexes>(_Myfargs)...));
	}

template<class _Funx,
	class _Barg,
	class _Btuple,
	class... _Ftypes> inline
	typename enable_if<is_bind_expression<_Barg>::value,
		typename _Fixarg_ret<_Funx,
			typename _Copy_cv<_Barg, _Funx>::type,
			tuple<_Ftypes...> >::type>::type
	_Fixarg(_Funx&&, _Btuple&,
		tuple<_Ftypes...>& _Myfargs,
		_Barg& _Arg)
	{	
	typedef typename _Fixarg_ret<_Funx,
		typename _Copy_cv<_Barg, _Funx>::type,
		tuple<_Ftypes...> >::type _Ret;
	return (_Do_bind_call<_Ret>(_Arg, _Myfargs,
		typename _Make_arg_idx<_Ftypes...>::type()));
	}


template<class _Funx,
	class _Barg,
	class _Btuple,
	class _Ftuple> inline
	typename enable_if<!is_bind_expression<_Barg>::value
			&& !is_placeholder<_Barg>::value
			&& !_Is_reference_wrapper<_Barg>::value,
			typename _Fixarg_ret<_Funx, _Barg, _Ftuple>::type>::type
	_Fixarg(_Funx&&, _Btuple& _Mybargs,
		_Ftuple& _Myfargs,
		_Barg& _Arg)
	{	
	return (_Arg);
	}

	
template<bool _Forced,
	class _Ret,
	class _Fun,
	class... _Types>
	class _Bind
		: public _Add_result_type<_Forced,
			_Has_result_type<
				typename decay<_Fun>::type>::type::value,
			_Ret,
			typename decay<_Fun>::type>
	{	
public:
	typedef typename decay<_Fun>::type _Funx;
	typedef tuple<typename decay<_Types>::type...> _Bargs;

	template<class _Fun2,
		class... _Types2>
		explicit _Bind(_Fun2&& _Fx, _Types2&&... _Args)
		: _Myfun(::std:: forward<_Fun2>(_Fx)),
			_Mybargs(::std:: forward<_Types2>(_Args)...)
		{	
		}

	_Bind(const _Bind& _Right)
		: _Myfun(_Right._Myfun),
			_Mybargs(_Right._Mybargs)
		{	
		}

	_Bind(_Bind& _Right)
		: _Myfun(_Right._Myfun),
			_Mybargs(_Right._Mybargs)
		{	
		}

	_Bind(_Bind&& _Right)
		: _Myfun(::std:: forward<_Funx>(_Right._Myfun)),
			_Mybargs(::std:: forward<_Bargs>(_Right._Mybargs))
		{	
		}

	template<class... _Ftypes>
		typename _Do_call_ret<_Forced, _Ret, _Funx, _Bargs,
			tuple<_Ftypes&...>,
			typename _Make_arg_idx<_Types...>::type>::type
		operator()(_Ftypes&&... _Fargs)
		{	
		return (_Do_call(tie(_Fargs...),
			typename _Make_arg_idx<_Types...>::type()));
		}

	template<class... _Ftypes,
		size_t... _Bindexes>
		typename _Do_call_ret<_Forced, _Ret, _Funx, _Bargs,
			tuple<_Ftypes&...>,
			_Arg_idx<_Bindexes...> >::type
		_Do_call(tuple<_Ftypes&...> _Myfargs,
			_Arg_idx<_Bindexes...>)
		{	
		return (_Myfun(_Fixarg(_Myfun, _Mybargs, _Myfargs,
			::std:: get<_Bindexes>(_Mybargs))...));
		}

private:
	_Funx _Myfun;	
	_Bargs _Mybargs;	
	};

	
template<class _Pmd_t,
	class _Rx,
	class _Farg0>
	struct _Pmd_wrap
	{	


	_Pmd_wrap(const _Pmd_t& _Pmd)
		: _Mypmd(_Pmd)
		{	
		}







 _Rx& operator()( _Farg0& _Fnobj) const { return (_Fnobj.*_Mypmd); } const _Rx& operator()(const _Farg0& _Fnobj) const { return (_Fnobj.*_Mypmd); } volatile _Rx& operator()(volatile _Farg0& _Fnobj) const { return (_Fnobj.*_Mypmd); } const volatile _Rx& operator()(const volatile _Farg0& _Fnobj) const { return (_Fnobj.*_Mypmd); }


private:
	_Pmd_t _Mypmd;
	};

template<class _Pmd_t,
	class _Rx,
	class _Farg0,
	class _Arg0,
	class... _Rest>
	struct _Result_of<_Pmd_wrap<_Pmd_t, _Rx, _Farg0>, _Arg0, _Rest...>
	{	
	typedef typename _Copy_cv<_Rx, _Arg0>::type type;
	};

template<class _Pmd_t,
	class _Rx,
	class _Farg0,
	class _Arg0,
	class... _Rest>
	struct _Result_of<_Pmd_wrap<_Pmd_t, _Rx, _Farg0>,
		reference_wrapper<_Arg0>&, _Rest...>
	{	
	typedef typename _Copy_cv<_Rx, _Arg0>::type type;
	};

	
template<class _Pmf_t,
	class _Rx,
	class _Farg0,
	class... _Ftypes>
	struct _Pmf_wrap
	{	


	_Pmf_wrap(const _Pmf_t& _Pmf)
		: _Mypmf(_Pmf)
		{	
		}

	_Rx operator()(_Farg0& _Fnobj, _Ftypes... _Fargs) const
		{	
		return ((_Fnobj.*_Mypmf)(::std:: forward<_Ftypes>(_Fargs)...));
		}

	_Rx operator()(const _Farg0& _Fnobj, _Ftypes... _Fargs) const
		{	
		return ((_Fnobj.*_Mypmf)(::std:: forward<_Ftypes>(_Fargs)...));
		}

	_Rx operator()(_Farg0 *_Pfnobj, _Ftypes... _Fargs) const
		{	
		return ((_Pfnobj->*_Mypmf)(::std:: forward<_Ftypes>(_Fargs)...));
		}

	_Rx operator()(const _Farg0 *_Pfnobj, _Ftypes... _Fargs) const
		{	
		return ((_Pfnobj->*_Mypmf)(::std:: forward<_Ftypes>(_Fargs)...));
		}

	template<class _Wrapper>
		_Rx operator()(_Wrapper& _Ptr, _Ftypes... _Fargs) const
		{	
		return (((*_Ptr).*_Mypmf)(::std:: forward<_Ftypes>(_Fargs)...));
		}

	template<class _Wrapper>
		_Rx operator()(const _Wrapper& _Ptr, _Ftypes... _Fargs) const
		{	
		return (((*_Ptr).*_Mypmf)(::std:: forward<_Ftypes>(_Fargs)...));
		}

private:
	_Pmf_t _Mypmf;
	};

	
template<class _Fun,
	class... _Types> inline
	_Bind<false, void, _Fun, _Types...>
		bind(_Fun&& _Fx, _Types&&... _Args)
	{	
	return (_Bind<false, void, _Fun, _Types...>(
		::std:: forward<_Fun>(_Fx), ::std:: forward<_Types>(_Args)...));
	}

template<class _Rx,
	class... _Ftypes,
	class... _Types> inline
	_Bind<true, _Rx, _Rx (* const)(_Ftypes...), _Types...>
		bind(_Rx (*_Pfx)(_Ftypes...), _Types&&... _Args)
	{	
	return (_Bind<true, _Rx, _Rx (* const)(_Ftypes...), _Types...>(
		_Pfx, ::std:: forward<_Types>(_Args)...));
	}

template<class _Rx,
	class _Farg0,
	class... _Types> inline
	_Bind<false, void, _Pmd_wrap<_Rx _Farg0::*, _Rx, _Farg0>,
		_Types...>
		bind(_Rx _Farg0::* const _Pmd, _Types&&... _Args)
	{	
	return (_Bind<false, void,
		_Pmd_wrap<_Rx _Farg0::*, _Rx, _Farg0>, _Types...>(
		_Pmd_wrap<_Rx _Farg0::*, _Rx, _Farg0>(_Pmd),
			::std:: forward<_Types>(_Args)...));
	}






















template<class _Rx, class _Farg0, class... _Ftypes, class... _Types> inline _Bind<true, _Rx, _Pmf_wrap<_Rx (__thiscall _Farg0::*)(_Ftypes...) , _Rx, _Farg0, _Ftypes...>, _Types...> bind(_Rx (__thiscall _Farg0::* const _Pmf)(_Ftypes...) , _Types&&... _Args) { return (_Bind<true, _Rx, _Pmf_wrap<_Rx (__thiscall _Farg0::*)(_Ftypes...) , _Rx, _Farg0, _Ftypes...>, _Types...>( _Pmf_wrap<_Rx (__thiscall _Farg0::*)(_Ftypes...) , _Rx, _Farg0, _Ftypes...>(_Pmf), ::std:: forward<_Types>(_Args)...)); } template<class _Rx, class _Farg0, class... _Ftypes, class... _Types> inline _Bind<true, _Rx, _Pmf_wrap<_Rx (__cdecl _Farg0::*)(_Ftypes...) , _Rx, _Farg0, _Ftypes...>, _Types...> bind(_Rx (__cdecl _Farg0::* const _Pmf)(_Ftypes...) , _Types&&... _Args) { return (_Bind<true, _Rx, _Pmf_wrap<_Rx (__cdecl _Farg0::*)(_Ftypes...) , _Rx, _Farg0, _Ftypes...>, _Types...>( _Pmf_wrap<_Rx (__cdecl _Farg0::*)(_Ftypes...) , _Rx, _Farg0, _Ftypes...>(_Pmf), ::std:: forward<_Types>(_Args)...)); } template<class _Rx, class _Farg0, class... _Ftypes, class... _Types> inline _Bind<true, _Rx, _Pmf_wrap<_Rx (__stdcall _Farg0::*)(_Ftypes...) , _Rx, _Farg0, _Ftypes...>, _Types...> bind(_Rx (__stdcall _Farg0::* const _Pmf)(_Ftypes...) , _Types&&... _Args) { return (_Bind<true, _Rx, _Pmf_wrap<_Rx (__stdcall _Farg0::*)(_Ftypes...) , _Rx, _Farg0, _Ftypes...>, _Types...>( _Pmf_wrap<_Rx (__stdcall _Farg0::*)(_Ftypes...) , _Rx, _Farg0, _Ftypes...>(_Pmf), ::std:: forward<_Types>(_Args)...)); } template<class _Rx, class _Farg0, class... _Ftypes, class... _Types> inline _Bind<true, _Rx, _Pmf_wrap<_Rx (__fastcall _Farg0::*)(_Ftypes...) , _Rx, _Farg0, _Ftypes...>, _Types...> bind(_Rx (__fastcall _Farg0::* const _Pmf)(_Ftypes...) , _Types&&... _Args) { return (_Bind<true, _Rx, _Pmf_wrap<_Rx (__fastcall _Farg0::*)(_Ftypes...) , _Rx, _Farg0, _Ftypes...>, _Types...>( _Pmf_wrap<_Rx (__fastcall _Farg0::*)(_Ftypes...) , _Rx, _Farg0, _Ftypes...>(_Pmf), ::std:: forward<_Types>(_Args)...)); } template<class _Rx, class _Farg0, class... _Ftypes, class... _Types> inline _Bind<true, _Rx, _Pmf_wrap<_Rx (__thiscall _Farg0::*)(_Ftypes...) const, _Rx, _Farg0, _Ftypes...>, _Types...> bind(_Rx (__thiscall _Farg0::* const _Pmf)(_Ftypes...) const, _Types&&... _Args) { return (_Bind<true, _Rx, _Pmf_wrap<_Rx (__thiscall _Farg0::*)(_Ftypes...) const, _Rx, _Farg0, _Ftypes...>, _Types...>( _Pmf_wrap<_Rx (__thiscall _Farg0::*)(_Ftypes...) const, _Rx, _Farg0, _Ftypes...>(_Pmf), ::std:: forward<_Types>(_Args)...)); } template<class _Rx, class _Farg0, class... _Ftypes, class... _Types> inline _Bind<true, _Rx, _Pmf_wrap<_Rx (__cdecl _Farg0::*)(_Ftypes...) const, _Rx, _Farg0, _Ftypes...>, _Types...> bind(_Rx (__cdecl _Farg0::* const _Pmf)(_Ftypes...) const, _Types&&... _Args) { return (_Bind<true, _Rx, _Pmf_wrap<_Rx (__cdecl _Farg0::*)(_Ftypes...) const, _Rx, _Farg0, _Ftypes...>, _Types...>( _Pmf_wrap<_Rx (__cdecl _Farg0::*)(_Ftypes...) const, _Rx, _Farg0, _Ftypes...>(_Pmf), ::std:: forward<_Types>(_Args)...)); } template<class _Rx, class _Farg0, class... _Ftypes, class... _Types> inline _Bind<true, _Rx, _Pmf_wrap<_Rx (__stdcall _Farg0::*)(_Ftypes...) const, _Rx, _Farg0, _Ftypes...>, _Types...> bind(_Rx (__stdcall _Farg0::* const _Pmf)(_Ftypes...) const, _Types&&... _Args) { return (_Bind<true, _Rx, _Pmf_wrap<_Rx (__stdcall _Farg0::*)(_Ftypes...) const, _Rx, _Farg0, _Ftypes...>, _Types...>( _Pmf_wrap<_Rx (__stdcall _Farg0::*)(_Ftypes...) const, _Rx, _Farg0, _Ftypes...>(_Pmf), ::std:: forward<_Types>(_Args)...)); } template<class _Rx, class _Farg0, class... _Ftypes, class... _Types> inline _Bind<true, _Rx, _Pmf_wrap<_Rx (__fastcall _Farg0::*)(_Ftypes...) const, _Rx, _Farg0, _Ftypes...>, _Types...> bind(_Rx (__fastcall _Farg0::* const _Pmf)(_Ftypes...) const, _Types&&... _Args) { return (_Bind<true, _Rx, _Pmf_wrap<_Rx (__fastcall _Farg0::*)(_Ftypes...) const, _Rx, _Farg0, _Ftypes...>, _Types...>( _Pmf_wrap<_Rx (__fastcall _Farg0::*)(_Ftypes...) const, _Rx, _Farg0, _Ftypes...>(_Pmf), ::std:: forward<_Types>(_Args)...)); } template<class _Rx, class _Farg0, class... _Ftypes, class... _Types> inline _Bind<true, _Rx, _Pmf_wrap<_Rx (__thiscall _Farg0::*)(_Ftypes...) volatile, _Rx, _Farg0, _Ftypes...>, _Types...> bind(_Rx (__thiscall _Farg0::* const _Pmf)(_Ftypes...) volatile, _Types&&... _Args) { return (_Bind<true, _Rx, _Pmf_wrap<_Rx (__thiscall _Farg0::*)(_Ftypes...) volatile, _Rx, _Farg0, _Ftypes...>, _Types...>( _Pmf_wrap<_Rx (__thiscall _Farg0::*)(_Ftypes...) volatile, _Rx, _Farg0, _Ftypes...>(_Pmf), ::std:: forward<_Types>(_Args)...)); } template<class _Rx, class _Farg0, class... _Ftypes, class... _Types> inline _Bind<true, _Rx, _Pmf_wrap<_Rx (__cdecl _Farg0::*)(_Ftypes...) volatile, _Rx, _Farg0, _Ftypes...>, _Types...> bind(_Rx (__cdecl _Farg0::* const _Pmf)(_Ftypes...) volatile, _Types&&... _Args) { return (_Bind<true, _Rx, _Pmf_wrap<_Rx (__cdecl _Farg0::*)(_Ftypes...) volatile, _Rx, _Farg0, _Ftypes...>, _Types...>( _Pmf_wrap<_Rx (__cdecl _Farg0::*)(_Ftypes...) volatile, _Rx, _Farg0, _Ftypes...>(_Pmf), ::std:: forward<_Types>(_Args)...)); } template<class _Rx, class _Farg0, class... _Ftypes, class... _Types> inline _Bind<true, _Rx, _Pmf_wrap<_Rx (__stdcall _Farg0::*)(_Ftypes...) volatile, _Rx, _Farg0, _Ftypes...>, _Types...> bind(_Rx (__stdcall _Farg0::* const _Pmf)(_Ftypes...) volatile, _Types&&... _Args) { return (_Bind<true, _Rx, _Pmf_wrap<_Rx (__stdcall _Farg0::*)(_Ftypes...) volatile, _Rx, _Farg0, _Ftypes...>, _Types...>( _Pmf_wrap<_Rx (__stdcall _Farg0::*)(_Ftypes...) volatile, _Rx, _Farg0, _Ftypes...>(_Pmf), ::std:: forward<_Types>(_Args)...)); } template<class _Rx, class _Farg0, class... _Ftypes, class... _Types> inline _Bind<true, _Rx, _Pmf_wrap<_Rx (__fastcall _Farg0::*)(_Ftypes...) volatile, _Rx, _Farg0, _Ftypes...>, _Types...> bind(_Rx (__fastcall _Farg0::* const _Pmf)(_Ftypes...) volatile, _Types&&... _Args) { return (_Bind<true, _Rx, _Pmf_wrap<_Rx (__fastcall _Farg0::*)(_Ftypes...) volatile, _Rx, _Farg0, _Ftypes...>, _Types...>( _Pmf_wrap<_Rx (__fastcall _Farg0::*)(_Ftypes...) volatile, _Rx, _Farg0, _Ftypes...>(_Pmf), ::std:: forward<_Types>(_Args)...)); } template<class _Rx, class _Farg0, class... _Ftypes, class... _Types> inline _Bind<true, _Rx, _Pmf_wrap<_Rx (__thiscall _Farg0::*)(_Ftypes...) const volatile, _Rx, _Farg0, _Ftypes...>, _Types...> bind(_Rx (__thiscall _Farg0::* const _Pmf)(_Ftypes...) const volatile, _Types&&... _Args) { return (_Bind<true, _Rx, _Pmf_wrap<_Rx (__thiscall _Farg0::*)(_Ftypes...) const volatile, _Rx, _Farg0, _Ftypes...>, _Types...>( _Pmf_wrap<_Rx (__thiscall _Farg0::*)(_Ftypes...) const volatile, _Rx, _Farg0, _Ftypes...>(_Pmf), ::std:: forward<_Types>(_Args)...)); } template<class _Rx, class _Farg0, class... _Ftypes, class... _Types> inline _Bind<true, _Rx, _Pmf_wrap<_Rx (__cdecl _Farg0::*)(_Ftypes...) const volatile, _Rx, _Farg0, _Ftypes...>, _Types...> bind(_Rx (__cdecl _Farg0::* const _Pmf)(_Ftypes...) const volatile, _Types&&... _Args) { return (_Bind<true, _Rx, _Pmf_wrap<_Rx (__cdecl _Farg0::*)(_Ftypes...) const volatile, _Rx, _Farg0, _Ftypes...>, _Types...>( _Pmf_wrap<_Rx (__cdecl _Farg0::*)(_Ftypes...) const volatile, _Rx, _Farg0, _Ftypes...>(_Pmf), ::std:: forward<_Types>(_Args)...)); } template<class _Rx, class _Farg0, class... _Ftypes, class... _Types> inline _Bind<true, _Rx, _Pmf_wrap<_Rx (__stdcall _Farg0::*)(_Ftypes...) const volatile, _Rx, _Farg0, _Ftypes...>, _Types...> bind(_Rx (__stdcall _Farg0::* const _Pmf)(_Ftypes...) const volatile, _Types&&... _Args) { return (_Bind<true, _Rx, _Pmf_wrap<_Rx (__stdcall _Farg0::*)(_Ftypes...) const volatile, _Rx, _Farg0, _Ftypes...>, _Types...>( _Pmf_wrap<_Rx (__stdcall _Farg0::*)(_Ftypes...) const volatile, _Rx, _Farg0, _Ftypes...>(_Pmf), ::std:: forward<_Types>(_Args)...)); } template<class _Rx, class _Farg0, class... _Ftypes, class... _Types> inline _Bind<true, _Rx, _Pmf_wrap<_Rx (__fastcall _Farg0::*)(_Ftypes...) const volatile, _Rx, _Farg0, _Ftypes...>, _Types...> bind(_Rx (__fastcall _Farg0::* const _Pmf)(_Ftypes...) const volatile, _Types&&... _Args) { return (_Bind<true, _Rx, _Pmf_wrap<_Rx (__fastcall _Farg0::*)(_Ftypes...) const volatile, _Rx, _Farg0, _Ftypes...>, _Types...>( _Pmf_wrap<_Rx (__fastcall _Farg0::*)(_Ftypes...) const volatile, _Rx, _Farg0, _Ftypes...>(_Pmf), ::std:: forward<_Types>(_Args)...)); }


	
template<class _Ret,
	class _Fun,
	class... _Types> inline
	typename enable_if<!is_pointer<_Fun>::value
		&& !is_member_pointer<_Fun>::value,
		_Bind<true, _Ret, _Fun, _Types...> >::type
		bind(_Fun&& _Fx, _Types&&... _Args)
	{	
	return (_Bind<true, _Ret, _Fun, _Types...>(
		::std:: forward<_Fun>(_Fx), ::std:: forward<_Types>(_Args)...));
	}

template<class _Ret,
	class _Rx,
	class... _Ftypes,
	class... _Types> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<true, _Ret, _Rx (* const)(_Ftypes...),
			_Types...> >::type
		bind(_Rx (*_Pfx)(_Ftypes...), _Types&&... _Args)
	{	
	return (_Bind<true, _Ret, _Rx (* const)(_Ftypes...), _Types...>(
		_Pfx, ::std:: forward<_Types>(_Args)...));
	}

template<class _Ret,
	class _Rx,
	class _Farg0,
	class... _Types> inline
	typename enable_if<!is_same<_Ret, _Rx>::value
		&& is_member_object_pointer<_Rx _Farg0::* const>::value,
		_Bind<true, _Ret, _Pmd_wrap<_Rx _Farg0::*, _Rx, _Farg0>,
			_Types...> >::type
		bind(_Rx _Farg0::* const _Pmd, _Types&&... _Args)
	{	
	return (_Bind<true, _Ret,
		_Pmd_wrap<_Rx _Farg0::*, _Rx, _Farg0>, _Types...>(
		_Pmd_wrap<_Rx _Farg0::*, _Rx, _Farg0>(_Pmd),
			::std:: forward<_Types>(_Args)...));
	}
























template<class _Ret, class _Rx, class _Farg0, class... _Ftypes, class... _Types> inline typename enable_if<!is_same<_Ret, _Rx>::value, _Bind<true, _Ret, _Pmf_wrap<_Rx (__thiscall _Farg0::*)(_Ftypes...) , _Rx, _Farg0, _Ftypes...>, _Types...> >::type bind(_Rx (__thiscall _Farg0::* const _Pmf)(_Ftypes...) , _Types&&... _Args) { return (_Bind<true, _Ret, _Pmf_wrap<_Rx (__thiscall _Farg0::*)(_Ftypes...) , _Rx, _Farg0, _Ftypes...>, _Types...>( _Pmf_wrap<_Rx (__thiscall _Farg0::*)(_Ftypes...) , _Rx, _Farg0, _Ftypes...>(_Pmf), ::std:: forward<_Types>(_Args)...)); } template<class _Ret, class _Rx, class _Farg0, class... _Ftypes, class... _Types> inline typename enable_if<!is_same<_Ret, _Rx>::value, _Bind<true, _Ret, _Pmf_wrap<_Rx (__cdecl _Farg0::*)(_Ftypes...) , _Rx, _Farg0, _Ftypes...>, _Types...> >::type bind(_Rx (__cdecl _Farg0::* const _Pmf)(_Ftypes...) , _Types&&... _Args) { return (_Bind<true, _Ret, _Pmf_wrap<_Rx (__cdecl _Farg0::*)(_Ftypes...) , _Rx, _Farg0, _Ftypes...>, _Types...>( _Pmf_wrap<_Rx (__cdecl _Farg0::*)(_Ftypes...) , _Rx, _Farg0, _Ftypes...>(_Pmf), ::std:: forward<_Types>(_Args)...)); } template<class _Ret, class _Rx, class _Farg0, class... _Ftypes, class... _Types> inline typename enable_if<!is_same<_Ret, _Rx>::value, _Bind<true, _Ret, _Pmf_wrap<_Rx (__stdcall _Farg0::*)(_Ftypes...) , _Rx, _Farg0, _Ftypes...>, _Types...> >::type bind(_Rx (__stdcall _Farg0::* const _Pmf)(_Ftypes...) , _Types&&... _Args) { return (_Bind<true, _Ret, _Pmf_wrap<_Rx (__stdcall _Farg0::*)(_Ftypes...) , _Rx, _Farg0, _Ftypes...>, _Types...>( _Pmf_wrap<_Rx (__stdcall _Farg0::*)(_Ftypes...) , _Rx, _Farg0, _Ftypes...>(_Pmf), ::std:: forward<_Types>(_Args)...)); } template<class _Ret, class _Rx, class _Farg0, class... _Ftypes, class... _Types> inline typename enable_if<!is_same<_Ret, _Rx>::value, _Bind<true, _Ret, _Pmf_wrap<_Rx (__fastcall _Farg0::*)(_Ftypes...) , _Rx, _Farg0, _Ftypes...>, _Types...> >::type bind(_Rx (__fastcall _Farg0::* const _Pmf)(_Ftypes...) , _Types&&... _Args) { return (_Bind<true, _Ret, _Pmf_wrap<_Rx (__fastcall _Farg0::*)(_Ftypes...) , _Rx, _Farg0, _Ftypes...>, _Types...>( _Pmf_wrap<_Rx (__fastcall _Farg0::*)(_Ftypes...) , _Rx, _Farg0, _Ftypes...>(_Pmf), ::std:: forward<_Types>(_Args)...)); } template<class _Ret, class _Rx, class _Farg0, class... _Ftypes, class... _Types> inline typename enable_if<!is_same<_Ret, _Rx>::value, _Bind<true, _Ret, _Pmf_wrap<_Rx (__thiscall _Farg0::*)(_Ftypes...) const, _Rx, _Farg0, _Ftypes...>, _Types...> >::type bind(_Rx (__thiscall _Farg0::* const _Pmf)(_Ftypes...) const, _Types&&... _Args) { return (_Bind<true, _Ret, _Pmf_wrap<_Rx (__thiscall _Farg0::*)(_Ftypes...) const, _Rx, _Farg0, _Ftypes...>, _Types...>( _Pmf_wrap<_Rx (__thiscall _Farg0::*)(_Ftypes...) const, _Rx, _Farg0, _Ftypes...>(_Pmf), ::std:: forward<_Types>(_Args)...)); } template<class _Ret, class _Rx, class _Farg0, class... _Ftypes, class... _Types> inline typename enable_if<!is_same<_Ret, _Rx>::value, _Bind<true, _Ret, _Pmf_wrap<_Rx (__cdecl _Farg0::*)(_Ftypes...) const, _Rx, _Farg0, _Ftypes...>, _Types...> >::type bind(_Rx (__cdecl _Farg0::* const _Pmf)(_Ftypes...) const, _Types&&... _Args) { return (_Bind<true, _Ret, _Pmf_wrap<_Rx (__cdecl _Farg0::*)(_Ftypes...) const, _Rx, _Farg0, _Ftypes...>, _Types...>( _Pmf_wrap<_Rx (__cdecl _Farg0::*)(_Ftypes...) const, _Rx, _Farg0, _Ftypes...>(_Pmf), ::std:: forward<_Types>(_Args)...)); } template<class _Ret, class _Rx, class _Farg0, class... _Ftypes, class... _Types> inline typename enable_if<!is_same<_Ret, _Rx>::value, _Bind<true, _Ret, _Pmf_wrap<_Rx (__stdcall _Farg0::*)(_Ftypes...) const, _Rx, _Farg0, _Ftypes...>, _Types...> >::type bind(_Rx (__stdcall _Farg0::* const _Pmf)(_Ftypes...) const, _Types&&... _Args) { return (_Bind<true, _Ret, _Pmf_wrap<_Rx (__stdcall _Farg0::*)(_Ftypes...) const, _Rx, _Farg0, _Ftypes...>, _Types...>( _Pmf_wrap<_Rx (__stdcall _Farg0::*)(_Ftypes...) const, _Rx, _Farg0, _Ftypes...>(_Pmf), ::std:: forward<_Types>(_Args)...)); } template<class _Ret, class _Rx, class _Farg0, class... _Ftypes, class... _Types> inline typename enable_if<!is_same<_Ret, _Rx>::value, _Bind<true, _Ret, _Pmf_wrap<_Rx (__fastcall _Farg0::*)(_Ftypes...) const, _Rx, _Farg0, _Ftypes...>, _Types...> >::type bind(_Rx (__fastcall _Farg0::* const _Pmf)(_Ftypes...) const, _Types&&... _Args) { return (_Bind<true, _Ret, _Pmf_wrap<_Rx (__fastcall _Farg0::*)(_Ftypes...) const, _Rx, _Farg0, _Ftypes...>, _Types...>( _Pmf_wrap<_Rx (__fastcall _Farg0::*)(_Ftypes...) const, _Rx, _Farg0, _Ftypes...>(_Pmf), ::std:: forward<_Types>(_Args)...)); } template<class _Ret, class _Rx, class _Farg0, class... _Ftypes, class... _Types> inline typename enable_if<!is_same<_Ret, _Rx>::value, _Bind<true, _Ret, _Pmf_wrap<_Rx (__thiscall _Farg0::*)(_Ftypes...) volatile, _Rx, _Farg0, _Ftypes...>, _Types...> >::type bind(_Rx (__thiscall _Farg0::* const _Pmf)(_Ftypes...) volatile, _Types&&... _Args) { return (_Bind<true, _Ret, _Pmf_wrap<_Rx (__thiscall _Farg0::*)(_Ftypes...) volatile, _Rx, _Farg0, _Ftypes...>, _Types...>( _Pmf_wrap<_Rx (__thiscall _Farg0::*)(_Ftypes...) volatile, _Rx, _Farg0, _Ftypes...>(_Pmf), ::std:: forward<_Types>(_Args)...)); } template<class _Ret, class _Rx, class _Farg0, class... _Ftypes, class... _Types> inline typename enable_if<!is_same<_Ret, _Rx>::value, _Bind<true, _Ret, _Pmf_wrap<_Rx (__cdecl _Farg0::*)(_Ftypes...) volatile, _Rx, _Farg0, _Ftypes...>, _Types...> >::type bind(_Rx (__cdecl _Farg0::* const _Pmf)(_Ftypes...) volatile, _Types&&... _Args) { return (_Bind<true, _Ret, _Pmf_wrap<_Rx (__cdecl _Farg0::*)(_Ftypes...) volatile, _Rx, _Farg0, _Ftypes...>, _Types...>( _Pmf_wrap<_Rx (__cdecl _Farg0::*)(_Ftypes...) volatile, _Rx, _Farg0, _Ftypes...>(_Pmf), ::std:: forward<_Types>(_Args)...)); } template<class _Ret, class _Rx, class _Farg0, class... _Ftypes, class... _Types> inline typename enable_if<!is_same<_Ret, _Rx>::value, _Bind<true, _Ret, _Pmf_wrap<_Rx (__stdcall _Farg0::*)(_Ftypes...) volatile, _Rx, _Farg0, _Ftypes...>, _Types...> >::type bind(_Rx (__stdcall _Farg0::* const _Pmf)(_Ftypes...) volatile, _Types&&... _Args) { return (_Bind<true, _Ret, _Pmf_wrap<_Rx (__stdcall _Farg0::*)(_Ftypes...) volatile, _Rx, _Farg0, _Ftypes...>, _Types...>( _Pmf_wrap<_Rx (__stdcall _Farg0::*)(_Ftypes...) volatile, _Rx, _Farg0, _Ftypes...>(_Pmf), ::std:: forward<_Types>(_Args)...)); } template<class _Ret, class _Rx, class _Farg0, class... _Ftypes, class... _Types> inline typename enable_if<!is_same<_Ret, _Rx>::value, _Bind<true, _Ret, _Pmf_wrap<_Rx (__fastcall _Farg0::*)(_Ftypes...) volatile, _Rx, _Farg0, _Ftypes...>, _Types...> >::type bind(_Rx (__fastcall _Farg0::* const _Pmf)(_Ftypes...) volatile, _Types&&... _Args) { return (_Bind<true, _Ret, _Pmf_wrap<_Rx (__fastcall _Farg0::*)(_Ftypes...) volatile, _Rx, _Farg0, _Ftypes...>, _Types...>( _Pmf_wrap<_Rx (__fastcall _Farg0::*)(_Ftypes...) volatile, _Rx, _Farg0, _Ftypes...>(_Pmf), ::std:: forward<_Types>(_Args)...)); } template<class _Ret, class _Rx, class _Farg0, class... _Ftypes, class... _Types> inline typename enable_if<!is_same<_Ret, _Rx>::value, _Bind<true, _Ret, _Pmf_wrap<_Rx (__thiscall _Farg0::*)(_Ftypes...) const volatile, _Rx, _Farg0, _Ftypes...>, _Types...> >::type bind(_Rx (__thiscall _Farg0::* const _Pmf)(_Ftypes...) const volatile, _Types&&... _Args) { return (_Bind<true, _Ret, _Pmf_wrap<_Rx (__thiscall _Farg0::*)(_Ftypes...) const volatile, _Rx, _Farg0, _Ftypes...>, _Types...>( _Pmf_wrap<_Rx (__thiscall _Farg0::*)(_Ftypes...) const volatile, _Rx, _Farg0, _Ftypes...>(_Pmf), ::std:: forward<_Types>(_Args)...)); } template<class _Ret, class _Rx, class _Farg0, class... _Ftypes, class... _Types> inline typename enable_if<!is_same<_Ret, _Rx>::value, _Bind<true, _Ret, _Pmf_wrap<_Rx (__cdecl _Farg0::*)(_Ftypes...) const volatile, _Rx, _Farg0, _Ftypes...>, _Types...> >::type bind(_Rx (__cdecl _Farg0::* const _Pmf)(_Ftypes...) const volatile, _Types&&... _Args) { return (_Bind<true, _Ret, _Pmf_wrap<_Rx (__cdecl _Farg0::*)(_Ftypes...) const volatile, _Rx, _Farg0, _Ftypes...>, _Types...>( _Pmf_wrap<_Rx (__cdecl _Farg0::*)(_Ftypes...) const volatile, _Rx, _Farg0, _Ftypes...>(_Pmf), ::std:: forward<_Types>(_Args)...)); } template<class _Ret, class _Rx, class _Farg0, class... _Ftypes, class... _Types> inline typename enable_if<!is_same<_Ret, _Rx>::value, _Bind<true, _Ret, _Pmf_wrap<_Rx (__stdcall _Farg0::*)(_Ftypes...) const volatile, _Rx, _Farg0, _Ftypes...>, _Types...> >::type bind(_Rx (__stdcall _Farg0::* const _Pmf)(_Ftypes...) const volatile, _Types&&... _Args) { return (_Bind<true, _Ret, _Pmf_wrap<_Rx (__stdcall _Farg0::*)(_Ftypes...) const volatile, _Rx, _Farg0, _Ftypes...>, _Types...>( _Pmf_wrap<_Rx (__stdcall _Farg0::*)(_Ftypes...) const volatile, _Rx, _Farg0, _Ftypes...>(_Pmf), ::std:: forward<_Types>(_Args)...)); } template<class _Ret, class _Rx, class _Farg0, class... _Ftypes, class... _Types> inline typename enable_if<!is_same<_Ret, _Rx>::value, _Bind<true, _Ret, _Pmf_wrap<_Rx (__fastcall _Farg0::*)(_Ftypes...) const volatile, _Rx, _Farg0, _Ftypes...>, _Types...> >::type bind(_Rx (__fastcall _Farg0::* const _Pmf)(_Ftypes...) const volatile, _Types&&... _Args) { return (_Bind<true, _Ret, _Pmf_wrap<_Rx (__fastcall _Farg0::*)(_Ftypes...) const volatile, _Rx, _Farg0, _Ftypes...>, _Types...>( _Pmf_wrap<_Rx (__fastcall _Farg0::*)(_Ftypes...) const volatile, _Rx, _Farg0, _Ftypes...>(_Pmf), ::std:: forward<_Types>(_Args)...)); }



	
		namespace placeholders {	
extern  _Ph<1> _1;
extern  _Ph<2> _2;
extern  _Ph<3> _3;
extern  _Ph<4> _4;
extern  _Ph<5> _5;
extern  _Ph<6> _6;
extern  _Ph<7> _7;
extern  _Ph<8> _8;
extern  _Ph<9> _9;
extern  _Ph<10> _10;
extern  _Ph<11> _11;
extern  _Ph<12> _12;
extern  _Ph<13> _13;
extern  _Ph<14> _14;
extern  _Ph<15> _15;
extern  _Ph<16> _16;
extern  _Ph<17> _17;
extern  _Ph<18> _18;
extern  _Ph<19> _19;
extern  _Ph<20> _20;
		}	

namespace tr1 {	
using ::std:: bad_function_call;
using ::std:: bind;
using ::std:: function;
using ::std:: is_bind_expression;
using ::std:: is_placeholder;
using ::std:: mem_fn;
using ::std:: swap;

namespace placeholders {
	using namespace ::std:: placeholders;
	}	
}	
}

namespace std {
	
template<class _Fty,
	class _Alloc>
	struct uses_allocator<function<_Fty>, _Alloc>
		: true_type
	{	
	};
}	

 
 #pragma warning(pop)
 #pragma pack(pop)
#line 1388 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\functional"
#line 1389 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\functional"






#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/shared_count.hpp"



#line 42 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/shared_count.hpp"



#line 46 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/shared_count.hpp"

namespace boost
{

namespace detail
{






#line 59 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/shared_count.hpp"

struct sp_nothrow_tag {};

template< class D > struct sp_inplace_tag
{
};



template< class T > class sp_reference_wrapper
{ 
public:

    explicit sp_reference_wrapper( T & t): t_( boost::addressof( t ) )
    {
    }

    template< class Y > void operator()( Y * p ) const
    {
        (*t_)( p );
    }

private:

    T * t_;
};

template< class D > struct sp_convert_reference
{
    typedef D type;
};

template< class D > struct sp_convert_reference< D& >
{
    typedef sp_reference_wrapper< D > type;
};

#line 97 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/shared_count.hpp"

class weak_count;

class shared_count
{
private:

    sp_counted_base * pi_;



#line 109 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/shared_count.hpp"

    friend class weak_count;

public:

    shared_count(): pi_(0) 


#line 118 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/shared_count.hpp"
    {
    }

    template<class Y> explicit shared_count( Y * p ): pi_( 0 )


#line 125 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/shared_count.hpp"
    {














        pi_ = new sp_counted_impl_p<Y>( p );

        if( pi_ == 0 )
        {
            boost::checked_delete( p );
            boost::throw_exception( std::bad_alloc() );
        }

#line 149 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/shared_count.hpp"
    }



#line 154 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/shared_count.hpp"
    template<class P, class D> shared_count( P p, D d ): pi_(0)
#line 156 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/shared_count.hpp"


#line 159 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/shared_count.hpp"
    {


#line 163 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/shared_count.hpp"














        pi_ = new sp_counted_impl_pd<P, D>(p, d);

        if(pi_ == 0)
        {
            d(p); 
            boost::throw_exception(std::bad_alloc());
        }

#line 186 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/shared_count.hpp"
    }



    template< class P, class D > shared_count( P p, sp_inplace_tag<D> ): pi_( 0 )


#line 194 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/shared_count.hpp"
    {














        pi_ = new sp_counted_impl_pd< P, D >( p );

        if( pi_ == 0 )
        {
            D::operator_fn( p ); 
            boost::throw_exception( std::bad_alloc() );
        }

#line 218 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/shared_count.hpp"
    }

#line 221 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/shared_count.hpp"

    template<class P, class D, class A> shared_count( P p, D d, A a ): pi_( 0 )


#line 226 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/shared_count.hpp"
    {
        typedef sp_counted_impl_pda<P, D, A> impl_type;
        typedef typename A::template rebind< impl_type >::other A2;

        A2 a2( a );






















        pi_ = a2.allocate( 1, static_cast< impl_type* >( 0 ) );

        if( pi_ != 0 )
        {
            new( static_cast< void* >( pi_ ) ) impl_type( p, d, a );
        }
        else
        {
            d( p );
            boost::throw_exception( std::bad_alloc() );
        }

#line 266 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/shared_count.hpp"
    }



    template< class P, class D, class A > shared_count( P p, sp_inplace_tag< D >, A a ): pi_( 0 )


#line 274 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/shared_count.hpp"
    {
        typedef sp_counted_impl_pda< P, D, A > impl_type;
        typedef typename A::template rebind< impl_type >::other A2;

        A2 a2( a );






















        pi_ = a2.allocate( 1, static_cast< impl_type* >( 0 ) );

        if( pi_ != 0 )
        {
            new( static_cast< void* >( pi_ ) ) impl_type( p, a );
        }
        else
        {
            D::operator_fn( p );
            boost::throw_exception( std::bad_alloc() );
        }

#line 314 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/shared_count.hpp"
    }

#line 317 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/shared_count.hpp"



    

    template<class Y>
    explicit shared_count( std::auto_ptr<Y> & r ): pi_( new sp_counted_impl_p<Y>( r.get() ) )


#line 327 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/shared_count.hpp"
    {


        if( pi_ == 0 )
        {
            boost::throw_exception(std::bad_alloc());
        }

#line 336 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/shared_count.hpp"

        r.release();
    }

#line 341 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/shared_count.hpp"



    template<class Y, class D>
    explicit shared_count( std::unique_ptr<Y, D> & r ): pi_( 0 )


#line 349 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/shared_count.hpp"
    {
        typedef typename sp_convert_reference<D>::type D2;

        D2 d2( r.get_deleter() );
        pi_ = new sp_counted_impl_pd< typename std::unique_ptr<Y, D>::pointer, D2 >( r.get(), d2 );



        if( pi_ == 0 )
        {
            boost::throw_exception( std::bad_alloc() );
        }

#line 363 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/shared_count.hpp"

        r.release();
    }

#line 368 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/shared_count.hpp"

    ~shared_count() 
    {
        if( pi_ != 0 ) pi_->release();


#line 375 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/shared_count.hpp"
    }

    shared_count(shared_count const & r): pi_(r.pi_) 


#line 381 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/shared_count.hpp"
    {
        if( pi_ != 0 ) pi_->add_ref_copy();
    }



    shared_count(shared_count && r): pi_(r.pi_) 


#line 391 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/shared_count.hpp"
    {
        r.pi_ = 0;
    }

#line 396 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/shared_count.hpp"

    explicit shared_count(weak_count const & r); 
    shared_count( weak_count const & r, sp_nothrow_tag ); 

    shared_count & operator= (shared_count const & r) 
    {
        sp_counted_base * tmp = r.pi_;

        if( tmp != pi_ )
        {
            if( tmp != 0 ) tmp->add_ref_copy();
            if( pi_ != 0 ) pi_->release();
            pi_ = tmp;
        }

        return *this;
    }

    void swap(shared_count & r) 
    {
        sp_counted_base * tmp = r.pi_;
        r.pi_ = pi_;
        pi_ = tmp;
    }

    long use_count() const 
    {
        return pi_ != 0? pi_->use_count(): 0;
    }

    bool unique() const 
    {
        return use_count() == 1;
    }

    bool empty() const 
    {
        return pi_ == 0;
    }

    friend inline bool operator==(shared_count const & a, shared_count const & b)
    {
        return a.pi_ == b.pi_;
    }

    friend inline bool operator<(shared_count const & a, shared_count const & b)
    {
        return std::less<sp_counted_base *>()( a.pi_, b.pi_ );
    }

    void * get_deleter( sp_typeinfo const & ti ) const
    {
        return pi_? pi_->get_deleter( ti ): 0;
    }

    void * get_untyped_deleter() const
    {
        return pi_? pi_->get_untyped_deleter(): 0;
    }
};


class weak_count
{
private:

    sp_counted_base * pi_;



#line 467 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/shared_count.hpp"

    friend class shared_count;

public:

    weak_count(): pi_(0) 


#line 476 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/shared_count.hpp"
    {
    }

    weak_count(shared_count const & r): pi_(r.pi_) 


#line 483 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/shared_count.hpp"
    {
        if(pi_ != 0) pi_->weak_add_ref();
    }

    weak_count(weak_count const & r): pi_(r.pi_) 


#line 491 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/shared_count.hpp"
    {
        if(pi_ != 0) pi_->weak_add_ref();
    }





    weak_count(weak_count && r): pi_(r.pi_) 


#line 503 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/shared_count.hpp"
    {
        r.pi_ = 0;
    }

#line 508 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/shared_count.hpp"

    ~weak_count() 
    {
        if(pi_ != 0) pi_->weak_release();


#line 515 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/shared_count.hpp"
    }

    weak_count & operator= (shared_count const & r) 
    {
        sp_counted_base * tmp = r.pi_;

        if( tmp != pi_ )
        {
            if(tmp != 0) tmp->weak_add_ref();
            if(pi_ != 0) pi_->weak_release();
            pi_ = tmp;
        }

        return *this;
    }

    weak_count & operator= (weak_count const & r) 
    {
        sp_counted_base * tmp = r.pi_;

        if( tmp != pi_ )
        {
            if(tmp != 0) tmp->weak_add_ref();
            if(pi_ != 0) pi_->weak_release();
            pi_ = tmp;
        }

        return *this;
    }

    void swap(weak_count & r) 
    {
        sp_counted_base * tmp = r.pi_;
        r.pi_ = pi_;
        pi_ = tmp;
    }

    long use_count() const 
    {
        return pi_ != 0? pi_->use_count(): 0;
    }

    bool empty() const 
    {
        return pi_ == 0;
    }

    friend inline bool operator==(weak_count const & a, weak_count const & b)
    {
        return a.pi_ == b.pi_;
    }

    friend inline bool operator<(weak_count const & a, weak_count const & b)
    {
        return std::less<sp_counted_base *>()(a.pi_, b.pi_);
    }
};

inline shared_count::shared_count( weak_count const & r ): pi_( r.pi_ )


#line 577 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/shared_count.hpp"
{
    if( pi_ == 0 || !pi_->add_ref_lock() )
    {
        boost::throw_exception( boost::bad_weak_ptr() );
    }
}

inline shared_count::shared_count( weak_count const & r, sp_nothrow_tag ): pi_( r.pi_ )


#line 588 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/shared_count.hpp"
{
    if( pi_ != 0 && !pi_->add_ref_lock() )
    {
        pi_ = 0;
    }
}

} 

} 





#line 604 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/shared_count.hpp"
#line 33 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_convertible.hpp"






#pragma once
#line 9 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_convertible.hpp"













#line 23 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_convertible.hpp"



#line 27 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_convertible.hpp"



#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_convertible.hpp"



namespace boost
{

namespace detail
{

template< class Y, class T > struct sp_convertible
{
    typedef char (&yes) [1];
    typedef char (&no)  [2];

    static yes f( T* );
    static no  f( ... );

    enum _vt { value = sizeof( (f)( static_cast<Y*>(0) ) ) == sizeof(yes) };
};

template< class Y, class T > struct sp_convertible< Y, T[] >
{
    enum _vt { value = false };
};

template< class Y, class T > struct sp_convertible< Y[], T[] >
{
    enum _vt { value = sp_convertible< Y[1], T[1] >::value };
};

template< class Y, std::size_t N, class T > struct sp_convertible< Y[N], T[] >
{
    enum _vt { value = sp_convertible< Y[1], T[1] >::value };
};

struct sp_empty
{
};

template< bool > struct sp_enable_if_convertible_impl;

template<> struct sp_enable_if_convertible_impl<true>
{
    typedef sp_empty type;
};

template<> struct sp_enable_if_convertible_impl<false>
{
};

template< class Y, class T > struct sp_enable_if_convertible: public sp_enable_if_convertible_impl< sp_convertible< Y, T >::value >
{
};

} 

} 

#line 90 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_convertible.hpp"

#line 92 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_convertible.hpp"
#line 35 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_nullptr_t.hpp"






#pragma once
#line 9 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_nullptr_t.hpp"














namespace boost
{

namespace detail
{





#line 34 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_nullptr_t.hpp"

    typedef std::nullptr_t sp_nullptr_t;

#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_nullptr_t.hpp"

} 

} 

#line 44 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_nullptr_t.hpp"

#line 46 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/sp_nullptr_t.hpp"
#line 36 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/spinlock_pool.hpp"






#pragma once
#line 9 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/spinlock_pool.hpp"
















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/spinlock.hpp"






#pragma once
#line 9 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/spinlock.hpp"




























#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/spinlock.hpp"


#line 41 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/spinlock.hpp"


#line 44 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/spinlock.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/spinlock_w32.hpp"






#pragma once
#line 9 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/spinlock_w32.hpp"










#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/yield_k.hpp"






#pragma once
#line 9 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/yield_k.hpp"























extern "C" void _mm_pause();
#pragma intrinsic( _mm_pause )







#line 42 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/yield_k.hpp"







#line 50 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/yield_k.hpp"

namespace boost
{

namespace detail
{


  extern "C" void __stdcall Sleep( unsigned long ms );
#line 60 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/yield_k.hpp"

inline void yield( unsigned k )
{
    if( k < 4 )
    {
    }

    else if( k < 16 )
    {
        _mm_pause();
    }
#line 72 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/yield_k.hpp"
    else if( k < 32 )
    {
        Sleep( 0 );
    }
    else
    {
        Sleep( 1 );
    }
}

} 

} 






























































#line 148 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/yield_k.hpp"

#line 150 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/yield_k.hpp"
#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/spinlock_w32.hpp"







#line 28 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/spinlock_w32.hpp"

extern "C" void _ReadWriteBarrier();
#pragma intrinsic( _ReadWriteBarrier )











#line 43 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/spinlock_w32.hpp"



namespace boost
{

namespace detail
{

class spinlock
{
public:

    long v_;

public:

    bool try_lock()
    {
        long r = _InterlockedExchange( &v_, 1 );

        _ReadWriteBarrier();

        return r == 0;
    }

    void lock()
    {
        for( unsigned k = 0; !try_lock(); ++k )
        {
            boost::detail::yield( k );
        }
    }

    void unlock()
    {
        _ReadWriteBarrier();
        *const_cast< long volatile* >( &v_ ) = 0;
    }

public:

    class scoped_lock
    {
    private:

        spinlock & sp_;

        scoped_lock( scoped_lock const & );
        scoped_lock & operator=( scoped_lock const & );

    public:

        explicit scoped_lock( spinlock & sp ): sp_( sp )
        {
            sp.lock();
        }

        ~scoped_lock()
        {
            sp_.unlock();
        }
    };
};

} 
} 



#line 114 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/spinlock_w32.hpp"
#line 45 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/spinlock.hpp"









#line 55 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/spinlock.hpp"

#line 57 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/spinlock.hpp"
#line 26 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/spinlock_pool.hpp"


namespace boost
{

namespace detail
{

template< int I > class spinlock_pool
{
private:

    static spinlock pool_[ 41 ];

public:

    static spinlock & spinlock_for( void const * pv )
    {


#line 47 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/spinlock_pool.hpp"
        std::size_t i = reinterpret_cast< std::size_t >( pv ) % 41;
#line 49 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/spinlock_pool.hpp"
        return pool_[ i ];
    }

    class scoped_lock
    {
    private:

        spinlock & sp_;

        scoped_lock( scoped_lock const & );
        scoped_lock & operator=( scoped_lock const & );

    public:

        explicit scoped_lock( void const * pv ): sp_( spinlock_for( pv ) )
        {
            sp_.lock();
        }

        ~scoped_lock()
        {
            sp_.unlock();
        }
    };
};

template< int I > spinlock spinlock_pool< I >::pool_[ 41 ] =
{
    {0}, {0}, {0}, {0}, {0}, 
    {0}, {0}, {0}, {0}, {0}, 
    {0}, {0}, {0}, {0}, {0}, 
    {0}, {0}, {0}, {0}, {0}, 
    {0}, {0}, {0}, {0}, {0}, 
    {0}, {0}, {0}, {0}, {0}, 
    {0}, {0}, {0}, {0}, {0}, 
    {0}, {0}, {0}, {0}, {0}, 
    {0}
};

} 
} 

#line 92 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/spinlock_pool.hpp"
#line 39 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/memory_order.hpp"






#pragma once
#line 9 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/memory_order.hpp"












namespace boost
{


















enum memory_order
{
    memory_order_relaxed = 0,
    memory_order_acquire = 1,
    memory_order_release = 2,
    memory_order_acq_rel = 3, 
    memory_order_seq_cst = 7, 
    memory_order_consume = 8
};

} 

#line 54 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/memory_order.hpp"
#line 40 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"
#line 41 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"











#line 53 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"
#line 54 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"

namespace boost
{

template<class T> class shared_ptr;
template<class T> class weak_ptr;
template<class T> class enable_shared_from_this;
class enable_shared_from_raw;

namespace detail
{



template< class T > struct sp_element
{
    typedef T type;
};



template< class T > struct sp_element< T[] >
{
    typedef T type;
};



template< class T, std::size_t N > struct sp_element< T[N] >
{
    typedef T type;
};

#line 88 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"

#line 90 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"



template< class T > struct sp_dereference
{
    typedef T & type;
};

template<> struct sp_dereference< void >
{
    typedef void type;
};



template<> struct sp_dereference< void const >
{
    typedef void type;
};

template<> struct sp_dereference< void volatile >
{
    typedef void type;
};

template<> struct sp_dereference< void const volatile >
{
    typedef void type;
};

#line 121 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"



template< class T > struct sp_dereference< T[] >
{
    typedef void type;
};



template< class T, std::size_t N > struct sp_dereference< T[N] >
{
    typedef void type;
};

#line 137 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"

#line 139 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"



template< class T > struct sp_member_access
{
    typedef T * type;
};



template< class T > struct sp_member_access< T[] >
{
    typedef void type;
};



template< class T, std::size_t N > struct sp_member_access< T[N] >
{
    typedef void type;
};

#line 162 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"

#line 164 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"



template< class T > struct sp_array_access
{
    typedef void type;
};



template< class T > struct sp_array_access< T[] >
{
    typedef T & type;
};



template< class T, std::size_t N > struct sp_array_access< T[N] >
{
    typedef T & type;
};

#line 187 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"

#line 189 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"



template< class T > struct sp_extent
{
    enum _vt { value = 0 };
};



template< class T, std::size_t N > struct sp_extent< T[N] >
{
    enum _vt { value = N };
};

#line 205 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"



template< class X, class Y, class T > inline void sp_enable_shared_from_this( boost::shared_ptr<X> const * ppx, Y const * py, boost::enable_shared_from_this< T > const * pe )
{
    if( pe != 0 )
    {
        pe->_internal_accept_owner( ppx, const_cast< Y* >( py ) );
    }
}

template< class X, class Y > inline void sp_enable_shared_from_this( boost::shared_ptr<X> * ppx, Y const * py, boost::enable_shared_from_raw const * pe );
















inline void sp_enable_shared_from_this( ... )
{
}

#line 238 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"





template< class T, class R > struct sp_enable_if_auto_ptr
{
};

template< class T, class R > struct sp_enable_if_auto_ptr< std::auto_ptr< T >, R >
{
    typedef R type;
}; 

#line 253 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"



template< class Y, class T > inline void sp_assert_convertible()
{


    
    typedef char tmp[ sp_convertible< Y, T >::value? 1: -1 ];
    (void)sizeof( tmp );






#line 270 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"
}



template< class T, class Y > inline void sp_pointer_construct( boost::shared_ptr< T > * ppx, Y * p, boost::detail::shared_count & pn )
{
    boost::detail::shared_count( p ).swap( pn );
    boost::detail::sp_enable_shared_from_this( ppx, p, p );
}



template< class T, class Y > inline void sp_pointer_construct( boost::shared_ptr< T[] > * , Y * p, boost::detail::shared_count & pn )
{
    sp_assert_convertible< Y[], T[] >();
    boost::detail::shared_count( p, boost::checked_array_deleter< T >() ).swap( pn );
}

template< class T, std::size_t N, class Y > inline void sp_pointer_construct( boost::shared_ptr< T[N] > * , Y * p, boost::detail::shared_count & pn )
{
    sp_assert_convertible< Y[N], T[N] >();
    boost::detail::shared_count( p, boost::checked_array_deleter< T >() ).swap( pn );
}

#line 295 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"



template< class T, class Y > inline void sp_deleter_construct( boost::shared_ptr< T > * ppx, Y * p )
{
    boost::detail::sp_enable_shared_from_this( ppx, p, p );
}



template< class T, class Y > inline void sp_deleter_construct( boost::shared_ptr< T[] > * , Y *  )
{
    sp_assert_convertible< Y[], T[] >();
}

template< class T, std::size_t N, class Y > inline void sp_deleter_construct( boost::shared_ptr< T[N] > * , Y *  )
{
    sp_assert_convertible< Y[N], T[N] >();
}

#line 316 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"

} 










template<class T> class shared_ptr
{
private:

    
    typedef shared_ptr<T> this_type;

public:

    typedef typename boost::detail::sp_element< T >::type element_type;

    shared_ptr()  : px( 0 ), pn() 
    {
    }



    shared_ptr( boost::detail::sp_nullptr_t )  : px( 0 ), pn() 
    {
    }

#line 350 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"

    template<class Y>
    explicit shared_ptr( Y * p ): px( p ), pn() 
    {
        boost::detail::sp_pointer_construct( this, p, pn );
    }

    
    
    
    
    

    template<class Y, class D> shared_ptr( Y * p, D d ): px( p ), pn( p, d )
    {
        boost::detail::sp_deleter_construct( this, p );
    }



    template<class D> shared_ptr( boost::detail::sp_nullptr_t p, D d ): px( p ), pn( p, d )
    {
    }

#line 375 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"

    

    template<class Y, class D, class A> shared_ptr( Y * p, D d, A a ): px( p ), pn( p, d, a )
    {
        boost::detail::sp_deleter_construct( this, p );
    }



    template<class D, class A> shared_ptr( boost::detail::sp_nullptr_t p, D d, A a ): px( p ), pn( p, d, a )
    {
    }

#line 390 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"







    shared_ptr( shared_ptr const & r )  : px( r.px ), pn( r.pn )
    {
    }

#line 402 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"

    template<class Y>
    explicit shared_ptr( weak_ptr<Y> const & r ): pn( r.pn ) 
    {
        boost::detail::sp_assert_convertible< Y, T >();

        
        px = r.px;
    }

    template<class Y>
    shared_ptr( weak_ptr<Y> const & r, boost::detail::sp_nothrow_tag )
     : px( 0 ), pn( r.pn, boost::detail::sp_nothrow_tag() )
    {
        if( !pn.empty() )
        {
            px = r.px;
        }
    }

    template<class Y>


    shared_ptr( shared_ptr<Y> const & r, typename boost::detail::sp_enable_if_convertible<Y,T>::type = boost::detail::sp_empty() )





#line 432 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"
     : px( r.px ), pn( r.pn )
    {
        boost::detail::sp_assert_convertible< Y, T >();
    }

    
    template< class Y >
    shared_ptr( shared_ptr<Y> const & r, element_type * p )  : px( p ), pn( r.pn )
    {
    }



    template<class Y>
    explicit shared_ptr( std::auto_ptr<Y> & r ): px(r.get()), pn()
    {
        boost::detail::sp_assert_convertible< Y, T >();

        Y * tmp = r.get();
        pn = boost::detail::shared_count( r );

        boost::detail::sp_deleter_construct( this, tmp );
    }



    template<class Y>
    shared_ptr( std::auto_ptr<Y> && r ): px(r.get()), pn()
    {
        boost::detail::sp_assert_convertible< Y, T >();

        Y * tmp = r.get();
        pn = boost::detail::shared_count( r );

        boost::detail::sp_deleter_construct( this, tmp );
    }
















#line 485 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"

#line 487 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"



    template< class Y, class D >
    shared_ptr( std::unique_ptr< Y, D > && r ): px( r.get() ), pn()
    {
        boost::detail::sp_assert_convertible< Y, T >();

        typename std::unique_ptr< Y, D >::pointer tmp = r.get();
        pn = boost::detail::shared_count( r );

        boost::detail::sp_deleter_construct( this, tmp );
    }

#line 502 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"

    

    shared_ptr & operator=( shared_ptr const & r ) 
    {
        this_type(r).swap(*this);
        return *this;
    }



    template<class Y>
    shared_ptr & operator=(shared_ptr<Y> const & r) 
    {
        this_type(r).swap(*this);
        return *this;
    }

#line 521 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"



    template<class Y>
    shared_ptr & operator=( std::auto_ptr<Y> & r )
    {
        this_type( r ).swap( *this );
        return *this;
    }



    template<class Y>
    shared_ptr & operator=( std::auto_ptr<Y> && r )
    {
        this_type( static_cast< std::auto_ptr<Y> && >( r ) ).swap( *this );
        return *this;
    }










#line 550 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"

#line 552 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"



    template<class Y, class D>
    shared_ptr & operator=( std::unique_ptr<Y, D> && r )
    {
        this_type( static_cast< std::unique_ptr<Y, D> && >( r ) ).swap(*this);
        return *this;
    }

#line 563 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"





    shared_ptr( shared_ptr && r )  : px( r.px ), pn()
    {
        pn.swap( r.pn );
        r.px = 0;
    }

    template<class Y>


    shared_ptr( shared_ptr<Y> && r, typename boost::detail::sp_enable_if_convertible<Y,T>::type = boost::detail::sp_empty() )





#line 584 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"
     : px( r.px ), pn()
    {
        boost::detail::sp_assert_convertible< Y, T >();

        pn.swap( r.pn );
        r.px = 0;
    }

    shared_ptr & operator=( shared_ptr && r ) 
    {
        this_type( static_cast< shared_ptr && >( r ) ).swap( *this );
        return *this;
    }

    template<class Y>
    shared_ptr & operator=( shared_ptr<Y> && r ) 
    {
        this_type( static_cast< shared_ptr<Y> && >( r ) ).swap( *this );
        return *this;
    }

#line 606 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"



    shared_ptr & operator=( boost::detail::sp_nullptr_t )  
    {
        this_type().swap(*this);
        return *this;
    }

#line 616 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"

    void reset()  
    {
        this_type().swap(*this);
    }

    template<class Y> void reset( Y * p ) 
    {
        (void)( (!!(p == 0 || p != px)) || (_wassert(L"p == 0 || p != px", L"C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp", 624), 0) ); 
        this_type( p ).swap( *this );
    }

    template<class Y, class D> void reset( Y * p, D d )
    {
        this_type( p, d ).swap( *this );
    }

    template<class Y, class D, class A> void reset( Y * p, D d, A a )
    {
        this_type( p, d, a ).swap( *this );
    }

    template<class Y> void reset( shared_ptr<Y> const & r, element_type * p )
    {
        this_type( r, p ).swap( *this );
    }
    
    
    typename boost::detail::sp_dereference< T >::type operator* () const
    {
        (void)( (!!(px != 0)) || (_wassert(L"px != 0", L"C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp", 646), 0) );
        return *px;
    }
    
    
    typename boost::detail::sp_member_access< T >::type operator-> () const 
    {
        (void)( (!!(px != 0)) || (_wassert(L"px != 0", L"C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp", 653), 0) );
        return px;
    }
    
    
    typename boost::detail::sp_array_access< T >::type operator[] ( std::ptrdiff_t i ) const
    {
        (void)( (!!(px != 0)) || (_wassert(L"px != 0", L"C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp", 660), 0) );
        (void)( (!!(i >= 0 && ( i < boost::detail::sp_extent< T >::value || boost::detail::sp_extent< T >::value == 0 ))) || (_wassert(L"i >= 0 && ( i < boost::detail::sp_extent< T >::value || boost::detail::sp_extent< T >::value == 0 )", L"C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp", 661), 0) );

        return px[ i ];
    }

    element_type * get() const 
    {
        return px;
    }


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/operator_bool.hpp"










    explicit operator bool () const 
    {
        return px != 0;
    }










































#line 58 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/detail/operator_bool.hpp"

    
    bool operator! () const 
    {
        return px == 0;
    }
#line 673 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"

    bool unique() const 
    {
        return pn.unique();
    }

    long use_count() const 
    {
        return pn.use_count();
    }

    void swap( shared_ptr & other ) 
    {
        std::swap(px, other.px);
        pn.swap(other.pn);
    }

    template<class Y> bool owner_before( shared_ptr<Y> const & rhs ) const 
    {
        return pn < rhs.pn;
    }

    template<class Y> bool owner_before( weak_ptr<Y> const & rhs ) const 
    {
        return pn < rhs.pn;
    }

    void * _internal_get_deleter( boost::detail::sp_typeinfo const & ti ) const 
    {
        return pn.get_deleter( ti );
    }

    void * _internal_get_untyped_deleter() const 
    {
        return pn.get_untyped_deleter();
    }

    bool _internal_equiv( shared_ptr const & r ) const 
    {
        return px == r.px && pn == r.pn;
    }






private:

    template<class Y> friend class shared_ptr;
    template<class Y> friend class weak_ptr;


#line 727 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"

    element_type * px;                 
    boost::detail::shared_count pn;    

};  

template<class T, class U> inline bool operator==(shared_ptr<T> const & a, shared_ptr<U> const & b) 
{
    return a.get() == b.get();
}

template<class T, class U> inline bool operator!=(shared_ptr<T> const & a, shared_ptr<U> const & b) 
{
    return a.get() != b.get();
}










#line 753 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"



template<class T> inline bool operator==( shared_ptr<T> const & p, boost::detail::sp_nullptr_t ) 
{
    return p.get() == 0;
}

template<class T> inline bool operator==( boost::detail::sp_nullptr_t, shared_ptr<T> const & p ) 
{
    return p.get() == 0;
}

template<class T> inline bool operator!=( shared_ptr<T> const & p, boost::detail::sp_nullptr_t ) 
{
    return p.get() != 0;
}

template<class T> inline bool operator!=( boost::detail::sp_nullptr_t, shared_ptr<T> const & p ) 
{
    return p.get() != 0;
}

#line 777 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"

template<class T, class U> inline bool operator<(shared_ptr<T> const & a, shared_ptr<U> const & b) 
{
    return a.owner_before( b );
}

template<class T> inline void swap(shared_ptr<T> & a, shared_ptr<T> & b) 
{
    a.swap(b);
}

template<class T, class U> shared_ptr<T> static_pointer_cast( shared_ptr<U> const & r ) 
{
    (void) static_cast< T* >( static_cast< U* >( 0 ) );

    typedef typename shared_ptr<T>::element_type E;

    E * p = static_cast< E* >( r.get() );
    return shared_ptr<T>( r, p );
}

template<class T, class U> shared_ptr<T> const_pointer_cast( shared_ptr<U> const & r ) 
{
    (void) const_cast< T* >( static_cast< U* >( 0 ) );

    typedef typename shared_ptr<T>::element_type E;

    E * p = const_cast< E* >( r.get() );
    return shared_ptr<T>( r, p );
}

template<class T, class U> shared_ptr<T> dynamic_pointer_cast( shared_ptr<U> const & r ) 
{
    (void) dynamic_cast< T* >( static_cast< U* >( 0 ) );

    typedef typename shared_ptr<T>::element_type E;

    E * p = dynamic_cast< E* >( r.get() );
    return p? shared_ptr<T>( r, p ): shared_ptr<T>();
}

template<class T, class U> shared_ptr<T> reinterpret_pointer_cast( shared_ptr<U> const & r ) 
{
    (void) reinterpret_cast< T* >( static_cast< U* >( 0 ) );

    typedef typename shared_ptr<T>::element_type E;

    E * p = reinterpret_cast< E* >( r.get() );
    return shared_ptr<T>( r, p );
}



template<class T> inline typename shared_ptr<T>::element_type * get_pointer(shared_ptr<T> const & p) 
{
    return p.get();
}













#line 848 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"








#line 857 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"
template<class E, class T, class Y> std::basic_ostream<E, T> & operator<< (std::basic_ostream<E, T> & os, shared_ptr<Y> const & p)
#line 859 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"
{
    os << p.get();
    return os;
}

#line 865 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"

#line 867 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"

#line 869 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"



namespace detail
{












#line 889 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"

template<class D, class T> D * basic_get_deleter( shared_ptr<T> const & p ) 
{
    return static_cast<D *>( p._internal_get_deleter(typeid(D)) );
}

#line 896 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"

class esft2_deleter_wrapper
{
private:

    shared_ptr<void> deleter_;

public:

    esft2_deleter_wrapper()
    {
    }

    template< class T > void set_deleter( shared_ptr<T> const & deleter )
    {
        deleter_ = deleter;
    }

    template<typename D> D* get_deleter() const 
    {
        return boost::detail::basic_get_deleter<D>( deleter_ );
    }

    template< class T> void operator()( T* )
    {
        (void)( (!!(deleter_.use_count() <= 1)) || (_wassert(L"deleter_.use_count() <= 1", L"C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp", 921), 0) );
        deleter_.reset();
    }
};

} 

template<class D, class T> D * get_deleter( shared_ptr<T> const & p ) 
{
    D *del = boost::detail::basic_get_deleter<D>(p);

    if(del == 0)
    {
        boost::detail::esft2_deleter_wrapper *del_wrapper = boost::detail::basic_get_deleter<boost::detail::esft2_deleter_wrapper>(p);


        if(del_wrapper) del = del_wrapper->::boost::detail::esft2_deleter_wrapper::get_deleter<D>();
    }

    return del;
}





template<class T> inline bool atomic_is_lock_free( shared_ptr<T> const *  ) 
{
    return false;
}

template<class T> shared_ptr<T> atomic_load( shared_ptr<T> const * p )
{
    boost::detail::spinlock_pool<2>::scoped_lock lock( p );
    return *p;
}

template<class T> inline shared_ptr<T> atomic_load_explicit( shared_ptr<T> const * p, memory_order  )
{
    return atomic_load( p );
}

template<class T> void atomic_store( shared_ptr<T> * p, shared_ptr<T> r )
{
    boost::detail::spinlock_pool<2>::scoped_lock lock( p );
    p->swap( r );
}

template<class T> inline void atomic_store_explicit( shared_ptr<T> * p, shared_ptr<T> r, memory_order  )
{
    atomic_store( p, r ); 
}

template<class T> shared_ptr<T> atomic_exchange( shared_ptr<T> * p, shared_ptr<T> r )
{
    boost::detail::spinlock & sp = boost::detail::spinlock_pool<2>::spinlock_for( p );

    sp.lock();
    p->swap( r );
    sp.unlock();

    return r; 
}

template<class T> shared_ptr<T> atomic_exchange_explicit( shared_ptr<T> * p, shared_ptr<T> r, memory_order  )
{
    return atomic_exchange( p, r ); 
}

template<class T> bool atomic_compare_exchange( shared_ptr<T> * p, shared_ptr<T> * v, shared_ptr<T> w )
{
    boost::detail::spinlock & sp = boost::detail::spinlock_pool<2>::spinlock_for( p );

    sp.lock();

    if( p->_internal_equiv( *v ) )
    {
        p->swap( w );

        sp.unlock();

        return true;
    }
    else
    {
        shared_ptr<T> tmp( *p );

        sp.unlock();

        tmp.swap( *v );
        return false;
    }
}

template<class T> inline bool atomic_compare_exchange_explicit( shared_ptr<T> * p, shared_ptr<T> * v, shared_ptr<T> w, memory_order , memory_order  )
{
    return atomic_compare_exchange( p, v, w ); 
}

#line 1021 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"



template< class T > struct hash;

template< class T > std::size_t hash_value( boost::shared_ptr<T> const & p ) 
{
    return boost::hash< T* >()( p.get() );
}

} 

#line 1034 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"

#line 1036 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/smart_ptr/shared_ptr.hpp"
#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/shared_ptr.hpp"

#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/shared_ptr.hpp"
#line 25 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/predicate_result.hpp"





#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/suppress_warnings.hpp"















#pragma warning(push)
#pragma warning(disable: 4511) 
#pragma warning(disable: 4512) 
#pragma warning(disable: 4100) 
#pragma warning(disable: 4996) 
#pragma warning(disable: 4355) 
#pragma warning(disable: 4706) 
#pragma warning(disable: 4251) 
#pragma warning(disable: 4127) 
#pragma warning(disable: 4290) 
#pragma warning(disable: 4180) 
#pragma warning(disable: 4275) 
#pragma warning(disable: 4267) 
#pragma warning(disable: 4511) 
#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/suppress_warnings.hpp"

#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/predicate_result.hpp"



namespace boost {

namespace test_tools {





class  predicate_result {
    typedef unit_test::const_string      const_string;
    struct dummy { void nonnull() {}; };
    typedef void (dummy::*safe_bool)();

public:
    
    predicate_result( bool pv_ ) 
    : p_predicate_value( pv_ )
    {}

    template<typename BoolConvertable>
    predicate_result( BoolConvertable const& pv_ ) : p_predicate_value( !!pv_ ) {}

    
    bool                operator!() const           { return !p_predicate_value; }
    void                operator=( bool pv_ )       { p_predicate_value.value = pv_; }
    operator            safe_bool() const           { return !!p_predicate_value ? &dummy::nonnull : 0; }

    
    class readonly_property62 : public boost::unit_test::readonly_property<bool > { typedef boost::unit_test::readonly_property<bool > base_prop; friend class predicate_result ;   typedef base_prop::write_param_t write_param_t; public: readonly_property62() {} explicit readonly_property62( write_param_t init_v ) : base_prop( init_v ) {} } p_predicate_value;

    
    bool                has_empty_message() const   { return !m_message; }
    wrap_stringstream&  message()
    {
        if( !m_message )
            m_message.reset( new wrap_stringstream );

        return *m_message;
    }
    const_string        message() const                   { return !m_message ? const_string() : const_string( m_message->str() ); }

private:
    
    shared_ptr<wrap_stringstream> m_message;
};

} 

} 



#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/enable_warnings.hpp"















#pragma warning(default: 4511) 
#pragma warning(default: 4512) 
#pragma warning(default: 4100) 
#pragma warning(default: 4996) 
#pragma warning(default: 4355) 
#pragma warning(default: 4706) 
#pragma warning(default: 4251) 
#pragma warning(default: 4127) 
#pragma warning(default: 4290) 
#pragma warning(default: 4180) 
#pragma warning(default: 4275) 
#pragma warning(default: 4267) 
#pragma warning(default: 4511) 
#pragma warning(pop)
#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/enable_warnings.hpp"
#line 87 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/predicate_result.hpp"

#line 89 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/predicate_result.hpp"
#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/test_tools.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/unit_test_log.hpp"




















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/test_observer.hpp"


















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/fwd_decl.hpp"

















namespace boost {

class  execution_monitor;
class  execution_exception;

namespace unit_test {

class  test_unit;
class  test_case;
class  test_suite;
class  master_test_suite_t;

class  test_tree_visitor;
class  test_observer;


class  unit_test_monitor_t;
class  unit_test_log_t;

class  unit_test_log_formatter;
struct log_entry_data;
struct log_checkpoint_data;

class lazy_ostream;

} 

} 

#line 48 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/fwd_decl.hpp"

#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/test_observer.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/global_typedef.hpp"






















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/suppress_warnings.hpp"















#pragma warning(push)
#pragma warning(disable: 4511) 
#pragma warning(disable: 4512) 
#pragma warning(disable: 4100) 
#pragma warning(disable: 4996) 
#pragma warning(disable: 4355) 
#pragma warning(disable: 4706) 
#pragma warning(disable: 4251) 
#pragma warning(disable: 4127) 
#pragma warning(disable: 4290) 
#pragma warning(disable: 4180) 
#pragma warning(disable: 4275) 
#pragma warning(disable: 4267) 
#pragma warning(disable: 4511) 
#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/suppress_warnings.hpp"

#line 24 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/global_typedef.hpp"



namespace boost {

namespace unit_test {

typedef unsigned long   counter_t;



enum report_level  { INV_REPORT_LEVEL, CONFIRMATION_REPORT, SHORT_REPORT, DETAILED_REPORT, NO_REPORT };



enum output_format { INV_OF, CLF , XML  };



enum test_unit_type { tut_case = 0x01, tut_suite = 0x10, tut_any = 0x11 };



typedef unsigned long   test_unit_id;

const test_unit_id INV_TEST_UNIT_ID  = 0xFFFFFFFF;
const test_unit_id MAX_TEST_CASE_ID  = 0xFFFFFFFE;
const test_unit_id MIN_TEST_CASE_ID  = 0x00010000;
const test_unit_id MAX_TEST_SUITE_ID = 0x0000FF00;
const test_unit_id MIN_TEST_SUITE_ID = 0x00000001;



namespace ut_detail {

inline test_unit_type
test_id_2_unit_type( test_unit_id id )
{
    return (id & 0xFFFF0000) != 0 ? tut_case : tut_suite;
}




template<class T> 
struct static_constant { 
    static T value; 
}; 

template<class T> 
T static_constant<T>::value; 



} 

} 

} 



#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/enable_warnings.hpp"















#pragma warning(default: 4511) 
#pragma warning(default: 4512) 
#pragma warning(default: 4100) 
#pragma warning(default: 4996) 
#pragma warning(default: 4355) 
#pragma warning(default: 4706) 
#pragma warning(default: 4251) 
#pragma warning(default: 4127) 
#pragma warning(default: 4290) 
#pragma warning(default: 4180) 
#pragma warning(default: 4275) 
#pragma warning(default: 4267) 
#pragma warning(default: 4511) 
#pragma warning(pop)
#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/enable_warnings.hpp"
#line 87 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/global_typedef.hpp"

#line 89 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/global_typedef.hpp"
#line 21 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/test_observer.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/suppress_warnings.hpp"















#pragma warning(push)
#pragma warning(disable: 4511) 
#pragma warning(disable: 4512) 
#pragma warning(disable: 4100) 
#pragma warning(disable: 4996) 
#pragma warning(disable: 4355) 
#pragma warning(disable: 4706) 
#pragma warning(disable: 4251) 
#pragma warning(disable: 4127) 
#pragma warning(disable: 4290) 
#pragma warning(disable: 4180) 
#pragma warning(disable: 4275) 
#pragma warning(disable: 4267) 
#pragma warning(disable: 4511) 
#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/suppress_warnings.hpp"

#line 24 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/test_observer.hpp"



namespace boost {

namespace unit_test {





class  test_observer {
public:
    
    virtual void    test_start( counter_t  ) {}
    virtual void    test_finish() {}
    virtual void    test_aborted() {}

    virtual void    test_unit_start( test_unit const& ) {}
    virtual void    test_unit_finish( test_unit const&, unsigned long  ) {}
    virtual void    test_unit_skipped( test_unit const& ) {}
    virtual void    test_unit_aborted( test_unit const& ) {}

    virtual void    assertion_result( bool  ) {}
    virtual void    exception_caught( execution_exception const& ) {}

    virtual int     priority() { return 0; }

protected:
     ~test_observer() {}
};

} 

} 



#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/enable_warnings.hpp"















#pragma warning(default: 4511) 
#pragma warning(default: 4512) 
#pragma warning(default: 4100) 
#pragma warning(default: 4996) 
#pragma warning(default: 4355) 
#pragma warning(default: 4706) 
#pragma warning(default: 4251) 
#pragma warning(default: 4127) 
#pragma warning(default: 4290) 
#pragma warning(default: 4180) 
#pragma warning(default: 4275) 
#pragma warning(default: 4267) 
#pragma warning(default: 4511) 
#pragma warning(pop)
#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/enable_warnings.hpp"
#line 63 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/test_observer.hpp"

#line 65 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/test_observer.hpp"

#line 22 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/unit_test_log.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/log_level.hpp"

















namespace boost {
namespace unit_test {






enum log_level {
    invalid_log_level        = -1,
    log_successful_tests     = 0,
    log_test_units           = 1,
    log_messages             = 2,
    log_warnings             = 3,
    log_all_errors           = 4, 
    log_cpp_exception_errors = 5, 
    log_system_errors        = 6, 
    log_fatal_errors         = 7, 
                                  
    log_nothing              = 8
};

} 
} 

#line 44 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/log_level.hpp"
#line 25 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/unit_test_log.hpp"



#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/trivial_singleton.hpp"




















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/noncopyable.hpp"













namespace boost {






namespace noncopyable_  
{
  class noncopyable
  {
   protected:




    noncopyable() {}
      ~noncopyable() {}
#line 33 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/noncopyable.hpp"




    private:  
      noncopyable( const noncopyable& );
      noncopyable& operator=( const noncopyable& );
#line 41 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/noncopyable.hpp"
  };
}

typedef noncopyable_::noncopyable noncopyable;

} 

#line 49 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/noncopyable.hpp"
#line 22 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/trivial_singleton.hpp"

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/suppress_warnings.hpp"















#pragma warning(push)
#pragma warning(disable: 4511) 
#pragma warning(disable: 4512) 
#pragma warning(disable: 4100) 
#pragma warning(disable: 4996) 
#pragma warning(disable: 4355) 
#pragma warning(disable: 4706) 
#pragma warning(disable: 4251) 
#pragma warning(disable: 4127) 
#pragma warning(disable: 4290) 
#pragma warning(disable: 4180) 
#pragma warning(disable: 4275) 
#pragma warning(disable: 4267) 
#pragma warning(disable: 4511) 
#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/suppress_warnings.hpp"

#line 24 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/trivial_singleton.hpp"



namespace boost {

namespace unit_test {





template<typename Derived>
class singleton : private boost::noncopyable {
public:
    static Derived& instance() { static Derived the_inst; return the_inst; }    
protected:
    singleton()  {}
    ~singleton() {}
};

} 












#line 58 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/trivial_singleton.hpp"



#line 62 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/trivial_singleton.hpp"




#line 67 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/trivial_singleton.hpp"

} 



#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/enable_warnings.hpp"















#pragma warning(default: 4511) 
#pragma warning(default: 4512) 
#pragma warning(default: 4100) 
#pragma warning(default: 4996) 
#pragma warning(default: 4355) 
#pragma warning(default: 4706) 
#pragma warning(default: 4251) 
#pragma warning(default: 4127) 
#pragma warning(default: 4290) 
#pragma warning(default: 4180) 
#pragma warning(default: 4275) 
#pragma warning(default: 4267) 
#pragma warning(default: 4511) 
#pragma warning(pop)
#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/enable_warnings.hpp"
#line 73 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/trivial_singleton.hpp"

#line 75 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/trivial_singleton.hpp"
#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/unit_test_log.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/lazy_ostream.hpp"























#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/suppress_warnings.hpp"















#pragma warning(push)
#pragma warning(disable: 4511) 
#pragma warning(disable: 4512) 
#pragma warning(disable: 4100) 
#pragma warning(disable: 4996) 
#pragma warning(disable: 4355) 
#pragma warning(disable: 4706) 
#pragma warning(disable: 4251) 
#pragma warning(disable: 4127) 
#pragma warning(disable: 4290) 
#pragma warning(disable: 4180) 
#pragma warning(disable: 4275) 
#pragma warning(disable: 4267) 
#pragma warning(disable: 4511) 
#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/suppress_warnings.hpp"

#line 25 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/lazy_ostream.hpp"







namespace boost {

namespace unit_test {

class lazy_ostream {
public:
    static lazy_ostream&    instance()                                              { static lazy_ostream inst; return inst; }

    friend std::ostream&    operator<<( std::ostream& ostr, lazy_ostream const& o ) { return o( ostr ); }

    
    bool                    empty() const                                           { return m_empty; }

    
    virtual std::ostream&   operator()( std::ostream& ostr ) const                  { return ostr; }
protected:
    explicit                lazy_ostream( bool empty = true ) : m_empty( empty )    {}

    


#line 54 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/lazy_ostream.hpp"
     ~lazy_ostream()                                    {}

private:
    
    bool                    m_empty;
};



template<typename T>
class lazy_ostream_impl : public lazy_ostream {
public:
    lazy_ostream_impl( lazy_ostream const& prev, T value )
    : lazy_ostream( false )
    , m_prev( prev )
    , m_value( value )
    {}
private:
    virtual std::ostream&   operator()( std::ostream& ostr ) const
    {
        return m_prev(ostr) << m_value;
    }

    
    lazy_ostream const&     m_prev;
    T                       m_value;
};



template<typename T>
inline lazy_ostream_impl<T const&>
operator<<( lazy_ostream const& prev, T const& v )
{
    return lazy_ostream_impl<T const&>( prev, v );
}





template<typename R,typename S>
inline lazy_ostream_impl<R& (__cdecl *)(S&)>
operator<<( lazy_ostream const& prev, R& (__cdecl *man)(S&) )
{
    return lazy_ostream_impl<R& (__cdecl *)(S&)>( prev, man );
}



#line 105 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/lazy_ostream.hpp"

} 

} 



#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/enable_warnings.hpp"















#pragma warning(default: 4511) 
#pragma warning(default: 4512) 
#pragma warning(default: 4100) 
#pragma warning(default: 4996) 
#pragma warning(default: 4355) 
#pragma warning(default: 4706) 
#pragma warning(default: 4251) 
#pragma warning(default: 4127) 
#pragma warning(default: 4290) 
#pragma warning(default: 4180) 
#pragma warning(default: 4275) 
#pragma warning(default: 4267) 
#pragma warning(default: 4511) 
#pragma warning(pop)
#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/enable_warnings.hpp"
#line 113 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/lazy_ostream.hpp"

#line 115 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/lazy_ostream.hpp"
#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/unit_test_log.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility.hpp"












#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/base_from_member.hpp"













#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum_binary_params.hpp"




























#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum_binary_params.hpp"




#line 35 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum_binary_params.hpp"

#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum_binary_params.hpp"




#line 42 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum_binary_params.hpp"

#line 44 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum_binary_params.hpp"








#line 53 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum_binary_params.hpp"

#line 55 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum_binary_params.hpp"
#line 15 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/base_from_member.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum_params.hpp"



























#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum_params.hpp"










#line 40 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum_params.hpp"

#line 42 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum_params.hpp"
#line 16 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/base_from_member.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/repeat_from_to.hpp"
















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/arithmetic/add.hpp"



















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/control/while.hpp"



















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/detail/auto_rec.hpp"















#line 17 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/detail/auto_rec.hpp"




















































































































































































































































































#line 294 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/detail/auto_rec.hpp"
#line 21 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/control/while.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/fold_left.hpp"

















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/control/while.hpp"
























































































































































































































































































































#line 19 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/fold_left.hpp"

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/detail/auto_rec.hpp"















#line 17 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/detail/auto_rec.hpp"




















































































































































































































































































#line 294 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/detail/auto_rec.hpp"
#line 21 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/fold_left.hpp"





#line 27 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/fold_left.hpp"











#line 39 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/fold_left.hpp"

#line 41 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/fold_left.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/detail/fold_left.hpp"
















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/control/expr_iif.hpp"























#line 25 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/control/expr_iif.hpp"






#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/control/expr_iif.hpp"
#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/detail/fold_left.hpp"

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/adt.hpp"

















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/detail/is_binary.hpp"















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/detail/check.hpp"
























#line 26 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/detail/check.hpp"





#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/detail/check.hpp"












#line 45 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/detail/check.hpp"



#line 49 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/detail/check.hpp"
#line 17 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/detail/is_binary.hpp"








#line 26 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/detail/is_binary.hpp"




#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/detail/is_binary.hpp"
#line 19 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/adt.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/logical/compl.hpp"























#line 25 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/logical/compl.hpp"



#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/logical/compl.hpp"


#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/logical/compl.hpp"




#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/logical/compl.hpp"
#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/adt.hpp"


















#line 39 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/adt.hpp"











#line 51 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/adt.hpp"










#line 62 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/adt.hpp"

#line 64 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/adt.hpp"







#line 72 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/adt.hpp"

#line 74 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/adt.hpp"
#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/detail/fold_left.hpp"



































































































































































































































































#line 280 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/detail/fold_left.hpp"

#line 42 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/fold_left.hpp"
#line 43 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/fold_left.hpp"




































































































































































































































































#line 304 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/fold_left.hpp"
#line 22 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/control/while.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/fold_right.hpp"

















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/control/while.hpp"
























































































































































































































































































































#line 19 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/fold_right.hpp"

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/detail/auto_rec.hpp"















#line 17 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/detail/auto_rec.hpp"




















































































































































































































































































#line 294 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/detail/auto_rec.hpp"
#line 21 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/fold_right.hpp"



#line 25 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/fold_right.hpp"











#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/fold_right.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/detail/fold_right.hpp"

















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/reverse.hpp"


























#line 28 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/reverse.hpp"










#line 39 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/reverse.hpp"

#line 41 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/reverse.hpp"
#line 19 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/detail/fold_right.hpp"


































































































































































































































































#line 278 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/detail/fold_right.hpp"

#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/fold_right.hpp"
#line 39 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/fold_right.hpp"

#line 41 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/fold_right.hpp"
#line 23 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/control/while.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/logical/bitand.hpp"























#line 25 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/logical/bitand.hpp"



#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/logical/bitand.hpp"


#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/logical/bitand.hpp"






#line 39 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/logical/bitand.hpp"
#line 24 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/control/while.hpp"





#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/control/while.hpp"





#line 36 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/control/while.hpp"

#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/control/while.hpp"





#line 44 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/control/while.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/control/detail/msvc/while.hpp"




















































































































































































































































































#line 278 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/control/detail/msvc/while.hpp"

#line 45 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/control/while.hpp"




#line 50 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/control/while.hpp"






































































































































































































































































#line 313 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/control/while.hpp"
#line 21 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/arithmetic/add.hpp"









#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/arithmetic/add.hpp"







#line 39 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/arithmetic/add.hpp"










#line 50 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/arithmetic/add.hpp"

#line 52 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/arithmetic/add.hpp"
#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/repeat_from_to.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/arithmetic/sub.hpp"




























#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/arithmetic/sub.hpp"







#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/arithmetic/sub.hpp"










#line 49 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/arithmetic/sub.hpp"

#line 51 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/arithmetic/sub.hpp"
#line 19 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/repeat_from_to.hpp"




#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/detail/auto_rec.hpp"















#line 17 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/detail/auto_rec.hpp"




















































































































































































































































































#line 294 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/detail/auto_rec.hpp"
#line 24 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/repeat_from_to.hpp"








#line 33 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/repeat_from_to.hpp"
















#line 50 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/repeat_from_to.hpp"














#line 65 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/repeat_from_to.hpp"








#line 74 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/repeat_from_to.hpp"



#line 78 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/repeat_from_to.hpp"









#line 88 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/repeat_from_to.hpp"
#line 17 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/base_from_member.hpp"
















#line 34 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/base_from_member.hpp"



















namespace boost
{










template < typename MemberType, int UniqueID = 0 >
class base_from_member
{
protected:
    MemberType  member;

    base_from_member()
        : member()
        {}

    template <  typename T0 > explicit base_from_member(  T0 x0 ) : member(  x0 ) {} template <  typename T0 , typename T1 > explicit base_from_member(  T0 x0 , T1 x1 ) : member(  x0 , x1 ) {} template <  typename T0 , typename T1 , typename T2 > explicit base_from_member(  T0 x0 , T1 x1 , T2 x2 ) : member(  x0 , x1 , x2 ) {} template <  typename T0 , typename T1 , typename T2 , typename T3 > explicit base_from_member(  T0 x0 , T1 x1 , T2 x2 , T3 x3 ) : member(  x0 , x1 , x2 , x3 ) {} template <  typename T0 , typename T1 , typename T2 , typename T3 , typename T4 > explicit base_from_member(  T0 x0 , T1 x1 , T2 x2 , T3 x3 , T4 x4 ) : member(  x0 , x1 , x2 , x3 , x4 ) {} template <  typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 > explicit base_from_member(  T0 x0 , T1 x1 , T2 x2 , T3 x3 , T4 x4 , T5 x5 ) : member(  x0 , x1 , x2 , x3 , x4 , x5 ) {} template <  typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 > explicit base_from_member(  T0 x0 , T1 x1 , T2 x2 , T3 x3 , T4 x4 , T5 x5 , T6 x6 ) : member(  x0 , x1 , x2 , x3 , x4 , x5 , x6 ) {} template <  typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 > explicit base_from_member(  T0 x0 , T1 x1 , T2 x2 , T3 x3 , T4 x4 , T5 x5 , T6 x6 , T7 x7 ) : member(  x0 , x1 , x2 , x3 , x4 , x5 , x6 , x7 ) {} template <  typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 > explicit base_from_member(  T0 x0 , T1 x1 , T2 x2 , T3 x3 , T4 x4 , T5 x5 , T6 x6 , T7 x7 , T8 x8 ) : member(  x0 , x1 , x2 , x3 , x4 , x5 , x6 , x7 , x8 ) {} template <  typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > explicit base_from_member(  T0 x0 , T1 x1 , T2 x2 , T3 x3 , T4 x4 , T5 x5 , T6 x6 , T7 x7 , T8 x8 , T9 x9 ) : member(  x0 , x1 , x2 , x3 , x4 , x5 , x6 , x7 , x8 , x9 ) {}
#line 77 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/base_from_member.hpp"

};  

}  






#line 88 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/base_from_member.hpp"
#line 14 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/binary.hpp"

























#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/control/deduce_d.hpp"















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/detail/auto_rec.hpp"















#line 17 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/detail/auto_rec.hpp"




















































































































































































































































































#line 294 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/detail/auto_rec.hpp"
#line 17 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/control/deduce_d.hpp"





#line 23 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/control/deduce_d.hpp"
#line 27 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/binary.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/facilities/identity.hpp"






















#line 24 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/facilities/identity.hpp"
#line 28 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/binary.hpp"

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/cat.hpp"

















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/fold_left.hpp"


















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/detail/auto_rec.hpp"















#line 17 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/detail/auto_rec.hpp"




















































































































































































































































































#line 294 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/detail/auto_rec.hpp"
#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/fold_left.hpp"







#line 28 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/fold_left.hpp"
















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1069 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/fold_left.hpp"

#line 1071 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/fold_left.hpp"

#line 19 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/cat.hpp"






























#line 50 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/cat.hpp"
#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/binary.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/transform.hpp"



























#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/transform.hpp"




#line 34 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/transform.hpp"

#line 36 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/transform.hpp"










#line 47 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/transform.hpp"

#line 49 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/transform.hpp"
#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/binary.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/arithmetic/mod.hpp"
















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/arithmetic/detail/div_base.hpp"


















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/comparison/less_equal.hpp"


















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/logical/not.hpp"



























#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/logical/not.hpp"

#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/logical/not.hpp"
#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/comparison/less_equal.hpp"








#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/comparison/less_equal.hpp"








#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/comparison/less_equal.hpp"

#line 40 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/comparison/less_equal.hpp"
#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/arithmetic/detail/div_base.hpp"












#line 33 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/arithmetic/detail/div_base.hpp"




#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/arithmetic/detail/div_base.hpp"

#line 40 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/arithmetic/detail/div_base.hpp"






#line 47 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/arithmetic/detail/div_base.hpp"

#line 49 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/arithmetic/detail/div_base.hpp"










#line 60 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/arithmetic/detail/div_base.hpp"

#line 62 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/arithmetic/detail/div_base.hpp"
#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/arithmetic/mod.hpp"










#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/arithmetic/mod.hpp"








#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/arithmetic/mod.hpp"

#line 40 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/arithmetic/mod.hpp"
#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/binary.hpp"




































































































































































































































































































































































































































































































































































































































































































#line 709 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/binary.hpp"

#line 15 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/enable_if.hpp"























namespace boost
{
 
  template <bool B, class T = void>
  struct enable_if_c {
    typedef T type;
  };

  template <class T>
  struct enable_if_c<false, T> {};

  template <class Cond, class T = void> 
  struct enable_if : public enable_if_c<Cond::value, T> {};

  template <bool B, class T>
  struct lazy_enable_if_c {
    typedef typename T::type type;
  };

  template <class T>
  struct lazy_enable_if_c<false, T> {};

  template <class Cond, class T> 
  struct lazy_enable_if : public lazy_enable_if_c<Cond::value, T> {};


  template <bool B, class T = void>
  struct disable_if_c {
    typedef T type;
  };

  template <class T>
  struct disable_if_c<true, T> {};

  template <class Cond, class T = void> 
  struct disable_if : public disable_if_c<Cond::value, T> {};

  template <bool B, class T>
  struct lazy_disable_if_c {
    typedef typename T::type type;
  };

  template <class T>
  struct lazy_disable_if_c<true, T> {};

  template <class Cond, class T> 
  struct lazy_disable_if : public lazy_disable_if_c<Cond::value, T> {};

} 












































#line 118 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/enable_if.hpp"

#line 120 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/enable_if.hpp"
#line 16 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/identity_type.hpp"















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/function_traits.hpp"















namespace boost {


namespace detail {

template<typename Function> struct function_traits_helper;

template<typename R>
struct function_traits_helper<R (*)(void)>
{
  static const unsigned arity = 0;
  typedef R result_type;
};

template<typename R, typename T1>
struct function_traits_helper<R (*)(T1)>
{
  static const unsigned arity = 1;
  typedef R result_type;
  typedef T1 arg1_type;
  typedef T1 argument_type;
};

template<typename R, typename T1, typename T2>
struct function_traits_helper<R (*)(T1, T2)>
{
  static const unsigned arity = 2;
  typedef R result_type;
  typedef T1 arg1_type;
  typedef T2 arg2_type;
  typedef T1 first_argument_type;
  typedef T2 second_argument_type;
};

template<typename R, typename T1, typename T2, typename T3>
struct function_traits_helper<R (*)(T1, T2, T3)>
{
  static const unsigned arity = 3;
  typedef R result_type;
  typedef T1 arg1_type;
  typedef T2 arg2_type;
  typedef T3 arg3_type;
};

template<typename R, typename T1, typename T2, typename T3, typename T4>
struct function_traits_helper<R (*)(T1, T2, T3, T4)>
{
  static const unsigned arity = 4;
  typedef R result_type;
  typedef T1 arg1_type;
  typedef T2 arg2_type;
  typedef T3 arg3_type;
  typedef T4 arg4_type;
};

template<typename R, typename T1, typename T2, typename T3, typename T4,
         typename T5>
struct function_traits_helper<R (*)(T1, T2, T3, T4, T5)>
{
  static const unsigned arity = 5;
  typedef R result_type;
  typedef T1 arg1_type;
  typedef T2 arg2_type;
  typedef T3 arg3_type;
  typedef T4 arg4_type;
  typedef T5 arg5_type;
};

template<typename R, typename T1, typename T2, typename T3, typename T4,
         typename T5, typename T6>
struct function_traits_helper<R (*)(T1, T2, T3, T4, T5, T6)>
{
  static const unsigned arity = 6;
  typedef R result_type;
  typedef T1 arg1_type;
  typedef T2 arg2_type;
  typedef T3 arg3_type;
  typedef T4 arg4_type;
  typedef T5 arg5_type;
  typedef T6 arg6_type;
};

template<typename R, typename T1, typename T2, typename T3, typename T4,
         typename T5, typename T6, typename T7>
struct function_traits_helper<R (*)(T1, T2, T3, T4, T5, T6, T7)>
{
  static const unsigned arity = 7;
  typedef R result_type;
  typedef T1 arg1_type;
  typedef T2 arg2_type;
  typedef T3 arg3_type;
  typedef T4 arg4_type;
  typedef T5 arg5_type;
  typedef T6 arg6_type;
  typedef T7 arg7_type;
};

template<typename R, typename T1, typename T2, typename T3, typename T4,
         typename T5, typename T6, typename T7, typename T8>
struct function_traits_helper<R (*)(T1, T2, T3, T4, T5, T6, T7, T8)>
{
  static const unsigned arity = 8;
  typedef R result_type;
  typedef T1 arg1_type;
  typedef T2 arg2_type;
  typedef T3 arg3_type;
  typedef T4 arg4_type;
  typedef T5 arg5_type;
  typedef T6 arg6_type;
  typedef T7 arg7_type;
  typedef T8 arg8_type;
};

template<typename R, typename T1, typename T2, typename T3, typename T4,
         typename T5, typename T6, typename T7, typename T8, typename T9>
struct function_traits_helper<R (*)(T1, T2, T3, T4, T5, T6, T7, T8, T9)>
{
  static const unsigned arity = 9;
  typedef R result_type;
  typedef T1 arg1_type;
  typedef T2 arg2_type;
  typedef T3 arg3_type;
  typedef T4 arg4_type;
  typedef T5 arg5_type;
  typedef T6 arg6_type;
  typedef T7 arg7_type;
  typedef T8 arg8_type;
  typedef T9 arg9_type;
};

template<typename R, typename T1, typename T2, typename T3, typename T4,
         typename T5, typename T6, typename T7, typename T8, typename T9,
         typename T10>
struct function_traits_helper<R (*)(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)>
{
  static const unsigned arity = 10;
  typedef R result_type;
  typedef T1 arg1_type;
  typedef T2 arg2_type;
  typedef T3 arg3_type;
  typedef T4 arg4_type;
  typedef T5 arg5_type;
  typedef T6 arg6_type;
  typedef T7 arg7_type;
  typedef T8 arg8_type;
  typedef T9 arg9_type;
  typedef T10 arg10_type;
};

} 

template<typename Function>
struct function_traits : 
  public boost::detail::function_traits_helper<typename boost::add_pointer<Function>::type>
{
};





























































#line 234 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/function_traits.hpp"
}

#line 237 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/function_traits.hpp"
#line 17 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/identity_type.hpp"




























#line 46 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/identity_type.hpp"

#line 17 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility.hpp"

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/next_prior.hpp"
















namespace boost {











template <class T>
inline T next(T x) { return ++x; }

template <class T, class Distance>
inline T next(T x, Distance n)
{
    std::advance(x, n);
    return x;
}

template <class T>
inline T prior(T x) { return --x; }

template <class T, class Distance>
inline T prior(T x, Distance n)
{
    std::advance(x, -n);
    return x;
}

} 

#line 52 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/next_prior.hpp"
#line 19 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility.hpp"


#line 22 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility.hpp"
#line 33 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/unit_test_log.hpp"




#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/suppress_warnings.hpp"















#pragma warning(push)
#pragma warning(disable: 4511) 
#pragma warning(disable: 4512) 
#pragma warning(disable: 4100) 
#pragma warning(disable: 4996) 
#pragma warning(disable: 4355) 
#pragma warning(disable: 4706) 
#pragma warning(disable: 4251) 
#pragma warning(disable: 4127) 
#pragma warning(disable: 4290) 
#pragma warning(disable: 4180) 
#pragma warning(disable: 4275) 
#pragma warning(disable: 4267) 
#pragma warning(disable: 4511) 
#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/suppress_warnings.hpp"

#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/unit_test_log.hpp"



namespace boost {

namespace unit_test {





namespace log {

struct  begin {
    begin( const_string fn, std::size_t ln )
    : m_file_name( fn )
    , m_line_num( ln )
    {}

    const_string m_file_name;
    std::size_t m_line_num;
};

struct end {};

} 





namespace ut_detail {

class  entry_value_collector {
public:
    
    entry_value_collector() : m_last( true ) {}
    entry_value_collector( entry_value_collector const& rhs ) : m_last( true ) { rhs.m_last = false; }
    ~entry_value_collector();

    
    entry_value_collector const& operator<<( lazy_ostream const& ) const;
    entry_value_collector const& operator<<( const_string ) const;

private:
    
    mutable bool    m_last;
};

} 





class  unit_test_log_t : public test_observer, public singleton<unit_test_log_t> {
public:
    
    void                test_start( counter_t test_cases_amount );
    void                test_finish();
    void                test_aborted();

    void                test_unit_start( test_unit const& );
    void                test_unit_finish( test_unit const&, unsigned long elapsed );
    void                test_unit_skipped( test_unit const& );
    void                test_unit_aborted( test_unit const& );

    void                assertion_result( bool passed );
    void                exception_caught( execution_exception const& );

    virtual int         priority() { return 1; }

    
    void                set_stream( std::ostream& );
    void                set_threshold_level( log_level );
    void                set_format( output_format );
    void                set_formatter( unit_test_log_formatter* );

    
    void                set_checkpoint( const_string file, std::size_t line_num, const_string msg = const_string() );

    
    unit_test_log_t&    operator<<( log::begin const& );        
    unit_test_log_t&    operator<<( log::end const& );          
    unit_test_log_t&    operator<<( log_level );                
    unit_test_log_t&    operator<<( const_string );             
    unit_test_log_t&    operator<<( lazy_ostream const& );      

    ut_detail::entry_value_collector operator()( log_level );   

private:
    bool            log_entry_start();

    friend class boost::unit_test::singleton<unit_test_log_t>; unit_test_log_t() {};
}; 

namespace { unit_test_log_t& unit_test_log = unit_test_log_t::instance(); }







} 

} 





























#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/enable_warnings.hpp"















#pragma warning(default: 4511) 
#pragma warning(default: 4512) 
#pragma warning(default: 4100) 
#pragma warning(default: 4996) 
#pragma warning(default: 4355) 
#pragma warning(default: 4706) 
#pragma warning(default: 4251) 
#pragma warning(default: 4127) 
#pragma warning(default: 4290) 
#pragma warning(default: 4180) 
#pragma warning(default: 4275) 
#pragma warning(default: 4267) 
#pragma warning(default: 4511) 
#pragma warning(pop)
#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/enable_warnings.hpp"
#line 175 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/unit_test_log.hpp"

#line 177 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/unit_test_log.hpp"

#line 21 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/test_tools.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/floating_point_comparison.hpp"























#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/limits.hpp"



















#line 21 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/limits.hpp"

























































































































#line 144 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/limits.hpp"

#line 146 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/limits.hpp"

#line 25 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/floating_point_comparison.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/numeric/conversion/conversion_traits.hpp"












#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/numeric/conversion/detail/conversion_traits.hpp"
















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/numeric/conversion/detail/meta.hpp"














#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/if.hpp"
















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/value_wknd.hpp"

















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/integral.hpp"























#line 27 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/integral.hpp"





#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/integral.hpp"

#line 39 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/integral.hpp"
#line 19 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/value_wknd.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/eti.hpp"
























#line 28 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/eti.hpp"





#line 36 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/eti.hpp"





#line 46 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/eti.hpp"

#line 48 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/eti.hpp"
#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/value_wknd.hpp"


































#line 56 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/value_wknd.hpp"




#line 61 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/value_wknd.hpp"





#line 67 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/value_wknd.hpp"



#line 71 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/value_wknd.hpp"


namespace boost { namespace mpl { namespace aux {

template< typename T > struct value_type_wknd
{
    typedef typename T::value_type type;
};






#line 86 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/value_wknd.hpp"

}}}

#line 90 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/value_wknd.hpp"
#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/if.hpp"

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/na_spec.hpp"

















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/lambda_fwd.hpp"
















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/void_fwd.hpp"


















namespace boost { namespace mpl {

struct void_;

}}


#line 27 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/void_fwd.hpp"
#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/lambda_fwd.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/na.hpp"

















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/na_fwd.hpp"


















namespace boost { namespace mpl {


struct na
{
    typedef na type;
    enum { value = 0 };
};

}}


#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/na_fwd.hpp"
#line 19 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/na.hpp"



namespace boost { namespace mpl {

template< typename T >
struct is_na
    : false_
{


#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/na.hpp"
};

template<>
struct is_na<na>
    : true_
{


#line 40 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/na.hpp"
};

template< typename T >
struct is_not_na
    : true_
{


#line 49 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/na.hpp"
};

template<>
struct is_not_na<na>
    : false_
{


#line 58 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/na.hpp"
};


template< typename T, typename U > struct if_na
{
    typedef T type;
};

template< typename U > struct if_na<na,U>
{
    typedef U type;
};





















#line 92 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/na.hpp"

}}

#line 96 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/na.hpp"
#line 19 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/lambda_fwd.hpp"





#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/lambda_arity_param.hpp"






















#line 24 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/lambda_arity_param.hpp"

#line 26 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/lambda_arity_param.hpp"
#line 25 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/lambda_fwd.hpp"


namespace boost { namespace mpl {

template< 
      typename T = na
    , typename Tag = void_
    
#line 35 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/lambda_fwd.hpp"
    >
struct lambda;

}}
















#line 56 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/lambda_fwd.hpp"

#line 58 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/lambda_fwd.hpp"
#line 19 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/na_spec.hpp"



#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/arity.hpp"
















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/dtp.hpp"




























#line 33 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/dtp.hpp"






#line 45 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/dtp.hpp"

#line 47 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/dtp.hpp"
#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/arity.hpp"



















#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/arity.hpp"

#line 40 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/arity.hpp"
#line 23 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/na_spec.hpp"

#line 25 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/na_spec.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/preprocessor/enum.hpp"










































#line 44 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/preprocessor/enum.hpp"
















#line 61 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/preprocessor/enum.hpp"

#line 63 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/preprocessor/enum.hpp"
#line 28 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/na_spec.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/preprocessor/def_params_tail.hpp"
















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/limits/arity.hpp"


















#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/limits/arity.hpp"

#line 22 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/limits/arity.hpp"
#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/preprocessor/def_params_tail.hpp"




#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/logical/and.hpp"



























#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/logical/and.hpp"

#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/logical/and.hpp"
#line 23 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/preprocessor/def_params_tail.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/identity.hpp"
















#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/identity.hpp"
#line 24 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/preprocessor/def_params_tail.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/empty.hpp"
















#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/empty.hpp"
#line 25 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/preprocessor/def_params_tail.hpp"







































#line 65 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/preprocessor/def_params_tail.hpp"
























#line 90 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/preprocessor/def_params_tail.hpp"













#line 104 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/preprocessor/def_params_tail.hpp"

#line 106 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/preprocessor/def_params_tail.hpp"
#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/na_spec.hpp"


























#line 56 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/na_spec.hpp"

#line 58 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/na_spec.hpp"







































#line 98 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/na_spec.hpp"













#line 112 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/na_spec.hpp"





















#line 136 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/na_spec.hpp"

#line 138 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/na_spec.hpp"










#line 149 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/na_spec.hpp"

#line 151 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/na_spec.hpp"
























#line 176 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/na_spec.hpp"
#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/if.hpp"





namespace boost { namespace mpl {



template<
      bool C
    , typename T1
    , typename T2
    >
struct if_c
{
    typedef T1 type;
};

template<
      typename T1
    , typename T2
    >
struct if_c<false,T1,T2>
{
    typedef T2 type;
};



template<
      typename T1 = na
    , typename T2 = na
    , typename T3 = na
    >
struct if_
{
 private:
    
    typedef if_c<


#line 63 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/if.hpp"
          static_cast<bool>(T1::value)
#line 65 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/if.hpp"
        , T2
        , T3
        > almost_type_;
 
 public:
    typedef typename almost_type_::type type;
    
    
};























































#line 130 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/if.hpp"

template<> struct if_<  na , na , na > { template<  typename T1 , typename T2 , typename T3 , typename T4 =na  , typename T5 =na  > struct apply : if_<  T1 , T2 , T3 > { }; }; template< typename Tag > struct lambda< if_<  na , na , na > , Tag  > { typedef false_ is_le; typedef if_<  na , na , na > result_; typedef if_<  na , na , na > type; };   

}}

#line 136 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/if.hpp"
#line 16 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/numeric/conversion/detail/meta.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/eval_if.hpp"























namespace boost { namespace mpl {

template<
      typename C = na
    , typename F1 = na
    , typename F2 = na
    >
struct eval_if




#line 40 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/eval_if.hpp"
    : if_<C,F1,F2>::type
{
#line 43 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/eval_if.hpp"
    
};



template<
      bool C
    , typename F1
    , typename F2
    >
struct eval_if_c




#line 62 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/eval_if.hpp"
    : if_c<C,F1,F2>::type
{
#line 65 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/eval_if.hpp"
};

template<> struct eval_if<  na , na , na > { template<  typename T1 , typename T2 , typename T3 , typename T4 =na  , typename T5 =na  > struct apply : eval_if<  T1 , T2 , T3 > { }; }; template< typename Tag > struct lambda< eval_if<  na , na , na > , Tag  > { typedef false_ is_le; typedef eval_if<  na , na , na > result_; typedef eval_if<  na , na , na > type; };   

}}

#line 72 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/eval_if.hpp"
#line 17 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/numeric/conversion/detail/meta.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/equal_to.hpp"


















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/comparison_op.hpp"


















#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/comparison_op.hpp"



#line 24 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/comparison_op.hpp"



#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/numeric_op.hpp"




















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/numeric_cast.hpp"

























#line 27 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/numeric_cast.hpp"

#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/numeric_cast.hpp"

namespace boost { namespace mpl {



template< typename SourceTag, typename TargetTag > struct numeric_cast
{
    template< typename N > struct apply;
};

}}

#line 42 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/numeric_cast.hpp"
#line 22 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/numeric_op.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/apply_wrap.hpp"






















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/has_apply.hpp"
















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/has_xxx.hpp"




















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/type_wrapper.hpp"



















namespace boost { namespace mpl { namespace aux {

template< typename T > struct type_wrapper
{
    typedef T type;
};






template< typename T > struct wrapped_type;

template< typename T > struct wrapped_type< type_wrapper<T> >
{
    typedef T type;
};





#line 44 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/type_wrapper.hpp"

}}}

#line 48 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/type_wrapper.hpp"
#line 22 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/has_xxx.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/yes_no.hpp"

















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/arrays.hpp"























#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/arrays.hpp"

#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/arrays.hpp"
#line 19 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/yes_no.hpp"




namespace boost { namespace mpl { namespace aux {

typedef char (&no_tag)[1];
typedef char (&yes_tag)[2];

template< bool C_ > struct yes_no_tag
{
    typedef no_tag type;
};

template<> struct yes_no_tag<true>
{
    typedef yes_tag type;
};


template< long n > struct weighted_tag
{

    typedef char (&type)[n];



#line 47 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/yes_no.hpp"
};






#line 55 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/yes_no.hpp"

}}}

#line 59 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/yes_no.hpp"
#line 23 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/has_xxx.hpp"

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/has_xxx.hpp"



























#line 33 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/has_xxx.hpp"

#line 35 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/has_xxx.hpp"
#line 25 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/has_xxx.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/msvc_typename.hpp"





















#line 23 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/msvc_typename.hpp"

#line 25 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/msvc_typename.hpp"

#line 27 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/msvc_typename.hpp"
#line 26 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/has_xxx.hpp"




#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/elem.hpp"














#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/data.hpp"

























#line 27 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/data.hpp"

#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/data.hpp"
#line 16 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/elem.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/size.hpp"

























#line 27 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/size.hpp"

#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/size.hpp"
#line 17 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/elem.hpp"










#line 28 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/elem.hpp"

#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/elem.hpp"
#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/has_xxx.hpp"



#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum_trailing_params.hpp"
























#line 26 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum_trailing_params.hpp"










#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum_trailing_params.hpp"

#line 39 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum_trailing_params.hpp"
#line 35 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/has_xxx.hpp"



#line 39 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/has_xxx.hpp"























































































































#line 159 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/has_xxx.hpp"



































































































#line 260 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/has_xxx.hpp"















#line 276 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/has_xxx.hpp"

















#line 294 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/has_xxx.hpp"
#line 295 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/has_xxx.hpp"




#line 300 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/has_xxx.hpp"
#line 301 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/has_xxx.hpp"




#line 306 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/has_xxx.hpp"
#line 307 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/has_xxx.hpp"
















































#line 356 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/has_xxx.hpp"




























#line 385 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/has_xxx.hpp"
























#line 410 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/has_xxx.hpp"



























































































































































































#line 598 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/has_xxx.hpp"



















#line 618 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/has_xxx.hpp"














#line 633 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/has_xxx.hpp"







#line 641 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/has_xxx.hpp"
#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/has_apply.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/has_apply.hpp"
























#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/has_apply.hpp"

#line 33 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/has_apply.hpp"
#line 19 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/has_apply.hpp"

namespace boost { namespace mpl { namespace aux {

template< typename T > struct has_apply_msvc_sfinae_helper { typedef void type; };template< typename T, typename U = void > struct has_apply_impl_ { static const bool value = false; typedef boost::mpl::bool_<value> type; }; template< typename T > struct has_apply_impl_< T , typename has_apply_msvc_sfinae_helper< typename T::apply >::type > { static const bool value = true; typedef boost::mpl::bool_<value> type; }; template< typename T, typename fallback_ = boost::mpl::bool_<false> > struct has_apply : has_apply_impl_<T> { };






#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/has_apply.hpp"
}}}

#line 33 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/has_apply.hpp"
#line 24 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/apply_wrap.hpp"

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/msvc_never_true.hpp"































#line 33 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/msvc_never_true.hpp"

#line 35 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/msvc_never_true.hpp"
#line 26 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/apply_wrap.hpp"
#line 27 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/apply_wrap.hpp"

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/use_preprocessed.hpp"


















#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/use_preprocessed.hpp"
#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/apply_wrap.hpp"




#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/compiler.hpp"




























#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/compiler.hpp"


#line 33 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/compiler.hpp"


#line 36 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/compiler.hpp"








#line 45 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/compiler.hpp"


#line 48 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/compiler.hpp"






#line 55 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/compiler.hpp"


#line 58 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/compiler.hpp"


#line 61 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/compiler.hpp"

#line 63 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/compiler.hpp"

#line 65 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/compiler.hpp"

#line 67 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/compiler.hpp"
#line 17 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"



#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/stringize.hpp"




























#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/stringize.hpp"



#line 34 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/stringize.hpp"
#line 21 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"









#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"





#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/preprocessed/plain/apply_wrap.hpp"











namespace boost { namespace mpl {

template<
      typename F

    , typename has_apply_ = typename aux::has_apply<F>::type

    >
struct apply_wrap0

    : F::template apply<  >
{
};

template< typename F >
struct apply_wrap0< F,true_ >
    : F::apply
{
};

template<
      typename F, typename T1

    >
struct apply_wrap1

    : F::template apply<T1>
{
};

template<
      typename F, typename T1, typename T2

    >
struct apply_wrap2

    : F::template apply< T1,T2 >
{
};

template<
      typename F, typename T1, typename T2, typename T3

    >
struct apply_wrap3

    : F::template apply< T1,T2,T3 >
{
};

template<
      typename F, typename T1, typename T2, typename T3, typename T4

    >
struct apply_wrap4

    : F::template apply< T1,T2,T3,T4 >
{
};

template<
      typename F, typename T1, typename T2, typename T3, typename T4
    , typename T5

    >
struct apply_wrap5

    : F::template apply< T1,T2,T3,T4,T5 >
{
};

}}

#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"
#line 39 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"




#line 35 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/apply_wrap.hpp"










































#line 78 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/apply_wrap.hpp"
#line 79 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/apply_wrap.hpp"



























































































































































#line 235 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/apply_wrap.hpp"
#line 23 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/numeric_op.hpp"

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/tag.hpp"

















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/void.hpp"






















namespace boost { namespace mpl {





struct void_ { typedef void_ type; };

}}

namespace boost { namespace mpl {

template< typename T >
struct is_void_
    : false_
{


#line 42 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/void.hpp"
};

template<>
struct is_void_<void_>
    : true_
{


#line 51 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/void.hpp"
};

template< typename T >
struct is_not_void_
    : true_
{


#line 60 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/void.hpp"
};

template<>
struct is_not_void_<void_>
    : false_
{


#line 69 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/void.hpp"
};

template<> struct is_void_<  na > { template<  typename T1 , typename T2 =na  , typename T3 =na  , typename T4 =na  , typename T5 =na  > struct apply : is_void_<  T1 > { }; }; template< typename Tag > struct lambda< is_void_<  na > , Tag  > { typedef false_ is_le; typedef is_void_<  na > result_; typedef is_void_<  na > type; };   
template<> struct is_not_void_<  na > { template<  typename T1 , typename T2 =na  , typename T3 =na  , typename T4 =na  , typename T5 =na  > struct apply : is_not_void_<  T1 > { }; }; template< typename Tag > struct lambda< is_not_void_<  na > , Tag  > { typedef false_ is_le; typedef is_not_void_<  na > result_; typedef is_not_void_<  na > type; };   

}}

#line 77 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/void.hpp"
#line 19 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/tag.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/has_tag.hpp"


















namespace boost { namespace mpl { namespace aux {
template< typename T > struct has_tag_msvc_sfinae_helper { typedef void type; };template< typename T, typename U = void > struct has_tag_impl_ { static const bool value = false; typedef boost::mpl::bool_<value> type; }; template< typename T > struct has_tag_impl_< T , typename has_tag_msvc_sfinae_helper< typename T::tag >::type > { static const bool value = true; typedef boost::mpl::bool_<value> type; }; template< typename T, typename fallback_ = boost::mpl::bool_<false> > struct has_tag : has_tag_impl_<T> { };
}}}

#line 24 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/has_tag.hpp"
#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/tag.hpp"


namespace boost { namespace mpl {

namespace aux {
template< typename T > struct tag_impl
{
    typedef typename T::tag type;
};
}

template< typename T, typename Default = void_ > struct tag

    : if_< 
          aux::has_tag<T>
        , aux::tag_impl<T>
        , Default
        >::type
{








#line 48 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/tag.hpp"
};

}}

#line 53 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/tag.hpp"
#line 25 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/numeric_op.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/numeric_cast_utils.hpp"

















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/apply_wrap.hpp"









































































































































































































































#line 235 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/apply_wrap.hpp"
#line 19 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/numeric_cast_utils.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/forwarding.hpp"






















#line 26 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/forwarding.hpp"

#line 28 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/forwarding.hpp"
#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/numeric_cast_utils.hpp"

namespace boost { namespace mpl { namespace aux {

template<
      typename F
    , typename Tag1
    , typename Tag2
    >
struct cast1st_impl
{
    template< typename N1, typename N2 > struct apply

        : apply_wrap2< 
              F
            , typename apply_wrap1< numeric_cast<Tag1,Tag2>,N1 >::type
            , N2
            >
    {







#line 46 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/numeric_cast_utils.hpp"
    };
};

template<
      typename F
    , typename Tag1
    , typename Tag2
    >
struct cast2nd_impl
{
    template< typename N1, typename N2 > struct apply

        : apply_wrap2< 
              F
            , N1
            , typename apply_wrap1< numeric_cast<Tag2,Tag1>,N2 >::type
            >
    {







#line 72 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/numeric_cast_utils.hpp"
    };
};

}}}

#line 78 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/numeric_cast_utils.hpp"
#line 26 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/numeric_op.hpp"



#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/msvc_eti_base.hpp"
















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/is_msvc_eti_arg.hpp"




















namespace boost { namespace mpl { namespace aux {






































#line 61 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/is_msvc_eti_arg.hpp"

}}}

#line 65 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/is_msvc_eti_arg.hpp"
#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/msvc_eti_base.hpp"




namespace boost { namespace mpl { namespace aux {






























#line 54 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/msvc_eti_base.hpp"

template< typename T > struct msvc_eti_base
    : T
{


#line 61 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/msvc_eti_base.hpp"
    typedef T type;
};

#line 65 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/msvc_eti_base.hpp"

template<> struct msvc_eti_base<int>
{
    typedef msvc_eti_base type;
    typedef msvc_eti_base first;
    typedef msvc_eti_base second;
    typedef msvc_eti_base tag;
    enum { value = 0 };
};

}}}

#line 78 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/msvc_eti_base.hpp"
#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/numeric_op.hpp"



#line 34 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/numeric_op.hpp"



























































































































































































































































#line 287 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/numeric_op.hpp"




























#line 316 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/numeric_op.hpp"
#line 28 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/comparison_op.hpp"






#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"





























#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"





#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/preprocessed/plain/equal_to.hpp"











namespace boost { namespace mpl {

template<
      typename Tag1
    , typename Tag2
    >
struct equal_to_impl
    : if_c<
          ( Tag1::value
              > Tag2::value
            )

        , aux::cast2nd_impl< equal_to_impl< Tag1,Tag1 >,Tag1, Tag2 >
        , aux::cast1st_impl< equal_to_impl< Tag2,Tag2 >,Tag1, Tag2 >
        >::type
{
};


template<> struct equal_to_impl< na,na >
{
    template< typename U1, typename U2 > struct apply
    {
        typedef apply type;
        static const int value = 0;
    };
};

template< typename Tag > struct equal_to_impl< na,Tag >
{
    template< typename U1, typename U2 > struct apply
    {
        typedef apply type;
        static const int value = 0;
    };
};

template< typename Tag > struct equal_to_impl< Tag,na >
{
    template< typename U1, typename U2 > struct apply
    {
        typedef apply type;
        static const int value = 0;
    };
};

template< typename T > struct equal_to_tag
{
    typedef typename T::tag type;
};

template<
      typename N1 = na
    , typename N2 = na
    >
struct equal_to

    : equal_to_impl<
          typename equal_to_tag<N1>::type
        , typename equal_to_tag<N2>::type
        >::template apply< N1,N2 >::type
{
};

template<> struct equal_to<  na , na > { template<  typename T1 , typename T2 , typename T3 =na  , typename T4 =na  , typename T5 =na  > struct apply : equal_to<  T1 , T2 > { }; };  template< typename Tag > struct lambda< equal_to<  na , na > , Tag  > { typedef false_ is_le; typedef equal_to<  na , na > result_; typedef equal_to<  na , na > type; };  

}}

namespace boost { namespace mpl {

template<>
struct equal_to_impl< integral_c_tag,integral_c_tag >
{
    template< typename N1, typename N2 > struct apply

        : bool_< ( N1::value  == N2::value ) >
    {
    };
};

}}
#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"
#line 39 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"




#line 36 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/comparison_op.hpp"








































#line 77 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/comparison_op.hpp"







#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/equal_to.hpp"

#line 22 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/equal_to.hpp"
#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/numeric/conversion/detail/meta.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/not.hpp"


















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/nested_type_wknd.hpp"






































#line 43 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/nested_type_wknd.hpp"



#line 47 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/nested_type_wknd.hpp"

#line 49 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/nested_type_wknd.hpp"
#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/not.hpp"



namespace boost { namespace mpl {

namespace aux {

template< long C_ > 
struct not_impl
    : bool_<!C_>
{
};

} 


template<
      typename T = na
    >
struct not_
    : aux::not_impl<
          T::type::value
        >
{
    
};

template<> struct not_<  na > { template<  typename T1 , typename T2 =na  , typename T3 =na  , typename T4 =na  , typename T5 =na  > struct apply : not_<  T1 > { }; }; template< typename Tag > struct lambda< not_<  na > , Tag  > { typedef false_ is_le; typedef not_<  na > result_; typedef not_<  na > type; };   

}}

#line 52 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/not.hpp"
#line 19 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/numeric/conversion/detail/meta.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/and.hpp"



































#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/and.hpp"
#line 39 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/and.hpp"
#line 40 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/and.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"





























#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"





#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/preprocessed/plain/and.hpp"











namespace boost { namespace mpl {

namespace aux {

template< bool C_, typename T1, typename T2, typename T3, typename T4 >
struct and_impl
    : false_
{
};

template< typename T1, typename T2, typename T3, typename T4 >
struct and_impl< true,T1,T2,T3,T4 >
    : and_impl<
          T1::type::value
        , T2, T3, T4
        , true_
        >
{
};

template<>
struct and_impl<
          true
        , true_, true_, true_, true_
        >
    : true_
{
};

} 

template<
      typename T1 = na
    , typename T2 = na
    , typename T3 = true_, typename T4 = true_, typename T5 = true_
    >
struct and_

    : aux::and_impl<
          T1::type::value
        , T2, T3, T4, T5
        >

{
};

template<> struct and_<  na , na > { template<  typename T1 , typename T2 , typename T3 =na  , typename T4 =na  , typename T5 =na  > struct apply : and_<  T1 , T2 > { }; };  template< typename Tag > struct lambda< and_<  na , na > , Tag  > { typedef false_ is_le; typedef and_<  na , na > result_; typedef and_<  na , na > type; };  
#line 63 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/preprocessed/plain/and.hpp"

}}
#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"
#line 39 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"




#line 43 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/and.hpp"





#line 49 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/and.hpp"
#line 50 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/and.hpp"
#line 51 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/and.hpp"








#line 60 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/and.hpp"
#line 61 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/and.hpp"
#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/numeric/conversion/detail/meta.hpp"

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/identity.hpp"



















namespace boost { namespace mpl {

template<
      typename T = na
    >
struct identity
{
    typedef T type;
    
};

template<
      typename T = na
    >
struct make_identity
{
    typedef identity<T> type;
    
};

template<> struct identity<  na > { template<  typename T1 , typename T2 =na  , typename T3 =na  , typename T4 =na  , typename T5 =na  > struct apply : identity<  T1 > { }; }; template< typename Tag > struct lambda< identity<  na > , Tag  > { typedef false_ is_le; typedef identity<  na > result_; typedef identity<  na > type; };  
template<> struct make_identity<  na > { template<  typename T1 , typename T2 =na  , typename T3 =na  , typename T4 =na  , typename T5 =na  > struct apply : make_identity<  T1 > { }; }; template< typename Tag > struct lambda< make_identity<  na > , Tag  > { typedef false_ is_le; typedef make_identity<  na > result_; typedef make_identity<  na > type; };  

}}

#line 46 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/identity.hpp"
#line 22 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/numeric/conversion/detail/meta.hpp"

namespace boost { namespace numeric { namespace convdetail
{
   template< class T1, class T2>
   struct equal_to
   {
   
   
       enum { x = ( T1::value == T2::value ) };
           
       static const bool value = x;
           
       typedef mpl::bool_<value> type;
       
   










#line 48 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/numeric/conversion/detail/meta.hpp"
   };
    

  
  
  
  
  
  
  
  
  template<class Value,
           class Case0Val,
           class Case1Val,
           class Case2Val,
           class Case0Type,
           class Case1Type,
           class Case2Type,
           class DefaultType
          >
  struct ct_switch4
  {
    typedef mpl::identity<Case0Type> Case0TypeQ ;
    typedef mpl::identity<Case1Type> Case1TypeQ ;

    typedef equal_to<Value,Case0Val> is_case0 ;
    typedef equal_to<Value,Case1Val> is_case1 ;
    typedef equal_to<Value,Case2Val> is_case2 ;

    typedef mpl::if_<is_case2,Case2Type,DefaultType> choose_2_3Q ;
    typedef mpl::eval_if<is_case1,Case1TypeQ,choose_2_3Q> choose_1_2_3Q ;

    typedef typename
      mpl::eval_if<is_case0,Case0TypeQ,choose_1_2_3Q>::type
        type ;
  } ;




  
  
  
  
  
  
  
  
  
  template<class expr0, class expr1, class TT, class TF, class FT, class FF>
  struct for_both
  {
    typedef mpl::identity<TF> TF_Q ;
    typedef mpl::identity<TT> TT_Q ;

    typedef typename mpl::not_<expr0>::type not_expr0 ;
    typedef typename mpl::not_<expr1>::type not_expr1 ;

    typedef typename mpl::and_<expr0,expr1>::type     caseTT ;
    typedef typename mpl::and_<expr0,not_expr1>::type caseTF ;
    typedef typename mpl::and_<not_expr0,expr1>::type caseFT ;

    typedef mpl::if_<caseFT,FT,FF>                    choose_FT_FF_Q ;
    typedef mpl::eval_if<caseTF,TF_Q,choose_FT_FF_Q> choose_TF_FT_FF_Q ;

    typedef typename mpl::eval_if<caseTT,TT_Q,choose_TF_FT_FF_Q>::type type ;
  } ;

} } } 

#line 119 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/numeric/conversion/detail/meta.hpp"


#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/numeric/conversion/detail/conversion_traits.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/numeric/conversion/detail/int_float_mixture.hpp"















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/numeric/conversion/int_float_mixture_enum.hpp"












namespace boost { namespace numeric
{
  enum int_float_mixture_enum
  {
     integral_to_integral
    ,integral_to_float
    ,float_to_integral
    ,float_to_float
  } ;

} } 

#line 26 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/numeric/conversion/int_float_mixture_enum.hpp"




#line 17 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/numeric/conversion/detail/int_float_mixture.hpp"




namespace boost { namespace numeric { namespace convdetail
{
  
  typedef mpl::integral_c<int_float_mixture_enum, integral_to_integral> int2int_c ;
  typedef mpl::integral_c<int_float_mixture_enum, integral_to_float>    int2float_c ;
  typedef mpl::integral_c<int_float_mixture_enum, float_to_integral>    float2int_c ;
  typedef mpl::integral_c<int_float_mixture_enum, float_to_float>       float2float_c ;

  
  
  
  
  
  
  template<class T,class S>
  struct get_int_float_mixture
  {
    typedef mpl::bool_< ::std::numeric_limits<S>::is_integer > S_int ;
    typedef mpl::bool_< ::std::numeric_limits<T>::is_integer > T_int ;

    typedef typename
      for_both<S_int, T_int, int2int_c, int2float_c, float2int_c, float2float_c>::type
        type ;
  } ;

  
  
  
  
  
  
  
  
  
  template<class IntFloatMixture, class Int2Int, class Int2Float, class Float2Int, class Float2Float>
  struct for_int_float_mixture
  {
    typedef typename
      ct_switch4<IntFloatMixture
                 ,int2int_c, int2float_c, float2int_c  
                 ,Int2Int  , Int2Float  , Float2Int  , Float2Float
                >::type
        type ;
  } ;

} } } 

#line 69 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/numeric/conversion/detail/int_float_mixture.hpp"




#line 19 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/numeric/conversion/detail/conversion_traits.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/numeric/conversion/detail/sign_mixture.hpp"















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/numeric/conversion/sign_mixture_enum.hpp"












namespace boost { namespace numeric
{
  enum sign_mixture_enum
  {
     unsigned_to_unsigned
    ,signed_to_signed
    ,signed_to_unsigned
    ,unsigned_to_signed
  } ;

} } 

#line 26 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/numeric/conversion/sign_mixture_enum.hpp"




#line 17 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/numeric/conversion/detail/sign_mixture.hpp"




namespace boost { namespace numeric { namespace convdetail
{
  
  typedef mpl::integral_c<sign_mixture_enum, unsigned_to_unsigned> unsig2unsig_c ;
  typedef mpl::integral_c<sign_mixture_enum, signed_to_signed>     sig2sig_c ;
  typedef mpl::integral_c<sign_mixture_enum, signed_to_unsigned>   sig2unsig_c ;
  typedef mpl::integral_c<sign_mixture_enum, unsigned_to_signed>   unsig2sig_c ;

  
  
  
  
  
  
  template<class T,class S>
  struct get_sign_mixture
  {
    typedef mpl::bool_< ::std::numeric_limits<S>::is_signed > S_signed ;
    typedef mpl::bool_< ::std::numeric_limits<T>::is_signed > T_signed ;

    typedef typename
      for_both<S_signed, T_signed, sig2sig_c, sig2unsig_c, unsig2sig_c, unsig2unsig_c>::type
        type ;
  } ;

  
  
  
  
  
  
  
  
  
  template<class SignMixture, class Sig2Sig, class Sig2Unsig, class Unsig2Sig, class Unsig2Unsig>
  struct for_sign_mixture
  {
    typedef typename
      ct_switch4<SignMixture
                 , sig2sig_c, sig2unsig_c, unsig2sig_c  
                 , Sig2Sig  , Sig2Unsig  , Unsig2Sig  , Unsig2Unsig
                >::type
        type ;
  } ;

} } } 

#line 69 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/numeric/conversion/detail/sign_mixture.hpp"




#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/numeric/conversion/detail/conversion_traits.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/numeric/conversion/detail/udt_builtin_mixture.hpp"














#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/numeric/conversion/udt_builtin_mixture_enum.hpp"












namespace boost { namespace numeric
{
  enum udt_builtin_mixture_enum
  {
     builtin_to_builtin
    ,builtin_to_udt
    ,udt_to_builtin
    ,udt_to_udt
  } ;

} } 

#line 26 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/numeric/conversion/udt_builtin_mixture_enum.hpp"

#line 16 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/numeric/conversion/detail/udt_builtin_mixture.hpp"




namespace boost { namespace numeric { namespace convdetail
{
  
  typedef mpl::integral_c<udt_builtin_mixture_enum, builtin_to_builtin> builtin2builtin_c ;
  typedef mpl::integral_c<udt_builtin_mixture_enum, builtin_to_udt>     builtin2udt_c ;
  typedef mpl::integral_c<udt_builtin_mixture_enum, udt_to_builtin>     udt2builtin_c ;
  typedef mpl::integral_c<udt_builtin_mixture_enum, udt_to_udt>         udt2udt_c ;

  
  
  
  
  
  
  
  
  
  template<class UdtMixture, class BuiltIn2BuiltIn, class BuiltIn2Udt, class Udt2BuiltIn, class Udt2Udt>
  struct for_udt_builtin_mixture
  {
    typedef typename
      ct_switch4<UdtMixture
                 , builtin2builtin_c, builtin2udt_c, udt2builtin_c 
                 , BuiltIn2BuiltIn  , BuiltIn2Udt  , Udt2BuiltIn  , Udt2Udt
                >::type
        type ;
  } ;

  
  
  
  
  
  
  template<class T,class S>
  struct get_udt_builtin_mixture
  {
    typedef is_arithmetic<S> S_builtin ;
    typedef is_arithmetic<T> T_builtin ;

    typedef typename
      for_both<S_builtin, T_builtin, builtin2builtin_c, builtin2udt_c, udt2builtin_c, udt2udt_c>::type
        type ;
  } ;

} } } 

#line 68 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/numeric/conversion/detail/udt_builtin_mixture.hpp"


#line 21 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/numeric/conversion/detail/conversion_traits.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/numeric/conversion/detail/is_subranged.hpp"
















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/multiplies.hpp"
















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/times.hpp"


















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/arithmetic_op.hpp"

















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/largest_int.hpp"





















namespace boost { namespace mpl { namespace aux {

template< typename T > struct integral_rank;

template<> struct integral_rank<bool>           : int_<1> {};
template<> struct integral_rank<signed char>    : int_<2> {};
template<> struct integral_rank<char>           : int_<3> {};
template<> struct integral_rank<unsigned char>  : int_<4> {};

template<> struct integral_rank<wchar_t>        : int_<5> {};
#line 33 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/largest_int.hpp"
template<> struct integral_rank<short>          : int_<6> {};
template<> struct integral_rank<unsigned short> : int_<7> {};
template<> struct integral_rank<int>            : int_<8> {};
template<> struct integral_rank<unsigned int>   : int_<9> {};
template<> struct integral_rank<long>           : int_<10> {};
template<> struct integral_rank<unsigned long>  : int_<11> {};


template<> struct integral_rank<long_long_type> : int_<12> {};
template<> struct integral_rank<ulong_long_type>: int_<13> {};
#line 44 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/largest_int.hpp"

template< typename T1, typename T2 > struct largest_int

    : if_c< 
          ( integral_rank<T1>::value >= integral_rank<T2>::value )
        , T1
        , T2
        >
{





#line 59 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/largest_int.hpp"
};

}}}

#line 64 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/largest_int.hpp"
#line 19 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/arithmetic_op.hpp"

#line 21 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/arithmetic_op.hpp"



#line 25 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/arithmetic_op.hpp"

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/numeric_op.hpp"





















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/apply_wrap.hpp"









































































































































































































































#line 235 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/apply_wrap.hpp"
#line 23 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/numeric_op.hpp"










#line 34 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/numeric_op.hpp"



























































































































































































































































#line 287 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/numeric_op.hpp"




























#line 316 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/numeric_op.hpp"
#line 27 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/arithmetic_op.hpp"






#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"





























#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"





#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/preprocessed/plain/times.hpp"











namespace boost { namespace mpl {

template<
      typename Tag1
    , typename Tag2
    >
struct times_impl
    : if_c<
          ( Tag1::value
              > Tag2::value
            )

        , aux::cast2nd_impl< times_impl< Tag1,Tag1 >,Tag1, Tag2 >
        , aux::cast1st_impl< times_impl< Tag2,Tag2 >,Tag1, Tag2 >
        >::type
{
};


template<> struct times_impl< na,na >
{
    template< typename U1, typename U2 > struct apply
    {
        typedef apply type;
        static const int value = 0;
    };
};

template< typename Tag > struct times_impl< na,Tag >
{
    template< typename U1, typename U2 > struct apply
    {
        typedef apply type;
        static const int value = 0;
    };
};

template< typename Tag > struct times_impl< Tag,na >
{
    template< typename U1, typename U2 > struct apply
    {
        typedef apply type;
        static const int value = 0;
    };
};

template< typename T > struct times_tag
{
    typedef typename T::tag type;
};

template<
      typename N1 = na
    , typename N2 = na
    , typename N3 = na, typename N4 = na, typename N5 = na
    >
struct times
    : times< times< times< times< N1,N2 >, N3>, N4>, N5>
{
};

template<
      typename N1, typename N2, typename N3, typename N4
    >
struct times< N1,N2,N3,N4,na >

    : times< times< times< N1,N2 >, N3>, N4>
{
    
#line 85 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/preprocessed/plain/times.hpp"
};

template<
      typename N1, typename N2, typename N3
    >
struct times< N1,N2,N3,na,na >

    : times< times< N1,N2 >, N3>
{
    
#line 99 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/preprocessed/plain/times.hpp"
};

template<
      typename N1, typename N2
    >
struct times< N1,N2,na,na,na >
    : times_impl<
          typename times_tag<N1>::type
        , typename times_tag<N2>::type
        >::template apply< N1,N2 >::type
{
    
#line 115 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/preprocessed/plain/times.hpp"

};

template<> struct times<  na , na > { template<  typename T1 , typename T2 , typename T3 =na  , typename T4 =na  , typename T5 =na  > struct apply : times<  T1 , T2 > { }; };  template< typename Tag > struct lambda< times<  na , na > , Tag  > { typedef false_ is_le; typedef times<  na , na > result_; typedef times<  na , na > type; };  

}}

namespace boost { namespace mpl {
template<>
struct times_impl< integral_c_tag,integral_c_tag >
{
    template< typename N1, typename N2 > struct apply

        : integral_c<
              typename aux::largest_int<
                  typename N1::value_type
                , typename N2::value_type
                >::type
            , ( N1::value
                  * N2::value
                )
            >
    {
    };
};

}}
#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"
#line 39 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"




#line 35 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/arithmetic_op.hpp"


















































#line 86 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/arithmetic_op.hpp"







#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/times.hpp"

#line 22 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/times.hpp"
#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/multiplies.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/preprocessor/default_params.hpp"










































#line 44 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/preprocessor/default_params.hpp"





















#line 66 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/preprocessor/default_params.hpp"

#line 68 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/preprocessor/default_params.hpp"
#line 21 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/multiplies.hpp"





namespace boost { namespace mpl {





#line 33 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/multiplies.hpp"

template<
       typename N1 = na , typename N2 = na , typename N3 = na , typename N4 = na , typename N5 = na
    >
struct multiplies
    : times<  N1 , N2 , N3 , N4 , N5 >
{
    
#line 45 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/multiplies.hpp"
};

template<> struct multiplies<  na , na , na , na , na > { template<  typename T1 , typename T2 , typename T3 , typename T4 , typename T5  > struct apply : multiplies<  T1 , T2 , T3 , T4 , T5 > { }; }; template< typename Tag > struct lambda< multiplies<  na , na , na , na , na > , Tag  > { typedef false_ is_le; typedef multiplies<  na , na , na , na , na > result_; typedef multiplies<  na , na , na , na , na > type; };   



}}

#line 54 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/multiplies.hpp"
#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/numeric/conversion/detail/is_subranged.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/less.hpp"


















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/comparison_op.hpp"


















#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/comparison_op.hpp"



#line 24 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/comparison_op.hpp"



#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/numeric_op.hpp"





















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/apply_wrap.hpp"









































































































































































































































#line 235 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/apply_wrap.hpp"
#line 23 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/numeric_op.hpp"










#line 34 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/numeric_op.hpp"



























































































































































































































































#line 287 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/numeric_op.hpp"




























#line 316 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/numeric_op.hpp"
#line 28 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/comparison_op.hpp"






#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"





























#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"





#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/preprocessed/plain/less.hpp"











namespace boost { namespace mpl {

template<
      typename Tag1
    , typename Tag2
    >
struct less_impl
    : if_c<
          ( Tag1::value
              > Tag2::value
            )

        , aux::cast2nd_impl< less_impl< Tag1,Tag1 >,Tag1, Tag2 >
        , aux::cast1st_impl< less_impl< Tag2,Tag2 >,Tag1, Tag2 >
        >::type
{
};


template<> struct less_impl< na,na >
{
    template< typename U1, typename U2 > struct apply
    {
        typedef apply type;
        static const int value = 0;
    };
};

template< typename Tag > struct less_impl< na,Tag >
{
    template< typename U1, typename U2 > struct apply
    {
        typedef apply type;
        static const int value = 0;
    };
};

template< typename Tag > struct less_impl< Tag,na >
{
    template< typename U1, typename U2 > struct apply
    {
        typedef apply type;
        static const int value = 0;
    };
};

template< typename T > struct less_tag
{
    typedef typename T::tag type;
};

template<
      typename N1 = na
    , typename N2 = na
    >
struct less

    : less_impl<
          typename less_tag<N1>::type
        , typename less_tag<N2>::type
        >::template apply< N1,N2 >::type
{
};

template<> struct less<  na , na > { template<  typename T1 , typename T2 , typename T3 =na  , typename T4 =na  , typename T5 =na  > struct apply : less<  T1 , T2 > { }; };  template< typename Tag > struct lambda< less<  na , na > , Tag  > { typedef false_ is_le; typedef less<  na , na > result_; typedef less<  na , na > type; };  

}}

namespace boost { namespace mpl {

template<>
struct less_impl< integral_c_tag,integral_c_tag >
{
    template< typename N1, typename N2 > struct apply

        : bool_< ( N2::value > N1::value ) >
    {
    };
};

}}
#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"
#line 39 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"




#line 36 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/comparison_op.hpp"








































#line 77 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/comparison_op.hpp"







#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/less.hpp"

#line 22 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/less.hpp"
#line 19 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/numeric/conversion/detail/is_subranged.hpp"









namespace boost { namespace numeric { namespace convdetail
{
  
  
  

    
    template<class T,class S>
    struct subranged_Sig2Unsig
    {
      
      
      typedef mpl::true_ type ;
    } ;

    
    template<class T,class S>
    struct subranged_Unsig2Sig
    {
       
       
       
       
       
       
       
       
       
       
       
       
       
       

       typedef mpl::int_< ::std::numeric_limits<S>::digits > S_digits ;
       typedef mpl::int_< ::std::numeric_limits<T>::digits > T_digits ;

       
       typedef typename T_digits::next u_T_digits ;

       typedef mpl::int_<2> Two ;

       typedef typename mpl::multiplies<S_digits,Two>::type S_digits_times_2 ;

       typedef typename mpl::less<u_T_digits,S_digits_times_2>::type type ;
    } ;

    
    template<class T,class S>
    struct subranged_SameSign
    {
       

       typedef mpl::int_< ::std::numeric_limits<S>::digits > S_digits ;
       typedef mpl::int_< ::std::numeric_limits<T>::digits > T_digits ;

       typedef typename mpl::less<T_digits,S_digits>::type type ;
    } ;

    
    template<class T,class S>
    struct subranged_Int2Float
    {
      typedef mpl::false_ type ;
    } ;

    
    template<class T,class S>
    struct subranged_Float2Int
    {
      typedef mpl::true_ type ;
    } ;

    
    template<class T,class S>
    struct subranged_Float2Float
    {
      
      

      typedef mpl::int_< ::std::numeric_limits<S>::digits > S_mantisa ;
      typedef mpl::int_< ::std::numeric_limits<T>::digits > T_mantisa ;

      typedef mpl::int_< ::std::numeric_limits<S>::max_exponent > S_exponent ;
      typedef mpl::int_< ::std::numeric_limits<T>::max_exponent > T_exponent ;

      typedef typename mpl::less<T_exponent,S_exponent>::type T_smaller_exponent ;

      typedef typename mpl::equal_to<T_exponent,S_exponent>::type equal_exponents ;

      typedef mpl::less<T_mantisa,S_mantisa> T_smaller_mantisa ;

      typedef mpl::eval_if<equal_exponents,T_smaller_mantisa,mpl::false_> not_bigger_exponent_case ;

      typedef typename
        mpl::eval_if<T_smaller_exponent,mpl::true_,not_bigger_exponent_case>::type
          type ;
    } ;

    
    template<class T,class S>
    struct subranged_Udt2BuiltIn
    {
      typedef mpl::true_ type ;
    } ;

    
    template<class T,class S>
    struct subranged_BuiltIn2Udt
    {
      typedef mpl::false_ type ;
    } ;

    
    template<class T,class S>
    struct subranged_Udt2Udt
    {
      typedef mpl::false_ type ;
    } ;

  
  
  

    template<class T,class S>
    struct get_subranged_Int2Int
    {
      typedef subranged_SameSign<T,S>  Sig2Sig     ;
      typedef subranged_Sig2Unsig<T,S> Sig2Unsig   ;
      typedef subranged_Unsig2Sig<T,S> Unsig2Sig   ;
      typedef Sig2Sig                  Unsig2Unsig ;

      typedef typename get_sign_mixture<T,S>::type sign_mixture ;

      typedef typename
        for_sign_mixture<sign_mixture, Sig2Sig, Sig2Unsig, Unsig2Sig, Unsig2Unsig>::type
           type ;
    } ;

    template<class T,class S>
    struct get_subranged_BuiltIn2BuiltIn
    {
      typedef get_subranged_Int2Int<T,S> Int2IntQ ;

      typedef subranged_Int2Float  <T,S> Int2Float   ;
      typedef subranged_Float2Int  <T,S> Float2Int   ;
      typedef subranged_Float2Float<T,S> Float2Float ;

      typedef mpl::identity<Int2Float  > Int2FloatQ   ;
      typedef mpl::identity<Float2Int  > Float2IntQ   ;
      typedef mpl::identity<Float2Float> Float2FloatQ ;

      typedef typename get_int_float_mixture<T,S>::type int_float_mixture ;

      typedef for_int_float_mixture<int_float_mixture, Int2IntQ, Int2FloatQ, Float2IntQ, Float2FloatQ> for_ ;

      typedef typename for_::type selected ;

      typedef typename selected::type type ;
    } ;

    template<class T,class S>
    struct get_subranged
    {
      typedef get_subranged_BuiltIn2BuiltIn<T,S> BuiltIn2BuiltInQ ;

      typedef subranged_BuiltIn2Udt<T,S> BuiltIn2Udt ;
      typedef subranged_Udt2BuiltIn<T,S> Udt2BuiltIn ;
      typedef subranged_Udt2Udt<T,S>     Udt2Udt ;

      typedef mpl::identity<BuiltIn2Udt> BuiltIn2UdtQ ;
      typedef mpl::identity<Udt2BuiltIn> Udt2BuiltInQ ;
      typedef mpl::identity<Udt2Udt    > Udt2UdtQ     ;

      typedef typename get_udt_builtin_mixture<T,S>::type udt_builtin_mixture ;
      
      typedef typename
        for_udt_builtin_mixture<udt_builtin_mixture, BuiltIn2BuiltInQ, BuiltIn2UdtQ, Udt2BuiltInQ, Udt2UdtQ>::type
          selected ;

      typedef typename selected::type selected2 ;
 
      typedef typename selected2::type type ;
    } ;


  
  
  
  template<class T, class S>
  struct get_is_subranged
  {
    typedef get_subranged<T,S>         non_trivial_case ;
    typedef mpl::identity<mpl::false_> trivial_case ;

    typedef is_same<T,S> is_trivial ;
   
    typedef typename mpl::if_<is_trivial,trivial_case,non_trivial_case>::type selected ;
    
    typedef typename selected::type type ;
  } ;

} } } 

#line 233 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/numeric/conversion/detail/is_subranged.hpp"


#line 22 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/numeric/conversion/detail/conversion_traits.hpp"

namespace boost { namespace numeric { namespace convdetail
{
  
  
  
  
  
  template<class T,class S>
  struct non_trivial_traits_impl
  {
    typedef typename get_int_float_mixture   <T,S>::type int_float_mixture ;
    typedef typename get_sign_mixture        <T,S>::type sign_mixture ;
    typedef typename get_udt_builtin_mixture <T,S>::type udt_builtin_mixture ;

    typedef typename get_is_subranged<T,S>::type subranged ;

    typedef mpl::false_ trivial ;

    typedef T target_type ;
    typedef S source_type ;
    typedef T result_type ;

    typedef typename mpl::if_< is_arithmetic<S>, S, S const&>::type argument_type ;

    typedef typename mpl::if_<subranged,S,T>::type supertype ;
    typedef typename mpl::if_<subranged,T,S>::type subtype   ;
  } ;

  
  
  
  
  
  template<class N>
  struct trivial_traits_impl
  {
    typedef typename get_int_float_mixture  <N,N>::type int_float_mixture ;
    typedef typename get_sign_mixture       <N,N>::type sign_mixture ;
    typedef typename get_udt_builtin_mixture<N,N>::type udt_builtin_mixture ;

    typedef mpl::false_ subranged ;
    typedef mpl::true_  trivial ;

    typedef N        target_type ;
    typedef N        source_type ;
    typedef N const& result_type ;
    typedef N const& argument_type ;

    typedef N supertype ;
    typedef N subtype  ;

  } ;

  
  
  
  template<class T, class S>
  struct get_conversion_traits
  {
    typedef typename remove_cv<T>::type target_type ;
    typedef typename remove_cv<S>::type source_type ;

    typedef typename is_same<target_type,source_type>::type is_trivial ;

    typedef trivial_traits_impl    <target_type>             trivial_imp ;
    typedef non_trivial_traits_impl<target_type,source_type> non_trivial_imp ;

    typedef typename mpl::if_<is_trivial,trivial_imp,non_trivial_imp>::type type ;
  } ;

} } } 

#line 96 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/numeric/conversion/detail/conversion_traits.hpp"


#line 14 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/numeric/conversion/conversion_traits.hpp"



namespace boost { namespace numeric
{

template<class T, class S>
struct conversion_traits 
    : convdetail::get_conversion_traits<T,S>::type 
{






#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/numeric/conversion/conversion_traits.hpp"
} ;

} } 

#line 36 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/numeric/conversion/conversion_traits.hpp"




#line 26 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/floating_point_comparison.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/static_assert.hpp"


























#line 28 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/static_assert.hpp"






#line 35 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/static_assert.hpp"


#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/static_assert.hpp"










#line 49 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/static_assert.hpp"











#line 61 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/static_assert.hpp"




#line 66 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/static_assert.hpp"
#line 67 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/static_assert.hpp"





#line 73 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/static_assert.hpp"

#line 75 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/static_assert.hpp"






#line 82 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/static_assert.hpp"













































































































#line 192 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/static_assert.hpp"

#line 194 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/static_assert.hpp"


#line 27 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/floating_point_comparison.hpp"

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/suppress_warnings.hpp"















#pragma warning(push)
#pragma warning(disable: 4511) 
#pragma warning(disable: 4512) 
#pragma warning(disable: 4100) 
#pragma warning(disable: 4996) 
#pragma warning(disable: 4355) 
#pragma warning(disable: 4706) 
#pragma warning(disable: 4251) 
#pragma warning(disable: 4127) 
#pragma warning(disable: 4290) 
#pragma warning(disable: 4180) 
#pragma warning(disable: 4275) 
#pragma warning(disable: 4267) 
#pragma warning(disable: 4511) 
#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/suppress_warnings.hpp"

#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/floating_point_comparison.hpp"



namespace boost {

namespace test_tools {

using unit_test::readonly_property;





enum floating_point_comparison_type {
    FPC_STRONG, 
    FPC_WEAK    

};





namespace tt_detail {


template<typename FPT>
inline FPT
fpt_abs( FPT fpv ) 
{
    return fpv < static_cast<FPT>(0) ? -fpv : fpv;
}



template<typename FPT>
struct fpt_limits {
    static FPT    min_value()
    {
        return std::numeric_limits<FPT>::is_specialized
                    ? (std::numeric_limits<FPT>::min)()
                    : 0;
    }
    static FPT    max_value()
    {
        return std::numeric_limits<FPT>::is_specialized
                    ? (std::numeric_limits<FPT>::max)()
                    : static_cast<FPT>(1000000); 
    }
};




template<typename FPT>
inline FPT
safe_fpt_division( FPT f1, FPT f2 )
{
    
    if( (f2 < static_cast<FPT>(1))  && (f1 > f2*fpt_limits<FPT>::max_value()) )
        return fpt_limits<FPT>::max_value();

    
    if( (f1 == static_cast<FPT>(0)) ||
        ((f2 > static_cast<FPT>(1)) && (f1 < f2*fpt_limits<FPT>::min_value())) )
        return static_cast<FPT>(0);

    return f1/f2;
}



} 





template<typename FPT>
struct percent_tolerance_t {
    explicit    percent_tolerance_t( FPT v ) : m_value( v ) {}

    FPT m_value;
};



template<typename Out,typename FPT>
Out& operator<<( Out& out, percent_tolerance_t<FPT> t )
{
    return out << t.m_value;
}



template<typename FPT>
inline percent_tolerance_t<FPT>
percent_tolerance( FPT v )
{
    return percent_tolerance_t<FPT>( v );
}



template<typename FPT>
struct fraction_tolerance_t {
    explicit fraction_tolerance_t( FPT v ) : m_value( v ) {}

    FPT m_value;
};



template<typename Out,typename FPT>
Out& operator<<( Out& out, fraction_tolerance_t<FPT> t )
{
    return out << t.m_value;
}



template<typename FPT>
inline fraction_tolerance_t<FPT>
fraction_tolerance( FPT v )
{
    return fraction_tolerance_t<FPT>( v );
}







template<typename FPT>
class close_at_tolerance {
public:
    
    typedef bool result_type;

    
    template<typename ToleranceBaseType>
    explicit    close_at_tolerance( percent_tolerance_t<ToleranceBaseType>  tolerance, 
                                    floating_point_comparison_type          fpc_type = FPC_STRONG ) 
    : p_fraction_tolerance( tt_detail::fpt_abs( static_cast<FPT>(0.01)*tolerance.m_value ) )
    , p_strong_or_weak( fpc_type ==  FPC_STRONG )
    , m_report_modifier( 100. )
    {}
    template<typename ToleranceBaseType>
    explicit    close_at_tolerance( fraction_tolerance_t<ToleranceBaseType> tolerance, 
                                    floating_point_comparison_type          fpc_type = FPC_STRONG ) 
    : p_fraction_tolerance( tt_detail::fpt_abs( tolerance.m_value ) )
    , p_strong_or_weak( fpc_type ==  FPC_STRONG )
    , m_report_modifier( 1. )
    {}

    predicate_result        operator()( FPT left, FPT right ) const
    {
        FPT diff = tt_detail::fpt_abs( left - right );
        FPT d1   = tt_detail::safe_fpt_division( diff, tt_detail::fpt_abs( right ) );
        FPT d2   = tt_detail::safe_fpt_division( diff, tt_detail::fpt_abs( left ) );
        
        predicate_result res( p_strong_or_weak 
            ? (d1 <= p_fraction_tolerance.get() && d2 <= p_fraction_tolerance.get()) 
            : (d1 <= p_fraction_tolerance.get() || d2 <= p_fraction_tolerance.get()) );

        if( !res )
            res.message() << (( d1 <= p_fraction_tolerance.get() ? d2 : d1 ) * m_report_modifier);

        return res;
    }

    
    readonly_property<FPT>  p_fraction_tolerance;
    readonly_property<bool> p_strong_or_weak;
private:
    
    FPT                     m_report_modifier;
};







struct  check_is_close_t {
    
    typedef bool result_type;

    template<typename FPT1, typename FPT2, typename ToleranceBaseType>
    predicate_result
    operator()( FPT1 left, FPT2 right, percent_tolerance_t<ToleranceBaseType> tolerance, 
                floating_point_comparison_type fpc_type = FPC_STRONG ) const
    {
        
        
        
        
        typedef typename numeric::conversion_traits<FPT1,FPT2>::supertype FPT;
        static_assert(!is_integral<FPT>::value, "!is_integral<FPT>::value");

        close_at_tolerance<FPT> pred( tolerance, fpc_type );

        return pred( left, right );
    }
    template<typename FPT1, typename FPT2, typename ToleranceBaseType>
    predicate_result
    operator()( FPT1 left, FPT2 right, fraction_tolerance_t<ToleranceBaseType> tolerance, 
                floating_point_comparison_type fpc_type = FPC_STRONG ) const
    {
        
        typedef typename numeric::conversion_traits<FPT1,FPT2>::supertype FPT;
        static_assert(!is_integral<FPT>::value, "!is_integral<FPT>::value");

        close_at_tolerance<FPT> pred( tolerance, fpc_type );

        return pred( left, right );
    }
};

namespace {
check_is_close_t const& check_is_close = unit_test::ut_detail::static_constant<check_is_close_t>::value;
}







struct  check_is_small_t {
    
    typedef bool result_type;

    template<typename FPT>
    bool
    operator()( FPT fpv, FPT tolerance ) const
    {
        return tt_detail::fpt_abs( fpv ) < tt_detail::fpt_abs( tolerance );
    }
};

namespace {
check_is_small_t const& check_is_small = unit_test::ut_detail::static_constant<check_is_small_t>::value;
}



} 

} 



#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/enable_warnings.hpp"















#pragma warning(default: 4511) 
#pragma warning(default: 4512) 
#pragma warning(default: 4100) 
#pragma warning(default: 4996) 
#pragma warning(default: 4355) 
#pragma warning(default: 4706) 
#pragma warning(default: 4251) 
#pragma warning(default: 4127) 
#pragma warning(default: 4290) 
#pragma warning(default: 4180) 
#pragma warning(default: 4275) 
#pragma warning(default: 4267) 
#pragma warning(default: 4511) 
#pragma warning(pop)
#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/enable_warnings.hpp"
#line 285 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/floating_point_comparison.hpp"

#line 287 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/floating_point_comparison.hpp"
#line 22 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/test_tools.hpp"



#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/workaround.hpp"























#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/suppress_warnings.hpp"















#pragma warning(push)
#pragma warning(disable: 4511) 
#pragma warning(disable: 4512) 
#pragma warning(disable: 4100) 
#pragma warning(disable: 4996) 
#pragma warning(disable: 4355) 
#pragma warning(disable: 4706) 
#pragma warning(disable: 4251) 
#pragma warning(disable: 4127) 
#pragma warning(disable: 4290) 
#pragma warning(disable: 4180) 
#pragma warning(disable: 4275) 
#pragma warning(disable: 4267) 
#pragma warning(disable: 4511) 
#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/suppress_warnings.hpp"

#line 25 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/workaround.hpp"



namespace boost {

namespace unit_test {

namespace ut_detail {















using std::distance;
#line 50 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/workaround.hpp"

template <class T> inline void ignore_unused_variable_warning(const T&) {}

} 

} 

namespace unit_test_framework = unit_test;

} 



#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/enable_warnings.hpp"















#pragma warning(default: 4511) 
#pragma warning(default: 4512) 
#pragma warning(default: 4100) 
#pragma warning(default: 4996) 
#pragma warning(default: 4355) 
#pragma warning(default: 4706) 
#pragma warning(default: 4251) 
#pragma warning(default: 4127) 
#pragma warning(default: 4290) 
#pragma warning(default: 4180) 
#pragma warning(default: 4275) 
#pragma warning(default: 4267) 
#pragma warning(default: 4511) 
#pragma warning(pop)
#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/enable_warnings.hpp"
#line 64 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/workaround.hpp"

#line 66 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/workaround.hpp"
#line 26 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/test_tools.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/basic_cstring/io.hpp"
























#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/suppress_warnings.hpp"















#pragma warning(push)
#pragma warning(disable: 4511) 
#pragma warning(disable: 4512) 
#pragma warning(disable: 4100) 
#pragma warning(disable: 4996) 
#pragma warning(disable: 4355) 
#pragma warning(disable: 4706) 
#pragma warning(disable: 4251) 
#pragma warning(disable: 4127) 
#pragma warning(disable: 4290) 
#pragma warning(disable: 4180) 
#pragma warning(disable: 4275) 
#pragma warning(disable: 4267) 
#pragma warning(disable: 4511) 
#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/suppress_warnings.hpp"

#line 26 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/basic_cstring/io.hpp"



namespace boost {

namespace unit_test {

















template<typename CharT1, typename Tr,typename CharT2>
inline std::basic_ostream<CharT1,Tr>&
operator<<( std::basic_ostream<CharT1,Tr>& os, basic_cstring<CharT2> const& str )
{
    CharT1 const* const beg = reinterpret_cast<CharT1 const*>( str.begin() ); 
    CharT1 const* const end = reinterpret_cast<CharT1 const*>( str.end() );
    os << std::basic_string<CharT1,Tr>( beg, end - beg );

    return os;
}

#line 61 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/basic_cstring/io.hpp"




} 

} 



#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/enable_warnings.hpp"















#pragma warning(default: 4511) 
#pragma warning(default: 4512) 
#pragma warning(default: 4100) 
#pragma warning(default: 4996) 
#pragma warning(default: 4355) 
#pragma warning(default: 4706) 
#pragma warning(default: 4251) 
#pragma warning(default: 4127) 
#pragma warning(default: 4290) 
#pragma warning(default: 4180) 
#pragma warning(default: 4275) 
#pragma warning(default: 4267) 
#pragma warning(default: 4511) 
#pragma warning(pop)
#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/enable_warnings.hpp"
#line 72 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/basic_cstring/io.hpp"

#line 74 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/basic_cstring/io.hpp"
#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/test_tools.hpp"





#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/enum.hpp"























#line 25 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/enum.hpp"


#line 28 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/enum.hpp"

#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/enum.hpp"


































































































































































































































































#line 289 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/enum.hpp"
#line 35 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/test_tools.hpp"








#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_abstract.hpp"




#pragma once
#line 7 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_abstract.hpp"























































#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"













#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"



























#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"


































#line 50 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"






#line 57 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



#line 61 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



#line 65 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



































































































































#line 197 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"
#line 63 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_abstract.hpp"


namespace boost {
namespace detail{


template <class T>
struct is_abstract_imp
{
   static const bool value = __is_abstract(T);
};


































































#line 141 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_abstract.hpp"
}


template< typename T > struct is_abstract : public ::boost::integral_constant<bool,::boost::detail::is_abstract_imp<T>::value> { public:   }; 


#line 148 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_abstract.hpp"

} 

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_undef.hpp"




























#line 152 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_abstract.hpp"

#line 154 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_abstract.hpp"
#line 44 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/test_tools.hpp"

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/or.hpp"




































#line 39 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/or.hpp"
#line 40 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/or.hpp"
#line 41 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/or.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"





























#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"





#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/preprocessed/plain/or.hpp"











namespace boost { namespace mpl {

namespace aux {

template< bool C_, typename T1, typename T2, typename T3, typename T4 >
struct or_impl
    : true_
{
};

template< typename T1, typename T2, typename T3, typename T4 >
struct or_impl< false,T1,T2,T3,T4 >
    : or_impl<
          T1::type::value
        , T2, T3, T4
        , false_
        >
{
};

template<>
struct or_impl<
          false
        , false_, false_, false_, false_
        >
    : false_
{
};

} 

template<
      typename T1 = na
    , typename T2 = na
    , typename T3 = false_, typename T4 = false_, typename T5 = false_
    >
struct or_

    : aux::or_impl<
          T1::type::value
        , T2, T3, T4, T5
        >

{
};

template<> struct or_<  na , na > { template<  typename T1 , typename T2 , typename T3 =na  , typename T4 =na  , typename T5 =na  > struct apply : or_<  T1 , T2 > { }; };  template< typename Tag > struct lambda< or_<  na , na > , Tag  > { typedef false_ is_le; typedef or_<  na , na > result_; typedef or_<  na , na > type; };  
#line 63 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/preprocessed/plain/or.hpp"

}}
#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"
#line 39 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"




#line 44 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/or.hpp"





#line 50 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/or.hpp"
#line 51 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/or.hpp"
#line 52 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/or.hpp"








#line 61 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/or.hpp"
#line 62 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/or.hpp"
#line 46 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/test_tools.hpp"








#pragma warning(disable: 4127) 
#line 56 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/test_tools.hpp"

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/suppress_warnings.hpp"















#pragma warning(push)
#pragma warning(disable: 4511) 
#pragma warning(disable: 4512) 
#pragma warning(disable: 4100) 
#pragma warning(disable: 4996) 
#pragma warning(disable: 4355) 
#pragma warning(disable: 4706) 
#pragma warning(disable: 4251) 
#pragma warning(disable: 4127) 
#pragma warning(disable: 4290) 
#pragma warning(disable: 4180) 
#pragma warning(disable: 4275) 
#pragma warning(disable: 4267) 
#pragma warning(disable: 4511) 
#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/suppress_warnings.hpp"

#line 58 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/test_tools.hpp"





















































































































































































































































namespace boost {

namespace test_tools {

typedef unit_test::const_string      const_string;

namespace { bool dummy_cond = false; }





template<typename T>
struct print_log_value {
    void    operator()( std::ostream& ostr, T const& t )
    {
        
        if (::boost::test_tools::dummy_cond) {}

        typedef typename mpl::or_<is_array<T>,is_function<T>,is_abstract<T> >::type cant_use_nl;

        set_precision( ostr, cant_use_nl() );

        ostr << t; 
    }

    void set_precision( std::ostream& ostr, mpl::false_ )
    {
        if( std::numeric_limits<T>::is_specialized && std::numeric_limits<T>::radix == 2 )
            ostr.precision( 2 + std::numeric_limits<T>::digits * 301/1000 ); 
    }

    void set_precision( std::ostream&, mpl::true_ ) {}
};






















#line 360 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/test_tools.hpp"



template<>
struct  print_log_value<bool> {
    void    operator()( std::ostream& ostr, bool t )
    {
         ostr << std::boolalpha << t;
    }
};



template<>
struct  print_log_value<char> {
    void    operator()( std::ostream& ostr, char t );
};



template<>
struct  print_log_value<unsigned char> {
    void    operator()( std::ostream& ostr, unsigned char t );
};



template<>
struct  print_log_value<char const*> {
    void    operator()( std::ostream& ostr, char const* t );
};



template<>
struct  print_log_value<wchar_t const*> {
    void    operator()( std::ostream& ostr, wchar_t const* t );
};



namespace tt_detail {





enum check_type {
    CHECK_PRED, 
    CHECK_MSG,
    CHECK_EQUAL,
    CHECK_NE,
    CHECK_LT,
    CHECK_LE,
    CHECK_GT,
    CHECK_GE,
    CHECK_CLOSE,
    CHECK_CLOSE_FRACTION,
    CHECK_SMALL,
    CHECK_BITWISE_EQUAL,
    CHECK_PRED_WITH_ARGS,
    CHECK_EQUAL_COLL
};

enum tool_level {
    WARN, CHECK, REQUIRE, PASS
};







template<typename T>
struct print_helper_t {
    explicit    print_helper_t( T const& t ) : m_t( t ) {}

    T const&    m_t;
};











#line 452 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/test_tools.hpp"



template<typename T>
inline print_helper_t<T> print_helper( T const& t )
{
    return print_helper_t<T>( t );
}



template<typename T>
inline std::ostream& 
operator<<( std::ostream& ostr, print_helper_t<T> const& ph )
{
    print_log_value<T>()( ostr, ph.m_t );

    return ostr;
}







 
bool check_impl( predicate_result const& pr, ::boost::unit_test::lazy_ostream const& check_descr,
                 const_string file_name, std::size_t line_num,
                 tool_level tl, check_type ct,
                 std::size_t num_args, ... );






































#line 522 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/test_tools.hpp"

template<typename Pred , typename Arg0> inline bool check_frwd( Pred P, unit_test::lazy_ostream const& check_descr, const_string file_name, std::size_t line_num, tool_level tl, check_type ct , Arg0 const& arg0 , char const* arg0_descr ) { return check_impl( P(  arg0 ), check_descr, file_name, line_num, tl, ct, 1 , arg0_descr , &static_cast<const unit_test::lazy_ostream&>(unit_test::lazy_ostream::instance() << ::boost::test_tools::tt_detail::print_helper( arg0 )) ); } template<typename Pred , typename Arg0 , typename Arg1> inline bool check_frwd( Pred P, unit_test::lazy_ostream const& check_descr, const_string file_name, std::size_t line_num, tool_level tl, check_type ct , Arg0 const& arg0 , char const* arg0_descr , Arg1 const& arg1 , char const* arg1_descr ) { return check_impl( P(  arg0 , arg1 ), check_descr, file_name, line_num, tl, ct, 2 , arg0_descr , &static_cast<const unit_test::lazy_ostream&>(unit_test::lazy_ostream::instance() << ::boost::test_tools::tt_detail::print_helper( arg0 )) , arg1_descr , &static_cast<const unit_test::lazy_ostream&>(unit_test::lazy_ostream::instance() << ::boost::test_tools::tt_detail::print_helper( arg1 )) ); } template<typename Pred , typename Arg0 , typename Arg1 , typename Arg2> inline bool check_frwd( Pred P, unit_test::lazy_ostream const& check_descr, const_string file_name, std::size_t line_num, tool_level tl, check_type ct , Arg0 const& arg0 , char const* arg0_descr , Arg1 const& arg1 , char const* arg1_descr , Arg2 const& arg2 , char const* arg2_descr ) { return check_impl( P(  arg0 , arg1 , arg2 ), check_descr, file_name, line_num, tl, ct, 3 , arg0_descr , &static_cast<const unit_test::lazy_ostream&>(unit_test::lazy_ostream::instance() << ::boost::test_tools::tt_detail::print_helper( arg0 )) , arg1_descr , &static_cast<const unit_test::lazy_ostream&>(unit_test::lazy_ostream::instance() << ::boost::test_tools::tt_detail::print_helper( arg1 )) , arg2_descr , &static_cast<const unit_test::lazy_ostream&>(unit_test::lazy_ostream::instance() << ::boost::test_tools::tt_detail::print_helper( arg2 )) ); } template<typename Pred , typename Arg0 , typename Arg1 , typename Arg2 , typename Arg3> inline bool check_frwd( Pred P, unit_test::lazy_ostream const& check_descr, const_string file_name, std::size_t line_num, tool_level tl, check_type ct , Arg0 const& arg0 , char const* arg0_descr , Arg1 const& arg1 , char const* arg1_descr , Arg2 const& arg2 , char const* arg2_descr , Arg3 const& arg3 , char const* arg3_descr ) { return check_impl( P(  arg0 , arg1 , arg2 , arg3 ), check_descr, file_name, line_num, tl, ct, 4 , arg0_descr , &static_cast<const unit_test::lazy_ostream&>(unit_test::lazy_ostream::instance() << ::boost::test_tools::tt_detail::print_helper( arg0 )) , arg1_descr , &static_cast<const unit_test::lazy_ostream&>(unit_test::lazy_ostream::instance() << ::boost::test_tools::tt_detail::print_helper( arg1 )) , arg2_descr , &static_cast<const unit_test::lazy_ostream&>(unit_test::lazy_ostream::instance() << ::boost::test_tools::tt_detail::print_helper( arg2 )) , arg3_descr , &static_cast<const unit_test::lazy_ostream&>(unit_test::lazy_ostream::instance() << ::boost::test_tools::tt_detail::print_helper( arg3 )) ); } template<typename Pred , typename Arg0 , typename Arg1 , typename Arg2 , typename Arg3 , typename Arg4> inline bool check_frwd( Pred P, unit_test::lazy_ostream const& check_descr, const_string file_name, std::size_t line_num, tool_level tl, check_type ct , Arg0 const& arg0 , char const* arg0_descr , Arg1 const& arg1 , char const* arg1_descr , Arg2 const& arg2 , char const* arg2_descr , Arg3 const& arg3 , char const* arg3_descr , Arg4 const& arg4 , char const* arg4_descr ) { return check_impl( P(  arg0 , arg1 , arg2 , arg3 , arg4 ), check_descr, file_name, line_num, tl, ct, 5 , arg0_descr , &static_cast<const unit_test::lazy_ostream&>(unit_test::lazy_ostream::instance() << ::boost::test_tools::tt_detail::print_helper( arg0 )) , arg1_descr , &static_cast<const unit_test::lazy_ostream&>(unit_test::lazy_ostream::instance() << ::boost::test_tools::tt_detail::print_helper( arg1 )) , arg2_descr , &static_cast<const unit_test::lazy_ostream&>(unit_test::lazy_ostream::instance() << ::boost::test_tools::tt_detail::print_helper( arg2 )) , arg3_descr , &static_cast<const unit_test::lazy_ostream&>(unit_test::lazy_ostream::instance() << ::boost::test_tools::tt_detail::print_helper( arg3 )) , arg4_descr , &static_cast<const unit_test::lazy_ostream&>(unit_test::lazy_ostream::instance() << ::boost::test_tools::tt_detail::print_helper( arg4 )) ); }









template <class Left, class Right>
predicate_result equal_impl( Left const& left, Right const& right )
{
    return left == right;
}



predicate_result         equal_impl( char const* left, char const* right );
inline predicate_result equal_impl( char* left, char const* right ) { return equal_impl( static_cast<char const*>(left), static_cast<char const*>(right) ); }
inline predicate_result equal_impl( char const* left, char* right ) { return equal_impl( static_cast<char const*>(left), static_cast<char const*>(right) ); }
inline predicate_result equal_impl( char* left, char* right )       { return equal_impl( static_cast<char const*>(left), static_cast<char const*>(right) ); }


predicate_result         equal_impl( wchar_t const* left, wchar_t const* right );
inline predicate_result equal_impl( wchar_t* left, wchar_t const* right ) { return equal_impl( static_cast<wchar_t const*>(left), static_cast<wchar_t const*>(right) ); }
inline predicate_result equal_impl( wchar_t const* left, wchar_t* right ) { return equal_impl( static_cast<wchar_t const*>(left), static_cast<wchar_t const*>(right) ); }
inline predicate_result equal_impl( wchar_t* left, wchar_t* right )       { return equal_impl( static_cast<wchar_t const*>(left), static_cast<wchar_t const*>(right) ); }
#line 552 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/test_tools.hpp"



struct equal_impl_frwd {
    template <typename Left, typename Right>
    inline predicate_result
    call_impl( Left const& left, Right const& right, mpl::false_ ) const
    {
        return equal_impl( left, right );
    }

    template <typename Left, typename Right>
    inline predicate_result
    call_impl( Left const& left, Right const& right, mpl::true_ ) const
    {
        return (*this)( right, &left[0] );
    }

    template <typename Left, typename Right>
    inline predicate_result
    operator()( Left const& left, Right const& right ) const
    {
        typedef typename is_array<Left>::type left_is_array;
        return call_impl( left, right, left_is_array() );
    }
};



struct ne_impl {
    template <class Left, class Right>
    predicate_result operator()( Left const& left, Right const& right )
    {
        return !equal_impl_frwd()( left, right );
    }
};



struct lt_impl {
    template <class Left, class Right>
    predicate_result operator()( Left const& left, Right const& right )
    {
        return left < right;
    }
};



struct le_impl {
    template <class Left, class Right>
    predicate_result operator()( Left const& left, Right const& right )
    {
        return left <= right;
    }
};



struct gt_impl {
    template <class Left, class Right>
    predicate_result operator()( Left const& left, Right const& right )
    {
        return left > right;
    }
};



struct ge_impl {
    template <class Left, class Right>
    predicate_result operator()( Left const& left, Right const& right )
    {
        return left >= right;
    }
};



template <typename Left, typename Right>
inline predicate_result
equal_coll_impl( Left left_begin, Left left_end, Right right_begin, Right right_end )
{
    predicate_result    res( true );
    std::size_t         pos = 0;

    for( ; left_begin != left_end && right_begin != right_end; ++left_begin, ++right_begin, ++pos ) {
        if( *left_begin != *right_begin ) {
            res = false;
            res.message() << "\nMismatch in a position " << pos << ": "  << *left_begin << " != " << *right_begin;
        }
    }

    if( left_begin != left_end ) {
        std::size_t r_size = pos;
        while( left_begin != left_end ) {
            ++pos;
            ++left_begin;
        }

        res = false;
        res.message() << "\nCollections size mismatch: " << pos << " != " << r_size;
    }

    if( right_begin != right_end ) {
        std::size_t l_size = pos;
        while( right_begin != right_end ) {
            ++pos;
            ++right_begin;
        }

        res = false;
        res.message() << "\nCollections size mismatch: " << l_size << " != " << pos;
    }

    return res;
}



template <class Left, class Right>
inline predicate_result
bitwise_equal_impl( Left const& left, Right const& right )
{
    predicate_result    res( true );

    std::size_t left_bit_size  = sizeof(Left)*8;
    std::size_t right_bit_size = sizeof(Right)*8;

    static Left const leftOne( 1 );
    static Right const rightOne( 1 );

    std::size_t total_bits = left_bit_size < right_bit_size ? left_bit_size : right_bit_size;

    for( std::size_t counter = 0; counter < total_bits; ++counter ) {
        if( ( left & ( leftOne << counter ) ) != ( right & ( rightOne << counter ) ) ) {
            res = false;
            res.message() << "\nMismatch in a position " << counter;
        }
    }

    if( left_bit_size != right_bit_size ) {
        res = false;
        res.message() << "\nOperands bit sizes mismatch: " << left_bit_size << " != " << right_bit_size;
    }

    return res;
}



bool  is_defined_impl( const_string symbol_name, const_string symbol_value );



} 

} 

namespace test_toolbox = test_tools;

} 



#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/enable_warnings.hpp"















#pragma warning(default: 4511) 
#pragma warning(default: 4512) 
#pragma warning(default: 4100) 
#pragma warning(default: 4996) 
#pragma warning(default: 4355) 
#pragma warning(default: 4706) 
#pragma warning(default: 4251) 
#pragma warning(default: 4127) 
#pragma warning(default: 4290) 
#pragma warning(default: 4180) 
#pragma warning(default: 4275) 
#pragma warning(default: 4267) 
#pragma warning(default: 4511) 
#pragma warning(pop)
#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/enable_warnings.hpp"
#line 718 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/test_tools.hpp"

#line 720 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/test_tools.hpp"

#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/unit_test.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/unit_test_suite.hpp"


















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/unit_test_suite_impl.hpp"





















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/callback.hpp"






















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/suppress_warnings.hpp"















#pragma warning(push)
#pragma warning(disable: 4511) 
#pragma warning(disable: 4512) 
#pragma warning(disable: 4100) 
#pragma warning(disable: 4996) 
#pragma warning(disable: 4355) 
#pragma warning(disable: 4706) 
#pragma warning(disable: 4251) 
#pragma warning(disable: 4127) 
#pragma warning(disable: 4290) 
#pragma warning(disable: 4180) 
#pragma warning(disable: 4275) 
#pragma warning(disable: 4267) 
#pragma warning(disable: 4511) 
#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/suppress_warnings.hpp"

#line 24 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/callback.hpp"



#line 28 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/callback.hpp"



namespace boost {

namespace unit_test {

namespace ut_detail {

struct unused {};

template<typename R>
struct invoker {
    template<typename Functor>
    R       invoke( Functor& f )                        { return f(); }
    template<typename Functor, typename T1>
    R       invoke( Functor& f, T1 t1 )                 { return f( t1 ); }
    template<typename Functor, typename T1, typename T2>
    R       invoke( Functor& f, T1 t1, T2 t2 )          { return f( t1, t2 ); }
    template<typename Functor, typename T1, typename T2, typename T3>
    R       invoke( Functor& f, T1 t1, T2 t2, T3 t3 )   { return f( t1, t2, t3 ); }
};



template<>
struct invoker<unused> {
    template<typename Functor>
    unused  invoke( Functor& f )                        { f(); return unused(); }
    template<typename Functor, typename T1>
    unused  invoke( Functor& f, T1 t1 )                 { f( t1 ); return unused(); }
    template<typename Functor, typename T1, typename T2>
    unused  invoke( Functor& f, T1 t1, T2 t2 )          { f( t1, t2 ); return unused(); }
    template<typename Functor, typename T1, typename T2, typename T3>
    unused  invoke( Functor& f, T1 t1, T2 t2, T3 t3 )   { f( t1, t2, t3 ); return unused(); }
};



} 





namespace ut_detail {

template<typename R>
struct callback0_impl {
    virtual ~callback0_impl() {}

    virtual R invoke() = 0;
};



template<typename R, typename Functor>
struct callback0_impl_t : callback0_impl<R> {
    
    explicit callback0_impl_t( Functor f ) : m_f( f ) {}

    virtual R invoke() { return invoker<R>().invoke( m_f ); }

private:
    
    Functor m_f;
};



} 

template<typename R = ut_detail::unused>
class callback0 {
public:
    
    callback0() {}




    template<typename Functor>
    callback0( Functor f )
    : m_impl( new ut_detail::callback0_impl_t<R,Functor>( f ) ) {}
    
    void        operator=( callback0 const& rhs ) { m_impl = rhs.m_impl; }

    template<typename Functor>
    void        operator=( Functor f ) { m_impl.reset( new ut_detail::callback0_impl_t<R,Functor>( f ) );  }

    R           operator()() const { return m_impl->invoke(); }

    bool        operator!() const { return !m_impl; }

private:
    
    boost::shared_ptr<ut_detail::callback0_impl<R> > m_impl;
};





namespace ut_detail {

template<typename R, typename T1>
struct callback1_impl {
    virtual ~callback1_impl() {}

    virtual R invoke( T1 t1 ) = 0;
};



template<typename R, typename T1,typename Functor>
struct callback1_impl_t : callback1_impl<R,T1> {
    
    explicit callback1_impl_t( Functor f ) : m_f( f ) {}

    virtual R invoke( T1 t1 ) { return invoker<R>().invoke( m_f, t1 ); }

private:
    
    Functor m_f;
};



} 

template<typename T1,typename R = ut_detail::unused>
class callback1 {
public:
    
    callback1() {}




    template<typename Functor>
    callback1( Functor f )
    : m_impl( new ut_detail::callback1_impl_t<R,T1,Functor>( f ) ) {}

    void        operator=( callback1 const& rhs ) { m_impl = rhs.m_impl; }

    template<typename Functor>
    void        operator=( Functor f ) { m_impl.reset( new ut_detail::callback1_impl_t<R,T1,Functor>( f ) );  }

    R           operator()( T1 t1 ) const { return m_impl->invoke( t1 ); }

    bool        operator!() const { return !m_impl; }

private:
    
    boost::shared_ptr<ut_detail::callback1_impl<R,T1> > m_impl;
};





namespace ut_detail {

template<typename R, typename T1,typename T2>
struct callback2_impl {
    virtual ~callback2_impl() {}

    virtual R invoke( T1 t1, T2 t2 ) = 0;
};



template<typename R, typename T1, typename T2, typename Functor>
struct callback2_impl_t : callback2_impl<R,T1,T2> {
    
    explicit callback2_impl_t( Functor f ) : m_f( f ) {}

    virtual R invoke( T1 t1, T2 t2 ) { return invoker<R>().template invoke<Functor,T1,T2>( m_f, t1, t2 ); }

private:
    
    Functor m_f;
};



} 

template<typename T1,typename T2, typename R = ut_detail::unused>
class callback2 {
public:
    
    callback2() {}




    template<typename Functor>
                callback2( Functor f ) : m_impl( new ut_detail::callback2_impl_t<R,T1,T2,Functor>( f ) ) {}

    void        operator=( callback2 const& rhs ) { m_impl = rhs.m_impl; }

    template<typename Functor>
    void        operator=( Functor f ) { m_impl.reset( new ut_detail::callback2_impl_t<R,T1,T2,Functor>( f ) );  }

    R           operator()( T1 t1, T2 t2 ) const { return m_impl->invoke( t1, t2 ); }

    bool        operator!() const { return !m_impl; }

private:
    
    boost::shared_ptr<ut_detail::callback2_impl<R,T1,T2> > m_impl;
};





namespace ut_detail {

template<typename R, typename T1, typename T2, typename T3>
struct callback3_impl {
    virtual ~callback3_impl() {}

    virtual R invoke( T1 t1, T2 t2, T3 t3 ) = 0;
};



template<typename R, typename T1, typename T2, typename T3, typename Functor>
struct callback3_impl_t : callback3_impl<R,T1,T2,T3> {
    
    explicit callback3_impl_t( Functor f ) : m_f( f ) {}

    virtual R invoke( T1 t1, T2 t2, T3 t3 ) { return invoker<R>().invoke( m_f, t1, t2, t3 ); }

private:
    
    Functor m_f;
};



} 

template<typename T1,typename T2, typename T3, typename R = ut_detail::unused>
class callback3 {
public:
    
    callback3() {}




    template<typename Functor>
    callback3( Functor f )
    : m_impl( new ut_detail::callback3_impl_t<R,T1,T2,T3,Functor>( f ) ) {}

    void        operator=( callback3 const& rhs ) { m_impl = rhs.m_impl; }

    template<typename Functor>
    void        operator=( Functor f ) { m_impl.reset( new ut_detail::callback3_impl_t<R,T1,T2,T3,Functor>( f ) );  }

    R           operator()( T1 t1, T2 t2, T3 t3 ) const { return m_impl->invoke( t1, t2, t3 ); }

    bool        operator!() const { return !m_impl; }

private:
    
    boost::shared_ptr<ut_detail::callback3_impl<R,T1,T2,T3> > m_impl;
};

} 

} 





#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/enable_warnings.hpp"















#pragma warning(default: 4511) 
#pragma warning(default: 4512) 
#pragma warning(default: 4100) 
#pragma warning(default: 4996) 
#pragma warning(default: 4355) 
#pragma warning(default: 4706) 
#pragma warning(default: 4251) 
#pragma warning(default: 4127) 
#pragma warning(default: 4290) 
#pragma warning(default: 4180) 
#pragma warning(default: 4275) 
#pragma warning(default: 4267) 
#pragma warning(default: 4511) 
#pragma warning(pop)
#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/enable_warnings.hpp"
#line 309 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/callback.hpp"

#line 311 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/utils/callback.hpp"
#line 23 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/unit_test_suite_impl.hpp"






#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/for_each.hpp"
















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/is_sequence.hpp"


















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/begin_end.hpp"
















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/begin_end_fwd.hpp"
















namespace boost { namespace mpl {

template< typename Tag > struct begin_impl;
template< typename Tag > struct end_impl;

template< typename Sequence > struct begin;
template< typename Sequence > struct end;

}}

#line 28 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/begin_end_fwd.hpp"
#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/begin_end.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/begin_end_impl.hpp"

















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/sequence_tag_fwd.hpp"
















namespace boost { namespace mpl {

struct nested_begin_end_tag;
struct non_sequence_tag;

template< typename Sequence > struct sequence_tag;

}}

#line 27 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/sequence_tag_fwd.hpp"
#line 19 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/begin_end_impl.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/has_begin.hpp"


















namespace boost { namespace mpl { namespace aux {
template< typename T > struct has_begin_msvc_sfinae_helper { typedef void type; };template< typename T, typename U = void > struct has_begin_impl_ { static const bool value = false; typedef boost::mpl::bool_<value> type; }; template< typename T > struct has_begin_impl_< T , typename has_begin_msvc_sfinae_helper< typename T::begin >::type > { static const bool value = true; typedef boost::mpl::bool_<value> type; }; template< typename T, typename fallback_ = boost::mpl::bool_<true> > struct has_begin : has_begin_impl_<T> { };
}}}

#line 24 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/has_begin.hpp"
#line 22 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/begin_end_impl.hpp"

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/traits_lambda_spec.hpp"






















































#line 56 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/traits_lambda_spec.hpp"







#line 64 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/traits_lambda_spec.hpp"
#line 24 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/begin_end_impl.hpp"


namespace boost { namespace mpl {


namespace aux { 

template< typename Sequence > 
struct begin_type 
{ 
    typedef typename Sequence::begin type; 
};
template< typename Sequence > 
struct end_type
{ 
    typedef typename Sequence::end type; 
};

}





template< typename Tag >
struct begin_impl
{
    template< typename Sequence > struct apply
    {
        typedef typename eval_if<aux::has_begin<Sequence, true_>,
                                 aux::begin_type<Sequence>, void_>::type type;
    };
};

template< typename Tag >
struct end_impl
{
    template< typename Sequence > struct apply
    {
        typedef typename eval_if<aux::has_begin<Sequence, true_>,
                                 aux::end_type<Sequence>, void_>::type type;
    };
};















template<> struct begin_impl<nested_begin_end_tag> { template< typename Sequence > struct apply { typedef typename Sequence::begin type; }; };
template<> struct end_impl<nested_begin_end_tag> { template< typename Sequence > struct apply { typedef typename Sequence::end type; }; };




template<> struct begin_impl<non_sequence_tag> { template< typename Sequence > struct apply { typedef void_ type; }; };
template<> struct end_impl<non_sequence_tag> { template< typename Sequence > struct apply { typedef void_ type; }; };
template<> struct begin_impl<na> { template< typename Sequence > struct apply { typedef void_ type; }; };
template<> struct end_impl<na> { template< typename Sequence > struct apply { typedef void_ type; }; };







}}

#line 102 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/begin_end_impl.hpp"
#line 19 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/begin_end.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/sequence_tag.hpp"

























namespace boost { namespace mpl {













#line 42 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/sequence_tag.hpp"


































#line 77 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/sequence_tag.hpp"

namespace aux {

template< bool has_tag_, bool has_begin_ >
struct sequence_tag_impl
{
    
    
    template< typename Sequence > struct result2_;
};











template<> struct sequence_tag_impl<true,true> { template< typename Sequence > struct result2_ { typedef typename Sequence::tag type; }; };
template<> struct sequence_tag_impl<true,false> { template< typename Sequence > struct result2_ { typedef typename Sequence::tag type; }; };
template<> struct sequence_tag_impl<false,true> { template< typename Sequence > struct result2_ { typedef nested_begin_end_tag type; }; };
template<> struct sequence_tag_impl<false,false> { template< typename Sequence > struct result2_ { typedef non_sequence_tag type; }; };



} 

template<
      typename Sequence = na
    >
struct sequence_tag
    : aux::sequence_tag_impl<
          ::boost::mpl::aux::has_tag<Sequence>::value
        , ::boost::mpl::aux::has_begin<Sequence>::value
        >::template result2_<Sequence>
{
};

#line 119 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/sequence_tag.hpp"

template<> struct sequence_tag<  na > { template<  typename T1 , typename T2 =na  , typename T3 =na  , typename T4 =na  , typename T5 =na  > struct apply : sequence_tag<  T1 > { }; }; template< typename Tag > struct lambda< sequence_tag<  na > , Tag  > { typedef false_ is_le; typedef sequence_tag<  na > result_; typedef sequence_tag<  na > type; };   

}}

#line 125 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/sequence_tag.hpp"
#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/begin_end.hpp"



namespace boost { namespace mpl {




template<
      typename Sequence = na
    >
struct begin
{
    typedef typename sequence_tag<Sequence>::type tag_;
    typedef typename begin_impl< tag_ >
        ::template apply< Sequence >::type type;

    
};

template<
      typename Sequence = na
    >
struct end
{
    typedef typename sequence_tag<Sequence>::type tag_;
    typedef typename end_impl< tag_ >
        ::template apply< Sequence >::type type;

    
};

template<> struct begin<  na > { template<  typename T1 , typename T2 =na  , typename T3 =na  , typename T4 =na  , typename T5 =na  > struct apply : begin<  T1 > { }; }; template< typename Tag > struct lambda< begin<  na > , Tag  > { typedef false_ is_le; typedef begin<  na > result_; typedef begin<  na > type; };   
template<> struct end<  na > { template<  typename T1 , typename T2 =na  , typename T3 =na  , typename T4 =na  , typename T5 =na  > struct apply : end<  T1 > { }; }; template< typename Tag > struct lambda< end<  na > , Tag  > { typedef false_ is_le; typedef end<  na > result_; typedef end<  na > type; };   

}}

#line 58 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/begin_end.hpp"
#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/is_sequence.hpp"














#line 35 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/is_sequence.hpp"

#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/is_sequence.hpp"



namespace boost { namespace mpl {





































#line 79 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/is_sequence.hpp"









#line 89 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/is_sequence.hpp"

template<
      typename T = na
    >
struct is_sequence
    : not_< is_same< typename begin<T>::type, void_ > >
{
    
};

#line 100 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/is_sequence.hpp"






#line 107 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/is_sequence.hpp"

template<> struct is_sequence<  na > { template<  typename T1 , typename T2 =na  , typename T3 =na  , typename T4 =na  , typename T5 =na  > struct apply : is_sequence<  T1 > { }; }; template< typename Tag > struct lambda< is_sequence<  na > , Tag  > { typedef false_ is_le; typedef is_sequence<  na > result_; typedef is_sequence<  na > type; };  

}}

#line 113 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/is_sequence.hpp"
#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/for_each.hpp"

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/apply.hpp"





















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/apply_fwd.hpp"






















#line 24 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/apply_fwd.hpp"






#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"





























#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"





#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/preprocessed/plain/apply_fwd.hpp"











namespace boost { namespace mpl {

template<
      typename F, typename T1 = na, typename T2 = na, typename T3 = na
    , typename T4 = na, typename T5 = na
    >
struct apply;

template<
      typename F
    >
struct apply0;

template<
      typename F, typename T1
    >
struct apply1;

template<
      typename F, typename T1, typename T2
    >
struct apply2;

template<
      typename F, typename T1, typename T2, typename T3
    >
struct apply3;

template<
      typename F, typename T1, typename T2, typename T3, typename T4
    >
struct apply4;

template<
      typename F, typename T1, typename T2, typename T3, typename T4
    , typename T5
    >
struct apply5;

}}

#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"
#line 39 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"




#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/apply_fwd.hpp"





























































#line 94 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/apply_fwd.hpp"
#line 95 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/apply_fwd.hpp"












#line 108 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/apply_fwd.hpp"
#line 23 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/apply.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/apply_wrap.hpp"









































































































































































































































#line 235 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/apply_wrap.hpp"
#line 24 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/apply.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/placeholders.hpp"























#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/arg.hpp"






















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/arg_fwd.hpp"




















namespace boost { namespace mpl {

template< int N > struct arg;

}}


#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/arg_fwd.hpp"
#line 24 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/arg.hpp"

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/na_assert.hpp"





















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/assert.hpp"




























#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/pp_counter.hpp"






















#line 24 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/pp_counter.hpp"
#line 25 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/pp_counter.hpp"

#line 27 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/pp_counter.hpp"
#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/assert.hpp"









#line 40 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/assert.hpp"



#line 46 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/assert.hpp"



#line 53 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/assert.hpp"






#line 61 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/assert.hpp"

#line 63 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/assert.hpp"


namespace boost { namespace mpl {

struct failed {};






#line 75 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/assert.hpp"

#line 77 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/assert.hpp"

template< bool C >  struct assert { typedef void* type; };
template<>          struct assert<false> { typedef assert type; };

template< bool C >
int assertion_failed( typename assert<C>::type );

template< bool C >
struct assertion
{
    static int failed( assert<false> );
};

template<>
struct assertion<true>
{
    static int failed( void* );
};

struct assert_
{

    template< typename T1, typename T2 = na, typename T3 = na, typename T4 = na > struct types {};
#line 101 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/assert.hpp"
    static assert_ const arg;
    enum relations { equal = 1, not_equal, greater, greater_equal, less, less_equal };
};




bool operator==( failed, failed );
bool operator!=( failed, failed );
bool operator>( failed, failed );
bool operator>=( failed, failed );
bool operator<( failed, failed );
bool operator<=( failed, failed );




#line 119 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/assert.hpp"
template< long x, long y, bool (*)(failed, failed) > 
struct assert_relation {};

#line 123 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/assert.hpp"












#line 136 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/assert.hpp"



template<class Pred>
struct extract_assert_pred;

template<class Pred>
struct extract_assert_pred<void(Pred)> { typedef Pred type; };

template<class Pred>
struct eval_assert {
    typedef typename extract_assert_pred<Pred>::type P;
    typedef typename P::type p_type;
    typedef typename ::boost::mpl::if_c<p_type::value,
        assert<false>,
        failed ************ P::************
    >::type type;
};

template<class Pred>
struct eval_assert_not {
    typedef typename extract_assert_pred<Pred>::type P;
    typedef typename P::type p_type;
    typedef typename ::boost::mpl::if_c<!p_type::value,
        assert<false>,
        failed ************ ::boost::mpl::not_<P>::************
    >::type type;
};

template< typename T >
T make_assert_arg();










































































#line 242 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/assert.hpp"



}}









































































#line 320 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/assert.hpp"



















































#line 372 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/assert.hpp"












#line 385 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/assert.hpp"









#line 395 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/assert.hpp"

#line 397 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/assert.hpp"




















#line 418 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/assert.hpp"














#line 433 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/assert.hpp"





#line 439 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/assert.hpp"
#line 24 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/na_assert.hpp"








#line 33 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/na_assert.hpp"

#line 35 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/na_assert.hpp"
#line 26 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/arg.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/arity_spec.hpp"









































#line 43 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/arity_spec.hpp"

#line 45 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/arity_spec.hpp"
















#line 63 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/arity_spec.hpp"

#line 65 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/arity_spec.hpp"


#line 68 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/arity_spec.hpp"
#line 27 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/arg.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/arg_typedef.hpp"























#line 26 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/arg_typedef.hpp"



#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/arg_typedef.hpp"

#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/arg_typedef.hpp"
#line 28 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/arg.hpp"
#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/arg.hpp"







#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"





























#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"





#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/preprocessed/plain/arg.hpp"












namespace boost { namespace mpl {
template<> struct arg< -1 >
{
    static const int value = -1;
    
    

    template<
          typename U1 = na, typename U2 = na, typename U3 = na
        , typename U4 = na, typename U5 = na
        >
    struct apply
    {
        typedef U1 type;
        static const std::size_t mpl_assertion_in_line_0 = sizeof( boost::mpl::assertion_failed<false>( boost::mpl::make_assert_arg< typename boost::mpl::eval_assert_not<void (boost::mpl::is_na<type>)>::type >() ) );
    };
};

template<> struct arg<1>
{
    static const int value = 1;
    typedef arg<2> next;
    
    

    template<
          typename U1 = na, typename U2 = na, typename U3 = na
        , typename U4 = na, typename U5 = na
        >
    struct apply
    {
        typedef U1 type;
        static const std::size_t mpl_assertion_in_line_1 = sizeof( boost::mpl::assertion_failed<false>( boost::mpl::make_assert_arg< typename boost::mpl::eval_assert_not<void (boost::mpl::is_na<type>)>::type >() ) );
    };
};

template<> struct arg<2>
{
    static const int value = 2;
    typedef arg<3> next;
    
    

    template<
          typename U1 = na, typename U2 = na, typename U3 = na
        , typename U4 = na, typename U5 = na
        >
    struct apply
    {
        typedef U2 type;
        static const std::size_t mpl_assertion_in_line_2 = sizeof( boost::mpl::assertion_failed<false>( boost::mpl::make_assert_arg< typename boost::mpl::eval_assert_not<void (boost::mpl::is_na<type>)>::type >() ) );
    };
};

template<> struct arg<3>
{
    static const int value = 3;
    typedef arg<4> next;
    
    

    template<
          typename U1 = na, typename U2 = na, typename U3 = na
        , typename U4 = na, typename U5 = na
        >
    struct apply
    {
        typedef U3 type;
        static const std::size_t mpl_assertion_in_line_3 = sizeof( boost::mpl::assertion_failed<false>( boost::mpl::make_assert_arg< typename boost::mpl::eval_assert_not<void (boost::mpl::is_na<type>)>::type >() ) );
    };
};

template<> struct arg<4>
{
    static const int value = 4;
    typedef arg<5> next;
    
    

    template<
          typename U1 = na, typename U2 = na, typename U3 = na
        , typename U4 = na, typename U5 = na
        >
    struct apply
    {
        typedef U4 type;
        static const std::size_t mpl_assertion_in_line_4 = sizeof( boost::mpl::assertion_failed<false>( boost::mpl::make_assert_arg< typename boost::mpl::eval_assert_not<void (boost::mpl::is_na<type>)>::type >() ) );
    };
};

template<> struct arg<5>
{
    static const int value = 5;
    typedef arg<6> next;
    
    

    template<
          typename U1 = na, typename U2 = na, typename U3 = na
        , typename U4 = na, typename U5 = na
        >
    struct apply
    {
        typedef U5 type;
        static const std::size_t mpl_assertion_in_line_5 = sizeof( boost::mpl::assertion_failed<false>( boost::mpl::make_assert_arg< typename boost::mpl::eval_assert_not<void (boost::mpl::is_na<type>)>::type >() ) );
    };
};



}}
#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"
#line 39 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"




#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/arg.hpp"













































#line 84 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/arg.hpp"
#line 85 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/arg.hpp"














































#line 132 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/arg.hpp"
#line 25 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/placeholders.hpp"






#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/placeholders.hpp"

#line 34 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/placeholders.hpp"

#line 36 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/placeholders.hpp"






#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"





























#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"





#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/preprocessed/plain/placeholders.hpp"












namespace boost { namespace mpl {
typedef arg< -1 > _;
}}
namespace boost { namespace mpl {



namespace placeholders {
using boost::mpl::_;
}

}}



namespace boost { namespace mpl {
typedef arg<1> _1;

}}
namespace boost { namespace mpl {



namespace placeholders {
using boost::mpl::_1;
}

}}
namespace boost { namespace mpl {
typedef arg<2> _2;

}}
namespace boost { namespace mpl {



namespace placeholders {
using boost::mpl::_2;
}

}}
namespace boost { namespace mpl {
typedef arg<3> _3;

}}
namespace boost { namespace mpl {



namespace placeholders {
using boost::mpl::_3;
}

}}
namespace boost { namespace mpl {
typedef arg<4> _4;

}}
namespace boost { namespace mpl {



namespace placeholders {
using boost::mpl::_4;
}

}}
namespace boost { namespace mpl {
typedef arg<5> _5;

}}
namespace boost { namespace mpl {



namespace placeholders {
using boost::mpl::_5;
}

}}
namespace boost { namespace mpl {
typedef arg<6> _6;

}}
namespace boost { namespace mpl {



namespace placeholders {
using boost::mpl::_6;
}

}}
#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"
#line 39 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"




#line 44 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/placeholders.hpp"































#line 76 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/placeholders.hpp"
#line 77 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/placeholders.hpp"























#line 101 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/placeholders.hpp"
#line 25 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/apply.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/lambda.hpp"

















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/bind.hpp"






















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/bind_fwd.hpp"






















#line 24 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/bind_fwd.hpp"

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/bind.hpp"
























#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/bind.hpp"



#line 34 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/bind.hpp"
#line 26 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/bind_fwd.hpp"





#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"





























#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"





#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/preprocessed/plain/bind_fwd.hpp"











namespace boost { namespace mpl {

template<
      typename F, typename T1 = na, typename T2 = na, typename T3 = na
    , typename T4 = na, typename T5 = na
    >
struct bind;

template<
      typename F
    >
struct bind0;

template<
      typename F, typename T1
    >
struct bind1;

template<
      typename F, typename T1, typename T2
    >
struct bind2;

template<
      typename F, typename T1, typename T2, typename T3
    >
struct bind3;

template<
      typename F, typename T1, typename T2, typename T3, typename T4
    >
struct bind4;

template<
      typename F, typename T1, typename T2, typename T3, typename T4
    , typename T5
    >
struct bind5;

}}

#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"
#line 39 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"




#line 33 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/bind_fwd.hpp"




















































#line 86 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/bind_fwd.hpp"
#line 87 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/bind_fwd.hpp"












#line 100 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/bind_fwd.hpp"
#line 24 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/bind.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/placeholders.hpp"



































































































#line 101 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/placeholders.hpp"
#line 25 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/bind.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/next.hpp"
















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/next_prior.hpp"
















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/common_name_wknd.hpp"



























#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/common_name_wknd.hpp"



#line 33 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/common_name_wknd.hpp"

#line 35 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/common_name_wknd.hpp"
#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/next_prior.hpp"



namespace boost { namespace mpl {




template<
      typename T = na
    >
struct next
{
    typedef typename T::next type;
    
};

template<
      typename T = na
    >
struct prior
{
    typedef typename T::prior type;
    
};

template<> struct next<  na > { template<  typename T1 , typename T2 =na  , typename T3 =na  , typename T4 =na  , typename T5 =na  > struct apply : next<  T1 > { }; }; template< typename Tag > struct lambda< next<  na > , Tag  > { typedef false_ is_le; typedef next<  na > result_; typedef next<  na > type; };   
template<> struct prior<  na > { template<  typename T1 , typename T2 =na  , typename T3 =na  , typename T4 =na  , typename T5 =na  > struct apply : prior<  T1 > { }; }; template< typename Tag > struct lambda< prior<  na > , Tag  > { typedef false_ is_le; typedef prior<  na > result_; typedef prior<  na > type; };   

}}

#line 50 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/next_prior.hpp"
#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/next.hpp"

#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/next.hpp"
#line 26 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/bind.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/protect.hpp"






















namespace boost { namespace mpl {

template<
      typename T = na
    , int not_le_ = 0
    >
struct protect : T
{


#line 34 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/protect.hpp"
    typedef protect type;
#line 36 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/protect.hpp"
};









#line 47 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/protect.hpp"

template<> struct protect<  na > { template<  typename T1 , typename T2 =na  , typename T3 =na  , typename T4 =na  , typename T5 =na  > struct apply : protect<  T1 > { }; };


#line 52 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/protect.hpp"

}}

#line 56 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/protect.hpp"
#line 27 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/bind.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/apply_wrap.hpp"









































































































































































































































#line 235 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/apply_wrap.hpp"
#line 28 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/bind.hpp"







#line 36 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/bind.hpp"
#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/bind.hpp"









#line 48 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/bind.hpp"

#line 50 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/bind.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"





























#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"





#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/preprocessed/plain/bind.hpp"












namespace boost { namespace mpl {

namespace aux {

template<
      typename T, typename U1, typename U2, typename U3, typename U4
    , typename U5
    >
struct resolve_bind_arg
{
    typedef T type;
};

template<
      typename T
    , typename Arg
    >
struct replace_unnamed_arg
{
    typedef Arg next;
    typedef T type;
};

template<
      typename Arg
    >
struct replace_unnamed_arg< arg< -1 >, Arg >
{
    typedef typename Arg::next next;
    typedef Arg type;
};

template<
      int N, typename U1, typename U2, typename U3, typename U4, typename U5
    >
struct resolve_bind_arg< arg<N>, U1, U2, U3, U4, U5 >
{
    typedef typename apply_wrap5<mpl::arg<N>, U1, U2, U3, U4, U5>::type type;
};

template<
      typename F, typename T1, typename T2, typename T3, typename T4
    , typename T5, typename U1, typename U2, typename U3, typename U4
    , typename U5
    >
struct resolve_bind_arg< bind< F,T1,T2,T3,T4,T5 >, U1, U2, U3, U4, U5 >
{
    typedef bind< F,T1,T2,T3,T4,T5 > f_;
    typedef typename apply_wrap5< f_,U1,U2,U3,U4,U5 >::type type;
};

} 

template<
      typename F
    >
struct bind0
{
    template<
          typename U1 = na, typename U2 = na, typename U3 = na
        , typename U4 = na, typename U5 = na
        >
    struct apply
    {
     private:
        typedef aux::replace_unnamed_arg< F, mpl::arg<1> > r0;
        typedef typename r0::type a0;
        typedef typename r0::next n1;
        typedef typename aux::resolve_bind_arg< a0,U1,U2,U3,U4,U5 >::type f_;
        
     public:
        typedef typename apply_wrap0<
              f_
            >::type type;

    };
};

namespace aux {

template<
      typename F, typename U1, typename U2, typename U3, typename U4
    , typename U5
    >
struct resolve_bind_arg<
      bind0<F>, U1, U2, U3, U4, U5
    >
{
    typedef bind0<F> f_;
    typedef typename apply_wrap5< f_,U1,U2,U3,U4,U5 >::type type;
};

} 




template<
      typename F
    >
struct bind< F,na,na,na,na,na >
    : bind0<F>
{
};

template<
      typename F, typename T1
    >
struct bind1
{
    template<
          typename U1 = na, typename U2 = na, typename U3 = na
        , typename U4 = na, typename U5 = na
        >
    struct apply
    {
     private:
        typedef aux::replace_unnamed_arg< F, mpl::arg<1> > r0;
        typedef typename r0::type a0;
        typedef typename r0::next n1;
        typedef typename aux::resolve_bind_arg< a0,U1,U2,U3,U4,U5 >::type f_;
        
        typedef aux::replace_unnamed_arg< T1,n1 > r1;
        typedef typename r1::type a1;
        typedef typename r1::next n2;
        typedef aux::resolve_bind_arg< a1,U1,U2,U3,U4,U5 > t1;
        
     public:
        typedef typename apply_wrap1<
              f_
            , typename t1::type
            >::type type;

    };
};

namespace aux {

template<
      typename F, typename T1, typename U1, typename U2, typename U3
    , typename U4, typename U5
    >
struct resolve_bind_arg<
      bind1< F,T1 >, U1, U2, U3, U4, U5
    >
{
    typedef bind1< F,T1 > f_;
    typedef typename apply_wrap5< f_,U1,U2,U3,U4,U5 >::type type;
};

} 




template<
      typename F, typename T1
    >
struct bind< F,T1,na,na,na,na >
    : bind1< F,T1 >
{
};

template<
      typename F, typename T1, typename T2
    >
struct bind2
{
    template<
          typename U1 = na, typename U2 = na, typename U3 = na
        , typename U4 = na, typename U5 = na
        >
    struct apply
    {
     private:
        typedef aux::replace_unnamed_arg< F, mpl::arg<1> > r0;
        typedef typename r0::type a0;
        typedef typename r0::next n1;
        typedef typename aux::resolve_bind_arg< a0,U1,U2,U3,U4,U5 >::type f_;
        
        typedef aux::replace_unnamed_arg< T1,n1 > r1;
        typedef typename r1::type a1;
        typedef typename r1::next n2;
        typedef aux::resolve_bind_arg< a1,U1,U2,U3,U4,U5 > t1;
        
        typedef aux::replace_unnamed_arg< T2,n2 > r2;
        typedef typename r2::type a2;
        typedef typename r2::next n3;
        typedef aux::resolve_bind_arg< a2,U1,U2,U3,U4,U5 > t2;
        
     public:
        typedef typename apply_wrap2<
              f_
            , typename t1::type, typename t2::type
            >::type type;

    };
};

namespace aux {

template<
      typename F, typename T1, typename T2, typename U1, typename U2
    , typename U3, typename U4, typename U5
    >
struct resolve_bind_arg<
      bind2< F,T1,T2 >, U1, U2, U3, U4, U5
    >
{
    typedef bind2< F,T1,T2 > f_;
    typedef typename apply_wrap5< f_,U1,U2,U3,U4,U5 >::type type;
};

} 




template<
      typename F, typename T1, typename T2
    >
struct bind< F,T1,T2,na,na,na >
    : bind2< F,T1,T2 >
{
};

template<
      typename F, typename T1, typename T2, typename T3
    >
struct bind3
{
    template<
          typename U1 = na, typename U2 = na, typename U3 = na
        , typename U4 = na, typename U5 = na
        >
    struct apply
    {
     private:
        typedef aux::replace_unnamed_arg< F, mpl::arg<1> > r0;
        typedef typename r0::type a0;
        typedef typename r0::next n1;
        typedef typename aux::resolve_bind_arg< a0,U1,U2,U3,U4,U5 >::type f_;
        
        typedef aux::replace_unnamed_arg< T1,n1 > r1;
        typedef typename r1::type a1;
        typedef typename r1::next n2;
        typedef aux::resolve_bind_arg< a1,U1,U2,U3,U4,U5 > t1;
        
        typedef aux::replace_unnamed_arg< T2,n2 > r2;
        typedef typename r2::type a2;
        typedef typename r2::next n3;
        typedef aux::resolve_bind_arg< a2,U1,U2,U3,U4,U5 > t2;
        
        typedef aux::replace_unnamed_arg< T3,n3 > r3;
        typedef typename r3::type a3;
        typedef typename r3::next n4;
        typedef aux::resolve_bind_arg< a3,U1,U2,U3,U4,U5 > t3;
        
     public:
        typedef typename apply_wrap3<
              f_
            , typename t1::type, typename t2::type, typename t3::type
            >::type type;

    };
};

namespace aux {

template<
      typename F, typename T1, typename T2, typename T3, typename U1
    , typename U2, typename U3, typename U4, typename U5
    >
struct resolve_bind_arg<
      bind3< F,T1,T2,T3 >, U1, U2, U3, U4, U5
    >
{
    typedef bind3< F,T1,T2,T3 > f_;
    typedef typename apply_wrap5< f_,U1,U2,U3,U4,U5 >::type type;
};

} 




template<
      typename F, typename T1, typename T2, typename T3
    >
struct bind< F,T1,T2,T3,na,na >
    : bind3< F,T1,T2,T3 >
{
};

template<
      typename F, typename T1, typename T2, typename T3, typename T4
    >
struct bind4
{
    template<
          typename U1 = na, typename U2 = na, typename U3 = na
        , typename U4 = na, typename U5 = na
        >
    struct apply
    {
     private:
        typedef aux::replace_unnamed_arg< F, mpl::arg<1> > r0;
        typedef typename r0::type a0;
        typedef typename r0::next n1;
        typedef typename aux::resolve_bind_arg< a0,U1,U2,U3,U4,U5 >::type f_;
        
        typedef aux::replace_unnamed_arg< T1,n1 > r1;
        typedef typename r1::type a1;
        typedef typename r1::next n2;
        typedef aux::resolve_bind_arg< a1,U1,U2,U3,U4,U5 > t1;
        
        typedef aux::replace_unnamed_arg< T2,n2 > r2;
        typedef typename r2::type a2;
        typedef typename r2::next n3;
        typedef aux::resolve_bind_arg< a2,U1,U2,U3,U4,U5 > t2;
        
        typedef aux::replace_unnamed_arg< T3,n3 > r3;
        typedef typename r3::type a3;
        typedef typename r3::next n4;
        typedef aux::resolve_bind_arg< a3,U1,U2,U3,U4,U5 > t3;
        
        typedef aux::replace_unnamed_arg< T4,n4 > r4;
        typedef typename r4::type a4;
        typedef typename r4::next n5;
        typedef aux::resolve_bind_arg< a4,U1,U2,U3,U4,U5 > t4;
        
     public:
        typedef typename apply_wrap4<
              f_
            , typename t1::type, typename t2::type, typename t3::type
            , typename t4::type
            >::type type;

    };
};

namespace aux {

template<
      typename F, typename T1, typename T2, typename T3, typename T4
    , typename U1, typename U2, typename U3, typename U4, typename U5
    >
struct resolve_bind_arg<
      bind4< F,T1,T2,T3,T4 >, U1, U2, U3, U4, U5
    >
{
    typedef bind4< F,T1,T2,T3,T4 > f_;
    typedef typename apply_wrap5< f_,U1,U2,U3,U4,U5 >::type type;
};

} 




template<
      typename F, typename T1, typename T2, typename T3, typename T4
    >
struct bind< F,T1,T2,T3,T4,na >
    : bind4< F,T1,T2,T3,T4 >
{
};

template<
      typename F, typename T1, typename T2, typename T3, typename T4
    , typename T5
    >
struct bind5
{
    template<
          typename U1 = na, typename U2 = na, typename U3 = na
        , typename U4 = na, typename U5 = na
        >
    struct apply
    {
     private:
        typedef aux::replace_unnamed_arg< F, mpl::arg<1> > r0;
        typedef typename r0::type a0;
        typedef typename r0::next n1;
        typedef typename aux::resolve_bind_arg< a0,U1,U2,U3,U4,U5 >::type f_;
        
        typedef aux::replace_unnamed_arg< T1,n1 > r1;
        typedef typename r1::type a1;
        typedef typename r1::next n2;
        typedef aux::resolve_bind_arg< a1,U1,U2,U3,U4,U5 > t1;
        
        typedef aux::replace_unnamed_arg< T2,n2 > r2;
        typedef typename r2::type a2;
        typedef typename r2::next n3;
        typedef aux::resolve_bind_arg< a2,U1,U2,U3,U4,U5 > t2;
        
        typedef aux::replace_unnamed_arg< T3,n3 > r3;
        typedef typename r3::type a3;
        typedef typename r3::next n4;
        typedef aux::resolve_bind_arg< a3,U1,U2,U3,U4,U5 > t3;
        
        typedef aux::replace_unnamed_arg< T4,n4 > r4;
        typedef typename r4::type a4;
        typedef typename r4::next n5;
        typedef aux::resolve_bind_arg< a4,U1,U2,U3,U4,U5 > t4;
        
        typedef aux::replace_unnamed_arg< T5,n5 > r5;
        typedef typename r5::type a5;
        typedef typename r5::next n6;
        typedef aux::resolve_bind_arg< a5,U1,U2,U3,U4,U5 > t5;
        
     public:
        typedef typename apply_wrap5<
              f_
            , typename t1::type, typename t2::type, typename t3::type
            , typename t4::type, typename t5::type
            >::type type;

    };
};

namespace aux {

template<
      typename F, typename T1, typename T2, typename T3, typename T4
    , typename T5, typename U1, typename U2, typename U3, typename U4
    , typename U5
    >
struct resolve_bind_arg<
      bind5< F,T1,T2,T3,T4,T5 >, U1, U2, U3, U4, U5
    >
{
    typedef bind5< F,T1,T2,T3,T4,T5 > f_;
    typedef typename apply_wrap5< f_,U1,U2,U3,U4,U5 >::type type;
};

} 






template<
      typename F, typename T1, typename T2, typename T3, typename T4
    , typename T5
    >
struct bind
    : bind5< F,T1,T2,T3,T4,T5 >
{
};


template< template< typename T1, typename T2, typename T3 > class F, typename Tag >
struct quote3;

template< typename T1, typename T2, typename T3 > struct if_;

template<
      typename Tag, typename T1, typename T2, typename T3
    >
struct bind3<
      quote3< if_,Tag >
    , T1, T2, T3
    >
{
    template<
          typename U1 = na, typename U2 = na, typename U3 = na
        , typename U4 = na, typename U5 = na
        >
    struct apply
    {
     private:
        typedef mpl::arg<1> n1;
        typedef aux::replace_unnamed_arg< T1,n1 > r1;
        typedef typename r1::type a1;
        typedef typename r1::next n2;
        typedef aux::resolve_bind_arg< a1,U1,U2,U3,U4,U5 > t1;
        
        typedef aux::replace_unnamed_arg< T2,n2 > r2;
        typedef typename r2::type a2;
        typedef typename r2::next n3;
        typedef aux::resolve_bind_arg< a2,U1,U2,U3,U4,U5 > t2;
        
        typedef aux::replace_unnamed_arg< T3,n3 > r3;
        typedef typename r3::type a3;
        typedef typename r3::next n4;
        typedef aux::resolve_bind_arg< a3,U1,U2,U3,U4,U5 > t3;
        
        typedef typename if_<
              typename t1::type
            , t2, t3
            >::type f_;

     public:
        typedef typename f_::type type;
    };
};

template<
      template< typename T1, typename T2, typename T3 > class F, typename Tag
    >
struct quote3;

template< typename T1, typename T2, typename T3 > struct eval_if;

template<
      typename Tag, typename T1, typename T2, typename T3
    >
struct bind3<
      quote3< eval_if,Tag >
    , T1, T2, T3
    >
{
    template<
          typename U1 = na, typename U2 = na, typename U3 = na
        , typename U4 = na, typename U5 = na
        >
    struct apply
    {
     private:
        typedef mpl::arg<1> n1;
        typedef aux::replace_unnamed_arg< T1,n1 > r1;
        typedef typename r1::type a1;
        typedef typename r1::next n2;
        typedef aux::resolve_bind_arg< a1,U1,U2,U3,U4,U5 > t1;
        
        typedef aux::replace_unnamed_arg< T2,n2 > r2;
        typedef typename r2::type a2;
        typedef typename r2::next n3;
        typedef aux::resolve_bind_arg< a2,U1,U2,U3,U4,U5 > t2;
        
        typedef aux::replace_unnamed_arg< T3,n3 > r3;
        typedef typename r3::type a3;
        typedef typename r3::next n4;
        typedef aux::resolve_bind_arg< a3,U1,U2,U3,U4,U5 > t3;
        
        typedef typename eval_if<
              typename t1::type
            , t2, t3
            >::type f_;

     public:
        typedef typename f_::type type;
    };
};

}}

#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"
#line 39 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"




#line 51 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/bind.hpp"




















































































































































































































































































































#line 360 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/bind.hpp"
#line 361 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/bind.hpp"






























































































































































































#line 552 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/bind.hpp"
#line 19 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/lambda.hpp"



#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/full_lambda.hpp"






















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/bind_fwd.hpp"


































































































#line 100 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/bind_fwd.hpp"
#line 24 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/full_lambda.hpp"

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/quote.hpp"






















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/has_type.hpp"


















namespace boost { namespace mpl { namespace aux {
template< typename T > struct has_type_msvc_sfinae_helper { typedef void type; };template< typename T, typename U = void > struct has_type_impl_ { static const bool value = false; typedef boost::mpl::bool_<value> type; }; template< typename T > struct has_type_impl_< T , typename has_type_msvc_sfinae_helper< typename T::type >::type > { static const bool value = true; typedef boost::mpl::bool_<value> type; }; template< typename T, typename fallback_ = boost::mpl::bool_<true> > struct has_type : has_type_impl_<T> { };
}}}

#line 24 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/has_type.hpp"
#line 24 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/quote.hpp"
#line 25 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/quote.hpp"

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/bcc.hpp"






















#line 27 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/bcc.hpp"

#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/config/bcc.hpp"
#line 27 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/quote.hpp"




#line 33 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/quote.hpp"



#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/quote.hpp"






#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"





























#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"





#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/preprocessed/plain/quote.hpp"











namespace boost { namespace mpl {

template< typename T, bool has_type_ >
struct quote_impl
    : T
{
};

template< typename T >
struct quote_impl< T,false >
{
    typedef T type;
};

template<
      template< typename P1 > class F
    , typename Tag = void_
    >
struct quote1
{
    template< typename U1 > struct apply

        : quote_impl<
              F<U1>
            , aux::has_type< F<U1> >::value
            >

    {
    };
};

template<
      template< typename P1, typename P2 > class F
    , typename Tag = void_
    >
struct quote2
{
    template< typename U1, typename U2 > struct apply

        : quote_impl<
              F< U1,U2 >
            , aux::has_type< F< U1,U2 > >::value
            >

    {
    };
};

template<
      template< typename P1, typename P2, typename P3 > class F
    , typename Tag = void_
    >
struct quote3
{
    template< typename U1, typename U2, typename U3 > struct apply

        : quote_impl<
              F< U1,U2,U3 >
            , aux::has_type< F< U1,U2,U3 > >::value
            >

    {
    };
};

template<
      template< typename P1, typename P2, typename P3, typename P4 > class F
    , typename Tag = void_
    >
struct quote4
{
    template<
          typename U1, typename U2, typename U3, typename U4
        >
    struct apply

        : quote_impl<
              F< U1,U2,U3,U4 >
            , aux::has_type< F< U1,U2,U3,U4 > >::value
            >

    {
    };
};

template<
      template<
          typename P1, typename P2, typename P3, typename P4
        , typename P5
        >
      class F
    , typename Tag = void_
    >
struct quote5
{
    template<
          typename U1, typename U2, typename U3, typename U4
        , typename U5
        >
    struct apply

        : quote_impl<
              F< U1,U2,U3,U4,U5 >
            , aux::has_type< F< U1,U2,U3,U4,U5 > >::value
            >

    {
    };
};

}}

#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"
#line 39 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"




#line 46 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/quote.hpp"



































































#line 114 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/quote.hpp"
#line 115 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/quote.hpp"




































#line 152 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/quote.hpp"
#line 26 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/full_lambda.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/arg.hpp"


































































































































#line 132 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/arg.hpp"
#line 27 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/full_lambda.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/template_arity.hpp"





























#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/template_arity.hpp"


#line 34 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/template_arity.hpp"
#line 35 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/template_arity.hpp"







#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"





























#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"





#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/preprocessed/plain/template_arity.hpp"











#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"
#line 39 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"




#line 44 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/template_arity.hpp"

































































































































#line 174 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/template_arity.hpp"
#line 175 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/template_arity.hpp"














#line 190 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/template_arity.hpp"
#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/full_lambda.hpp"




#line 35 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/full_lambda.hpp"
#line 36 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/full_lambda.hpp"







#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"





























#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"





#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/preprocessed/plain/full_lambda.hpp"











namespace boost { namespace mpl {

namespace aux {

template<
      bool C1 = false, bool C2 = false, bool C3 = false, bool C4 = false
    , bool C5 = false
    >
struct lambda_or
    : true_
{
};

template<>
struct lambda_or< false,false,false,false,false >
    : false_
{
};

} 

template<
      typename T
    , typename Tag
   
    >
struct lambda
{
    typedef false_ is_le;
    typedef T result_;
    typedef T type;
};

template<
      typename T
    >
struct is_lambda_expression
    : lambda<T>::is_le
{
};

template< int N, typename Tag >
struct lambda< arg<N>, Tag >
{
    typedef true_ is_le;
    typedef mpl::arg<N> result_; 
    typedef mpl::protect<result_> type;
};

template<
      typename F
    , typename Tag
    >
struct lambda<
          bind0<F>
        , Tag
       
        >
{
    typedef false_ is_le;
    typedef bind0<
          F
        > result_;

    typedef result_ type;
};

namespace aux {

template<
      typename IsLE, typename Tag
    , template< typename P1 > class F
    , typename L1
    >
struct le_result1
{
    typedef F<
          typename L1::type
        > result_;

    typedef result_ type;
};

template<
      typename Tag
    , template< typename P1 > class F
    , typename L1
    >
struct le_result1< true_,Tag,F,L1 >
{
    typedef bind1<
          quote1< F,Tag >
        , typename L1::result_
        > result_;

    typedef mpl::protect<result_> type;
};

} 

template<
      template< typename P1 > class F
    , typename T1
    , typename Tag
    >
struct lambda<
          F<T1>
        , Tag
       
        >
{
    typedef lambda< T1,Tag > l1;
    typedef typename l1::is_le is_le1;
    typedef typename aux::lambda_or<
          is_le1::value
        >::type is_le;

    typedef aux::le_result1<
          is_le, Tag, F, l1
        > le_result_;

    typedef typename le_result_::result_ result_;
    typedef typename le_result_::type type;
};

template<
      typename F, typename T1
    , typename Tag
    >
struct lambda<
          bind1< F,T1 >
        , Tag
       
        >
{
    typedef false_ is_le;
    typedef bind1<
          F
        , T1
        > result_;

    typedef result_ type;
};

namespace aux {

template<
      typename IsLE, typename Tag
    , template< typename P1, typename P2 > class F
    , typename L1, typename L2
    >
struct le_result2
{
    typedef F<
          typename L1::type, typename L2::type
        > result_;

    typedef result_ type;
};

template<
      typename Tag
    , template< typename P1, typename P2 > class F
    , typename L1, typename L2
    >
struct le_result2< true_,Tag,F,L1,L2 >
{
    typedef bind2<
          quote2< F,Tag >
        , typename L1::result_, typename L2::result_
        > result_;

    typedef mpl::protect<result_> type;
};

} 

template<
      template< typename P1, typename P2 > class F
    , typename T1, typename T2
    , typename Tag
    >
struct lambda<
          F< T1,T2 >
        , Tag
       
        >
{
    typedef lambda< T1,Tag > l1;
    typedef lambda< T2,Tag > l2;
    
    typedef typename l1::is_le is_le1;
    typedef typename l2::is_le is_le2;
    

    typedef typename aux::lambda_or<
          is_le1::value, is_le2::value
        >::type is_le;

    typedef aux::le_result2<
          is_le, Tag, F, l1, l2
        > le_result_;

    typedef typename le_result_::result_ result_;
    typedef typename le_result_::type type;
};

template<
      typename F, typename T1, typename T2
    , typename Tag
    >
struct lambda<
          bind2< F,T1,T2 >
        , Tag
       
        >
{
    typedef false_ is_le;
    typedef bind2<
          F
        , T1, T2
        > result_;

    typedef result_ type;
};

namespace aux {

template<
      typename IsLE, typename Tag
    , template< typename P1, typename P2, typename P3 > class F
    , typename L1, typename L2, typename L3
    >
struct le_result3
{
    typedef F<
          typename L1::type, typename L2::type, typename L3::type
        > result_;

    typedef result_ type;
};

template<
      typename Tag
    , template< typename P1, typename P2, typename P3 > class F
    , typename L1, typename L2, typename L3
    >
struct le_result3< true_,Tag,F,L1,L2,L3 >
{
    typedef bind3<
          quote3< F,Tag >
        , typename L1::result_, typename L2::result_, typename L3::result_
        > result_;

    typedef mpl::protect<result_> type;
};

} 

template<
      template< typename P1, typename P2, typename P3 > class F
    , typename T1, typename T2, typename T3
    , typename Tag
    >
struct lambda<
          F< T1,T2,T3 >
        , Tag
       
        >
{
    typedef lambda< T1,Tag > l1;
    typedef lambda< T2,Tag > l2;
    typedef lambda< T3,Tag > l3;
    
    typedef typename l1::is_le is_le1;
    typedef typename l2::is_le is_le2;
    typedef typename l3::is_le is_le3;
    

    typedef typename aux::lambda_or<
          is_le1::value, is_le2::value, is_le3::value
        >::type is_le;

    typedef aux::le_result3<
          is_le, Tag, F, l1, l2, l3
        > le_result_;

    typedef typename le_result_::result_ result_;
    typedef typename le_result_::type type;
};

template<
      typename F, typename T1, typename T2, typename T3
    , typename Tag
    >
struct lambda<
          bind3< F,T1,T2,T3 >
        , Tag
       
        >
{
    typedef false_ is_le;
    typedef bind3<
          F
        , T1, T2, T3
        > result_;

    typedef result_ type;
};

namespace aux {

template<
      typename IsLE, typename Tag
    , template< typename P1, typename P2, typename P3, typename P4 > class F
    , typename L1, typename L2, typename L3, typename L4
    >
struct le_result4
{
    typedef F<
          typename L1::type, typename L2::type, typename L3::type
        , typename L4::type
        > result_;

    typedef result_ type;
};

template<
      typename Tag
    , template< typename P1, typename P2, typename P3, typename P4 > class F
    , typename L1, typename L2, typename L3, typename L4
    >
struct le_result4< true_,Tag,F,L1,L2,L3,L4 >
{
    typedef bind4<
          quote4< F,Tag >
        , typename L1::result_, typename L2::result_, typename L3::result_
        , typename L4::result_
        > result_;

    typedef mpl::protect<result_> type;
};

} 

template<
      template< typename P1, typename P2, typename P3, typename P4 > class F
    , typename T1, typename T2, typename T3, typename T4
    , typename Tag
    >
struct lambda<
          F< T1,T2,T3,T4 >
        , Tag
       
        >
{
    typedef lambda< T1,Tag > l1;
    typedef lambda< T2,Tag > l2;
    typedef lambda< T3,Tag > l3;
    typedef lambda< T4,Tag > l4;
    
    typedef typename l1::is_le is_le1;
    typedef typename l2::is_le is_le2;
    typedef typename l3::is_le is_le3;
    typedef typename l4::is_le is_le4;
    

    typedef typename aux::lambda_or<
          is_le1::value, is_le2::value, is_le3::value, is_le4::value
        >::type is_le;

    typedef aux::le_result4<
          is_le, Tag, F, l1, l2, l3, l4
        > le_result_;

    typedef typename le_result_::result_ result_;
    typedef typename le_result_::type type;
};

template<
      typename F, typename T1, typename T2, typename T3, typename T4
    , typename Tag
    >
struct lambda<
          bind4< F,T1,T2,T3,T4 >
        , Tag
       
        >
{
    typedef false_ is_le;
    typedef bind4<
          F
        , T1, T2, T3, T4
        > result_;

    typedef result_ type;
};

namespace aux {

template<
      typename IsLE, typename Tag
    , template< typename P1, typename P2, typename P3, typename P4, typename P5 > class F
    , typename L1, typename L2, typename L3, typename L4, typename L5
    >
struct le_result5
{
    typedef F<
          typename L1::type, typename L2::type, typename L3::type
        , typename L4::type, typename L5::type
        > result_;

    typedef result_ type;
};

template<
      typename Tag
    , template< typename P1, typename P2, typename P3, typename P4, typename P5 > class F
    , typename L1, typename L2, typename L3, typename L4, typename L5
    >
struct le_result5< true_,Tag,F,L1,L2,L3,L4,L5 >
{
    typedef bind5<
          quote5< F,Tag >
        , typename L1::result_, typename L2::result_, typename L3::result_
        , typename L4::result_, typename L5::result_
        > result_;

    typedef mpl::protect<result_> type;
};

} 

template<
      template<
          typename P1, typename P2, typename P3, typename P4
        , typename P5
        >
      class F
    , typename T1, typename T2, typename T3, typename T4, typename T5
    , typename Tag
    >
struct lambda<
          F< T1,T2,T3,T4,T5 >
        , Tag
       
        >
{
    typedef lambda< T1,Tag > l1;
    typedef lambda< T2,Tag > l2;
    typedef lambda< T3,Tag > l3;
    typedef lambda< T4,Tag > l4;
    typedef lambda< T5,Tag > l5;
    
    typedef typename l1::is_le is_le1;
    typedef typename l2::is_le is_le2;
    typedef typename l3::is_le is_le3;
    typedef typename l4::is_le is_le4;
    typedef typename l5::is_le is_le5;
    

    typedef typename aux::lambda_or<
          is_le1::value, is_le2::value, is_le3::value, is_le4::value
        , is_le5::value
        >::type is_le;

    typedef aux::le_result5<
          is_le, Tag, F, l1, l2, l3, l4, l5
        > le_result_;

    typedef typename le_result_::result_ result_;
    typedef typename le_result_::type type;
};

template<
      typename F, typename T1, typename T2, typename T3, typename T4
    , typename T5
    , typename Tag
    >
struct lambda<
          bind5< F,T1,T2,T3,T4,T5 >
        , Tag
       
        >
{
    typedef false_ is_le;
    typedef bind5<
          F
        , T1, T2, T3, T4, T5
        > result_;

    typedef result_ type;
};


template< typename T, typename Tag >
struct lambda< mpl::protect<T>, Tag >
{
    typedef false_ is_le;
    typedef mpl::protect<T> result_;
    typedef result_ type;
};



template<
      typename F, typename T1, typename T2, typename T3, typename T4
    , typename T5
    , typename Tag
    >
struct lambda<
          bind< F,T1,T2,T3,T4,T5 >
        , Tag
       
        >
{
    typedef false_ is_le;
    typedef bind< F,T1,T2,T3,T4,T5 > result_;
    typedef result_ type;
};



template<
      typename F, typename Tag1, typename Tag2
    >
struct lambda<
          lambda< F,Tag1 >
        , Tag2
        >
{
    typedef lambda< F,Tag2 > l1;
    typedef lambda< Tag1,Tag2 > l2;
    typedef typename l1::is_le is_le;
    typedef aux::le_result2<is_le, Tag2, mpl::lambda, l1, l2> le_result_;
    typedef typename le_result_::result_ result_;
    typedef typename le_result_::type type;
};

template<> struct lambda<  na , na > { template<  typename T1 , typename T2 , typename T3 =na  , typename T4 =na  , typename T5 =na  > struct apply : lambda<  T1 , T2 > { }; }; template< typename Tag > struct lambda< lambda<  na , na > , Tag  > { typedef false_ is_le; typedef lambda<  na , na > result_; typedef lambda<  na , na > type; };   

}}

#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"
#line 39 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"




#line 45 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/full_lambda.hpp"




















































































































































































#line 226 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/full_lambda.hpp"
#line 227 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/full_lambda.hpp"































































































































#line 355 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/full_lambda.hpp"
#line 23 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/lambda.hpp"




#line 28 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/lambda.hpp"

#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/lambda.hpp"
#line 26 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/apply.hpp"


#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/apply.hpp"






#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"





























#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"





#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/preprocessed/plain/apply.hpp"











namespace boost { namespace mpl {

template<
      typename F
    >
struct apply0

    : apply_wrap0<
          typename lambda<F>::type
       
        >
{
};

template<
      typename F
    >
struct apply< F,na,na,na,na,na >
    : apply0<F>
{
};

template<
      typename F, typename T1
    >
struct apply1

    : apply_wrap1<
          typename lambda<F>::type
        , T1
        >
{
};

template<
      typename F, typename T1
    >
struct apply< F,T1,na,na,na,na >
    : apply1< F,T1 >
{
};

template<
      typename F, typename T1, typename T2
    >
struct apply2

    : apply_wrap2<
          typename lambda<F>::type
        , T1, T2
        >
{
};

template<
      typename F, typename T1, typename T2
    >
struct apply< F,T1,T2,na,na,na >
    : apply2< F,T1,T2 >
{
};

template<
      typename F, typename T1, typename T2, typename T3
    >
struct apply3

    : apply_wrap3<
          typename lambda<F>::type
        , T1, T2, T3
        >
{
};

template<
      typename F, typename T1, typename T2, typename T3
    >
struct apply< F,T1,T2,T3,na,na >
    : apply3< F,T1,T2,T3 >
{
};

template<
      typename F, typename T1, typename T2, typename T3, typename T4
    >
struct apply4

    : apply_wrap4<
          typename lambda<F>::type
        , T1, T2, T3, T4
        >
{
};

template<
      typename F, typename T1, typename T2, typename T3, typename T4
    >
struct apply< F,T1,T2,T3,T4,na >
    : apply4< F,T1,T2,T3,T4 >
{
};

template<
      typename F, typename T1, typename T2, typename T3, typename T4
    , typename T5
    >
struct apply5

    : apply_wrap5<
          typename lambda<F>::type
        , T1, T2, T3, T4, T5
        >
{
};



template<
      typename F, typename T1, typename T2, typename T3, typename T4
    , typename T5
    >
struct apply
    : apply5< F,T1,T2,T3,T4,T5 >
{
};

}}

#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"
#line 39 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/include_preprocessed.hpp"




#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/apply.hpp"
































































































#line 134 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/apply.hpp"
#line 135 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/apply.hpp"






























































































#line 230 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/apply.hpp"
#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/for_each.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/deref.hpp"
















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/msvc_type.hpp"



















namespace boost { namespace mpl { namespace aux {

























#line 47 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/msvc_type.hpp"

template< typename T > struct msvc_type 
{
    typedef typename T::type type;
};

template<> struct msvc_type<int>
{
    typedef int type;
};

#line 59 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/msvc_type.hpp"

}}}

#line 63 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/msvc_type.hpp"
#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/deref.hpp"




namespace boost { namespace mpl {

template<
      typename Iterator = na
    >
struct deref
{

    typedef typename Iterator::type type;


#line 34 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/deref.hpp"
    
};

template<> struct deref<  na > { template<  typename T1 , typename T2 =na  , typename T3 =na  , typename T4 =na  , typename T5 =na  > struct apply : deref<  T1 > { }; }; template< typename Tag > struct lambda< deref<  na > , Tag  > { typedef false_ is_le; typedef deref<  na > result_; typedef deref<  na > type; };   

}}

#line 42 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/deref.hpp"
#line 23 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/for_each.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/unwrap.hpp"

















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/ref.hpp"






#pragma once
#line 9 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/ref.hpp"




















namespace boost
{

template<class T> class reference_wrapper
{ 
public:
    typedef T type;





#line 42 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/ref.hpp"

    explicit reference_wrapper(T& t): t_(boost::addressof(t)) {}

#line 46 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/ref.hpp"

    operator T& () const { return *t_; }

    T& get() const { return *t_; }

    T* get_pointer() const { return t_; }

private:

    T* t_;
};



#line 61 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/ref.hpp"

#line 63 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/ref.hpp"

template<class T> inline reference_wrapper<T> const ref(T & t)
{ 
    return reference_wrapper<T>(t);
}

template<class T> inline reference_wrapper<T const> const cref(T const & t)
{
    return reference_wrapper<T const>(t);
}





template<typename T>
class is_reference_wrapper
    : public mpl::false_
{
};

template<typename T>
class unwrap_reference
{
 public:
    typedef T type;
};
















template<typename T> class is_reference_wrapper< reference_wrapper<T> > : public mpl::true_ { }; template<typename T> class unwrap_reference< reference_wrapper<T> > { public: typedef T type; };

template<typename T> class is_reference_wrapper< reference_wrapper<T> const > : public mpl::true_ { }; template<typename T> class unwrap_reference< reference_wrapper<T> const > { public: typedef T type; };
template<typename T> class is_reference_wrapper< reference_wrapper<T> volatile > : public mpl::true_ { }; template<typename T> class unwrap_reference< reference_wrapper<T> volatile > { public: typedef T type; };
template<typename T> class is_reference_wrapper< reference_wrapper<T> const volatile > : public mpl::true_ { }; template<typename T> class unwrap_reference< reference_wrapper<T> const volatile > { public: typedef T type; };
#line 112 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/ref.hpp"






























































#line 175 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/ref.hpp"

template <class T> inline typename unwrap_reference<T>::type&
unwrap_ref(T& t)
{
    return t;
}

template<class T> inline T* get_pointer( reference_wrapper<T> const & r )
{
    return r.get_pointer();
}

} 

#line 190 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/ref.hpp"
#line 19 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/unwrap.hpp"

namespace boost { namespace mpl { namespace aux {

template< typename F >
inline
F& unwrap(F& f, long)
{
    return f;
}

template< typename F >
inline
F&
unwrap(reference_wrapper<F>& f, int)
{
    return f;
}

template< typename F >
inline
F&
unwrap(reference_wrapper<F> const& f, int)
{
    return f;
}

}}}

#line 48 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/unwrap.hpp"
#line 26 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/for_each.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/value_init.hpp"























#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/aligned_storage.hpp"



















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/alignment_of.hpp"
















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/size_t_trait_def.hpp"













#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"



























#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/size_t_trait_def.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/size_t.hpp"
















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/size_t_fwd.hpp"




















namespace boost { namespace mpl {

template< std::size_t N > struct size_t;

}}


#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/size_t_fwd.hpp"
#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/size_t.hpp"





#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/integral_wrapper.hpp"

























#line 27 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/integral_wrapper.hpp"



#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/integral_wrapper.hpp"




#line 36 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/integral_wrapper.hpp"

#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/integral_wrapper.hpp"
#line 39 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/integral_wrapper.hpp"

namespace boost { namespace mpl {

template< std::size_t N >
struct size_t
{
    static const std::size_t value = N;




#line 51 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/integral_wrapper.hpp"
    typedef size_t type;
#line 53 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/integral_wrapper.hpp"
    typedef std::size_t value_type;
    typedef integral_c_tag tag;











#line 67 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/integral_wrapper.hpp"


#line 72 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/integral_wrapper.hpp"
    typedef boost::mpl::size_t< static_cast<std::size_t>((value + 1)) > next;
    typedef boost::mpl::size_t< static_cast<std::size_t>((value - 1)) > prior;
#line 75 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/integral_wrapper.hpp"

    
    
    
    
    operator std::size_t() const { return static_cast<std::size_t>(this->value); } 
};


template< std::size_t N >
std::size_t const boost::mpl::size_t< N >::value;
#line 87 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/aux_/integral_wrapper.hpp"

}}





#line 24 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/size_t.hpp"

#line 26 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/size_t.hpp"
#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/size_t_trait_def.hpp"












#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/size_t_trait_def.hpp"






























#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/alignment_of.hpp"


#pragma warning(push)
#pragma warning(disable: 4121 4512) 
#line 23 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/alignment_of.hpp"


#line 26 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/alignment_of.hpp"

namespace boost {

template <typename T> struct alignment_of;


namespace detail {


#pragma warning(push)
#pragma warning(disable:4324) 
#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/alignment_of.hpp"
template <typename T>
struct alignment_of_hack
{
    char c;
    T t;
    alignment_of_hack();
};

#pragma warning(pop)
#line 48 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/alignment_of.hpp"

template <unsigned A, unsigned S>
struct alignment_logic
{
    static const std::size_t value = A < S ? A : S;
};


template< typename T >
struct alignment_of_impl
{

    
    
    
    
    
    static const std::size_t value = (::boost::detail::alignment_logic< sizeof(::boost::detail::alignment_of_hack<T>) - sizeof(T), __alignof(T) >::value);
#line 70 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/alignment_of.hpp"














#line 85 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/alignment_of.hpp"
};

} 

template< typename T > struct alignment_of : public ::boost::integral_constant<std::size_t,::boost::detail::alignment_of_impl<T>::value> { public:   }; 




template <typename T>
struct alignment_of<T&>
    : public alignment_of<T*>
{
};
#line 100 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/alignment_of.hpp"









template<> struct alignment_of<void> : public ::boost::integral_constant<std::size_t,0> { public:   };

template<> struct alignment_of<void const> : public ::boost::integral_constant<std::size_t,0> { public:   };
template<> struct alignment_of<void volatile> : public ::boost::integral_constant<std::size_t,0> { public:   };
template<> struct alignment_of<void const volatile> : public ::boost::integral_constant<std::size_t,0> { public:   };
#line 115 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/alignment_of.hpp"

} 



#line 121 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/alignment_of.hpp"

#pragma warning(pop)
#line 124 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/alignment_of.hpp"

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/size_t_trait_undef.hpp"
















#line 126 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/alignment_of.hpp"

#line 128 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/alignment_of.hpp"

#line 21 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/aligned_storage.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/type_with_alignment.hpp"











#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/for_each_i.hpp"



























#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/for_each_i.hpp"


#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/for_each_i.hpp"




#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/for_each_i.hpp"

#line 39 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/for_each_i.hpp"






#line 46 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/for_each_i.hpp"






#line 53 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/for_each_i.hpp"










#line 64 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/for_each_i.hpp"

#line 66 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/for_each_i.hpp"
#line 13 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/type_with_alignment.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/tuple/to_list.hpp"































#line 33 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/tuple/to_list.hpp"
















#line 50 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/tuple/to_list.hpp"


































































#line 117 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/tuple/to_list.hpp"

#line 14 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/type_with_alignment.hpp"

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/transform.hpp"




























#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/transform.hpp"






#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/transform.hpp"










#line 48 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/transform.hpp"

#line 50 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/transform.hpp"
#line 16 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/type_with_alignment.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/append.hpp"


























#line 28 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/append.hpp"










#line 39 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/append.hpp"

#line 41 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/append.hpp"
#line 17 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/type_with_alignment.hpp"

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_pod.hpp"












#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_void.hpp"














#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"













#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"



























#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"


































#line 50 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"






#line 57 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



#line 61 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



#line 65 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



































































































































#line 197 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"
#line 16 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_void.hpp"

namespace boost {




#line 23 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_void.hpp"
template< typename T > struct is_void : public ::boost::integral_constant<bool,false> { public:   }; 
template<> struct is_void< void > : public ::boost::integral_constant<bool,true> { public:   };


template<> struct is_void< void const > : public ::boost::integral_constant<bool,true> { public:   };
template<> struct is_void< void volatile > : public ::boost::integral_constant<bool,true> { public:   };
template<> struct is_void< void const volatile > : public ::boost::integral_constant<bool,true> { public:   };
#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_void.hpp"

#line 33 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_void.hpp"

} 

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_undef.hpp"




























#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_void.hpp"

#line 39 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_void.hpp"
#line 14 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_pod.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_scalar.hpp"



















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"













#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"



























#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"


































#line 50 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"






#line 57 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



#line 61 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



#line 65 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



































































































































#line 197 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"
#line 21 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_scalar.hpp"

namespace boost {

namespace detail {

template <typename T>
struct is_scalar_impl
{ 
   static const bool value = (::boost::type_traits::ice_or< ::boost::is_arithmetic<T>::value, ::boost::is_enum<T>::value, ::boost::is_pointer<T>::value, ::boost::is_member_pointer<T>::value >::value);
#line 36 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_scalar.hpp"
};



template <> struct is_scalar_impl<void>{ static const bool value = false; };

template <> struct is_scalar_impl<void const>{ static const bool value = false; };
template <> struct is_scalar_impl<void volatile>{ static const bool value = false; };
template <> struct is_scalar_impl<void const volatile>{ static const bool value = false; };
#line 46 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_scalar.hpp"

} 

template< typename T > struct is_scalar : public ::boost::integral_constant<bool,::boost::detail::is_scalar_impl<T>::value> { public:   }; 

} 

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_undef.hpp"




























#line 54 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_scalar.hpp"

#line 56 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_scalar.hpp"
#line 15 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_pod.hpp"






#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"













#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"



























#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"


































#line 50 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"






#line 57 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



#line 61 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



#line 65 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



































































































































#line 197 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"
#line 22 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_pod.hpp"





#line 28 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_pod.hpp"

namespace boost {


template< typename T > struct is_POD;

namespace detail {



template <typename T> struct is_pod_impl
{ 
    static const bool value = (::boost::type_traits::ice_or< ::boost::is_scalar<T>::value, ::boost::is_void<T>::value, (__is_pod(T) && __has_trivial_constructor(T)) >::value);
#line 47 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_pod.hpp"
};


template <typename T, std::size_t sz>
struct is_pod_impl<T[sz]>
    : public is_pod_impl<T>
{
};
#line 56 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_pod.hpp"

































































#line 122 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_pod.hpp"


template<> struct is_pod_impl< void > { public: static const bool value = (true); };


template<> struct is_pod_impl< void const > { public: static const bool value = (true); };
template<> struct is_pod_impl< void volatile > { public: static const bool value = (true); };
template<> struct is_pod_impl< void const volatile > { public: static const bool value = (true); };
#line 131 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_pod.hpp"

} 

template< typename T > struct is_pod : public ::boost::integral_constant<bool,::boost::detail::is_pod_impl<T>::value> { public:   }; 


template< typename T > struct is_POD : public ::boost::integral_constant<bool,::boost::is_pod<T>::value> { public:   }; 

} 

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_undef.hpp"




























#line 142 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_pod.hpp"



#line 146 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_pod.hpp"
#line 19 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/type_with_alignment.hpp"




#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"













#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"



























#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"


































#line 50 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"






#line 57 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



#line 61 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



#line 65 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



































































































































#line 197 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"
#line 24 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/type_with_alignment.hpp"




#pragma warning(push)
#pragma warning(disable: 4121) 
#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/type_with_alignment.hpp"

namespace boost {



namespace detail {

class alignment_dummy;
typedef void (*function_ptr)();
typedef int (alignment_dummy::*member_ptr);
typedef int (alignment_dummy::*member_function_ptr)();











#line 54 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/type_with_alignment.hpp"















































template <bool found, std::size_t target, class TestType>
struct lower_alignment_helper
{
    typedef char type;
    enum { value = true };
};

template <std::size_t target, class TestType>
struct lower_alignment_helper<false,target,TestType>
{
    enum { value = (alignment_of<TestType>::value == target) };
    typedef typename mpl::if_c<value, TestType, char>::type type;
};
#line 115 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/type_with_alignment.hpp"












template <typename T>
struct has_one_T
{
  T data;
};

template <std::size_t target>
union lower_alignment
{
    enum { found0 = false };

    typename lower_alignment_helper< found0,target,char >::type t0; enum { found1 = lower_alignment_helper<found0,target,char >::value }; typename lower_alignment_helper< found1,target,short >::type t1; enum { found2 = lower_alignment_helper<found1,target,short >::value }; typename lower_alignment_helper< found2,target,int >::type t2; enum { found3 = lower_alignment_helper<found2,target,int >::value }; typename lower_alignment_helper< found3,target,long >::type t3; enum { found4 = lower_alignment_helper<found3,target,long >::value }; typename lower_alignment_helper< found4,target,::boost::long_long_type >::type t4; enum { found5 = lower_alignment_helper<found4,target,::boost::long_long_type >::value }; typename lower_alignment_helper< found5,target,float >::type t5; enum { found6 = lower_alignment_helper<found5,target,float >::value }; typename lower_alignment_helper< found6,target,double >::type t6; enum { found7 = lower_alignment_helper<found6,target,double >::value }; typename lower_alignment_helper< found7,target,long double >::type t7; enum { found8 = lower_alignment_helper<found7,target,long double >::value }; typename lower_alignment_helper< found8,target,void* >::type t8; enum { found9 = lower_alignment_helper<found8,target,void* >::value }; typename lower_alignment_helper< found9,target,function_ptr >::type t9; enum { found10 = lower_alignment_helper<found9,target,function_ptr >::value }; typename lower_alignment_helper< found10,target,member_ptr >::type t10; enum { found11 = lower_alignment_helper<found10,target,member_ptr >::value }; typename lower_alignment_helper< found11,target,member_function_ptr >::type t11; enum { found12 = lower_alignment_helper<found11,target,member_function_ptr >::value }; typename lower_alignment_helper< found12,target,boost::detail::has_one_T< char > >::type t12; enum { found13 = lower_alignment_helper<found12,target,boost::detail::has_one_T< char > >::value }; typename lower_alignment_helper< found13,target,boost::detail::has_one_T< short > >::type t13; enum { found14 = lower_alignment_helper<found13,target,boost::detail::has_one_T< short > >::value }; typename lower_alignment_helper< found14,target,boost::detail::has_one_T< int > >::type t14; enum { found15 = lower_alignment_helper<found14,target,boost::detail::has_one_T< int > >::value }; typename lower_alignment_helper< found15,target,boost::detail::has_one_T< long > >::type t15; enum { found16 = lower_alignment_helper<found15,target,boost::detail::has_one_T< long > >::value }; typename lower_alignment_helper< found16,target,boost::detail::has_one_T< ::boost::long_long_type > >::type t16; enum { found17 = lower_alignment_helper<found16,target,boost::detail::has_one_T< ::boost::long_long_type > >::value }; typename lower_alignment_helper< found17,target,boost::detail::has_one_T< float > >::type t17; enum { found18 = lower_alignment_helper<found17,target,boost::detail::has_one_T< float > >::value }; typename lower_alignment_helper< found18,target,boost::detail::has_one_T< double > >::type t18; enum { found19 = lower_alignment_helper<found18,target,boost::detail::has_one_T< double > >::value }; typename lower_alignment_helper< found19,target,boost::detail::has_one_T< long double > >::type t19; enum { found20 = lower_alignment_helper<found19,target,boost::detail::has_one_T< long double > >::value }; typename lower_alignment_helper< found20,target,boost::detail::has_one_T< void* > >::type t20; enum { found21 = lower_alignment_helper<found20,target,boost::detail::has_one_T< void* > >::value }; typename lower_alignment_helper< found21,target,boost::detail::has_one_T< function_ptr > >::type t21; enum { found22 = lower_alignment_helper<found21,target,boost::detail::has_one_T< function_ptr > >::value }; typename lower_alignment_helper< found22,target,boost::detail::has_one_T< member_ptr > >::type t22; enum { found23 = lower_alignment_helper<found22,target,boost::detail::has_one_T< member_ptr > >::value }; typename lower_alignment_helper< found23,target,boost::detail::has_one_T< member_function_ptr > >::type t23; enum { found24 = lower_alignment_helper<found23,target,boost::detail::has_one_T< member_function_ptr > >::value };  
#line 143 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/type_with_alignment.hpp"
};

union max_align
{
    char t0; short t1; int t2; long t3; ::boost::long_long_type t4; float t5; double t6; long double t7; void* t8; function_ptr t9; member_ptr t10; member_function_ptr t11; boost::detail::has_one_T< char > t12; boost::detail::has_one_T< short > t13; boost::detail::has_one_T< int > t14; boost::detail::has_one_T< long > t15; boost::detail::has_one_T< ::boost::long_long_type > t16; boost::detail::has_one_T< float > t17; boost::detail::has_one_T< double > t18; boost::detail::has_one_T< long double > t19; boost::detail::has_one_T< void* > t20; boost::detail::has_one_T< function_ptr > t21; boost::detail::has_one_T< member_ptr > t22; boost::detail::has_one_T< member_function_ptr > t23;  
#line 152 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/type_with_alignment.hpp"
};








template<std::size_t TAlign, std::size_t Align>
struct is_aligned
{
    static const bool value = (TAlign >= Align) & (TAlign % Align == 0);
#line 167 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/type_with_alignment.hpp"
};












} 


template<std::size_t Align>
struct is_pod< ::boost::detail::lower_alignment<Align> >
{
        static const std::size_t value = true;
};
#line 189 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/type_with_alignment.hpp"



namespace detail{

template <std::size_t Align>
class type_with_alignment_imp
{
    typedef ::boost::detail::lower_alignment<Align> t1;
    typedef typename mpl::if_c<
          ::boost::detail::is_aligned< ::boost::alignment_of<t1>::value,Align >::value
        , t1
        , ::boost::detail::max_align
        >::type align_t;

    static const std::size_t found = alignment_of<align_t>::value;

    static_assert(found >= Align, "found >= Align");
    static_assert(found % Align == 0, "found % Align == 0");

 public:
    typedef align_t type;
};

}

template <std::size_t Align>
class type_with_alignment 
  : public ::boost::detail::type_with_alignment_imp<Align>
{
};






























#line 251 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/type_with_alignment.hpp"

















namespace align {
struct __declspec(align(8)) a8 { 
   char m[8]; 
   typedef a8 type;
};
struct __declspec(align(16)) a16 { 
   char m[16]; 
   typedef a16 type;
};
struct __declspec(align(32)) a32 { 
   char m[32]; 
   typedef a32 type;
};
struct __declspec(align(64)) a64 
{ 
   char m[64]; 
   typedef a64 type;
};
struct __declspec(align(128)) a128 { 
   char m[128]; 
   typedef a128 type;
};
}

template<> class type_with_alignment<8>  
{ 
   typedef mpl::if_c<
      ::boost::alignment_of<boost::detail::max_align>::value < 8,
      align::a8,
      boost::detail::type_with_alignment_imp<8> >::type t1; 
public: 
   typedef t1::type type;
};
template<> class type_with_alignment<16> 
{ 
   typedef mpl::if_c<
      ::boost::alignment_of<boost::detail::max_align>::value < 16,
      align::a16,
      boost::detail::type_with_alignment_imp<16> >::type t1; 
public: 
   typedef t1::type type;
};
template<> class type_with_alignment<32> 
{ 
   typedef mpl::if_c<
      ::boost::alignment_of<boost::detail::max_align>::value < 32,
      align::a32,
      boost::detail::type_with_alignment_imp<32> >::type t1; 
public: 
   typedef t1::type type;
};
template<> class type_with_alignment<64> {
   typedef mpl::if_c<
      ::boost::alignment_of<boost::detail::max_align>::value < 64,
      align::a64,
      boost::detail::type_with_alignment_imp<64> >::type t1; 
public: 
   typedef t1::type type;
};
template<> class type_with_alignment<128> {
   typedef mpl::if_c<
      ::boost::alignment_of<boost::detail::max_align>::value < 128,
      align::a128,
      boost::detail::type_with_alignment_imp<128> >::type t1; 
public: 
   typedef t1::type type;
};

namespace detail {
template<> struct is_pod_impl< ::boost::align::a8 > { public: static const bool value = (true); };
template<> struct is_pod_impl< ::boost::align::a16 > { public: static const bool value = (true); };
template<> struct is_pod_impl< ::boost::align::a32 > { public: static const bool value = (true); };
template<> struct is_pod_impl< ::boost::align::a64 > { public: static const bool value = (true); };
template<> struct is_pod_impl< ::boost::align::a128 > { public: static const bool value = (true); };
}
#line 344 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/type_with_alignment.hpp"











































#line 388 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/type_with_alignment.hpp"

} 


#pragma warning(pop)
#line 394 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/type_with_alignment.hpp"

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_undef.hpp"




























#line 396 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/type_with_alignment.hpp"

#line 398 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/type_with_alignment.hpp"


#line 22 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/aligned_storage.hpp"





#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"













#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"



























#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"


































#line 50 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"






#line 57 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



#line 61 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



#line 65 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



































































































































#line 197 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"
#line 28 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/aligned_storage.hpp"

namespace boost {

namespace detail { namespace aligned_storage {

static const std::size_t alignment_of_max_align = ::boost::alignment_of<max_align>::value;
#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/aligned_storage.hpp"




template <
      std::size_t size_
    , std::size_t alignment_
>
struct aligned_storage_imp
{
    union data_t
    {
        char buf[size_];

        typename mpl::eval_if_c<
              alignment_ == std::size_t(-1)
            , mpl::identity<detail::max_align>
            , type_with_alignment<alignment_>
            >::type align_;
    } data_;
    void* address() const { return const_cast<aligned_storage_imp*>(this); }
};

template< std::size_t alignment_ >
struct aligned_storage_imp<0u,alignment_>
{
    
    void* address() const { return 0; }
};

}} 

template <
      std::size_t size_
    , std::size_t alignment_ = std::size_t(-1)
>
class aligned_storage : 

   private 


#line 79 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/aligned_storage.hpp"
   detail::aligned_storage::aligned_storage_imp<size_, alignment_> 
{
 
public: 

    typedef detail::aligned_storage::aligned_storage_imp<size_, alignment_> type;

    static const std::size_t size = size_;
#line 90 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/aligned_storage.hpp"
    static const std::size_t alignment = ( alignment_ == std::size_t(-1) ? ::boost::detail::aligned_storage::alignment_of_max_align : alignment_ );
#line 98 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/aligned_storage.hpp"








#line 110 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/aligned_storage.hpp"

public: 

    aligned_storage(const aligned_storage&);
    aligned_storage& operator=(const aligned_storage&);

#line 117 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/aligned_storage.hpp"

public: 

    aligned_storage()
    {
    }

    ~aligned_storage()
    {
    }

public: 

    void* address()
    {
        return static_cast<type*>(this)->address();
    }



    const void* address() const
    {
        return static_cast<const type*>(this)->address();
    }





#line 147 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/aligned_storage.hpp"

};












#line 162 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/aligned_storage.hpp"






template <std::size_t size_, std::size_t alignment_>
struct is_pod<boost::detail::aligned_storage::aligned_storage_imp<size_,alignment_> >
   : public ::boost::integral_constant<bool,true>
{ 
    
}; 
#line 175 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/aligned_storage.hpp"


} 

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_undef.hpp"




























#line 180 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/aligned_storage.hpp"

#line 182 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/aligned_storage.hpp"
#line 25 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/value_init.hpp"



#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/cv_traits.hpp"















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/add_volatile.hpp"















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/type_trait_def.hpp"













#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"



























#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/type_trait_def.hpp"





















































#line 17 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/add_volatile.hpp"

namespace boost {










#pragma warning(push)
#pragma warning(disable:4181) 
#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/add_volatile.hpp"

template< typename T > struct add_volatile { public: typedef T volatile type;  }; 


#pragma warning(pop)
#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/add_volatile.hpp"


template< typename T > struct add_volatile<T&> { public: typedef T& type; };
#line 42 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/add_volatile.hpp"

} 

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/type_trait_undef.hpp"



















#line 46 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/add_volatile.hpp"

#line 48 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/add_volatile.hpp"
#line 17 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/cv_traits.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/add_cv.hpp"
















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/type_trait_def.hpp"













#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"



























#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/type_trait_def.hpp"





















































#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/add_cv.hpp"

namespace boost {










#pragma warning(push)
#pragma warning(disable:4181) 
#line 33 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/add_cv.hpp"

template< typename T > struct add_cv { public: typedef T const volatile type;  }; 


#pragma warning(pop)
#line 39 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/add_cv.hpp"


template< typename T > struct add_cv<T&> { public: typedef T& type; };
#line 43 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/add_cv.hpp"

} 

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/type_trait_undef.hpp"



















#line 47 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/add_cv.hpp"

#line 49 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/add_cv.hpp"
#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/cv_traits.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_const.hpp"

































#line 35 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_const.hpp"





#line 41 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_const.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"













#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"



























#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"


































#line 50 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"






#line 57 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



#line 61 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



#line 65 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



































































































































#line 197 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"
#line 44 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_const.hpp"

namespace boost {





#line 52 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_const.hpp"

namespace detail{




template <class T>
struct is_const_rvalue_filter
{


#line 64 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_const.hpp"
   static const bool value = ::boost::detail::cv_traits_imp<T*>::is_const;
#line 66 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_const.hpp"
};

template <class T>
struct is_const_rvalue_filter<T&&>
{
   static const bool value = false;
};
#line 74 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_const.hpp"
}


template< typename T > struct is_const : public ::boost::integral_constant<bool,::boost::detail::is_const_rvalue_filter<T>::value> { public:   }; 
template< typename T > struct is_const< T& > : public ::boost::integral_constant<bool,false> { public:  };









#line 89 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_const.hpp"






#line 96 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_const.hpp"






























































#line 159 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_const.hpp"

} 

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_undef.hpp"




























#line 163 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_const.hpp"

#line 165 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_const.hpp"

#line 19 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/cv_traits.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_volatile.hpp"






























#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_volatile.hpp"





#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_volatile.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"













#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"



























#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"


































#line 50 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"






#line 57 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



#line 61 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



#line 65 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



































































































































#line 197 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"
#line 41 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_volatile.hpp"

namespace boost {

namespace detail{
template <class T>
struct is_volatile_rval_filter
{


#line 51 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_volatile.hpp"
   static const bool value = ::boost::detail::cv_traits_imp<T*>::is_volatile;
#line 53 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_volatile.hpp"
};





template <class T>
struct is_volatile_rval_filter<T&&>
{
   static const bool value = false;
};
#line 65 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_volatile.hpp"
}



#line 70 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_volatile.hpp"


template< typename T > struct is_volatile : public ::boost::integral_constant<bool,::boost::detail::is_volatile_rval_filter<T>::value> { public:   }; 
template< typename T > struct is_volatile< T& > : public ::boost::integral_constant<bool,false> { public:  };









#line 84 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_volatile.hpp"






























































#line 147 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_volatile.hpp"

} 

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_undef.hpp"




























#line 151 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_volatile.hpp"

#line 153 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/is_volatile.hpp"
#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/cv_traits.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/remove_const.hpp"























#line 25 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/remove_const.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/type_trait_def.hpp"













#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"



























#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/type_trait_def.hpp"





















































#line 28 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/remove_const.hpp"

namespace boost {



namespace detail {

template <typename T, bool is_vol>
struct remove_const_helper
{
    typedef T type;
};

template <typename T>
struct remove_const_helper<T, true>
{
    typedef T volatile type;
};


template <typename T>
struct remove_const_impl
{
    typedef typename remove_const_helper<
          typename cv_traits_imp<T*>::unqualified_type
        , ::boost::is_volatile<T>::value
        >::type type;
};






template <typename T>
struct remove_const_impl<T&&>
{
    typedef T&& type;
};
#line 68 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/remove_const.hpp"

} 



template< typename T > struct remove_const { public: typedef typename boost::detail::remove_const_impl<T>::type type;  }; 
template< typename T > struct remove_const<T&> { public: typedef T& type; };

template< typename T, std::size_t N > struct remove_const<T const[N]> { public: typedef T type[N]; };
template< typename T, std::size_t N > struct remove_const<T const volatile[N]> { public: typedef T volatile type[N]; };
#line 79 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/remove_const.hpp"





#line 85 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/remove_const.hpp"

} 

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/type_trait_undef.hpp"



















#line 89 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/remove_const.hpp"

#line 91 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/remove_const.hpp"
#line 21 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/cv_traits.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/remove_volatile.hpp"























#line 25 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/remove_volatile.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/type_trait_def.hpp"













#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"



























#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/type_trait_def.hpp"





















































#line 28 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/remove_volatile.hpp"

namespace boost {



namespace detail {

template <typename T, bool is_const>
struct remove_volatile_helper
{
    typedef T type;
};

template <typename T>
struct remove_volatile_helper<T,true>
{
    typedef T const type;
};

template <typename T>
struct remove_volatile_impl
{
    typedef typename remove_volatile_helper<
          typename cv_traits_imp<T*>::unqualified_type
        , ::boost::is_const<T>::value
        >::type type;
};






template <typename T>
struct remove_volatile_impl<T&&>
{
    typedef T&& type;
};
#line 67 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/remove_volatile.hpp"
} 



template< typename T > struct remove_volatile { public: typedef typename boost::detail::remove_volatile_impl<T>::type type;  }; 
template< typename T > struct remove_volatile<T&> { public: typedef T& type; };

template< typename T, std::size_t N > struct remove_volatile<T volatile[N]> { public: typedef T type[N]; };
template< typename T, std::size_t N > struct remove_volatile<T const volatile[N]> { public: typedef T const type[N]; };
#line 77 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/remove_volatile.hpp"





#line 83 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/remove_volatile.hpp"

} 

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/type_trait_undef.hpp"



















#line 87 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/remove_volatile.hpp"

#line 89 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/remove_volatile.hpp"
#line 22 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/cv_traits.hpp"


#line 25 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/cv_traits.hpp"
#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/value_init.hpp"

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/swap.hpp"









#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/swap.hpp"


























namespace boost_swap_impl
{
  template<class T>
  void swap_impl(T& left, T& right)
  {
    using namespace std;
    swap(left,right);
  }

  template<class T, std::size_t N>
  void swap_impl(T (& left)[N], T (& right)[N])
  {
    for (std::size_t i = 0; i < N; ++i)
    {
      ::boost_swap_impl::swap_impl(left[i], right[i]);
    }
  }
}

namespace boost
{
  template<class T1, class T2>
  void swap(T1& left, T2& right)
  {
    ::boost_swap_impl::swap_impl(left, right);
  }
}

#line 56 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/swap.hpp"
#line 11 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/swap.hpp"

#line 13 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/swap.hpp"
#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/value_init.hpp"




#pragma warning(push)



#pragma warning(disable: 4351)


#pragma warning(disable: 4512)
#line 44 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/value_init.hpp"
#line 45 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/value_init.hpp"


  
  
  
  
#line 52 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/value_init.hpp"




  
  
  

#line 61 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/value_init.hpp"
#line 62 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/value_init.hpp"

namespace boost {

template<class T>
class initialized
{
  private :
    struct wrapper
    {

      typename
#line 74 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/value_init.hpp"
      remove_const<T>::type data;

      wrapper()
      :
      data()
      {
      }

      wrapper(T const & arg)
      :
      data(arg)
      {
      }
    };

    mutable

      typename
#line 93 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/value_init.hpp"
      aligned_storage<sizeof(wrapper), alignment_of<wrapper>::value>::type x;

    wrapper * wrapper_address() const
    {
      return static_cast<wrapper *>( static_cast<void*>(&x));
    }

  public :

    initialized()
    {

      std::memset(&x, 0, sizeof(x));
#line 107 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/value_init.hpp"
      new (wrapper_address()) wrapper();
    }

    initialized(initialized const & arg)
    {
      new (wrapper_address()) wrapper( static_cast<wrapper const &>(*(arg.wrapper_address())));
    }

    explicit initialized(T const & arg)
    {
      new (wrapper_address()) wrapper(arg);
    }

    initialized & operator=(initialized const & arg)
    {
      
      static_assert(! is_const<T>::value, "! is_const<T>::value");
      *wrapper_address() = static_cast<wrapper const &>(*(arg.wrapper_address()));
      return *this;
    }

    ~initialized()
    {
      wrapper_address()->wrapper::~wrapper();
    }

    T const & data() const
    {
      return wrapper_address()->data;
    }

    T& data()
    {
      return wrapper_address()->data;
    }

    void swap(initialized & arg)
    {
      ::boost::swap( this->data(), arg.data() );
    }

    operator T const &() const
    {
      return wrapper_address()->data;
    }

    operator T&()
    {
      return wrapper_address()->data;
    }

} ;

template<class T>
T const& get ( initialized<T> const& x )
{
  return x.data() ;
}

template<class T>
T& get ( initialized<T>& x )
{
  return x.data() ;
}

template<class T>
void swap ( initialized<T> & lhs, initialized<T> & rhs )
{
  lhs.swap(rhs) ;
}

template<class T>
class value_initialized
{
  private :

    
    initialized<T> m_data;

  public :
    
    value_initialized()
    :
    m_data()
    { }
    
    T const & data() const
    {
      return m_data.data();
    }

    T& data()
    {
      return m_data.data();
    }

    void swap(value_initialized & arg)
    {
      m_data.swap(arg.m_data);
    }

    operator T const &() const
    {
      return m_data;
    }

    operator T&()
    {
      return m_data;
    }
} ;


template<class T>
T const& get ( value_initialized<T> const& x )
{
  return x.data() ;
}

template<class T>
T& get ( value_initialized<T>& x )
{
  return x.data() ;
}

template<class T>
void swap ( value_initialized<T> & lhs, value_initialized<T> & rhs )
{
  lhs.swap(rhs) ;
}


class initialized_value_t
{
  public :
    
    template <class T> operator T() const
    {
      return initialized<T>().data();
    }
};

initialized_value_t const initialized_value = {} ;


} 


#pragma warning(pop)
#line 257 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/value_init.hpp"

#line 259 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/value_init.hpp"
#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/for_each.hpp"

namespace boost { namespace mpl {

namespace aux {

template< bool done = true >
struct for_each_impl
{
    template<
          typename Iterator
        , typename LastIterator
        , typename TransformFunc
        , typename F
        >
    static void execute(
          Iterator*
        , LastIterator*
        , TransformFunc*
        , F
        )
    {
    }
};

template<>
struct for_each_impl<false>
{
    template<
          typename Iterator
        , typename LastIterator
        , typename TransformFunc
        , typename F
        >
    static void execute(
          Iterator*
        , LastIterator*
        , TransformFunc* 
        , F f
        )
    {
        typedef typename deref<Iterator>::type item;
        typedef typename apply1<TransformFunc,item>::type arg;
    
        
        
        value_initialized<arg> x;
        aux::unwrap(f, 0)(boost::get(x));
        
        typedef typename mpl::next<Iterator>::type iter;
        for_each_impl<boost::is_same<iter,LastIterator>::value>
            ::execute( static_cast<iter*>(0), static_cast<LastIterator*>(0), static_cast<TransformFunc*>(0), f);
    }
};

} 



template<
      typename Sequence
    , typename TransformOp
    , typename F
    >
inline
void for_each(F f, Sequence* = 0, TransformOp* = 0)
{
    static const std::size_t mpl_assertion_in_line_6 = sizeof( boost::mpl::assertion_failed<false>( boost::mpl::make_assert_arg< typename boost::mpl::eval_assert<void ( is_sequence<Sequence> )>::type >() ) );

    typedef typename begin<Sequence>::type first;
    typedef typename end<Sequence>::type last;

    aux::for_each_impl< boost::is_same<first,last>::value >
        ::execute(static_cast<first*>(0), static_cast<last*>(0), static_cast<TransformOp*>(0), f);
}

template<
      typename Sequence
    , typename F
    >
inline
void for_each(F f, Sequence* = 0)
{
    for_each<Sequence, identity<> >(f);
}

}}

#line 117 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/mpl/for_each.hpp"
#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/unit_test_suite_impl.hpp"

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type.hpp"








namespace boost {

  
  
  template <class T>
  struct type {};

}

#line 19 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type.hpp"
#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/unit_test_suite_impl.hpp"





#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\list"

#pragma once






 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 #pragma warning(disable: 4127)
namespace std {
		
template<class _Mylist,
	class _Base = _Iterator_base0>
	class _List_unchecked_const_iterator
		: public _Iterator012<bidirectional_iterator_tag,
			typename _Mylist::value_type,
			typename _Mylist::difference_type,
			typename _Mylist::const_pointer,
			typename _Mylist::const_reference,
			_Base>
	{	
public:
	typedef _List_unchecked_const_iterator<_Mylist, _Base> _Myiter;
	typedef bidirectional_iterator_tag iterator_category;

	typedef typename _Mylist::_Nodeptr _Nodeptr;
	typedef typename _Mylist::value_type value_type;
	typedef typename _Mylist::difference_type difference_type;
	typedef typename _Mylist::const_pointer pointer;
	typedef typename _Mylist::const_reference reference;

	_List_unchecked_const_iterator()
		: _Ptr(0)
		{	
		}

	_List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
		: _Ptr(_Pnode)
		{	
		this->_Adopt(_Plist);
		}

	reference operator*() const
		{	
		return (_Mylist::_Myval(_Ptr));
		}

	pointer operator->() const
		{	
		return (::std:: pointer_traits<pointer>::pointer_to(**this));
		}

	_Myiter& operator++()
		{	
		_Ptr = _Mylist::_Nextnode(_Ptr);
		return (*this);
		}

	_Myiter operator++(int)
		{	
		_Myiter _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Myiter& operator--()
		{	
		_Ptr = _Mylist::_Prevnode(_Ptr);
		return (*this);
		}

	_Myiter operator--(int)
		{	
		_Myiter _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	bool operator==(const _Myiter& _Right) const
		{	
		return (_Ptr == _Right._Ptr);
		}

	bool operator!=(const _Myiter& _Right) const
		{	
		return (!(*this == _Right));
		}

	_Nodeptr _Mynode() const
		{	
		return (_Ptr);
		}

	_Nodeptr _Ptr;	
	};

	
template<class _Mylist>
	class _List_unchecked_iterator
		: public _List_unchecked_const_iterator<_Mylist>
	{	
public:
	typedef _List_unchecked_iterator<_Mylist> _Myiter;
	typedef _List_unchecked_const_iterator<_Mylist> _Mybase;
	typedef bidirectional_iterator_tag iterator_category;

	typedef typename _Mylist::_Nodeptr _Nodeptr;
	typedef typename _Mylist::value_type value_type;
	typedef typename _Mylist::difference_type difference_type;
	typedef typename _Mylist::pointer pointer;
	typedef typename _Mylist::reference reference;

	_List_unchecked_iterator()
		{	
		}

	_List_unchecked_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
		: _Mybase(_Pnode, _Plist)
		{	
		}

	reference operator*() const
		{	
		return ((reference)**(_Mybase *)this);
		}

	pointer operator->() const
		{	
		return (::std:: pointer_traits<pointer>::pointer_to(**this));
		}

	_Myiter& operator++()
		{	
		++(*(_Mybase *)this);
		return (*this);
		}

	_Myiter operator++(int)
		{	
		_Myiter _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Myiter& operator--()
		{	
		--(*(_Mybase *)this);
		return (*this);
		}

	_Myiter operator--(int)
		{	
		_Myiter _Tmp = *this;
		--*this;
		return (_Tmp);
		}
	};

	
template<class _Mylist>
	class _List_const_iterator
		: public _List_unchecked_const_iterator<_Mylist, _Iterator_base>
	{	
public:
	typedef _List_const_iterator<_Mylist> _Myiter;
	typedef _List_unchecked_const_iterator<_Mylist, _Iterator_base> _Mybase;
	typedef bidirectional_iterator_tag iterator_category;

	typedef typename _Mylist::_Nodeptr _Nodeptr;
	typedef typename _Mylist::value_type value_type;
	typedef typename _Mylist::difference_type difference_type;
	typedef typename _Mylist::const_pointer pointer;
	typedef typename _Mylist::const_reference reference;

	_List_const_iterator()
		: _Mybase()
		{	
		}

	_List_const_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
		: _Mybase(_Pnode, _Plist)
		{	
		}

	typedef _List_unchecked_const_iterator<_Mylist> _Unchecked_type;

	_Myiter& _Rechecked(_Unchecked_type _Right)
		{	
		this->_Ptr = _Right._Ptr;
		return (*this);
		}

	_Unchecked_type _Unchecked() const
		{	
		return (_Unchecked_type(this->_Ptr, (_Mylist *)this->_Getcont()));
		}

	reference operator*() const
		{	
 








#line 215 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\list"



#line 219 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\list"

		return (_Mylist::_Myval(this->_Ptr));
		}

	_Myiter& operator++()
		{	
 








#line 235 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\list"



#line 239 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\list"

		this->_Ptr = _Mylist::_Nextnode(this->_Ptr);
		return (*this);
		}

	_Myiter operator++(int)
		{	
		_Myiter _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Myiter& operator--()
		{	
 









#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\list"





#line 270 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\list"
		this->_Ptr = _Mylist::_Prevnode(this->_Ptr);
 #line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\list"

		return (*this);
		}

	_Myiter operator--(int)
		{	
		_Myiter _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	bool operator==(const _Myiter& _Right) const
		{	
 







#line 294 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\list"


#line 297 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\list"

		return (this->_Ptr == _Right._Ptr);
		}

	bool operator!=(const _Myiter& _Right) const
		{	
		return (!(*this == _Right));
		}
	};

template<class _Mylist> inline
	typename _List_const_iterator<_Mylist>::_Unchecked_type
		_Unchecked(_List_const_iterator<_Mylist> _Iter)
	{	
	return (_Iter._Unchecked());
	}

template<class _Mylist> inline
	_List_const_iterator<_Mylist>&
		_Rechecked(_List_const_iterator<_Mylist>& _Iter,
			typename _List_const_iterator<_Mylist>
				::_Unchecked_type _Right)
	{	
	return (_Iter._Rechecked(_Right));
	}

	
template<class _Mylist>
	class _List_iterator
		: public _List_const_iterator<_Mylist>
	{	
public:
	typedef _List_iterator<_Mylist> _Myiter;
	typedef _List_const_iterator<_Mylist> _Mybase;
	typedef bidirectional_iterator_tag iterator_category;

	typedef typename _Mylist::_Nodeptr _Nodeptr;
	typedef typename _Mylist::value_type value_type;
	typedef typename _Mylist::difference_type difference_type;
	typedef typename _Mylist::pointer pointer;
	typedef typename _Mylist::reference reference;

	_List_iterator()
		{	
		}

	_List_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
		: _Mybase(_Pnode, _Plist)
		{	
		}

	typedef _List_unchecked_iterator<_Mylist> _Unchecked_type;

	_Myiter& _Rechecked(_Unchecked_type _Right)
		{	
		this->_Ptr = _Right._Ptr;
		return (*this);
		}

	_Unchecked_type _Unchecked() const
		{	
		return (_Unchecked_type(this->_Ptr, (_Mylist *)this->_Getcont()));
		}

	reference operator*() const
		{	
		return ((reference)**(_Mybase *)this);
		}

	pointer operator->() const
		{	
		return (::std:: pointer_traits<pointer>::pointer_to(**this));
		}

	_Myiter& operator++()
		{	
		++(*(_Mybase *)this);
		return (*this);
		}

	_Myiter operator++(int)
		{	
		_Myiter _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Myiter& operator--()
		{	
		--(*(_Mybase *)this);
		return (*this);
		}

	_Myiter operator--(int)
		{	
		_Myiter _Tmp = *this;
		--*this;
		return (_Tmp);
		}
	};

template<class _Mylist> inline
	typename _List_iterator<_Mylist>::_Unchecked_type
		_Unchecked(_List_iterator<_Mylist> _Iter)
	{	
	return (_Iter._Unchecked());
	}

template<class _Mylist> inline
	_List_iterator<_Mylist>&
		_Rechecked(_List_iterator<_Mylist>& _Iter,
			typename _List_iterator<_Mylist>
				::_Unchecked_type _Right)
	{	
	return (_Iter._Rechecked(_Right));
	}

		
template<class _Value_type,
	class _Size_type,
	class _Difference_type,
	class _Pointer,
	class _Const_pointer,
	class _Reference,
	class _Const_reference,
	class _Nodeptr_type>
	struct _List_iter_types
	{	
	typedef _Value_type value_type;
	typedef _Size_type size_type;
	typedef _Difference_type difference_type;
	typedef _Pointer pointer;
	typedef _Const_pointer const_pointer;
	typedef _Reference reference;
	typedef _Const_reference const_reference;
	typedef _Nodeptr_type _Nodeptr;
	};

template<class _Value_type,
	class _Voidptr>
	struct _List_node
		{	
		_Voidptr _Next;	
		_Voidptr _Prev;	
		_Value_type _Myval;	

	private:
		_List_node& operator=(const _List_node&);
		};

template<class _Value_type>
	struct _List_node<_Value_type, void *>
		{	
		typedef _List_node<_Value_type, void *> *_Nodeptr;
		_Nodeptr _Next;	
		_Nodeptr _Prev;	
		_Value_type _Myval;	

	private:
		_List_node& operator=(const _List_node&);
		};

template<class _Ty>
	struct _List_simple_types
		: public _Simple_types<_Ty>
	{	
	typedef _List_node<_Ty, void *> _Node;
	typedef _Node *_Nodeptr;
	};

template<class _Ty,
	class _Alloc0>
	struct _List_base_types
	{	
	typedef _Alloc0 _Alloc;
	typedef _List_base_types<_Ty, _Alloc> _Myt;

	typedef _Wrap_alloc<_Alloc> _Alty0;
	typedef typename _Alty0::template rebind<_Ty>::other _Alty;


	typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
		_Voidptr;
	typedef _List_node<typename _Alty::value_type,
		_Voidptr> _Node;

	typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
	typedef typename _Alnod_type::pointer _Nodeptr;
	typedef _Nodeptr& _Nodepref;

	typedef typename _If<_Is_simple_alloc<_Alty>::value,
		_List_simple_types<typename _Alty::value_type>,
		_List_iter_types<typename _Alty::value_type,
			typename _Alty::size_type,
			typename _Alty::difference_type,
			typename _Alty::pointer,
			typename _Alty::const_pointer,
			typename _Alty::reference,
			typename _Alty::const_reference,
			_Nodeptr> >::type
		_Val_types;
	};

		
template<class _Val_types>
	class _List_val
		: public _Container_base
	{	
public:
	typedef _List_val<_Val_types> _Myt;

	typedef typename _Val_types::_Nodeptr _Nodeptr;
	typedef _Nodeptr& _Nodepref;

	typedef typename _Val_types::value_type value_type;
	typedef typename _Val_types::size_type size_type;
	typedef typename _Val_types::difference_type difference_type;
	typedef typename _Val_types::pointer pointer;
	typedef typename _Val_types::const_pointer const_pointer;
	typedef typename _Val_types::reference reference;
	typedef typename _Val_types::const_reference const_reference;

	typedef _List_const_iterator<_Myt> const_iterator;
	typedef _List_iterator<_Myt> iterator;

	typedef _List_unchecked_const_iterator<_Myt> _Unchecked_const_iterator;
	typedef _List_unchecked_iterator<_Myt> _Unchecked_iterator;

	_List_val()
		{	
		this->_Myhead = 0;
		this->_Mysize = 0;
		}

	static _Nodepref _Nextnode(_Nodeptr _Pnode)
		{	
		return ((_Nodepref)_Pnode->_Next);
		}

	static _Nodepref _Prevnode(_Nodeptr _Pnode)
		{	
		return ((_Nodepref)_Pnode->_Prev);
		}

	static reference _Myval(_Nodeptr _Pnode)
		{	
		return ((reference)_Pnode->_Myval);
		}

	_Nodeptr _Myhead;	
	size_type _Mysize;	
	};

		
template<bool _Al_has_storage,
	class _Alloc_types>
	class _List_alloc
		: public _List_val<typename _Alloc_types::_Val_types>
	{	
public:
	typename _Alloc_types::_Alnod_type _Alnod;	

	typedef _List_alloc<_Al_has_storage, _Alloc_types> _Myt;
	typedef typename _Alloc_types::_Alloc _Alloc;
	typedef typename _Alloc_types::_Alnod_type _Alty;
	typedef typename _Alloc_types::_Node _Node;
	typedef typename _Alloc_types::_Nodeptr _Nodeptr;

 
	_List_alloc(const _Alloc& _Al = _Alloc())
		: _Alnod(_Al)
		{	
		this->_Myhead = _Buyheadnode();
		}

	~_List_alloc() throw ()
		{	
		_Freeheadnode(this->_Myhead);
		}

	void _Change_alloc(const _Alty& _Al)
		{	
		this->_Alnod = _Al;
		}

	void _Swap_alloc(_Myt& _Right)
		{	
		_Swap_adl(this->_Alnod, _Right._Alnod);
		}

 

















































#line 638 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\list"

	_Nodeptr _Buyheadnode()
		{	
		return (_Buynode0(_Nodeptr(), _Nodeptr()));
		}

	void _Freeheadnode(_Nodeptr _Pnode)
		{	
		this->_Alnod.destroy(
			::std:: addressof(this->_Nextnode(_Pnode)));
		this->_Alnod.destroy(
			::std:: addressof(this->_Prevnode(_Pnode)));
		this->_Alnod.deallocate(_Pnode, 1);
		}

	_Nodeptr _Buynode0(_Nodeptr _Next,
		_Nodeptr _Prev)
		{	
		_Nodeptr _Pnode = this->_Alnod.allocate(1);

		if (_Next == _Nodeptr())
			{	
			_Next = _Pnode;
			_Prev = _Pnode;
			}
		try {
		this->_Alnod.construct(
			::std:: addressof(this->_Nextnode(_Pnode)), _Next);
		this->_Alnod.construct(
			::std:: addressof(this->_Prevnode(_Pnode)), _Prev);
		} catch (...) {
		this->_Alnod.deallocate(_Pnode, 1);
		throw;
		}

		return (_Pnode);
		}

	_Alty& _Getal()
		{	
		return (this->_Alnod);
		}

	const _Alty& _Getal() const
		{	
		return (this->_Alnod);
		}
	};

		
template<class _Alloc_types>
	class _List_alloc<false, _Alloc_types>
		: public _List_val<typename _Alloc_types::_Val_types>
	{	
public:
	typedef _List_alloc<false, _Alloc_types> _Myt;
	typedef typename _Alloc_types::_Alloc _Alloc;
	typedef typename _Alloc_types::_Alnod_type _Alty;
	typedef typename _Alloc_types::_Node _Node;
	typedef typename _Alloc_types::_Nodeptr _Nodeptr;

 
	_List_alloc(const _Alloc& = _Alloc())
		{	
		this->_Myhead = _Buyheadnode();
		}

	~_List_alloc() throw ()
		{	
		_Freeheadnode(this->_Myhead);
		}

	void _Change_alloc(const _Alty&)
		{	
		}

	void _Swap_alloc(_Myt&)
		{	
		}

 












































#line 764 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\list"

	_Nodeptr _Buyheadnode()
		{	
		return (_Buynode0(_Nodeptr(), _Nodeptr()));
		}

	void _Freeheadnode(_Nodeptr _Pnode)
		{	
		this->_Getal().destroy(
			::std:: addressof(this->_Nextnode(_Pnode)));
		this->_Getal().destroy(
			::std:: addressof(this->_Prevnode(_Pnode)));
		this->_Getal().deallocate(_Pnode, 1);
		}

	_Nodeptr _Buynode0(_Nodeptr _Next,
		_Nodeptr _Prev)
		{	
		_Nodeptr _Pnode = this->_Getal().allocate(1);

		if (_Next == _Nodeptr())
			{	
			_Next = _Pnode;
			_Prev = _Pnode;
			}
		try {
		this->_Getal().construct(
			::std:: addressof(this->_Nextnode(_Pnode)), _Next);
		this->_Getal().construct(
			::std:: addressof(this->_Prevnode(_Pnode)), _Prev);
		} catch (...) {
		this->_Getal().deallocate(_Pnode, 1);
		throw;
		}

		return (_Pnode);
		}

	_Alty _Getal() const
		{	
		return (_Alty());
		}
	};

		
template<class _Ty,
	class _Alloc>
	class _List_buy
		: public _List_alloc<!is_empty<_Alloc>::value,
			_List_base_types<_Ty, _Alloc> >
	{	
public:
	typedef _List_alloc<!is_empty<_Alloc>::value,
		_List_base_types<_Ty, _Alloc> > _Mybase;
	typedef typename _Mybase::_Alty _Alty;
	typedef typename _Mybase::_Nodeptr _Nodeptr;

	_List_buy(const _Alloc& _Al = _Alloc())
		: _Mybase(_Al)
		{	
		}

	template<class... _Valty>
		_Nodeptr _Buynode(_Nodeptr _Next, _Nodeptr _Prev,
			_Valty&&... _Val)
		{	
		_Nodeptr _Pnode = this->_Buynode0(_Next, _Prev);

		try {
		this->_Getal().construct(
			::std:: addressof(this->_Myval(_Pnode)),
				::std:: forward<_Valty>(_Val)...);
		} catch (...) {
		this->_Getal().deallocate(_Pnode, 1);
		throw;
		}

		return (_Pnode);
		}


	void _Freenode(_Nodeptr _Pnode)
		{	
		this->_Getal().destroy(
			::std:: addressof(this->_Nextnode(_Pnode)));
		this->_Getal().destroy(
			::std:: addressof(this->_Prevnode(_Pnode)));
		this->_Getal().destroy(
			::std:: addressof(this->_Myval(_Pnode)));
		this->_Getal().deallocate(_Pnode, 1);
		}
	};

		
template<class _Ty,
	class _Alloc = allocator<_Ty> >
	class list
		: public _List_buy<_Ty, _Alloc>
	{	
public:
	typedef list<_Ty, _Alloc> _Myt;
	typedef _List_buy<_Ty, _Alloc> _Mybase;
	typedef typename _Mybase::_Node _Node;
	typedef typename _Mybase::_Nodeptr _Nodeptr;
	typedef typename _Mybase::_Alty _Alty;

	typedef _Alloc allocator_type;
	typedef typename _Mybase::size_type size_type;
	typedef typename _Mybase::difference_type difference_type;
	typedef typename _Mybase::pointer pointer;
	typedef typename _Mybase::const_pointer const_pointer;
	typedef typename _Mybase::reference reference;
	typedef typename _Mybase::const_reference const_reference;
	typedef typename _Mybase::value_type value_type;

	typedef typename _Mybase::const_iterator const_iterator;
	typedef typename _Mybase::iterator iterator;
	typedef typename _Mybase::_Unchecked_const_iterator
		_Unchecked_const_iterator;
	typedef typename _Mybase::_Unchecked_iterator
		_Unchecked_iterator;

	typedef ::std:: reverse_iterator<iterator> reverse_iterator;
	typedef ::std:: reverse_iterator<const_iterator> const_reverse_iterator;

	list()
		: _Mybase()
		{	
		}

	explicit list(const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		}

	explicit list(size_type _Count)
		: _Mybase()
		{	
		resize(_Count);
		}

	list(size_type _Count, const _Ty& _Val)
		: _Mybase()
		{	
		_Construct_n(_Count, _Val);
		}

	list(size_type _Count, const _Ty& _Val, const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		_Construct_n(_Count, _Val);
		}

	list(const _Myt& _Right)

		: _Mybase(_Right._Getal().select_on_container_copy_construction())


		{	
		try {
		insert(begin(), _Right.begin(), _Right.end());
		} catch (...) {
		_Tidy();
		throw;
		}
		}

	list(const _Myt& _Right, const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		try {
		insert(begin(), _Right.begin(), _Right.end());
		} catch (...) {
		_Tidy();
		throw;
		}
		}

	template<class _Iter,
		class = typename enable_if<_Is_iterator<_Iter>::value,
			void>::type>
		list(_Iter _First, _Iter _Last)
		: _Mybase()
		{	
		_Construct(_First, _Last);
		}

	template<class _Iter,
		class = typename enable_if<_Is_iterator<_Iter>::value,
			void>::type>
		list(_Iter _First, _Iter _Last, const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		_Construct(_First, _Last);
		}

	template<class _Iter>
		void _Construct(_Iter _First, _Iter _Last)
		{	
		try {
		insert(begin(), _First, _Last);
		} catch (...) {
		_Tidy();
		throw;
		}
		}

	void _Construct_n(size_type _Count,
		const _Ty& _Val)
		{	
		try {
		_Insert_n(_Unchecked_begin(), _Count, _Val);
		} catch (...) {
		_Tidy();
		throw;
		}
		}

	list(_Myt&& _Right)
		: _Mybase(_Right._Getal())
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		}

	list(_Myt&& _Right, const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		}

	_Myt& operator=(_Myt&& _Right)
		{	
		if (this != &_Right)
			{	
			clear();

			if (_Alty::propagate_on_container_move_assignment::value
				&& this->_Getal() != _Right._Getal())
				this->_Change_alloc(_Right._Getal());

			_Assign_rv(::std:: forward<_Myt>(_Right));
			}
		return (*this);
		}

	void _Assign_rv(_Myt&& _Right)
		{	
		this->_Swap_all(_Right);
		_Swap_adl(this->_Myhead, _Right._Myhead);
		::std:: swap(this->_Mysize, _Right._Mysize);
		}

	void push_front(_Ty&& _Val)
		{	
		_Insert(_Unchecked_begin(), ::std:: forward<_Ty>(_Val));
		}

	void push_back(_Ty&& _Val)
		{	
		_Insert(_Unchecked_end(), ::std:: forward<_Ty>(_Val));
		}

	iterator insert(const_iterator _Where, _Ty&& _Val)
		{	
		return (emplace(_Where, ::std:: forward<_Ty>(_Val)));
		}

	template<class... _Valty>
		void emplace_front(_Valty&&... _Val)
		{	
		_Insert(_Unchecked_begin(), ::std:: forward<_Valty>(_Val)...);
		}

	template<class... _Valty>
		void emplace_back(_Valty&&... _Val)
		{	
		_Insert(_Unchecked_end(), ::std:: forward<_Valty>(_Val)...);
		}

	template<class... _Valty>
		iterator emplace(const_iterator _Where, _Valty&&... _Val)
		{	
 


#line 1050 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\list"

		_Insert(_Where._Unchecked(), ::std:: forward<_Valty>(_Val)...);
		return (_Make_iter(--_Where));
		}

	template<class... _Valty>
		void _Insert(_Unchecked_const_iterator _Where,
		_Valty&&... _Val)
		{	
		_Nodeptr _Pnode = _Where._Mynode();
		_Nodeptr _Newnode =
			this->_Buynode(_Pnode, this->_Prevnode(_Pnode),
				::std:: forward<_Valty>(_Val)...);
		_Incsize(1);
		this->_Prevnode(_Pnode) = _Newnode;
		this->_Nextnode(this->_Prevnode(_Newnode)) = _Newnode;
		}


	list(::std:: initializer_list<_Ty> _Ilist,
		const _Alloc& _Al = allocator_type())
		: _Mybase(_Al)
		{	
		insert(begin(), _Ilist.begin(), _Ilist.end());
		}

	_Myt& operator=(::std:: initializer_list<_Ty> _Ilist)
		{	
		assign(_Ilist.begin(), _Ilist.end());
		return (*this);
		}

	void assign(::std:: initializer_list<_Ty> _Ilist)
		{	
		assign(_Ilist.begin(), _Ilist.end());
		}

	iterator insert(const_iterator _Where,
		::std:: initializer_list<_Ty> _Ilist)
		{	
		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
		}

	~list() throw ()
		{	
		_Tidy();
		}

	_Myt& operator=(const _Myt& _Right)
		{	
		if (this != &_Right)
			{	
			if (this->_Getal() != _Right._Getal()
				&& _Alty::propagate_on_container_copy_assignment::value)
				{	
				clear();
				this->_Change_alloc(_Right._Getal());
				}

			assign(_Right.begin(), _Right.end());
			}
		return (*this);
		}

	iterator begin() throw ()
		{	
		return (iterator(this->_Nextnode(this->_Myhead), this));
		}

	const_iterator begin() const throw ()
		{	
		return (const_iterator(this->_Nextnode(this->_Myhead), this));
		}

	iterator end() throw ()
		{	
		return (iterator(this->_Myhead, this));
		}

	const_iterator end() const throw ()
		{	
		return (const_iterator(this->_Myhead, this));
		}

	_Unchecked_iterator _Unchecked_begin()
		{	
		return (_Unchecked_iterator(this->_Nextnode(this->_Myhead),
			this));
		}

	_Unchecked_const_iterator _Unchecked_begin() const
		{	
		return (_Unchecked_const_iterator(this->_Nextnode(this->_Myhead),
			this));
		}

	_Unchecked_iterator _Unchecked_end()
		{	
		return (_Unchecked_iterator(this->_Myhead, this));
		}

	_Unchecked_const_iterator _Unchecked_end() const
		{	
		return (_Unchecked_const_iterator(this->_Myhead, this));
		}

	iterator _Make_iter(const_iterator _Where) const throw ()
		{	
		return (iterator(_Where._Ptr, this));
		}

	iterator _Make_iter(_Unchecked_const_iterator _Where) const
		{	
		return (iterator(_Where._Ptr, this));
		}

	reverse_iterator rbegin() throw ()
		{	
		return (reverse_iterator(end()));
		}

	const_reverse_iterator rbegin() const throw ()
		{	
		return (const_reverse_iterator(end()));
		}

	reverse_iterator rend() throw ()
		{	
		return (reverse_iterator(begin()));
		}

	const_reverse_iterator rend() const throw ()
		{	
		return (const_reverse_iterator(begin()));
		}

	const_iterator cbegin() const throw ()
		{	
		return (((const _Myt *)this)->begin());
		}

	const_iterator cend() const throw ()
		{	
		return (((const _Myt *)this)->end());
		}

	const_reverse_iterator crbegin() const throw ()
		{	
		return (((const _Myt *)this)->rbegin());
		}

	const_reverse_iterator crend() const throw ()
		{	
		return (((const _Myt *)this)->rend());
		}

	void resize(size_type _Newsize)
		{	
		if (this->_Mysize < _Newsize)
			{	
			size_type _Count = 0;
			try {
			for (; this->_Mysize < _Newsize; ++_Count)
				_Insert(_Unchecked_end());
			} catch (...) {
			for (; 0 < _Count; --_Count)
				pop_back();	
			throw;
			}
			}
		else
			while (_Newsize < this->_Mysize)
				pop_back();
		}

	void resize(size_type _Newsize, const _Ty& _Val)
		{	
		if (this->_Mysize < _Newsize)
			_Insert_n(_Unchecked_end(), _Newsize - this->_Mysize, _Val);
		else
			while (_Newsize < this->_Mysize)
				pop_back();
		}

	size_type size() const throw ()
		{	
		return (this->_Mysize);
		}

	size_type max_size() const throw ()
		{	
		return (this->_Getal().max_size());
		}

	bool empty() const throw ()
		{	
		return (this->_Mysize == 0);
		}

	allocator_type get_allocator() const throw ()
		{	
		return (this->_Getal());
		}

	reference front()
		{	
		return (*begin());
		}

	const_reference front() const
		{	
		return (*begin());
		}

	reference back()
		{	
		return (*(--end()));
		}

	const_reference back() const
		{	
		return (*(--end()));
		}

	void push_front(const _Ty& _Val)
		{	
		_Insert(_Unchecked_begin(), _Val);
		}

	void pop_front()
		{	
		erase(begin());
		}

	void push_back(const _Ty& _Val)
		{	
		_Insert(_Unchecked_end(), _Val);
		}

	void pop_back()
		{	
		erase(--end());
		}

	template<class _Iter>
		typename enable_if<_Is_iterator<_Iter>::value,
			void>::type
		assign(_Iter _First, _Iter _Last)
		{	
		iterator _Old = begin();
		try {
		for (; _First != _Last && _Old != end(); ++_First, ++_Old)
			_Reusenode(_Old, *_First);
		for (; _First != _Last; ++_First)
			_Insert(_Unchecked_end(), *_First);
		} catch (...) {
		clear();
		throw;
		}
		erase(_Old, end());
		}

	template<class _TArg>
		void _Reusenode(iterator _Where, _TArg&& _Arg)
		{	
		try {
		this->_Getal().destroy(
			::std:: addressof(this->_Myval(_Where._Ptr)));
		this->_Getal().construct(
			::std:: addressof(this->_Myval(_Where._Ptr)),
			::std:: forward<_TArg>(_Arg));
		} catch (...) {
		_Unlinknode(_Where);
		this->_Getal().destroy(
			::std:: addressof(this->_Nextnode(_Where._Ptr)));
		this->_Getal().destroy(
			::std:: addressof(this->_Prevnode(_Where._Ptr)));
		this->_Getal().deallocate(_Where._Ptr, 1);
		throw;
		}
		}

	void assign(size_type _Count, const _Ty& _Val)
		{	
		clear();
		_Insert_n(_Unchecked_begin(), _Count, _Val);
		}

	iterator insert(const_iterator _Where, const _Ty& _Val)
		{	
 


#line 1344 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\list"

		_Insert(_Where._Unchecked(), _Val);
		return (_Make_iter(--_Where));
		}

	iterator insert(const_iterator _Where, size_type _Count, const _Ty& _Val)
		{	
 


#line 1355 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\list"

		iterator _Prev = _Make_iter(_Where);
		if (_Prev == begin())
			{	
			_Insert_n(_Where._Unchecked(), _Count, _Val);
			return (begin());
			}
		else
			{	
			--_Prev;
			_Insert_n(_Where._Unchecked(), _Count, _Val);
			return (++_Prev);
			}
		}

	template<class _Iter>
		typename enable_if<_Is_iterator<_Iter>::value,
			iterator>::type
		insert(const_iterator _Where, _Iter _First, _Iter _Last)
		{	
 


#line 1379 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\list"

		iterator _Prev = _Make_iter(_Where);
		if (_Prev == begin())
			{	
			_Insert_range(_Where._Unchecked(), _First, _Last,
				_Iter_cat(_First));
			return (begin());
			}
		else
			{	
			--_Prev;
			_Insert_range(_Where._Unchecked(), _First, _Last,
				_Iter_cat(_First));
			return (++_Prev);
			}
		}

	template<class _Iter>
		void _Insert_range(_Unchecked_const_iterator _Where,
			_Iter _First, _Iter _Last, input_iterator_tag)
		{	
		size_type _Num = 0;

		try {
		for (; _First != _Last; ++_First, ++_Num)
			_Insert(_Where, *_First);
		} catch (...) {
		for (; 0 < _Num; --_Num)
			{	
			_Unchecked_const_iterator _Before = _Where;
			_Unchecked_erase(--_Before);
			}
		throw;
		}
		}

	template<class _Iter>
		void _Insert_range(_Unchecked_const_iterator _Where,
			_Iter _First, _Iter _Last, forward_iterator_tag)
		{	
		;
		_Iter _Next = _First;

		try {
		for (; _First != _Last; ++_First)
			_Insert(_Where, *_First);
		} catch (...) {
		for (; _Next != _First; ++_Next)
			{	
			_Unchecked_const_iterator _Before = _Where;
			_Unchecked_erase(--_Before);
			}
		throw;
		}
		}

	_Nodeptr _Unlinknode(const_iterator _Where)
		{	
 





#line 1444 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\list"
		_Nodeptr _Pnode = (_Where)._Mynode();
 #line 1446 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\list"

		this->_Nextnode(this->_Prevnode(_Pnode)) =
			this->_Nextnode(_Pnode);
		this->_Prevnode(this->_Nextnode(_Pnode)) =
			this->_Prevnode(_Pnode);

		--this->_Mysize;
		return (_Pnode);
		}

	iterator erase(const_iterator _Where)
		{	
		_Nodeptr _Pnode = _Unlinknode(_Where++);
		this->_Freenode(_Pnode);
		return (_Make_iter(_Where));
		}

	void _Unchecked_erase(_Unchecked_const_iterator _Where)
		{	
		_Nodeptr _Pnode = _Where._Mynode();

		this->_Nextnode(this->_Prevnode(_Pnode)) =
			this->_Nextnode(_Pnode);
		this->_Prevnode(this->_Nextnode(_Pnode)) =
			this->_Prevnode(_Pnode);
		this->_Freenode(_Pnode);
		--this->_Mysize;
		}

	iterator erase(const_iterator _First, const_iterator _Last)
		{	
		if (_First == begin() && _Last == end())
			{	
			clear();
			return (end());
			}
		else
			{	
			while (_First != _Last)
				_First = erase(_First);
			return (_Make_iter(_Last));
			}
		}

	void clear() throw ()
		{	
 

#line 1495 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\list"

		_Nodeptr _Pnode = this->_Nextnode(this->_Myhead);
		this->_Nextnode(this->_Myhead) = this->_Myhead;
		this->_Prevnode(this->_Myhead) = this->_Myhead;
		this->_Mysize = 0;

		for (_Nodeptr _Pnext; _Pnode != this->_Myhead; _Pnode = _Pnext)
			{	
			_Pnext = this->_Nextnode(_Pnode);
			this->_Freenode(_Pnode);
			}
		}

	void swap(_Myt& _Right)
		{	
		if (this == &_Right)
			;	
		else if (this->_Getal() == _Right._Getal())
			{	
			this->_Swap_all(_Right);
			_Swap_adl(this->_Myhead, _Right._Myhead);
			::std:: swap(this->_Mysize, _Right._Mysize);
			}

		else if (_Alty::propagate_on_container_swap::value)
			{	
			this->_Swap_alloc(_Right);
			_Swap_adl(this->_Myhead, _Right._Myhead);
			::std:: swap(this->_Mysize, _Right._Mysize);
			}

		else	

 


#line 1532 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\list"
			::std:: terminate();
 #line 1534 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\list"
		}

	void splice(const_iterator _Where, _Myt& _Right)
		{	
		if (this != &_Right && !_Right.empty())
			{	
			_Splice(_Where, _Right, _Right.begin(), _Right.end(),
				_Right._Mysize);
			}
		}

	void splice(const_iterator _Where, _Myt&& _Right)
		{	
		splice(_Where, (_Myt&)_Right);
		}

	void splice(const_iterator _Where, _Myt& _Right,
		const_iterator _First)
		{	
 




#line 1559 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\list"
		if (_First != _Right.end())
 #line 1561 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\list"

			{	
			const_iterator _Last = _First;
			++_Last;
			if (this != &_Right
				|| (_Where != _First && _Where != _Last))
				_Splice(_Where, _Right, _First, _Last, 1);
			}
		}

	void splice(const_iterator _Where, _Myt&& _Right,
		const_iterator _First)
		{	
		splice(_Where, (_Myt&)_Right, _First);
		}

	void splice(const_iterator _Where,
		_Myt& _Right, const_iterator _First, const_iterator _Last)
		{	
		if (_First != _Last && (this != &_Right || _Where != _Last))
			{	
			size_type _Count = 0;

			if (this == &_Right)
				;	
			else if (_First == _Right.begin() && _Last == _Right.end())
				_Count = _Right._Mysize;	
			else
				{	
				const_iterator _Next = _First;

				for (; _Next != _Last; ++_Next, ++_Count)
					if (_Next == _Right.end())
						_Xlength_error("list<T> bad splice");
				}
			_Splice(_Where, _Right, _First, _Last, _Count);
			}
		}

	void splice(const_iterator _Where,
		_Myt&& _Right, const_iterator _First, const_iterator _Last)
		{	
		splice(_Where, (_Myt&)_Right, _First, _Last);
		}

	void remove(const _Ty& _Val)
		{	
		iterator _Val_it = end();

		for (iterator _First = begin(); _First != end(); )
			if (*_First == _Val)
				if (::std:: addressof(*_First) == ::std:: addressof(_Val))
					_Val_it = _First++;
				else
					_First = erase(_First);
			else
				++_First;

		if (_Val_it != end())
			erase(_Val_it);
		}

	template<class _Pr1>
		void remove_if(_Pr1 _Pred)
		{	
		for (iterator _First = begin(); _First != end(); )
			if (_Pred(*_First))
				_First = erase(_First);
			else
				++_First;
		}

	void unique()
		{	
		unique(equal_to<>());
		}

	template<class _Pr2>
		void unique(_Pr2 _Pred)
		{	
		const _Nodeptr _Phead = this->_Myhead;
		_Nodeptr _Pprev = this->_Nextnode(_Phead);
		_Nodeptr _Pnode = this->_Nextnode(_Pprev);

		while (_Pnode != _Phead)
			if (_Pred(_Pprev->_Myval, _Pnode->_Myval))
				{	
				const _Nodeptr _Perase = _Pnode;
				_Pnode = this->_Nextnode(_Pnode);

				this->_Nextnode(_Pprev) = _Pnode;
				this->_Prevnode(_Pnode) = _Pprev;
				this->_Freenode(_Perase);

				--this->_Mysize;
				}
			else
				{	
				_Pprev = _Pnode;
				_Pnode = this->_Nextnode(_Pnode);
				}
		}

	void merge(_Myt& _Right)
		{	
		merge(_Right, less<>());
		}

	void merge(_Myt&& _Right)
		{	
		merge((_Myt&)_Right);
		}

	template<class _Pr2>
		void merge(_Myt& _Right, _Pr2 _Pred)
		{	
		if (&_Right != this)
			{	
			iterator _First1 = begin(), _Last1 = end();
			iterator _First2 = _Right.begin(), _Last2 = _Right.end();
			;
			;

			while (_First1 != _Last1 && _First2 != _Last2)
				if (_Pred(*_First2, *_First1))
					{	
					iterator _Mid2 = _First2;
					_Splice(_First1, _Right, _First2, ++_Mid2, 1);
					_First2 = _Mid2;
					}
				else
					++_First1;

			if (_First2 != _Last2)
				_Splice(_Last1, _Right, _First2, _Last2,
					_Right._Mysize);	
			}
		}

	template<class _Pr2>
		void merge(_Myt&& _Right, _Pr2 _Pred)
		{	
		merge((_Myt&)_Right, _Pred);
		}

	void sort()
		{	
		sort(less<>());
		}

	template<class _Pr2>
		void sort(_Pr2 _Pred)
		{	
		if (2 <= this->_Mysize)
			{	
			const size_t _MAXBINS = 25;
			_Myt _Templist(this->_Getal()), _Binlist[_MAXBINS + 1];
			size_t _Maxbin = 0;

			while (!empty())
				{	
				_Templist._Splice_same(_Templist.begin(), *this, begin(),
					++begin(), 1);

				size_t _Bin;
				for (_Bin = 0; _Bin < _Maxbin && !_Binlist[_Bin].empty();
					++_Bin)
					{	
					_Binlist[_Bin].merge(_Templist, _Pred);
					_Binlist[_Bin].swap(_Templist);
					}

				if (_Bin == _MAXBINS)
					_Binlist[_Bin - 1].merge(_Templist, _Pred);
				else
					{	
					_Binlist[_Bin].swap(_Templist);
					if (_Bin == _Maxbin)
						++_Maxbin;
					}
				}

			for (size_t _Bin = 1; _Bin < _Maxbin; ++_Bin)
				_Binlist[_Bin].merge(_Binlist[_Bin - 1],
					_Pred);	

			;

			splice(begin(), _Binlist[_Maxbin - 1]);	
			}
		}

	void reverse() throw ()
		{	
		const _Nodeptr _Phead = this->_Myhead;
		_Nodeptr _Pnode = _Phead;

		for (; ; )
			{	
			const _Nodeptr _Pnext = this->_Nextnode(_Pnode);
			this->_Nextnode(_Pnode) = this->_Prevnode(_Pnode);
			this->_Prevnode(_Pnode) = _Pnext;

			if (_Pnext == _Phead)
				break;
			_Pnode = _Pnext;
			}
		}

	void _Splice(const_iterator _Where,
		_Myt& _Right, const_iterator _First, const_iterator _Last,
		size_type _Count)
		{	
 























































#line 1831 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\list"
		if (this->_Getal() != _Right._Getal())
			::std:: terminate();
 #line 1834 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\list"

		_Splice_same(_Where, _Right, _First, _Last, _Count);
		}

	void _Splice_same(const_iterator _Where,
		_Myt& _Right, const_iterator _First, const_iterator _Last,
		size_type _Count)
		{	
		if (this != &_Right)
			{	
			_Incsize(_Count);
			_Right._Mysize -= _Count;
			}
		this->_Nextnode(this->_Prevnode(_First._Mynode())) =
			_Last._Mynode();
		this->_Nextnode(this->_Prevnode(_Last._Mynode())) =
			_Where._Mynode();
		this->_Nextnode(this->_Prevnode(_Where._Mynode())) =
			_First._Mynode();

		_Nodeptr _Pnode = this->_Prevnode(_Where._Mynode());
		this->_Prevnode(_Where._Mynode()) =
			this->_Prevnode(_Last._Mynode());
		this->_Prevnode(_Last._Mynode()) =
			this->_Prevnode(_First._Mynode());
		this->_Prevnode(_First._Mynode()) = _Pnode;
		}

	void _Unchecked_splice(_Unchecked_const_iterator _Where,
		_Unchecked_const_iterator _First,
		_Unchecked_const_iterator _Last)
		{	
		this->_Nextnode(this->_Prevnode(_First._Mynode())) =
			_Last._Mynode();
		this->_Nextnode(this->_Prevnode(_Last._Mynode())) =
			_Where._Mynode();
		this->_Nextnode(this->_Prevnode(_Where._Mynode())) =
			_First._Mynode();

		_Nodeptr _Pnode = this->_Prevnode(_Where._Mynode());
		this->_Prevnode(_Where._Mynode()) =
			this->_Prevnode(_Last._Mynode());
		this->_Prevnode(_Last._Mynode()) =
			this->_Prevnode(_First._Mynode());
		this->_Prevnode(_First._Mynode()) = _Pnode;
		}

	void _Tidy()
		{	
		clear();
		}

	void _Insert_n(_Unchecked_const_iterator _Where,
		size_type _Count, const _Ty& _Val)
		{	
		size_type _Countsave = _Count;

		try {
		for (; 0 < _Count; --_Count)
			_Insert(_Where, _Val);
		} catch (...) {
		for (; _Count < _Countsave; ++_Count)
			{	
			_Unchecked_const_iterator _Before = _Where;
			_Unchecked_erase(--_Before);
			}
		throw;
		}
		}

	void _Incsize(size_type _Count)
		{	
		if (max_size() - this->_Mysize - 1 < _Count)
			_Xlength_error("list<T> too long");
		this->_Mysize += _Count;
		}

 















#line 1928 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\list"
	};

		

template<class _Ty,
	class _Alloc> inline
	void swap(list<_Ty, _Alloc>& _Left, list<_Ty, _Alloc>& _Right)
	{	
	_Left.swap(_Right);
	}

template<class _Ty,
	class _Alloc> inline
	bool operator==(const list<_Ty, _Alloc>& _Left,
		const list<_Ty, _Alloc>& _Right)
	{	
	return (_Left.size() == _Right.size()
		&& equal(_Left.begin(), _Left.end(), _Right.begin()));
	}

template<class _Ty,
	class _Alloc> inline
	bool operator!=(const list<_Ty, _Alloc>& _Left,
		const list<_Ty, _Alloc>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Ty,
	class _Alloc> inline
	bool operator<(const list<_Ty, _Alloc>& _Left,
		const list<_Ty, _Alloc>& _Right)
	{	
	return (lexicographical_compare(_Left.begin(), _Left.end(),
		_Right.begin(), _Right.end()));
	}

template<class _Ty,
	class _Alloc> inline
	bool operator>(const list<_Ty, _Alloc>& _Left,
		const list<_Ty, _Alloc>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _Ty,
	class _Alloc> inline
	bool operator<=(const list<_Ty, _Alloc>& _Left,
		const list<_Ty, _Alloc>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _Ty,
	class _Alloc> inline
	bool operator>=(const list<_Ty, _Alloc>& _Left,
		const list<_Ty, _Alloc>& _Right)
	{	
	return (!(_Left < _Right));
	}
}
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 1993 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\list"
#line 1994 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\list"























#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/unit_test_suite_impl.hpp"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vector"

#pragma once






 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 #pragma warning(disable: 4127)
 #pragma warning(disable: 4244)

namespace std {
 

		
template<class _Myvec>
	class _Vector_const_iterator
		: public _Iterator012<random_access_iterator_tag,
			typename _Myvec::value_type,
			typename _Myvec::difference_type,
			typename _Myvec::const_pointer,
			typename _Myvec::const_reference,
			_Iterator_base>
	{	
public:
	typedef _Vector_const_iterator<_Myvec> _Myiter;
	typedef random_access_iterator_tag iterator_category;

	typedef typename _Myvec::value_type value_type;
	typedef typename _Myvec::difference_type difference_type;
	typedef typename _Myvec::const_pointer pointer;
	typedef typename _Myvec::const_reference reference;
	typedef typename _Myvec::pointer _Tptr;

	_Vector_const_iterator()
		: _Ptr()
		{	
		}

	_Vector_const_iterator(_Tptr _Parg, const _Container_base *_Pvector)
		: _Ptr(_Parg)
		{	
		this->_Adopt(_Pvector);
		}

	typedef pointer _Unchecked_type;

	_Myiter& _Rechecked(_Unchecked_type _Right)
		{	
		this->_Ptr = (_Tptr)_Right;
		return (*this);
		}

	_Unchecked_type _Unchecked() const
		{	
		return (_Unchecked_type(this->_Ptr));
		}

	reference operator*() const
		{	
 









#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vector"





#line 83 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vector"

		;

		return (*this->_Ptr);
		}

	pointer operator->() const
		{	
		return (::std:: pointer_traits<pointer>::pointer_to(**this));
		}

	_Myiter& operator++()
		{	
 








#line 106 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vector"




#line 111 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vector"

		++this->_Ptr;
		return (*this);
		}

	_Myiter operator++(int)
		{	
		_Myiter _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Myiter& operator--()
		{	
 








#line 135 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vector"




#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vector"

		--this->_Ptr;
		return (*this);
		}

	_Myiter operator--(int)
		{	
		_Myiter _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	_Myiter& operator+=(difference_type _Off)
		{	
 








#line 164 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vector"




#line 169 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vector"

		_Ptr += _Off;
		return (*this);
		}

	_Myiter operator+(difference_type _Off) const
		{	
		_Myiter _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Myiter& operator-=(difference_type _Off)
		{	
		return (*this += -_Off);
		}

	_Myiter operator-(difference_type _Off) const
		{	
		_Myiter _Tmp = *this;
		return (_Tmp -= _Off);
		}

	difference_type operator-(const _Myiter& _Right) const
		{	
		_Compat(_Right);
		return (this->_Ptr - _Right._Ptr);
		}

	reference operator[](difference_type _Off) const
		{	
		return (*(*this + _Off));
		}

	bool operator==(const _Myiter& _Right) const
		{	
		_Compat(_Right);
		return (this->_Ptr == _Right._Ptr);
		}

	bool operator!=(const _Myiter& _Right) const
		{	
		return (!(*this == _Right));
		}

	bool operator<(const _Myiter& _Right) const
		{	
		_Compat(_Right);
		return (this->_Ptr < _Right._Ptr);
		}

	bool operator>(const _Myiter& _Right) const
		{	
		return (_Right < *this);
		}

	bool operator<=(const _Myiter& _Right) const
		{	
		return (!(_Right < *this));
		}

	bool operator>=(const _Myiter& _Right) const
		{	
		return (!(*this < _Right));
		}

 










#line 246 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vector"






#line 253 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vector"
	void _Compat(const _Myiter&) const
		{	
		}
 #line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vector"

	_Tptr _Ptr;	
	};

template<class _Myvec> inline
	typename _Vector_const_iterator<_Myvec>::_Unchecked_type
		_Unchecked(_Vector_const_iterator<_Myvec> _Iter)
	{	
	return (_Iter._Unchecked());
	}

template<class _Myvec> inline
	_Vector_const_iterator<_Myvec>&
		_Rechecked(_Vector_const_iterator<_Myvec>& _Iter,
			typename _Vector_const_iterator<_Myvec>
				::_Unchecked_type _Right)
	{	
	return (_Iter._Rechecked(_Right));
	}

template<class _Myvec> inline
	_Vector_const_iterator<_Myvec> operator+(
		typename _Vector_const_iterator<_Myvec>::difference_type _Off,
		_Vector_const_iterator<_Myvec> _Next)
	{	
	return (_Next += _Off);
	}

		
template<class _Myvec>
	class _Vector_iterator
		: public _Vector_const_iterator<_Myvec>
	{	
public:
	typedef _Vector_iterator<_Myvec> _Myiter;
	typedef _Vector_const_iterator<_Myvec> _Mybase;
	typedef random_access_iterator_tag iterator_category;

	typedef typename _Myvec::value_type value_type;
	typedef typename _Myvec::difference_type difference_type;
	typedef typename _Myvec::pointer pointer;
	typedef typename _Myvec::reference reference;

	_Vector_iterator()
		{	
		}

	_Vector_iterator(pointer _Parg, const _Container_base *_Pvector)
		: _Mybase(_Parg, _Pvector)
		{	
		}

	typedef pointer _Unchecked_type;

	_Myiter& _Rechecked(_Unchecked_type _Right)
		{	
		this->_Ptr = _Right;
		return (*this);
		}

	_Unchecked_type _Unchecked() const
		{	
		return (_Unchecked_type(this->_Ptr));
		}

	reference operator*() const
		{	
		return ((reference)**(_Mybase *)this);
		}

	pointer operator->() const
		{	
		return (::std:: pointer_traits<pointer>::pointer_to(**this));
		}

	_Myiter& operator++()
		{	
		++*(_Mybase *)this;
		return (*this);
		}

	_Myiter operator++(int)
		{	
		_Myiter _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Myiter& operator--()
		{	
		--*(_Mybase *)this;
		return (*this);
		}

	_Myiter operator--(int)
		{	
		_Myiter _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	_Myiter& operator+=(difference_type _Off)
		{	
		*(_Mybase *)this += _Off;
		return (*this);
		}

	_Myiter operator+(difference_type _Off) const
		{	
		_Myiter _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Myiter& operator-=(difference_type _Off)
		{	
		return (*this += -_Off);
		}

	_Myiter operator-(difference_type _Off) const
		{	
		_Myiter _Tmp = *this;
		return (_Tmp -= _Off);
		}

	difference_type operator-(const _Mybase& _Right) const
		{	
		return (*(_Mybase *)this - _Right);
		}

	reference operator[](difference_type _Off) const
		{	
		return (*(*this + _Off));
		}
	};

template<class _Myvec> inline
	typename _Vector_iterator<_Myvec>::_Unchecked_type
		_Unchecked(_Vector_iterator<_Myvec> _Iter)
	{	
	return (_Iter._Unchecked());
	}

template<class _Myvec> inline
	_Vector_iterator<_Myvec>&
		_Rechecked(_Vector_iterator<_Myvec>& _Iter,
			typename _Vector_iterator<_Myvec>
				::_Unchecked_type _Right)
	{	
	return (_Iter._Rechecked(_Right));
	}

template<class _Myvec> inline
	_Vector_iterator<_Myvec> operator+(
		typename _Vector_iterator<_Myvec>::difference_type _Off,
		_Vector_iterator<_Myvec> _Next)
	{	
	return (_Next += _Off);
	}

		
template<class _Value_type,
	class _Size_type,
	class _Difference_type,
	class _Pointer,
	class _Const_pointer,
	class _Reference,
	class _Const_reference>
	struct _Vec_iter_types
	{	
	typedef _Value_type value_type;
	typedef _Size_type size_type;
	typedef _Difference_type difference_type;
	typedef _Pointer pointer;
	typedef _Const_pointer const_pointer;
	typedef _Reference reference;
	typedef _Const_reference const_reference;
	};

template<class _Ty,
	class _Alloc0>
	struct _Vec_base_types
	{	
	typedef _Alloc0 _Alloc;
	typedef _Vec_base_types<_Ty, _Alloc> _Myt;

	typedef _Wrap_alloc<_Alloc> _Alty0;
	typedef typename _Alty0::template rebind<_Ty>::other _Alty;


	typedef typename _Alty::pointer _Tptr;
	typedef typename _Alty::template rebind<_Tptr>::other _Alpty;

	typedef typename _If<_Is_simple_alloc<_Alty>::value,
		_Simple_types<typename _Alty::value_type>,
		_Vec_iter_types<typename _Alty::value_type,
			typename _Alty::size_type,
			typename _Alty::difference_type,
			typename _Alty::pointer,
			typename _Alty::const_pointer,
			typename _Alty::reference,
			typename _Alty::const_reference> >::type
		_Val_types;
	};

		
template<class _Val_types>
	class _Vector_val
		: public _Container_base
	{	
public:
	typedef _Vector_val<_Val_types> _Myt;

	typedef typename _Val_types::value_type value_type;
	typedef typename _Val_types::size_type size_type;
	typedef typename _Val_types::difference_type difference_type;
	typedef typename _Val_types::pointer pointer;
	typedef typename _Val_types::const_pointer const_pointer;
	typedef typename _Val_types::reference reference;
	typedef typename _Val_types::const_reference const_reference;

	typedef _Vector_iterator<_Myt> iterator;
	typedef _Vector_const_iterator<_Myt> const_iterator;

	_Vector_val()
		{	
		_Myfirst = pointer();
		_Mylast = pointer();
		_Myend = pointer();
		}

	pointer _Myfirst;	
	pointer _Mylast;	
	pointer _Myend;	
	};

		
template<bool _Al_has_storage,
	class _Alloc_types>
	class _Vector_alloc
		: public _Vector_val<typename _Alloc_types::_Val_types>
	{	
public:
	typename _Alloc_types::_Alty _Alval;	

	typedef _Vector_alloc<_Al_has_storage, _Alloc_types> _Myt;
	typedef typename _Alloc_types::_Alloc _Alloc;
	typedef typename _Alloc_types::_Alty _Alty;

 
	_Vector_alloc(const _Alloc& _Al = _Alloc())
		: _Alval(_Al)
		{	
		}

	void _Change_alloc(const _Alty& _Al)
		{	
		this->_Alval = _Al;
		}

	void _Swap_alloc(_Myt& _Right)
		{	
		_Swap_adl(this->_Alval, _Right._Alval);
		}

 










































#line 565 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vector"

	_Alty& _Getal()
		{	
		return (this->_Alval);
		}

	const _Alty& _Getal() const
		{	
		return (this->_Alval);
		}
	};

template<class _Alloc_types>
	class _Vector_alloc<false, _Alloc_types>
		: public _Vector_val<typename _Alloc_types::_Val_types>
	{	
public:
	typedef _Vector_alloc<false, _Alloc_types> _Myt;
	typedef typename _Alloc_types::_Alloc _Alloc;

	typedef typename _Alloc_types::_Alty _Alty;

 
	_Vector_alloc(const _Alloc& = _Alloc())
		{	
		}

	void _Change_alloc(const _Alty&)
		{	
		}

	void _Swap_alloc(_Myt&)
		{	
		}

 





































#line 639 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vector"

	_Alty _Getal() const
		{	
		return (_Alty());
		}
	};

		
template<class _Ty,
	class _Alloc = allocator<_Ty> >
	class vector
		: public _Vector_alloc<!is_empty<_Alloc>::value,
			_Vec_base_types<_Ty, _Alloc> >
	{	
public:
	typedef vector<_Ty, _Alloc> _Myt;
	typedef _Vector_alloc<!is_empty<_Alloc>::value,
		_Vec_base_types<_Ty, _Alloc> > _Mybase;
	typedef _Alloc allocator_type;

	typedef typename _Mybase::_Alty _Alty;

	typedef typename _Mybase::value_type value_type;
	typedef typename _Mybase::size_type size_type;
	typedef typename _Mybase::difference_type difference_type;
	typedef typename _Mybase::pointer pointer;
	typedef typename _Mybase::const_pointer const_pointer;
	typedef typename _Mybase::reference reference;
	typedef typename _Mybase::const_reference const_reference;

 
 

	typedef typename _Mybase::iterator iterator;
	typedef typename _Mybase::const_iterator const_iterator;

	typedef ::std:: reverse_iterator<iterator> reverse_iterator;
	typedef ::std:: reverse_iterator<const_iterator> const_reverse_iterator;

	vector()
		: _Mybase()
		{	
		}

	explicit vector(const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		}

	explicit vector(size_type _Count)
		: _Mybase()
		{	
		if (_Buy(_Count))
			{	
			_Alty _Alval(this->_Getal());
			try {
			_Uninitialized_default_fill_n(this->_Myfirst, _Count, _Alval);
			this->_Mylast += _Count;
			} catch (...) {
			_Tidy();
			throw;
			}
			}
		}

	vector(size_type _Count, const value_type& _Val)
		: _Mybase()
		{	
		_Construct_n(_Count, ::std:: addressof(_Val));
		}

	vector(size_type _Count, const value_type& _Val, const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		_Construct_n(_Count, ::std:: addressof(_Val));
		}

	vector(const _Myt& _Right)

		: _Mybase(_Right._Getal().select_on_container_copy_construction())


		{	
		if (_Buy(_Right.size()))
			try {
			this->_Mylast = _Ucopy(_Right.begin(), _Right.end(),
				this->_Myfirst);
			} catch (...) {
			_Tidy();
			throw;
			}
		}

	vector(const _Myt& _Right, const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		if (_Buy(_Right.size()))
			try {
			this->_Mylast = _Ucopy(_Right.begin(), _Right.end(),
				this->_Myfirst);
			} catch (...) {
			_Tidy();
			throw;
			}
		}

	template<class _Iter,
		class = typename enable_if<_Is_iterator<_Iter>::value,
			void>:: type>
		vector(_Iter _First, _Iter _Last)
		: _Mybase()
		{	
		_Construct(_First, _Last);
		}

	template<class _Iter,
		class = typename enable_if<_Is_iterator<_Iter>::value,
			void>:: type>
		vector(_Iter _First, _Iter _Last, const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		_Construct(_First, _Last);
		}

	template<class _Iter>
		void _Construct(_Iter _First, _Iter _Last)
		{	
		_Construct(_First, _Last, _Iter_cat(_First));
		}

	template<class _Iter>
		void _Construct(_Iter _First, _Iter _Last, input_iterator_tag)
		{	
		try {

		for (; _First != _Last; ++_First)
			emplace_back(*_First);

		} catch (...) {
		_Tidy();
		throw;
		}
		}

	template<class _Iter>
		void _Construct(_Iter _First, _Iter _Last, forward_iterator_tag)
		{	
		if (_Buy(::std:: distance(_First, _Last)))
			{	
			try {
			this->_Mylast = _Ucopy(_First, _Last, this->_Myfirst);
			} catch (...) {
			_Tidy();
			throw;
			}
			}
		}

	void _Construct_n(size_type _Count, const value_type *_Pval)
		{	
		if (_Buy(_Count))
			{	
			try {
			this->_Mylast = _Ufill(this->_Myfirst, _Count, _Pval);
			} catch (...) {
			_Tidy();
			throw;
			}
			}
		}

	vector(_Myt&& _Right)
		: _Mybase(_Right._Getal())
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right), true_type());
		}

	vector(_Myt&& _Right, const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		}

	_Myt& operator=(_Myt&& _Right)
		{	
		if (this != &_Right)
			{	
			_Tidy();
			if (_Alty::propagate_on_container_move_assignment::value
				&& this->_Getal() != _Right._Getal())
				this->_Change_alloc(_Right._Getal());

			_Assign_rv(::std:: forward<_Myt>(_Right));
			}
		return (*this);
		}

	void _Assign_rv(_Myt&& _Right, true_type)
		{	
		this->_Swap_all((_Myt&)_Right);
		this->_Myfirst = _Right._Myfirst;
		this->_Mylast = _Right._Mylast;
		this->_Myend = _Right._Myend;

		_Right._Myfirst = pointer();
		_Right._Mylast = pointer();
		_Right._Myend = pointer();
		}

	void _Assign_rv(_Myt&& _Right, false_type)
		{	
		if (get_allocator() == _Right.get_allocator())
			_Assign_rv(::std:: forward<_Myt>(_Right), true_type());
		else
			_Construct(::std:: make_move_iterator(_Right.begin()),
				::std:: make_move_iterator(_Right.end()));
		}

	void _Assign_rv(_Myt&& _Right)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right),
			typename _Alty::propagate_on_container_move_assignment());
		}


	void push_back(value_type&& _Val)
		{	
		if (_Inside(::std:: addressof(_Val)))
			{	
			size_type _Idx = ::std:: addressof(_Val) - this->_Myfirst;
			if (this->_Mylast == this->_Myend)
				_Reserve(1);
			_Orphan_range(this->_Mylast, this->_Mylast);
			this->_Getal().construct(this->_Mylast,
				::std:: forward<value_type>(this->_Myfirst[_Idx]));
			++this->_Mylast;
			}
		else
			{	
			if (this->_Mylast == this->_Myend)
				_Reserve(1);
			_Orphan_range(this->_Mylast, this->_Mylast);
			this->_Getal().construct(this->_Mylast,
				::std:: forward<value_type>(_Val));
			++this->_Mylast;
			}
		}

	iterator insert(const_iterator _Where, _Ty&& _Val)
		{	
		return (emplace(_Where, ::std:: move(_Val)));
		}

	template<class... _Valty>
		void emplace_back(_Valty&&... _Val)
		{	
		if (this->_Mylast == this->_Myend)
			_Reserve(1);
		_Orphan_range(this->_Mylast, this->_Mylast);
		this->_Getal().construct(this->_Mylast,
			::std:: forward<_Valty>(_Val)...);
		++this->_Mylast;
		}

	template<class... _Valty>
		iterator emplace(const_iterator _Where, _Valty&&... _Val)
		{	
		size_type _Off = (_Where)._Ptr - this->_Myfirst;

 


#line 912 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vector"

		emplace_back(::std:: forward<_Valty>(_Val)...);
		::std:: rotate(begin() + _Off, end() - 1, end());
		return (begin() + _Off);
		}


	vector(::std:: initializer_list<value_type> _Ilist,
		const _Alloc& _Al = allocator_type())
		: _Mybase(_Al)
		{	
		insert(begin(), _Ilist.begin(), _Ilist.end());
		}

	_Myt& operator=(::std:: initializer_list<value_type> _Ilist)
		{	
		assign(_Ilist.begin(), _Ilist.end());
		return (*this);
		}

	void assign(::std:: initializer_list<value_type> _Ilist)
		{	
		assign(_Ilist.begin(), _Ilist.end());
		}

	iterator insert(const_iterator _Where,
		::std:: initializer_list<value_type> _Ilist)
		{	
		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
		}

	~vector() throw ()
		{	
		_Tidy();
		}

	_Myt& operator=(const _Myt& _Right)
		{	
		if (this != &_Right)
			{	
			if (this->_Getal() != _Right._Getal()
				&& _Alty::propagate_on_container_copy_assignment::value)
				{	
				_Tidy();
				this->_Change_alloc(_Right._Getal());
				}

			this->_Orphan_all();

			if (_Right.empty())
				clear();	
			else if (_Right.size() <= size())
				{	
				pointer _Ptr = _Copy_impl(_Right._Myfirst,
					_Right._Mylast, this->_Myfirst);	
				_Destroy(_Ptr, this->_Mylast);	
				this->_Mylast = this->_Myfirst + _Right.size();
				}
			else if (_Right.size() <= capacity())
				{	
				pointer _Ptr = _Right._Myfirst + size();
				_Copy_impl(_Right._Myfirst,
					_Ptr, this->_Myfirst);
				this->_Mylast = _Ucopy(_Ptr, _Right._Mylast, this->_Mylast);
				}
			else
				{	
				if (this->_Myfirst != pointer())
					{	
					_Destroy(this->_Myfirst, this->_Mylast);
					this->_Getal().deallocate(this->_Myfirst,
						this->_Myend - this->_Myfirst);
					}
				if (_Buy(_Right.size()))
					try {
					this->_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
						this->_Myfirst);
					} catch (...) {
					_Tidy();
					throw;
					}
				}
			}
		return (*this);
		}

	void reserve(size_type _Count)
		{	
		if (capacity() < _Count)
			{	
			if (max_size() < _Count)
				_Xlen();
			_Reallocate(_Count);
			}
		}

	size_type capacity() const throw ()
		{	
		return (this->_Myend - this->_Myfirst);
		}

	size_type _Unused_capacity() const throw ()
		{	
		return (this->_Myend - this->_Mylast);
		}

	size_type _Has_unused_capacity() const throw ()
		{	
		return (this->_Myend != this->_Mylast);
		}

	iterator begin() throw ()
		{	
		return (iterator(this->_Myfirst, this));
		}

	const_iterator begin() const throw ()
		{	
		return (const_iterator(this->_Myfirst, this));
		}

	iterator end() throw ()
		{	
		return (iterator(this->_Mylast, this));
		}

	const_iterator end() const throw ()
		{	
		return (const_iterator(this->_Mylast, this));
		}

	iterator _Make_iter(const_iterator _Where) const
		{	
		return (iterator(_Where._Ptr, this));
		}

	reverse_iterator rbegin() throw ()
		{	
		return (reverse_iterator(end()));
		}

	const_reverse_iterator rbegin() const throw ()
		{	
		return (const_reverse_iterator(end()));
		}

	reverse_iterator rend() throw ()
		{	
		return (reverse_iterator(begin()));
		}

	const_reverse_iterator rend() const throw ()
		{	
		return (const_reverse_iterator(begin()));
		}

	const_iterator cbegin() const throw ()
		{	
		return (((const _Myt *)this)->begin());
		}

	const_iterator cend() const throw ()
		{	
		return (((const _Myt *)this)->end());
		}

	const_reverse_iterator crbegin() const throw ()
		{	
		return (((const _Myt *)this)->rbegin());
		}

	const_reverse_iterator crend() const throw ()
		{	
		return (((const _Myt *)this)->rend());
		}

	void shrink_to_fit()
		{	
		if (_Has_unused_capacity())
			{	
			if (empty())
				_Tidy();
			else
				_Reallocate(size());
			}
		}

	void resize(size_type _Newsize)
		{	
		if (_Newsize < size())
			_Pop_back_n(size() - _Newsize);
		else if (size() < _Newsize)
			{	
			_Alty _Alval(this->_Getal());
			_Reserve(_Newsize - size());
			try {
			_Uninitialized_default_fill_n(this->_Mylast, _Newsize - size(),
				_Alval);
			} catch (...) {
			_Tidy();
			throw;
			}
			this->_Mylast += _Newsize - size();
			}
		}

	void resize(size_type _Newsize, const value_type& _Val)
		{	
		if (_Newsize < size())
			_Pop_back_n(size() - _Newsize);
		else if (size() < _Newsize)
			{	
			const value_type *_Ptr = ::std:: addressof(_Val);

			if (_Inside(_Ptr))
				{	
				const difference_type _Idx = _Ptr
					- ::std:: addressof(*this->_Myfirst);
				_Reserve(_Newsize - size());
				_Ptr = ::std:: addressof(*this->_Myfirst) + _Idx;
				}
			else
				_Reserve(_Newsize - size());

			try {
			_Ufill(this->_Mylast, _Newsize - size(), _Ptr);
			} catch (...) {
			_Tidy();
			throw;
			}
			this->_Mylast += _Newsize - size();
			}
		}

	size_type size() const throw ()
		{	
		return (this->_Mylast - this->_Myfirst);
		}

	size_type max_size() const throw ()
		{	
		return (this->_Getal().max_size());
		}

	bool empty() const throw ()
		{	
		return (this->_Myfirst == this->_Mylast);
		}

	_Alloc get_allocator() const throw ()
		{	
		return (this->_Getal());
		}

	const_reference at(size_type _Pos) const
		{	
		if (size() <= _Pos)
			_Xran();
		return (*(this->_Myfirst + _Pos));
		}

	reference at(size_type _Pos)
		{	
		if (size() <= _Pos)
			_Xran();
		return (*(this->_Myfirst + _Pos));
		}

	const_reference operator[](size_type _Pos) const
		{	
 






#line 1190 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vector"

#line 1192 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vector"

		return (*(this->_Myfirst + _Pos));
		}

	reference operator[](size_type _Pos)
		{	
 






#line 1206 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vector"

#line 1208 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vector"

		return (*(this->_Myfirst + _Pos));
		}

	pointer data() throw ()
		{	
		return (this->_Myfirst);
		}

	const_pointer data() const throw ()
		{	
		return (this->_Myfirst);
		}

	reference front()
		{	
		return (*begin());
		}

	const_reference front() const
		{	
		return (*begin());
		}

	reference back()
		{	
		return (*(end() - 1));
		}

	const_reference back() const
		{	
		return (*(end() - 1));
		}

	void push_back(const value_type& _Val)
		{	
		if (_Inside(::std:: addressof(_Val)))
			{	
			size_type _Idx = ::std:: addressof(_Val) - this->_Myfirst;
			if (this->_Mylast == this->_Myend)
				_Reserve(1);
			_Orphan_range(this->_Mylast, this->_Mylast);
			this->_Getal().construct(this->_Mylast,
				this->_Myfirst[_Idx]);
			++this->_Mylast;
			}
		else
			{	
			if (this->_Mylast == this->_Myend)
				_Reserve(1);
			_Orphan_range(this->_Mylast, this->_Mylast);
			this->_Getal().construct(this->_Mylast,
				_Val);
			++this->_Mylast;
			}
		}

 












#line 1279 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vector"
	void pop_back()
		{	
		this->_Getal().destroy(this->_Mylast - 1);
		--this->_Mylast;
		}
 #line 1285 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vector"

	template<class _Iter>
		typename enable_if<_Is_iterator<_Iter>::value,
			void>::type
		assign(_Iter _First, _Iter _Last)
		{	
		clear();
		_Assign(_First, _Last, _Iter_cat(_First));
		}

	template<class _Iter>
		void _Assign(_Iter _First, _Iter _Last, input_iterator_tag)
		{	
		for (; _First != _Last; ++_First)
			emplace_back(*_First);
		}

	template<class _Iter>
		void _Assign(_Iter _First, _Iter _Last, forward_iterator_tag)
		{	
		if (_First == _Last)
			return;	

		size_type _Newsize = ::std:: distance(_First, _Last);

		if (capacity() < _Newsize)
			{	
			size_type _Newcapacity = _Grow_to(_Newsize);
			_Tidy();
			_Buy(_Newcapacity);
			}

		this->_Mylast = _Ucopy(_First, _Last, this->_Myfirst);
		}

	void assign(size_type _Count, const value_type& _Val)
		{	
		clear();
		insert(begin(), _Count, _Val);
		}

	iterator insert(const_iterator _Where, const _Ty& _Val)
		{	
		return (_Insert_n(_Where, (size_type)1, _Val));
		}

	iterator insert(const_iterator _Where, size_type _Count,
		const _Ty& _Val)
		{	
		return (_Insert_n(_Where, _Count, _Val));
		}

	template<class _Iter>
		typename enable_if<_Is_iterator<_Iter>::value,
			iterator>::type
		insert(const_iterator _Where, _Iter _First, _Iter _Last)
		{	
		size_type _Off = (_Where)._Ptr - this->_Myfirst;
		_Insert(_Where, _First, _Last, _Iter_cat(_First));
		return (begin() + _Off);
		}

	template<class _Iter>
		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
			input_iterator_tag)
		{	
		size_type _Off = (_Where)._Ptr - this->_Myfirst;

 


#line 1357 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vector"

		if (_First != _Last)
			{	
			size_type _Oldsize = size();

			try {
			for (; _First != _Last; ++_First)
				push_back(*_First);	

			} catch (...) {
			erase(begin() + _Oldsize, end());
			throw;
			}

			::std:: rotate(begin() + _Off, begin() + _Oldsize, end());
			}
		}

	template<class _Iter>
		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
			forward_iterator_tag)
		{	
 





#line 1386 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vector"

		size_type _Count = 0;
		_Distance(_First, _Last, _Count);

		if (_Count == 0)
			;
		else if (_Unused_capacity() < _Count)
			{	
			if (max_size() - size() < _Count)
				_Xlen();	

			size_type _Capacity = _Grow_to(size() + _Count);
			pointer _Newvec = this->_Getal().allocate(_Capacity);
			pointer _Ptr = _Newvec;

			try {
			_Ptr = _Umove(this->_Myfirst, (_Where)._Ptr,
				_Newvec);	
			_Ptr = _Ucopy(_First, _Last, _Ptr);	
			_Umove((_Where)._Ptr, this->_Mylast,
				_Ptr);	
			} catch (...) {
			_Destroy(_Newvec, _Ptr);
			this->_Getal().deallocate(_Newvec, _Capacity);
			throw;
			}

			_Count += size();
			if (this->_Myfirst != pointer())
				{	
				_Destroy(this->_Myfirst, this->_Mylast);
				this->_Getal().deallocate(this->_Myfirst,
					this->_Myend - this->_Myfirst);
				}

			this->_Orphan_all();
			this->_Myend = _Newvec + _Capacity;
			this->_Mylast = _Newvec + _Count;
			this->_Myfirst = _Newvec;
			}
		else
			{	
			_Ucopy(_First, _Last, this->_Mylast);
			::std:: rotate((_Where)._Ptr, this->_Mylast,
				this->_Mylast + _Count);
			this->_Mylast += _Count;
			_Orphan_range((_Where)._Ptr, this->_Mylast);
			}
		}

 













#line 1451 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vector"
	iterator erase(const_iterator _Where)
		{	
		_Move((_Where)._Ptr + 1, this->_Mylast,
			(_Where)._Ptr);
		_Destroy(this->_Mylast - 1, this->_Mylast);
		--this->_Mylast;
		return (_Make_iter(_Where));
		}
 #line 1460 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vector"

	iterator erase(const_iterator _First_arg,
		const_iterator _Last_arg)
		{	
		if (_First_arg == begin() && _Last_arg == end())
			clear();
		else if (_First_arg != _Last_arg)
			{	
			iterator _First = _Make_iter(_First_arg);
			iterator _Last = _Make_iter(_Last_arg);

			if (_First != _Last)
				{	
 








#line 1483 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vector"
				pointer _Ptr = _Move((_Last)._Ptr, this->_Mylast,
					(_First)._Ptr);
 #line 1486 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vector"

				_Destroy(_Ptr, this->_Mylast);
				this->_Mylast = _Ptr;
				}
			}
		return (_Make_iter(_First_arg));
		}

	void _Pop_back_n(size_type _Count)
		{	
		pointer _Ptr = this->_Mylast - _Count;

 

#line 1501 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vector"

		_Destroy(_Ptr, this->_Mylast);
		this->_Mylast = _Ptr;
		}

	void clear() throw ()
		{	
		this->_Orphan_all();
		_Destroy(this->_Myfirst, this->_Mylast);
		this->_Mylast = this->_Myfirst;
		}

	void swap(_Myt& _Right)
		{	
		if (this == &_Right)
			;	
		else if (this->_Getal() == _Right._Getal())
			{	
			this->_Swap_all(_Right);
			_Swap_adl(this->_Myfirst, _Right._Myfirst);
			_Swap_adl(this->_Mylast, _Right._Mylast);
			_Swap_adl(this->_Myend, _Right._Myend);
			}

		else if (_Alty::propagate_on_container_swap::value)
			{	
			this->_Swap_alloc(_Right);
			_Swap_adl(this->_Myfirst, _Right._Myfirst);
			_Swap_adl(this->_Mylast, _Right._Mylast);
			_Swap_adl(this->_Myend, _Right._Myend);
			}

		else
			{	
 


#line 1539 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vector"
			::std:: terminate();
 #line 1541 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vector"
			}
		}

protected:
	bool _Buy(size_type _Capacity)
		{	
		this->_Myfirst = pointer();
		this->_Mylast = pointer();
		this->_Myend = pointer();

		if (_Capacity == 0)
			return (false);
		else if (max_size() < _Capacity)
			_Xlen();	
		else
			{	
			this->_Myfirst = this->_Getal().allocate(_Capacity);
			this->_Mylast = this->_Myfirst;
			this->_Myend = this->_Myfirst + _Capacity;
			}
		return (true);
		}

	void _Destroy(pointer _First, pointer _Last)
		{	
		_Alty _Alval(this->_Getal());
		_Destroy_range(_First, _Last, _Alval);
		}

	size_type _Grow_to(size_type _Count) const
		{	
		size_type _Capacity = capacity();

		_Capacity = max_size() - _Capacity / 2 < _Capacity
			? 0 : _Capacity + _Capacity / 2;	
		if (_Capacity < _Count)
			_Capacity = _Count;
		return (_Capacity);
		}

	bool _Inside(const value_type *_Ptr) const
		{	
		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);
		}

	void _Reallocate(size_type _Count)
		{	
		pointer _Ptr = this->_Getal().allocate(_Count);

		try {
		_Umove(this->_Myfirst, this->_Mylast, _Ptr);
		} catch (...) {
		this->_Getal().deallocate(_Ptr, _Count);
		throw;
		}

		size_type _Size = size();
		if (this->_Myfirst != pointer())
			{	
			_Destroy(this->_Myfirst, this->_Mylast);
			this->_Getal().deallocate(this->_Myfirst,
				this->_Myend - this->_Myfirst);
			}

		this->_Orphan_all();
		this->_Myend = _Ptr + _Count;
		this->_Mylast = _Ptr + _Size;
		this->_Myfirst = _Ptr;
		}

	void _Reserve(size_type _Count)
		{	
		if (_Unused_capacity() < _Count)
			{	
			if (max_size() - size() < _Count)
				_Xlen();
			_Reallocate(_Grow_to(size() + _Count));
			}
		}

	void _Tidy()
		{	
		if (this->_Myfirst != pointer())
			{	
			this->_Orphan_all();
			_Destroy(this->_Myfirst, this->_Mylast);
			this->_Getal().deallocate(this->_Myfirst,
				this->_Myend - this->_Myfirst);
			this->_Myfirst = pointer();
			this->_Mylast = pointer();
			this->_Myend = pointer();
			}
		}

	template<class _Iter>
		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)
		{	
		_Alty _Alval(this->_Getal());
		return (_Uninitialized_copy(_First, _Last,
			_Ptr, _Alval));
		}

	template<class _Iter>
		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)
		{	
		_Alty _Alval(this->_Getal());
		return (_Uninitialized_move(_First, _Last,
			_Ptr, _Alval));
		}

	iterator _Insert_n(const_iterator _Where,
		size_type _Count, const value_type& _Val)
		{	
 




#line 1660 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vector"

		size_type _Off = (_Where)._Ptr - this->_Myfirst;
		if (_Count == 0)
			;
		else if (_Unused_capacity() < _Count)
			{	
			if (max_size() - size() < _Count)
				_Xlen();	

			size_type _Capacity = _Grow_to(size() + _Count);
			pointer _Newvec = this->_Getal().allocate(_Capacity);
			size_type _Whereoff = (_Where)._Ptr - this->_Myfirst;
			int _Ncopied = 0;

			try {
			_Ufill(_Newvec + _Whereoff, _Count,
				::std:: addressof(_Val));	
			++_Ncopied;
			_Umove(this->_Myfirst, (_Where)._Ptr,
				_Newvec);	
			++_Ncopied;
			_Umove((_Where)._Ptr, this->_Mylast,
				_Newvec + (_Whereoff + _Count));	
			} catch (...) {
			if (1 < _Ncopied)
				_Destroy(_Newvec, _Newvec + _Whereoff);
			if (0 < _Ncopied)
				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
			this->_Getal().deallocate(_Newvec, _Capacity);
			throw;
			}

			_Count += size();
			if (this->_Myfirst != pointer())
				{	
				_Destroy(this->_Myfirst, this->_Mylast);
				this->_Getal().deallocate(this->_Myfirst,
					this->_Myend - this->_Myfirst);
				}

			this->_Orphan_all();
			this->_Myend = _Newvec + _Capacity;
			this->_Mylast = _Newvec + _Count;
			this->_Myfirst = _Newvec;
			}
		else if ((size_type)(this->_Mylast - (_Where)._Ptr)
			< _Count)
			{	
			value_type _Tmp = _Val;	

			_Umove((_Where)._Ptr, this->_Mylast,
				(_Where)._Ptr + _Count);	

			try {
			_Ufill(this->_Mylast,
				_Count - (this->_Mylast - (_Where)._Ptr),
				::std:: addressof(_Tmp));	
			} catch (...) {
			_Destroy((_Where)._Ptr + _Count,
				this->_Mylast + _Count);
			throw;
			}

			this->_Mylast += _Count;
			_Orphan_range((_Where)._Ptr, this->_Mylast);
			::std:: fill((_Where)._Ptr, this->_Mylast - _Count,
				_Tmp);	
			}
		else
			{	
			value_type _Tmp = _Val;	

			pointer _Oldend = this->_Mylast;
			this->_Mylast = _Umove(_Oldend - _Count, _Oldend,
				this->_Mylast);	

			_Orphan_range((_Where)._Ptr, this->_Mylast);
			_Copy_backward((_Where)._Ptr, _Oldend - _Count,
				_Oldend);	
			::std:: fill((_Where)._Ptr,
				(_Where)._Ptr + _Count, _Tmp);	
			}
		return (begin() + _Off);
		}

	pointer _Ufill(pointer _Ptr, size_type _Count, const value_type *_Pval)
		{	
		_Alty _Alval(this->_Getal());
		_Uninitialized_fill_n(_Ptr, _Count, _Pval, _Alval);
		return (_Ptr + _Count);
		}

	__declspec(noreturn) void _Xlen() const
		{	
		_Xlength_error("vector<T> too long");
		}

	__declspec(noreturn) void _Xran() const
		{	
		_Xout_of_range("invalid vector<T> subscript");
		}

 















#line 1779 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vector"
	void _Orphan_range(pointer, pointer) const
		{	
		}
 #line 1783 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vector"
	};

		

template<class _Ty,
	class _Alloc> inline
	void swap(vector<_Ty, _Alloc>& _Left, vector<_Ty, _Alloc>& _Right)
	{	
	_Left.swap(_Right);
	}

template<class _Ty,
	class _Alloc> inline
	bool operator==(const vector<_Ty, _Alloc>& _Left,
		const vector<_Ty, _Alloc>& _Right)
	{	
	return (_Left.size() == _Right.size()
		&& equal(_Left.begin(), _Left.end(), _Right.begin()));
	}

template<class _Ty,
	class _Alloc> inline
	bool operator!=(const vector<_Ty, _Alloc>& _Left,
		const vector<_Ty, _Alloc>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Ty,
	class _Alloc> inline
	bool operator<(const vector<_Ty, _Alloc>& _Left,
		const vector<_Ty, _Alloc>& _Right)
	{	
	return (lexicographical_compare(_Left.begin(), _Left.end(),
		_Right.begin(), _Right.end()));
	}

template<class _Ty,
	class _Alloc> inline
	bool operator>(const vector<_Ty, _Alloc>& _Left,
		const vector<_Ty, _Alloc>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _Ty,
	class _Alloc> inline
	bool operator<=(const vector<_Ty, _Alloc>& _Left,
		const vector<_Ty, _Alloc>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _Ty,
	class _Alloc> inline
	bool operator>=(const vector<_Ty, _Alloc>& _Left,
		const vector<_Ty, _Alloc>& _Right)
	{	
	return (!(_Left < _Right));
	}




typedef unsigned int _Vbase;	
const int _VBITS = 8 * sizeof (_Vbase);	

		
template<class _Alloc>
	class _Vb_iter_base
		: public _Iterator012<random_access_iterator_tag,
			_Bool,
			typename _Alloc::difference_type,
			bool *,
			bool,
			_Iterator_base>
	{	
public:
	typedef typename _Alloc::size_type _Sizet;
	typedef vector<_Bool, _Alloc> _Mycont;

	_Vb_iter_base()
		: _Myptr(0), _Myoff(0)
		{	
		}

	_Vb_iter_base(const _Vbase *_Ptr, _Sizet _Off,
		const _Container_base *_Mypvbool)
		: _Myptr(_Ptr), _Myoff(_Off)
		{	
		this->_Adopt(_Mypvbool);
		}

	void _Advance(_Sizet _Off)
		{	
		_Myoff += _Off;
		_Myptr += _Myoff / _VBITS;
		_Myoff %= _VBITS;
		}

	int _Valid(_Sizet _Inc) const
		{	
 







#line 1894 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vector"

		return (-1);
 #line 1897 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vector"
		}

	const _Vbase *_Myptr;
	_Sizet _Myoff;
	};

		
template<class _Alloc>
	class _Vb_reference
		: public _Vb_iter_base<_Alloc>
	{	
	typedef _Vb_iter_base<_Alloc> _Mybase;
	typedef _Vb_reference<_Alloc> _Mytype;

	_Vb_reference() throw ()
		{	
		}

public:
	_Vb_reference(const _Mybase& _Right)
		: _Mybase(_Right._Myptr, _Right._Myoff, _Right._Getcont())
		{	
		}

	_Mytype& operator=(const _Mytype& _Right) throw ()
		{	
		return (*this = bool(_Right));
		}

	_Mytype& operator=(bool _Val) throw ()
		{	
		if (_Val)
			*(_Vbase *)_Getptr() |= _Mask();
		else
			*(_Vbase *)_Getptr() &= (~_Mask());	
		return (*this);
		}

	void flip() throw ()
		{	
		*(_Vbase *)_Getptr() ^= _Mask();
		}

	operator bool() const throw ()
		{	
		return ((*_Getptr() & _Mask()) != 0);
		}

	const _Vbase *_Getptr() const
		{	
 








#line 1957 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vector"


#line 1960 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vector"

		return (this->_Myptr);
		}

protected:
	_Vbase _Mask() const
		{	
		return ((_Vbase)(1 << this->_Myoff));
		}
	};

template<class _Alloc> inline
	void swap(_Vb_reference<_Alloc> _Left,
		_Vb_reference<_Alloc> _Right)
	{	
	bool _Val = _Left;	
	_Left = _Right;
	_Right = _Val;
	}

		
template<class _Alloc>
	class _Vb_const_iterator
		: public _Vb_iter_base<_Alloc>
	{	
public:
	typedef _Vb_iter_base<_Alloc> _Mybase;
	typedef _Vb_const_iterator<_Alloc> _Mytype;

	typedef _Vb_reference<_Alloc> _Reft;
	typedef bool const_reference;

	typedef random_access_iterator_tag iterator_category;
	typedef _Bool value_type;
	typedef typename _Alloc::size_type size_type;
	typedef typename _Alloc::difference_type difference_type;
	typedef const_reference *pointer;
	typedef const_reference reference;

	_Vb_const_iterator()
		{	
		}

	_Vb_const_iterator(const _Vbase *_Ptr, const _Container_base *_Mypvbool)
		: _Mybase(_Ptr, 0, _Mypvbool)
		{	
		}

	const_reference operator*() const
		{	
		return (_Reft(*this));
		}

	_Mytype& operator++()
		{	
		_Inc();
		return (*this);
		}

	_Mytype operator++(int)
		{	
		_Mytype _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Mytype& operator--()
		{	
		_Dec();
		return (*this);
		}

	_Mytype operator--(int)
		{	
		_Mytype _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	_Mytype& operator+=(difference_type _Off)
		{	
		if (_Off < 0 && this->_Myoff < 0 - (size_type)_Off)
			{	
			this->_Myoff += _Off;
			this->_Myptr -= 1 + ((size_type)(-1) - this->_Myoff) / _VBITS;
			this->_Myoff %= _VBITS;
			}
		else
			{	
			this->_Myoff += _Off;
			this->_Myptr += this->_Myoff / _VBITS;
			this->_Myoff %= _VBITS;
			}
		return (*this);
		}

	_Mytype operator+(difference_type _Off) const
		{	
		_Mytype _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Mytype& operator-=(difference_type _Off)
		{	
		return (*this += -_Off);
		}

	_Mytype operator-(difference_type _Off) const
		{	
		_Mytype _Tmp = *this;
		return (_Tmp -= _Off);
		}

	difference_type operator-(
		const _Mytype& _Right) const
		{	
		_Compat(_Right);
		return (_VBITS * (this->_Myptr - _Right._Myptr)
			+ (difference_type)this->_Myoff
			- (difference_type)_Right._Myoff);
		}

	const_reference operator[](difference_type _Off) const
		{	
		return (*(*this + _Off));
		}

	bool operator==(const _Mytype& _Right) const
		{	
		_Compat(_Right);
		return (this->_Myptr == _Right._Myptr
			&& this->_Myoff == _Right._Myoff);
		}

	bool operator!=(const _Mytype& _Right) const
		{	
		return (!(*this == _Right));
		}

	bool operator<(const _Mytype& _Right) const
		{	
		_Compat(_Right);
		return (this->_Myptr < _Right._Myptr
			|| (this->_Myptr == _Right._Myptr
				&& this->_Myoff < _Right._Myoff));
		}

	bool operator>(const _Mytype& _Right) const
		{	
		return (_Right < *this);
		}

	bool operator<=(const _Mytype& _Right) const
		{	
		return (!(_Right < *this));
		}

	bool operator>=(const _Mytype& _Right) const
		{	
		return (!(*this < _Right));
		}

 







#line 2131 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vector"






#line 2138 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vector"
	void _Compat(const _Mytype&) const
		{	
		}
 #line 2142 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vector"

	void _Dec()
		{	
		if (this->_Myoff != 0)
			--this->_Myoff;
		else
			{	
 






#line 2157 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vector"


#line 2160 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vector"

			this->_Myoff = _VBITS - 1;
			--this->_Myptr;
			}
		}

	void _Inc()
		{	
		if (this->_Myoff < _VBITS - 1)
			++this->_Myoff;
		else
			{	
 






#line 2180 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vector"


#line 2183 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vector"

			this->_Myoff = 0;
			++this->_Myptr;
			}
		}
	};

template<class _Alloc> inline
	_Vb_const_iterator<_Alloc> operator+(
		typename _Alloc::difference_type _Off,
		_Vb_const_iterator<_Alloc> _Right)
		{	
		return (_Right += _Off);
		}

template<class _Alloc>
	struct _Is_checked_helper<_Vb_const_iterator<_Alloc> >
		: public true_type
	{	
	};

	
template<class _Alloc>
	class _Vb_iterator
		: public _Vb_const_iterator<_Alloc>
	{	
public:
	typedef _Vb_const_iterator<_Alloc> _Mybase;
	typedef _Vb_iterator<_Alloc> _Mytype;

	typedef _Vb_reference<_Alloc> _Reft;
	typedef bool const_reference;

	typedef random_access_iterator_tag iterator_category;
	typedef _Bool value_type;
	typedef typename _Alloc::size_type size_type;
	typedef typename _Alloc::difference_type difference_type;
	typedef _Reft *pointer;
	typedef _Reft reference;

	_Vb_iterator()
		{	
		}

	_Vb_iterator(_Vbase *_Ptr, _Container_base *_Mypvbool)
		: _Mybase(_Ptr, _Mypvbool)
		{	
		}

	reference operator*() const
		{	
		return (_Reft(*this));
		}

	_Mytype& operator++()
		{	
		++*(_Mybase *)this;
		return (*this);
		}

	_Mytype operator++(int)
		{	
		_Mytype _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Mytype& operator--()
		{	
		--*(_Mybase *)this;
		return (*this);
		}

	_Mytype operator--(int)
		{	
		_Mytype _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	_Mytype& operator+=(difference_type _Off)
		{	
		*(_Mybase *)this += _Off;
		return (*this);
		}

	_Mytype operator+(difference_type _Off) const
		{	
		_Mytype _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Mytype& operator-=(difference_type _Off)
		{	
		return (*this += -_Off);
		}

	_Mytype operator-(difference_type _Off) const
		{	
		_Mytype _Tmp = *this;
		return (_Tmp -= _Off);
		}

	difference_type operator-(const _Mybase& _Right) const
		{	
		return (*(_Mybase *)this - _Right);
		}

	reference operator[](difference_type _Off) const
		{	
		return (*(*this + _Off));
		}
	};

template<class _Alloc> inline
	_Vb_iterator<_Alloc> operator+(typename _Alloc::difference_type _Off,
		_Vb_iterator<_Alloc> _Right)
		{	
		return (_Right += _Off);
		}

template<class _Alloc>
	struct _Is_checked_helper<_Vb_iterator<_Alloc> >
		: public true_type
	{	
	};

		
template<class _Alloc>
	class _Vb_val
		: public _Container_base
	{	
public:
	typedef ::std:: vector<_Vbase, _Alloc> _Vectype;
	typedef typename _Vectype::_Alty _Alty;
	typedef typename _Alty::size_type size_type;

	_Vb_val(size_type _Count, const bool& _Val, const _Alloc& _Al = _Alloc())
		: _Myvec(_Nw(_Count), (_Vbase)(_Val ? -1 : 0), _Al)
		{	
		_Alloc_proxy();
		_Mysize = 0;
		}

	_Vb_val(const _Vb_val& _Right)
		: _Myvec(_Right._Myvec),
			_Mysize(_Right._Mysize)
		{	
		_Alloc_proxy();
		}

	_Vb_val(const _Vb_val& _Right, const _Alloc& _Al)
		: _Myvec(_Right._Myvec, _Al),
			_Mysize(_Right._Mysize)
		{	
		_Alloc_proxy();
		}

	_Vb_val(_Vb_val&& _Right)
		: _Myvec(::std:: forward<_Vectype>(_Right._Myvec)),
			_Mysize(_Right._Mysize)
		{	
		_Right._Mysize = 0;
		_Alloc_proxy();
		}

	_Vb_val(_Vb_val&& _Right, const _Alloc& _Al)
		: _Myvec(::std:: forward<_Vectype>(_Right._Myvec), _Al),
			_Mysize(_Right._Mysize)
		{	
		_Right._Mysize = 0;
		_Alloc_proxy();
		}

	~_Vb_val() throw ()
		{	
		_Free_proxy();
		}

 
	void _Swap_alloc(_Vb_val&)
		{	
		}

	void _Alloc_proxy()
		{	
		}

	void _Free_proxy()
		{	
		}

 























#line 2400 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vector"

	static size_type _Nw(size_type _Count)
		{	
		return ((_Count + _VBITS - 1) / _VBITS);
		}

	_Vectype _Myvec;	
	typename _Alty::size_type _Mysize;	
	};

		

template<class _Alloc>
	class vector<_Bool, _Alloc>
		: public _Vb_val<_Alloc>
	{	
public:
	typedef ::std:: vector<_Bool, _Alloc> _Myt;
	typedef _Vb_val<_Alloc> _Mybase;
	typedef typename _Mybase::_Alty _Alty;
	typedef typename _Mybase::_Vectype _Vectype;

	typedef typename _Alty::size_type size_type;
	typedef typename _Alty::difference_type difference_type;
	typedef _Bool _Ty;
	typedef _Alloc allocator_type;

	typedef _Vb_reference<_Alty> reference;
	typedef bool const_reference;
	typedef bool value_type;

	typedef reference _Reft;
	typedef _Vb_const_iterator<_Alty> const_iterator;
	typedef _Vb_iterator<_Alty> iterator;

	typedef iterator pointer;
	typedef const_iterator const_pointer;
	typedef ::std:: reverse_iterator<iterator> reverse_iterator;
	typedef ::std:: reverse_iterator<const_iterator> const_reverse_iterator;

	static const int _VBITS = ::std:: _VBITS;
	enum {_EEN_VBITS = _VBITS};	
	vector()
		: _Mybase(0, false)
		{	
		}

	explicit vector(const _Alloc& _Al)
		: _Mybase(0, false, _Al)
		{	
		}

	explicit vector(size_type _Count, const bool& _Val = false)
		: _Mybase(_Count, _Val)
		{	
		_Trim(_Count);
		}

	vector(size_type _Count, const bool& _Val, const _Alloc& _Al)
		: _Mybase(_Count, _Val, _Al)
		{	
		_Trim(_Count);
		}

	vector(const _Myt& _Right)
		: _Mybase(_Right)
		{	
		}

	vector(const _Myt& _Right, const _Alloc& _Al)
		: _Mybase(_Right, _Al)
		{	
		}

	template<class _Iter,
		class = typename enable_if<_Is_iterator<_Iter>::value,
			void>::type>
		vector(_Iter _First, _Iter _Last)
		: _Mybase(0, false)
		{	
		_BConstruct(_First, _Last);
		}

	template<class _Iter,
		class = typename enable_if<_Is_iterator<_Iter>::value,
			void>::type>
		vector(_Iter _First, _Iter _Last, const _Alloc& _Al)
		: _Mybase(0, false, _Al)
		{	
		_BConstruct(_First, _Last);
		}

	template<class _Iter>
		void _BConstruct(_Iter _First, _Iter _Last)
		{	
		insert(begin(), _First, _Last);
		}

	vector(_Myt&& _Right)
		: _Mybase(::std:: forward<_Myt>(_Right))
		{	
		}

	vector(_Myt&& _Right, const _Alloc& _Al)
		: _Mybase(::std:: forward<_Myt>(_Right), _Al)
		{	
		}

	_Myt& operator=(_Myt&& _Right)
		{	
		if (this != &_Right)
			{	
			clear();

			if (_Alty::propagate_on_container_move_assignment::value
				&& this->get_allocator() != _Right.get_allocator())
				{	
				this->_Free_proxy();
				this->_Myvec = ::std:: move(_Right._Myvec);
				this->_Alloc_proxy();
				}
			else
				this->_Myvec = ::std:: move(_Right._Myvec);


			this->_Mysize = _Right._Mysize;
			_Right._Mysize = 0;
			}
		return (*this);
		}

	vector(::std:: initializer_list<bool> _Ilist,
			const _Alloc& _Al = allocator_type())
		: _Mybase(0, false, _Al)
		{	
		insert(begin(), _Ilist.begin(), _Ilist.end());
		}

	_Myt& operator=(::std:: initializer_list<bool> _Ilist)
		{	
		assign(_Ilist.begin(), _Ilist.end());
		return (*this);
		}

	void assign(::std:: initializer_list<bool> _Ilist)
		{	
		assign(_Ilist.begin(), _Ilist.end());
		}

	iterator insert(const_iterator _Where,
			::std:: initializer_list<bool> _Ilist)
		{	
		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
		}

	~vector() throw ()
		{	
		this->_Mysize = 0;
		}

	_Myt& operator=(const _Myt& _Right)
		{	
		this->_Mysize = _Right._Mysize;
		this->_Myvec = _Right._Myvec;
		return (*this);
		}

	void reserve(size_type _Count)
		{	
		this->_Myvec.reserve(this->_Nw(_Count));
		}

	size_type capacity() const throw ()
		{	
		return (this->_Myvec.capacity() * _VBITS);
		}

	iterator begin() throw ()
		{	
		return (iterator((_Vbase *)this->_Myvec._Myfirst, this));
		}

	const_iterator begin() const throw ()
		{	
		return (const_iterator((_Vbase *)this->_Myvec._Myfirst, this));
		}

	iterator end() throw ()
		{	
		iterator _Tmp = begin();
		if (0 < this->_Mysize)
			_Tmp += this->_Mysize;
		return (_Tmp);
		}

	const_iterator end() const throw ()
		{	
		const_iterator _Tmp = begin();
		if (0 < this->_Mysize)
			_Tmp += this->_Mysize;
		return (_Tmp);
		}

	const_iterator cbegin() const throw ()
		{	
		return (((const _Myt *)this)->begin());
		}

	const_iterator cend() const throw ()
		{	
		return (((const _Myt *)this)->end());
		}

	const_reverse_iterator crbegin() const throw ()
		{	
		return (((const _Myt *)this)->rbegin());
		}

	const_reverse_iterator crend() const throw ()
		{	
		return (((const _Myt *)this)->rend());
		}

	void shrink_to_fit()
		{	
		if (this->_Myvec._Has_unused_capacity())
			{	
			_Myt _Tmp(*this);
			swap(_Tmp);
			}
		}

	iterator _Make_iter(const_iterator _Where)
		{	
		iterator _Tmp = begin();
		if (0 < this->_Mysize)
			_Tmp += _Where - begin();
		return (_Tmp);
		}

	reverse_iterator rbegin() throw ()
		{	
		return (reverse_iterator(end()));
		}

	const_reverse_iterator rbegin() const throw ()
		{	
		return (const_reverse_iterator(end()));
		}

	reverse_iterator rend() throw ()
		{	
		return (reverse_iterator(begin()));
		}

	const_reverse_iterator rend() const throw ()
		{	
		return (const_reverse_iterator(begin()));
		}

	void resize(size_type _Newsize, bool _Val = false)
		{	
		if (size() < _Newsize)
			_Insert_n(end(), _Newsize - size(), _Val);
		else if (_Newsize < size())
			erase(begin() + _Newsize, end());
		}

	size_type size() const throw ()
		{	
		return (this->_Mysize);
		}

	size_type max_size() const throw ()
		{	
		const size_type _Maxsize = this->_Myvec.max_size();
		return (_Maxsize < (size_type)(-1) / _VBITS
			? _Maxsize * _VBITS : (size_type)(-1));
		}

	bool empty() const throw ()
		{	
		return (size() == 0);
		}

	_Alloc get_allocator() const throw ()
		{	
		return (this->_Myvec.get_allocator());
		}

	const_reference at(size_type _Off) const
		{	
		if (size() <= _Off)
			_Xran();
		return ((*this)[_Off]);
		}

	reference at(size_type _Off)
		{	
		if (size() <= _Off)
			_Xran();
		return ((*this)[_Off]);
		}

	const_reference operator[](size_type _Off) const
		{	
		const_iterator _It = begin();
		_It._Advance(_Off);
		return (*_It);
		}

	reference operator[](size_type _Off)
		{	
		iterator _It = begin();
		_It._Advance(_Off);
		return (*_It);
		}

	reference front()
		{	
		return (*begin());
		}

	const_reference front() const
		{	
		return (*begin());
		}

	reference back()
		{	
		return (*(end() - 1));
		}

	const_reference back() const
		{	
		return (*(end() - 1));
		}

	void push_back(const bool& _Val)
		{	
		insert(end(), _Val);
		}

	void pop_back()
		{	
		erase(end() - 1);
		}

	template<class _Iter>
		typename enable_if<_Is_iterator<_Iter>::value,
			void>::type
		assign(_Iter _First, _Iter _Last)
		{	
		erase(begin(), end());
		insert(begin(), _First, _Last);
		}

	void assign(size_type _Count, const bool& _Val)
		{	
		erase(begin(), end());
		_Insert_n(begin(), _Count, _Val);
		}

	iterator insert(const_iterator _Where, const bool& _Val)
		{	
		return (_Insert_n(_Where, (size_type)1, _Val));
		}

	iterator insert(const_iterator _Where, size_type _Count,
		const bool& _Val)
		{	
		return (_Insert_n(_Where, _Count, _Val));
		}

	template<class _Iter>
		typename enable_if<_Is_iterator<_Iter>::value,
			iterator>::type
		insert(const_iterator _Where, _Iter _First, _Iter _Last)
		{	
		size_type _Off = _Where - begin();
		_Insert(_Where, _First, _Last, _Iter_cat(_First));
		return (begin() + _Off);
		}

	template<class _Iter>
		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
			input_iterator_tag)
		{	
		size_type _Off = _Where - begin();

		for (; _First != _Last; ++_First, ++_Off)
			insert(begin() + _Off, *_First);
		}

	template<class _Iter>
		void _Insert(const_iterator _Where,
			_Iter _First, _Iter _Last,
			forward_iterator_tag)
		{	
		;
		size_type _Count = 0;
		_Distance(_First, _Last, _Count);

		size_type _Off = _Insert_x(_Where, _Count);
		::std:: copy(_First, _Last, begin() + _Off);
		}

	iterator erase(const_iterator _Where_arg)
		{	
		iterator _Where = _Make_iter(_Where_arg);
		size_type _Off = _Where - begin();

 





#line 2819 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vector"
		::std:: copy(_Where + 1, end(), _Where);
 #line 2821 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vector"

		_Trim(this->_Mysize - 1);
		return (begin() + _Off);
		}

	iterator erase(const_iterator _First_arg, const_iterator _Last_arg)
		{	
		iterator _First = _Make_iter(_First_arg);
		iterator _Last = _Make_iter(_Last_arg);
		size_type _Off = _First - begin();

		if (_First != _Last)
			{	
 







#line 2843 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vector"
			iterator _Next = ::std:: copy(_Last, end(), _First);
			_Trim(_Next - begin());
 #line 2846 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vector"
			}
		return (begin() + _Off);
		}

	void clear() throw ()
		{	
		erase(begin(), end());
		}

	void flip() throw ()
		{	
		for (typename _Vectype::iterator _Next = this->_Myvec.begin();
			_Next != this->_Myvec.end(); ++_Next)
			*_Next = (_Vbase)~*_Next;
		_Trim(this->_Mysize);
		}

	void swap(_Myt& _Right)
		{	
		if (this == &_Right)
			;	
		else if (this->get_allocator() == _Right.get_allocator())
			{	
			this->_Swap_all(_Right);
			this->_Myvec.swap(_Right._Myvec);
			::std:: swap(this->_Mysize, _Right._Mysize);
			}

		else if (_Alty::propagate_on_container_swap::value)
			{	
			this->_Swap_alloc(_Right);
			this->_Myvec.swap(_Right._Myvec);
			::std:: swap(this->_Mysize, _Right._Mysize);
			}

		else
			{	
 


#line 2887 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vector"
			::std:: terminate();
 #line 2889 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vector"
			}
		}

	static void swap(reference _Left, reference _Right) throw ()
		{	
		bool _Val = _Left;	

		_Left = _Right;
		_Right = _Val;
		}

	size_t hash() const
		{	
		return (_Hash_seq((const unsigned char *)this->_Myvec.data(),
			this->_Myvec.size() * sizeof (_Vbase)));
		}

	iterator _Insert_n(const_iterator _Where,
		size_type _Count, const bool& _Val)
		{	
		size_type _Off = _Insert_x(_Where, _Count);
		::std:: fill(begin() + _Off, begin() + (_Off + _Count), _Val);
		return (begin() + _Off);
		}

	size_type _Insert_x(const_iterator _Where, size_type _Count)
		{	
		size_type _Off = _Where - begin();

 



#line 2923 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vector"

		if (_Count == 0)
			;
		else if (max_size() - size() < _Count)
			_Xlen();	
		else
			{	
			this->_Myvec.resize(this->_Nw(size() + _Count), 0);
			if (empty())
				this->_Mysize += _Count;
			else
				{	
				iterator _Oldend = end();
				this->_Mysize += _Count;
				::std:: copy_backward(begin() + _Off, _Oldend, end());
				}

 

#line 2943 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vector"
			}
		return (_Off);
		}

 























#line 2972 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vector"
	void _Orphan_range(size_type, size_type) const
		{	
		}
 #line 2976 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vector"

	void _Trim(size_type _Size)
		{	
		if (max_size() < _Size)
			_Xlen();	
		size_type _Words = this->_Nw(_Size);

		if (_Words < this->_Myvec.size())
			this->_Myvec.erase(this->_Myvec.begin() + _Words,
				this->_Myvec.end());
		this->_Mysize = _Size;
		_Size %= _VBITS;
		if (0 < _Size)
			this->_Myvec[_Words - 1] &= (_Vbase)((1 << _Size) - 1);
		}

	__declspec(noreturn) void _Xlen() const
		{	
		_Xlength_error("vector<bool> too long");
		}

	__declspec(noreturn) void _Xran() const
		{	
		_Xout_of_range("invalid vector<bool> subscript");
		}
	};

template<class _Alloc> inline
	bool operator==(const vector<bool, _Alloc>& _Left,
		const vector<bool, _Alloc>& _Right)
	{	
	return (_Left.size() == _Right.size()
		&& equal(_Left._Myvec.begin(), _Left._Myvec.end(),
			_Right._Myvec.begin()));
	}

template<class _Alloc> inline
	bool operator!=(const vector<bool, _Alloc>& _Left,
		const vector<bool, _Alloc>& _Right)
	{	
	return (!(_Left == _Right));
	}

	
template<class _Alloc>
	struct hash<vector<_Bool, _Alloc> >
		: public unary_function<vector<_Bool, _Alloc>, size_t>
	{	
	typedef vector<_Bool, _Alloc> _Kty;

	size_t operator()(const _Kty& _Keyval) const
		{	
		return (_Keyval.hash());
		}
	};
}

 
 #pragma warning(pop)
 #pragma pack(pop)
#line 3037 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vector"
#line 3038 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\vector"























#line 39 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/unit_test_suite_impl.hpp"

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/suppress_warnings.hpp"















#pragma warning(push)
#pragma warning(disable: 4511) 
#pragma warning(disable: 4512) 
#pragma warning(disable: 4100) 
#pragma warning(disable: 4996) 
#pragma warning(disable: 4355) 
#pragma warning(disable: 4706) 
#pragma warning(disable: 4251) 
#pragma warning(disable: 4127) 
#pragma warning(disable: 4290) 
#pragma warning(disable: 4180) 
#pragma warning(disable: 4275) 
#pragma warning(disable: 4267) 
#pragma warning(disable: 4511) 
#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/suppress_warnings.hpp"

#line 41 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/unit_test_suite_impl.hpp"



namespace boost {

namespace unit_test {





class  test_unit {
public:
    enum { type = tut_any };

    
    test_unit( const_string tu_name, test_unit_type t );

    
    void    depends_on( test_unit* tu );
    bool    check_dependencies() const;

    
    typedef class readonly_property64 : public boost::unit_test::readonly_property<test_unit_id > { typedef boost::unit_test::readonly_property<test_unit_id > base_prop; friend class framework_impl ;   typedef base_prop::write_param_t write_param_t; public: readonly_property64() {} explicit readonly_property64( write_param_t init_v ) : base_prop( init_v ) {} }  id_t;
    typedef class readonly_property65 : public boost::unit_test::readonly_property<test_unit_id > { typedef boost::unit_test::readonly_property<test_unit_id > base_prop; friend class test_suite ;   typedef base_prop::write_param_t write_param_t; public: readonly_property65() {} explicit readonly_property65( write_param_t init_v ) : base_prop( init_v ) {} }      parent_id_t;
    readonly_property<test_unit_type>   p_type;                 
    readonly_property<const_string>     p_type_name;            
    id_t                                p_id;                   
    parent_id_t                         p_parent_id;            

    
    readwrite_property<std::string>     p_name;                 
    readwrite_property<unsigned>        p_timeout;              
    readwrite_property<counter_t>       p_expected_failures;    
    mutable readwrite_property<bool>    p_enabled;              

    void                                increase_exp_fail( unsigned num );

protected:
    ~test_unit();

private:
    
    std::list<test_unit_id>             m_dependencies;
};





class  test_unit_generator {
public:
    virtual test_unit*  next() const = 0;

protected:
     ~test_unit_generator() {}
};





class  test_case : public test_unit {
public:
    enum { type = tut_case };

    
    test_case( const_string tc_name, callback0<> const& test_func );

    
    callback0<> const&  test_func() const { return m_test_func; }

private:
    friend class framework_impl;
    ~test_case() {}

    
    
    callback0<> m_test_func;
};





class  test_suite : public test_unit {
public:
    enum { type = tut_suite };

    
    explicit        test_suite( const_string ts_name );

    
    void            add( test_unit* tu, counter_t expected_failures = 0, unsigned timeout = 0 );
    void            add( test_unit_generator const& gen, unsigned timeout = 0 );
    void            remove( test_unit_id id );

    
    test_unit_id    get( const_string tu_name ) const;
    std::size_t     size() const { return m_members.size(); }

protected:
    friend  
    void        traverse_test_tree( test_suite const&, test_tree_visitor& );
    friend class framework_impl;
    virtual     ~test_suite() {}

    
    std::vector<test_unit_id> m_members;
};





class  master_test_suite_t : public test_suite {
public:
    master_test_suite_t() : test_suite( "Master Test Suite" )
    , argc( 0 )
    , argv( 0 )
    {}
    
    
    int      argc;
    char**   argv;
};






class  test_tree_visitor {
public:
    
    virtual void    visit( test_case const& )               {}
    virtual bool    test_suite_start( test_suite const& )   { return true; }
    virtual void    test_suite_finish( test_suite const& )  {}

protected:
     ~test_tree_visitor() {}
};





 void    traverse_test_tree( test_case const&, test_tree_visitor& );
 void    traverse_test_tree( test_suite const&, test_tree_visitor& );
 void    traverse_test_tree( test_unit_id     , test_tree_visitor& );



inline void
traverse_test_tree( test_unit const& tu, test_tree_visitor& V )
{
    if( tu.p_type == tut_case )
        traverse_test_tree( static_cast<test_case const&>( tu ), V );
    else
        traverse_test_tree( static_cast<test_suite const&>( tu ), V );
}







class test_case_counter : public test_tree_visitor {
public:
    
    test_case_counter() : p_count( 0 ) {}

    class readonly_property214 : public boost::unit_test::readonly_property<counter_t > { typedef boost::unit_test::readonly_property<counter_t > base_prop; friend class test_case_counter ;   typedef base_prop::write_param_t write_param_t; public: readonly_property214() {} explicit readonly_property214( write_param_t init_v ) : base_prop( init_v ) {} } p_count;
private:
    
    virtual void    visit( test_case const& );
    virtual bool    test_suite_start( test_suite const& ts )    { return ts.p_enabled; }
};





struct  test_being_aborted {};





namespace ut_detail {

 std::string normalize_test_case_name( const_string tu_name );

template<typename InstanceType,typename UserTestCase>
struct user_tc_method_invoker {
    typedef void (UserTestCase::*TestMethod )();

    user_tc_method_invoker( shared_ptr<InstanceType> inst, TestMethod test_method )
    : m_inst( inst ), m_test_method( test_method ) {}

    void operator()() { ((*m_inst).*m_test_method)(); }

    shared_ptr<InstanceType> m_inst;
    TestMethod               m_test_method;
};

} 



inline test_case*
make_test_case( callback0<> const& test_func, const_string tc_name )
{
    return new test_case( ut_detail::normalize_test_case_name( tc_name ), test_func );
}



template<typename UserTestCase, typename InstanceType>
inline test_case*
make_test_case( void (UserTestCase::*           test_method )(),
                const_string                    tc_name,
                boost::shared_ptr<InstanceType> user_test_case )
{
    return new test_case( ut_detail::normalize_test_case_name( tc_name ), 
                          ut_detail::user_tc_method_invoker<InstanceType,UserTestCase>( user_test_case, test_method ) );
}







namespace ut_detail {

struct  auto_test_unit_registrar
{
    
                auto_test_unit_registrar( test_case* tc, counter_t exp_fail );
    explicit    auto_test_unit_registrar( const_string ts_name );
    explicit    auto_test_unit_registrar( test_unit_generator const& tc_gen );
    explicit    auto_test_unit_registrar( int );

private:
    static std::list<test_suite*>& curr_ts_store();
};



template<typename T>
struct auto_tc_exp_fail {
    auto_tc_exp_fail() : m_value( 0 ) {}

    explicit    auto_tc_exp_fail( unsigned v )
    : m_value( v )
    {
        instance() = this;
    }

    static auto_tc_exp_fail*& instance() 
    {
        static auto_tc_exp_fail     inst; 
        static auto_tc_exp_fail*    inst_ptr = &inst; 

        return inst_ptr;
    }

    unsigned    value() const { return m_value; }

private:
    
    unsigned    m_value;
};



} 





class  global_fixture : public test_observer { 
public: 
    
    global_fixture();
}; 



namespace ut_detail {

template<typename F> 
struct global_fixture_impl : public global_fixture {
    
    global_fixture_impl(): m_fixure( 0 )    {}

    
    virtual void    test_start( counter_t ) { m_fixure = new F; }
    virtual void    test_finish()           { delete m_fixure; m_fixure = 0; } 
    virtual void    test_aborted()          { delete m_fixure; m_fixure = 0; } 

private:
    
    F*  m_fixure;
}; 





template<typename TestCaseTemplate,typename TestType>
class test_case_template_invoker {
public:
    void    operator()()    { TestCaseTemplate::run( (boost::type<TestType>*)0 ); }
};





template<typename Generator,typename TestCaseTemplate>
struct generate_test_case_4_type {
    explicit    generate_test_case_4_type( const_string tc_name, Generator& G )
    : m_test_case_name( tc_name )
    , m_holder( G )
    {}

    template<typename TestType>
    void        operator()( mpl::identity<TestType> )
    {
        std::string full_name;
        assign_op( full_name, m_test_case_name, 0 );
        full_name += '<';
        full_name += typeid(TestType).name();
        if( boost::is_const<TestType>::value )
            full_name += " const";
        full_name += '>';

        m_holder.m_test_cases.push_back( 
            new test_case( full_name, test_case_template_invoker<TestCaseTemplate,TestType>() ) );
    }

private:
    
    const_string    m_test_case_name;
    Generator&      m_holder;
};





template<typename TestCaseTemplate,typename TestTypesList>
class template_test_case_gen : public test_unit_generator {
public:
    
    template_test_case_gen( const_string tc_name )
    {
        typedef generate_test_case_4_type<template_test_case_gen<TestCaseTemplate,TestTypesList>,
                                          TestCaseTemplate
        > single_test_gen;
        mpl::for_each<TestTypesList,mpl::make_identity<mpl::_> >( single_test_gen( tc_name, *this ) );
    }

    virtual test_unit* next() const
    {
        if( m_test_cases.empty() )
            return 0;
    
        test_unit* res = m_test_cases.front();
        m_test_cases.pop_front();

        return res;
    }

    
    mutable std::list<test_unit*> m_test_cases;
};



} 

} 

} 

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/enable_warnings.hpp"















#pragma warning(default: 4511) 
#pragma warning(default: 4512) 
#pragma warning(default: 4100) 
#pragma warning(default: 4996) 
#pragma warning(default: 4355) 
#pragma warning(default: 4706) 
#pragma warning(default: 4251) 
#pragma warning(default: 4127) 
#pragma warning(default: 4290) 
#pragma warning(default: 4180) 
#pragma warning(default: 4275) 
#pragma warning(default: 4267) 
#pragma warning(default: 4511) 
#pragma warning(pop)
#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/enable_warnings.hpp"
#line 432 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/unit_test_suite_impl.hpp"

#line 434 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/unit_test_suite_impl.hpp"

#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/unit_test_suite.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/framework.hpp"






















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/suppress_warnings.hpp"















#pragma warning(push)
#pragma warning(disable: 4511) 
#pragma warning(disable: 4512) 
#pragma warning(disable: 4100) 
#pragma warning(disable: 4996) 
#pragma warning(disable: 4355) 
#pragma warning(disable: 4706) 
#pragma warning(disable: 4251) 
#pragma warning(disable: 4127) 
#pragma warning(disable: 4290) 
#pragma warning(disable: 4180) 
#pragma warning(disable: 4275) 
#pragma warning(disable: 4267) 
#pragma warning(disable: 4511) 
#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/suppress_warnings.hpp"

#line 24 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/framework.hpp"






namespace boost {

namespace unit_test {








typedef test_suite* (*init_unit_test_func)( int, char* [] );
#line 43 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/framework.hpp"





namespace framework {


 void    init( init_unit_test_func init_func, int argc, char* argv[] );
 bool    is_initialized();


 void    register_test_unit( test_case* tc );
 void    register_test_unit( test_suite* ts );
 void    deregister_test_unit( test_unit* tu );
 void    clear();

 void    register_observer( test_observer& );
 void    deregister_observer( test_observer& );
 void    reset_observers();

 master_test_suite_t& master_test_suite();


 test_case const&    current_test_case();

 test_unit&  get( test_unit_id, test_unit_type );
template<typename UnitType>
UnitType&               get( test_unit_id id )
{
    return static_cast<UnitType&>( get( id, static_cast<test_unit_type>(UnitType::type) ) );
}


 void    run( test_unit_id = INV_TEST_UNIT_ID, bool continue_test = true );
 void    run( test_unit const*, bool continue_test = true );


 void    assertion_result( bool passed );
 void    exception_caught( execution_exception const& );
 void    test_unit_aborted( test_unit const& );





struct internal_error : std::runtime_error {
    internal_error( const_string m ) : std::runtime_error( std::string( m.begin(), m.size() ) ) {}
};

struct setup_error : std::runtime_error {
    setup_error( const_string m ) : std::runtime_error( std::string( m.begin(), m.size() ) ) {}
};



struct nothing_to_test {}; 

} 

} 

} 



#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/enable_warnings.hpp"















#pragma warning(default: 4511) 
#pragma warning(default: 4512) 
#pragma warning(default: 4100) 
#pragma warning(default: 4996) 
#pragma warning(default: 4355) 
#pragma warning(default: 4706) 
#pragma warning(default: 4251) 
#pragma warning(default: 4127) 
#pragma warning(default: 4290) 
#pragma warning(default: 4180) 
#pragma warning(default: 4275) 
#pragma warning(default: 4267) 
#pragma warning(default: 4511) 
#pragma warning(pop)
#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/detail/enable_warnings.hpp"
#line 110 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/framework.hpp"

#line 112 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/framework.hpp"

#line 21 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/unit_test_suite.hpp"












































































































































































namespace boost { namespace unit_test { namespace ut_detail {

struct nil_t {};

} 
} 
} 


typedef ::boost::unit_test::ut_detail::nil_t BOOST_AUTO_TEST_CASE_FIXTURE;



















::boost::unit_test::test_suite*
init_unit_test_suite( int, char* [] )   {
#line 225 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/unit_test_suite.hpp"











    return 0;
}
#line 239 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/unit_test_suite.hpp"

#line 241 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/unit_test_suite.hpp"



#line 245 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/unit_test_suite.hpp"

#line 21 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/unit_test.hpp"












#line 35 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/unit_test.hpp"

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/auto_link.hpp"





 

















































































#line 89 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/auto_link.hpp"






#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/version.hpp"































#line 33 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/version.hpp"
#line 99 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/auto_link.hpp"
#line 100 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/auto_link.hpp"












#line 113 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/auto_link.hpp"






#line 120 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/auto_link.hpp"









#line 130 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/auto_link.hpp"




#line 135 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/auto_link.hpp"




#line 140 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/auto_link.hpp"




#line 145 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/auto_link.hpp"




#line 150 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/auto_link.hpp"




#line 155 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/auto_link.hpp"




#line 160 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/auto_link.hpp"

     






















#line 185 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/auto_link.hpp"
#line 186 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/auto_link.hpp"








#line 195 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/auto_link.hpp"















































































#line 275 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/auto_link.hpp"



















#line 295 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/auto_link.hpp"



#line 300 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/auto_link.hpp"

#line 302 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/auto_link.hpp"

#line 304 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/auto_link.hpp"

#line 306 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/auto_link.hpp"

#line 308 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/auto_link.hpp"












































#line 353 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/auto_link.hpp"






#line 360 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/auto_link.hpp"

#line 362 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/auto_link.hpp"

#line 364 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/auto_link.hpp"
















#line 386 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/auto_link.hpp"
#pragma comment(lib, "lib" "boost_unit_test_framework" "-" "vc120" "-mt" "-s" "-" "1_54" ".lib")



#line 391 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/auto_link.hpp"



#line 395 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/auto_link.hpp"


#line 398 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/auto_link.hpp"






#line 405 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/auto_link.hpp"


#line 408 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/auto_link.hpp"







#line 416 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/auto_link.hpp"


#line 419 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/auto_link.hpp"


#line 422 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/auto_link.hpp"


#line 425 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/auto_link.hpp"


#line 428 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/config/auto_link.hpp"

#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/unit_test.hpp"

#line 39 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/unit_test.hpp"





namespace boost { namespace unit_test {

int  unit_test_main( init_unit_test_func init_func, int argc, char* argv[] );

}}















#line 65 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/unit_test.hpp"

#line 67 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/unit_test.hpp"
#line 19 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/auto_unit_test.hpp"

#line 21 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/test/auto_unit_test.hpp"
#line 21 "exception-test.cpp"

#line 1 "C:\\Users\\Alvaro\\Development\\open-airbus-cockpit\\oacsd\\liboac-commons\\include\\liboac\\exception.h"
























#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor.hpp"
















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/library.hpp"















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/arithmetic.hpp"


















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/arithmetic/div.hpp"



























#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/arithmetic/div.hpp"








#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/arithmetic/div.hpp"

#line 40 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/arithmetic/div.hpp"
#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/arithmetic.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/arithmetic/mul.hpp"






























#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/arithmetic/mul.hpp"






#line 39 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/arithmetic/mul.hpp"

#line 41 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/arithmetic/mul.hpp"










#line 52 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/arithmetic/mul.hpp"

#line 54 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/arithmetic/mul.hpp"
#line 23 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/arithmetic.hpp"


#line 26 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/arithmetic.hpp"
#line 17 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/library.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array.hpp"

















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/enum.hpp"






























#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/enum.hpp"

#line 34 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/enum.hpp"
#line 19 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/insert.hpp"
















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/push_back.hpp"




























#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/push_back.hpp"



#line 34 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/push_back.hpp"
#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/insert.hpp"

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/comparison/not_equal.hpp"



























#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/comparison/not_equal.hpp"















































































































































































































































































































































































































































































































































































































































































































































































































#line 813 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/comparison/not_equal.hpp"

#line 815 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/comparison/not_equal.hpp"

#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/insert.hpp"

















#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/insert.hpp"



#line 42 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/insert.hpp"

#line 44 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/insert.hpp"





#line 50 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/insert.hpp"

#line 52 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/insert.hpp"



#line 56 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/insert.hpp"
#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/pop_back.hpp"

















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum.hpp"



















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/detail/auto_rec.hpp"















#line 17 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/detail/auto_rec.hpp"




















































































































































































































































































#line 294 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/detail/auto_rec.hpp"
#line 21 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum.hpp"









#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum.hpp"














#line 46 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum.hpp"










#line 57 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum.hpp"



#line 61 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum.hpp"





#line 67 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum.hpp"
#line 19 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/pop_back.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/deduce_z.hpp"














#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/detail/auto_rec.hpp"















#line 17 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/detail/auto_rec.hpp"




















































































































































































































































































#line 294 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/detail/auto_rec.hpp"
#line 16 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/deduce_z.hpp"






#line 23 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/deduce_z.hpp"
#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/pop_back.hpp"












#line 33 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/pop_back.hpp"




#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/pop_back.hpp"
#line 21 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/pop_front.hpp"
































#line 34 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/pop_front.hpp"




#line 39 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/pop_front.hpp"
#line 22 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array.hpp"

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/push_front.hpp"




























#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/push_front.hpp"



#line 34 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/push_front.hpp"
#line 24 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/remove.hpp"





































#line 39 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/remove.hpp"





#line 45 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/remove.hpp"

#line 47 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/remove.hpp"





#line 53 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/remove.hpp"

#line 55 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/remove.hpp"
#line 25 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/replace.hpp"




































#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/replace.hpp"





#line 44 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/replace.hpp"

#line 46 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/replace.hpp"



#line 50 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/replace.hpp"
#line 26 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/reverse.hpp"

















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/tuple/reverse.hpp"






























#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/tuple/reverse.hpp"
















#line 49 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/tuple/reverse.hpp"

































































#line 115 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/tuple/reverse.hpp"
#line 19 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/reverse.hpp"








#line 28 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/reverse.hpp"

#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/reverse.hpp"
#line 27 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array.hpp"

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/to_list.hpp"






























#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/to_list.hpp"

#line 34 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/to_list.hpp"
#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/to_seq.hpp"

















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/tuple/to_seq.hpp"





























#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/tuple/to_seq.hpp"
















#line 48 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/tuple/to_seq.hpp"


































































#line 115 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/tuple/to_seq.hpp"
#line 19 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/to_seq.hpp"












#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/to_seq.hpp"

#line 34 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/to_seq.hpp"
#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/to_tuple.hpp"





















#line 23 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array/to_tuple.hpp"
#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array.hpp"

#line 33 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/array.hpp"
#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/library.hpp"

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/comparison.hpp"
















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/comparison/equal.hpp"



























#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/comparison/equal.hpp"





#line 35 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/comparison/equal.hpp"
#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/comparison.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/comparison/greater.hpp"
















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/comparison/less.hpp"



























#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/comparison/less.hpp"




#line 34 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/comparison/less.hpp"





#line 40 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/comparison/less.hpp"




#line 45 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/comparison/less.hpp"

#line 47 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/comparison/less.hpp"
#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/comparison/greater.hpp"









#line 28 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/comparison/greater.hpp"








#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/comparison/greater.hpp"

#line 39 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/comparison/greater.hpp"
#line 19 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/comparison.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/comparison/greater_equal.hpp"


























#line 28 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/comparison/greater_equal.hpp"








#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/comparison/greater_equal.hpp"

#line 39 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/comparison/greater_equal.hpp"
#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/comparison.hpp"




#line 25 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/comparison.hpp"
#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/library.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/config/limits.hpp"





























#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/config/limits.hpp"
#line 21 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/library.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/control.hpp"















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/control/expr_if.hpp"



























#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/control/expr_if.hpp"

#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/control/expr_if.hpp"
#line 17 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/control.hpp"





#line 23 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/control.hpp"
#line 22 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/library.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/debug.hpp"














#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/debug/assert.hpp"




























#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/debug/assert.hpp"










#line 41 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/debug/assert.hpp"



#line 45 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/debug/assert.hpp"
#line 16 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/debug.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/debug/line.hpp"
















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/iterate.hpp"



















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/slot/slot.hpp"















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/slot/detail/def.hpp"
















































#line 50 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/slot/detail/def.hpp"
#line 17 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/slot/slot.hpp"















#line 33 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/slot/slot.hpp"
#line 21 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/iterate.hpp"





























































#line 83 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/iterate.hpp"
#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/debug/line.hpp"













#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/debug/line.hpp"

#line 34 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/debug/line.hpp"

#line 36 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/debug/line.hpp"
#line 17 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/debug.hpp"

#line 19 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/debug.hpp"
#line 23 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/library.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/facilities.hpp"















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/facilities/apply.hpp"
















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/detail/is_unary.hpp"
























#line 26 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/detail/is_unary.hpp"




#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/detail/is_unary.hpp"
#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/facilities/apply.hpp"







#line 26 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/facilities/apply.hpp"




#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/facilities/apply.hpp"

#line 33 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/facilities/apply.hpp"

#line 35 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/facilities/apply.hpp"
#line 17 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/facilities.hpp"

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/facilities/expand.hpp"























#line 25 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/facilities/expand.hpp"



#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/facilities/expand.hpp"
#line 19 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/facilities.hpp"

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/facilities/intercept.hpp"




















































































































































































































































































#line 278 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/facilities/intercept.hpp"
#line 21 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/facilities.hpp"


#line 24 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/facilities.hpp"
#line 24 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/library.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration.hpp"















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/local.hpp"

























#line 27 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/local.hpp"
#line 17 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/self.hpp"


















#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/self.hpp"
#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration.hpp"

#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration.hpp"
#line 25 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/library.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list.hpp"


















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/at.hpp"


















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/rest_n.hpp"





























#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/rest_n.hpp"






#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/rest_n.hpp"






#line 45 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/rest_n.hpp"








#line 54 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/rest_n.hpp"

#line 56 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/rest_n.hpp"
#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/at.hpp"








#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/at.hpp"








#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/at.hpp"

#line 40 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/at.hpp"
#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/cat.hpp"




























#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/cat.hpp"










#line 41 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/cat.hpp"

#line 43 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/cat.hpp"
#line 21 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/enum.hpp"



























#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/enum.hpp"










#line 40 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/enum.hpp"

#line 42 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/enum.hpp"
#line 22 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/filter.hpp"





























#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/filter.hpp"






#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/filter.hpp"





#line 44 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/filter.hpp"








#line 53 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/filter.hpp"

#line 55 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/filter.hpp"
#line 23 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/first_n.hpp"































#line 33 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/first_n.hpp"






#line 40 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/first_n.hpp"





#line 46 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/first_n.hpp"










#line 57 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/first_n.hpp"

#line 59 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/first_n.hpp"
#line 24 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/for_each.hpp"




























#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/for_each.hpp"






#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/for_each.hpp"










#line 48 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/for_each.hpp"

#line 50 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/for_each.hpp"
#line 27 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list.hpp"

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/for_each_product.hpp"



















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/to_tuple.hpp"


























#line 28 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/to_tuple.hpp"








#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/to_tuple.hpp"

#line 39 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/to_tuple.hpp"
#line 21 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/for_each_product.hpp"













#line 35 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/for_each_product.hpp"








#line 44 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/for_each_product.hpp"






#line 51 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/for_each_product.hpp"




#line 56 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/for_each_product.hpp"

#line 58 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/for_each_product.hpp"






#line 65 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/for_each_product.hpp"






#line 72 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/for_each_product.hpp"











#line 84 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/for_each_product.hpp"

























































#line 142 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/for_each_product.hpp"
#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/size.hpp"






























#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/size.hpp"







#line 40 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/size.hpp"







#line 48 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/size.hpp"








#line 57 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/size.hpp"

#line 59 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/size.hpp"
#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/to_array.hpp"












































#line 46 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/to_array.hpp"




































































#line 115 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/to_array.hpp"








#line 124 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/to_array.hpp"
#line 33 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/to_seq.hpp"































#line 33 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list/to_seq.hpp"
#line 34 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list.hpp"



#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/list.hpp"
#line 26 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/library.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/logical.hpp"


















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/logical/bitnor.hpp"























#line 25 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/logical/bitnor.hpp"



#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/logical/bitnor.hpp"


#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/logical/bitnor.hpp"






#line 39 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/logical/bitnor.hpp"
#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/logical.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/logical/bitor.hpp"























#line 25 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/logical/bitor.hpp"



#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/logical/bitor.hpp"


#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/logical/bitor.hpp"






#line 39 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/logical/bitor.hpp"
#line 21 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/logical.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/logical/bitxor.hpp"























#line 25 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/logical/bitxor.hpp"



#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/logical/bitxor.hpp"


#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/logical/bitxor.hpp"






#line 39 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/logical/bitxor.hpp"
#line 22 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/logical.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/logical/nor.hpp"



























#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/logical/nor.hpp"

#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/logical/nor.hpp"
#line 25 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/logical.hpp"

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/logical/or.hpp"



























#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/logical/or.hpp"

#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/logical/or.hpp"
#line 27 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/logical.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/logical/xor.hpp"



























#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/logical/xor.hpp"

#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/logical/xor.hpp"
#line 28 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/logical.hpp"

#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/logical.hpp"
#line 27 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/library.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/punctuation.hpp"
















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/punctuation/paren.hpp"






















#line 24 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/punctuation/paren.hpp"
#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/punctuation.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/punctuation/paren_if.hpp"


























#line 28 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/punctuation/paren_if.hpp"








#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/punctuation/paren_if.hpp"

#line 39 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/punctuation/paren_if.hpp"
#line 19 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/punctuation.hpp"

#line 21 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/punctuation.hpp"
#line 28 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/library.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition.hpp"














#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/deduce_r.hpp"














#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/detail/auto_rec.hpp"















#line 17 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/detail/auto_rec.hpp"




















































































































































































































































































#line 294 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/detail/auto_rec.hpp"
#line 16 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/deduce_r.hpp"






#line 23 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/deduce_r.hpp"
#line 16 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition.hpp"




#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum_params_with_a_default.hpp"
























#line 26 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum_params_with_a_default.hpp"
#line 21 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum_params_with_defaults.hpp"























#line 25 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum_params_with_defaults.hpp"
#line 22 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum_shifted.hpp"





















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/detail/auto_rec.hpp"















#line 17 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/detail/auto_rec.hpp"




















































































































































































































































































#line 294 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/detail/auto_rec.hpp"
#line 23 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum_shifted.hpp"









#line 33 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum_shifted.hpp"














#line 48 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum_shifted.hpp"










#line 59 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum_shifted.hpp"



#line 63 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum_shifted.hpp"





#line 69 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum_shifted.hpp"
#line 23 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum_shifted_binary_params.hpp"






























#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum_shifted_binary_params.hpp"




#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum_shifted_binary_params.hpp"

#line 39 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum_shifted_binary_params.hpp"










#line 50 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum_shifted_binary_params.hpp"

#line 52 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum_shifted_binary_params.hpp"
#line 24 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum_shifted_params.hpp"






























#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum_shifted_params.hpp"










#line 43 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum_shifted_params.hpp"

#line 45 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum_shifted_params.hpp"
#line 25 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum_trailing.hpp"

















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/detail/auto_rec.hpp"















#line 17 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/detail/auto_rec.hpp"




















































































































































































































































































#line 294 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/detail/auto_rec.hpp"
#line 19 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum_trailing.hpp"








#line 28 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum_trailing.hpp"














#line 43 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum_trailing.hpp"










#line 54 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum_trailing.hpp"



#line 58 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum_trailing.hpp"





#line 64 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum_trailing.hpp"
#line 26 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum_trailing_binary_params.hpp"



























#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum_trailing_binary_params.hpp"




#line 34 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum_trailing_binary_params.hpp"

#line 36 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum_trailing_binary_params.hpp"




#line 41 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum_trailing_binary_params.hpp"

#line 43 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum_trailing_binary_params.hpp"








#line 52 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum_trailing_binary_params.hpp"

#line 54 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition/enum_trailing_binary_params.hpp"
#line 27 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition.hpp"





#line 33 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/repetition.hpp"
#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/library.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/selection.hpp"














#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/selection/max.hpp"



























#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/selection/max.hpp"








#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/selection/max.hpp"

#line 40 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/selection/max.hpp"
#line 16 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/selection.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/selection/min.hpp"



























#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/selection/min.hpp"








#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/selection/min.hpp"

#line 40 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/selection/min.hpp"
#line 17 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/selection.hpp"

#line 19 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/selection.hpp"
#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/library.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq.hpp"


















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/filter.hpp"





























#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/filter.hpp"




#line 36 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/filter.hpp"

#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/filter.hpp"





#line 44 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/filter.hpp"








#line 53 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/filter.hpp"

#line 55 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/filter.hpp"
#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/first_n.hpp"
















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/detail/split.hpp"
























#line 26 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/detail/split.hpp"


































































































































































































































































#line 285 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/detail/split.hpp"
#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/first_n.hpp"










#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/first_n.hpp"

#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/first_n.hpp"
#line 21 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq.hpp"

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/fold_right.hpp"















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/detail/auto_rec.hpp"















#line 17 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/detail/auto_rec.hpp"




















































































































































































































































































#line 294 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/detail/auto_rec.hpp"
#line 17 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/fold_right.hpp"

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/reverse.hpp"

























#line 27 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/reverse.hpp"










#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/reverse.hpp"

#line 40 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/reverse.hpp"
#line 19 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/fold_right.hpp"






#line 26 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/fold_right.hpp"






































































































































































































































































#line 289 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/fold_right.hpp"

#line 23 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq.hpp"

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/for_each_i.hpp"






























#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/for_each_i.hpp"





#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/for_each_i.hpp"

#line 40 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/for_each_i.hpp"






#line 47 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/for_each_i.hpp"

#line 49 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/for_each_i.hpp"










#line 60 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/for_each_i.hpp"

#line 62 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/for_each_i.hpp"
#line 25 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/for_each_product.hpp"




































#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/for_each_product.hpp"




#line 43 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/for_each_product.hpp"

#line 45 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/for_each_product.hpp"






#line 52 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/for_each_product.hpp"








#line 61 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/for_each_product.hpp"







#line 69 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/for_each_product.hpp"

























































#line 127 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/for_each_product.hpp"
#line 26 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/insert.hpp"
















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/rest_n.hpp"



























#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/rest_n.hpp"

#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/rest_n.hpp"
#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/insert.hpp"








#line 27 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/insert.hpp"

#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/insert.hpp"
#line 27 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/pop_back.hpp"


























#line 28 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/pop_back.hpp"

#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/pop_back.hpp"
#line 28 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/pop_front.hpp"
























#line 26 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/pop_front.hpp"

#line 28 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/pop_front.hpp"
#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/push_back.hpp"


















#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/push_back.hpp"
#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/push_front.hpp"


















#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/push_front.hpp"
#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/remove.hpp"


























#line 28 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/remove.hpp"

#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/remove.hpp"
#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/replace.hpp"


























#line 28 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/replace.hpp"

#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/replace.hpp"
#line 33 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq.hpp"




#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/subseq.hpp"

























#line 27 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/subseq.hpp"

#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/subseq.hpp"
#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/to_array.hpp"

























#line 27 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/to_array.hpp"

#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/to_array.hpp"
#line 39 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/to_list.hpp"

















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/detail/binary_transform.hpp"




























#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/detail/binary_transform.hpp"






#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/detail/binary_transform.hpp"



#line 41 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/detail/binary_transform.hpp"
#line 19 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/to_list.hpp"










#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/to_list.hpp"
#line 40 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/to_tuple.hpp"
























#line 26 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/to_tuple.hpp"

#line 28 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq/to_tuple.hpp"
#line 41 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq.hpp"


#line 44 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/seq.hpp"
#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/library.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/slot.hpp"
















#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/slot.hpp"
#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/library.hpp"

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/tuple.hpp"



















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/tuple/enum.hpp"





















#line 23 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/tuple/enum.hpp"
#line 21 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/tuple.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/tuple/size.hpp"
























#line 26 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/tuple/size.hpp"
#line 27 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/tuple/size.hpp"

#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/tuple/size.hpp"
#line 24 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/tuple.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/tuple/to_array.hpp"





























#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/tuple/to_array.hpp"




#line 36 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/tuple/to_array.hpp"

#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/tuple/to_array.hpp"
#line 25 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/tuple.hpp"



#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/tuple.hpp"
#line 34 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/library.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/variadic.hpp"

















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/variadic/to_array.hpp"



















#line 21 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/variadic/to_array.hpp"








#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/variadic/to_array.hpp"
#line 31 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/variadic/to_array.hpp"

#line 33 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/variadic/to_array.hpp"
#line 19 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/variadic.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/variadic/to_list.hpp"






















#line 24 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/variadic/to_list.hpp"

#line 26 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/variadic/to_list.hpp"
#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/variadic.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/variadic/to_seq.hpp"






















#line 24 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/variadic/to_seq.hpp"

#line 26 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/variadic/to_seq.hpp"
#line 21 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/variadic.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/variadic/to_tuple.hpp"





















#line 23 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/variadic/to_tuple.hpp"

#line 25 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/variadic/to_tuple.hpp"
#line 22 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/variadic.hpp"

#line 24 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/variadic.hpp"
#line 35 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/library.hpp"

#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/library.hpp"
#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor.hpp"

#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor.hpp"
#line 26 "C:\\Users\\Alvaro\\Development\\open-airbus-cockpit\\oacsd\\liboac-commons\\include\\liboac\\exception.h"

#line 1 "c:\\users\\alvaro\\development\\open-airbus-cockpit\\oacsd\\liboac-commons\\include\\liboac\\format.h"





















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format.hpp"






















#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\locale"

#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocbuf"

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 #pragma warning(disable: 6385)

namespace std {
		
template<class _Codecvt,
	class _Elem = wchar_t,
	class _Traits = char_traits<_Elem> >
	class wbuffer_convert
		: public basic_streambuf<_Elem, _Traits>
	{	
	enum _Mode {_Unused, _Wrote, _Need, _Got, _Eof};
	enum {_STRING_INC = 8};
public:
	typedef wbuffer_convert<_Codecvt, _Elem, _Traits> _Myt;
	typedef streambuf _Mysb;
	typedef char_traits<char> _Byte_traits;

	typedef typename _Traits::int_type int_type;
	typedef typename _Traits::pos_type pos_type;
	typedef typename _Traits::off_type off_type;
	typedef typename _Codecvt::state_type state_type;

	wbuffer_convert(_Mysb *_Strbuf = 0)
		: _Pcvt(new _Codecvt),
			_Mystrbuf(_Strbuf), _Status(_Unused), _Nback(0)
		{	
		static state_type _State0;

		_State = _State0;
		_Loc = locale(_Loc, _Pcvt);
		}

	wbuffer_convert(_Mysb *_Strbuf, const _Codecvt *_Pcvt_arg)
		: _Pcvt(_Pcvt_arg),
			_Mystrbuf(_Strbuf), _Status(_Unused), _Nback(0)
		{	
		static state_type _State0;

		_State = _State0;
		_Loc = locale(_Loc, _Pcvt);
		}

	wbuffer_convert(_Mysb *_Strbuf,
		const _Codecvt *_Pcvt_arg, state_type _State_arg)
		: _Pcvt(_Pcvt_arg),
			_Mystrbuf(_Strbuf), _Status(_Unused), _Nback(0)
		{	
		_State = _State_arg;
		_Loc = locale(_Loc, _Pcvt);
		}

	virtual ~wbuffer_convert() throw ()
		{	
		char *_Buf = (char *)_Str.c_str();

		for (; _Status == _Wrote ; )
			{	
			char *_Dest;

			if (_Str.size() < _STRING_INC)
				_Str.assign(_STRING_INC, '\0');
			switch (_Pcvt->unshift(_State,
				_Buf, _Buf + _Str.size(), _Dest))
				{	
			case _Codecvt::ok:
				_Status = _Unused;	

			case _Codecvt::partial:	
				{	
				int _Count = (int)(_Dest - _Buf);
				if (0 < _Count
					&& _Byte_traits::eq_int_type(
						_Byte_traits::eof(),
						(_Byte_traits::int_type)_Mystrbuf->sputn(_Buf,
						_Count)))
					return;	

				if (_Status == _Wrote && _Count == 0)
					_Str.append(_STRING_INC, '\0');	
				break;
				}

			case _Codecvt::noconv:
				return;	

			default:
				return;	
				}
			}
		}

	_Mysb *rdbuf() const
		{	
		return (_Mystrbuf);
		}

	_Mysb *rdbuf(_Mysb *_Strbuf)
		{	
		_Mysb *_Oldstrbuf = _Mystrbuf;
		_Mystrbuf = _Strbuf;
		return (_Oldstrbuf);
		}

	state_type state() const
		{	
		return (_State);
		}

protected:
	virtual int_type overflow(int_type _Meta = _Traits::eof())
		{	
		if (_Traits::eq_int_type(_Traits::eof(), _Meta))
			return (_Traits::not_eof(_Meta));	
		else if (_Mystrbuf == 0 || 0 < _Nback
			|| (_Status != _Unused && _Status != _Wrote))
			return (_Traits::eof());	
		else
			{	
			char *_Buf = (char *)_Str.c_str();
			const _Elem _Ch = _Traits::to_char_type(_Meta);
			const _Elem *_Src;
			char *_Dest;

			if (_Str.size() < _STRING_INC)
				_Str.assign(_STRING_INC, '\0');
			for (_Status = _Wrote; ; )
				switch (_Pcvt->out(_State,
					&_Ch, &_Ch + 1, _Src,
					_Buf, _Buf + _Str.size(), _Dest))
				{	
				case _Codecvt::partial:
				case _Codecvt::ok:
					{	
					int _Count = (int)(_Dest - _Buf);
					if (0 < _Count
						&& _Byte_traits::eq_int_type(
							_Byte_traits::eof(),
							(_Byte_traits::int_type)_Mystrbuf->sputn(_Buf,
							_Count)))
						return (_Traits::eof());	

					if (_Src != &_Ch)
						return (_Meta);	

					if (0 < _Count)
						;
					else if (_Str.size() < 4 * _STRING_INC)
						_Str.append(_STRING_INC, '\0');	
					else
						return (_Traits::eof());	
					break;
					}

				case _Codecvt::noconv:
					if (_Traits::eq_int_type(
						_Traits::eof(),
						(typename _Traits::int_type)_Mystrbuf->sputn(
							(char *)&_Ch,
							(streamsize)sizeof (_Elem))))
						return (_Traits::eof());
					else
						return (_Meta);	

				default:
					return (_Traits::eof());	
				}
			}
		}

	virtual int_type pbackfail(int_type _Meta = _Traits::eof())
		{	
		if (sizeof (_Myback) / sizeof (_Myback[0]) <= _Nback
			|| _Status == _Wrote)
			return (_Traits::eof());	
		else
			{	
			 if (!_Traits::eq_int_type(_Traits::eof(), _Meta))
				_Myback[_Nback] = _Traits::to_char_type(_Meta);
			++_Nback;
			if (_Status == _Unused)
				_Status = _Got;
			return (_Meta);
			}
		}

	virtual int_type underflow()
		{	
		int_type _Meta;

		if (0 < _Nback)
			;
		else if (_Traits::eq_int_type(_Traits::eof(), _Meta = _Get_elem()))
			return (_Meta);	
		else
			_Myback[_Nback++] = _Traits::to_char_type(_Meta);
		return (_Traits::to_int_type(_Myback[_Nback - 1]));
		}

	virtual int_type uflow()
		{	
		int_type _Meta;

		if (0 < _Nback)
			;
		else if (_Traits::eq_int_type(_Traits::eof(), _Meta = _Get_elem()))
			return (_Meta);	
		else
			_Myback[_Nback++] = _Traits::to_char_type(_Meta);
		return (_Traits::to_int_type(_Myback[--_Nback]));
		}

	virtual pos_type seekoff(off_type,
		ios::seekdir,
		ios::openmode =
			(ios::openmode)(ios::in | ios::out))
		{	
		return (pos_type(-1));	
		}

	virtual pos_type seekpos(pos_type,
		ios::openmode =
			(ios::openmode)(ios::in | ios::out))
		{	
		return (pos_type(-1));	
		}

private:
	int_type _Get_elem()
		{	
		if (_Mystrbuf != 0 && _Status != _Wrote)
			{	
			if (_Status == _Eof)
				;
			else if (_Str.size() == 0)
				_Status = _Need;
			else
				_Status = _Got;

			for (; _Status != _Eof; )
				{	
				char *_Buf = (char *)_Str.c_str();
				_Elem _Ch, *_Dest;
				const char *_Src;
				int _Meta;

				if (_Status != _Need)
					;
				else if (_Byte_traits::eq_int_type(_Byte_traits::eof(),
					_Meta = _Mystrbuf->sbumpc()))
					_Status = _Eof;
				else
					_Str.append(1, _Byte_traits::to_char_type(_Meta));

				switch (_Pcvt->in(_State,
					_Buf, _Buf + _Str.size(), _Src,
					&_Ch, &_Ch + 1, _Dest))
					{	
				case _Codecvt::partial:
				case _Codecvt::ok:
					_Str.erase((size_t)0,	
						(size_t)(_Src - _Buf));
					if (_Dest != &_Ch)
						return (_Traits::to_int_type(_Ch));
					break;

				case _Codecvt::noconv:
					if (_Str.size() < sizeof (_Elem))
						break;	
					:: memcpy(&_Ch, _Buf,
						sizeof (_Elem));	
					_Str.erase((size_t)0, sizeof (_Elem));
					return (_Traits::to_int_type(_Ch));	

				default:
					_Status = _Eof;	
					}
				}
			}

		return (_Traits::eof());
		}

	state_type _State;	
	const _Codecvt *_Pcvt;	
	_Mysb *_Mystrbuf;	
	_Mode _Status;		
	size_t _Nback;			
	_Elem _Myback[8];	
	string _Str;	
	locale _Loc;	
	};

		
template<class _Codecvt,
	class _Elem = wchar_t,
	class _Walloc = allocator<_Elem>,
	class _Balloc = allocator<char> >
	class wstring_convert
	{	
	enum {_BUF_INC = 8, _BUF_MAX = 16};
	void _Init(const _Codecvt *_Pcvt_arg = new _Codecvt)
		{	
		static state_type _State0;
		_State = _State0;
		_Pcvt = _Pcvt_arg;
		_Loc = locale(_Loc, _Pcvt);
		_Nconv = 0;
		}

public:
	typedef basic_string<char, char_traits<char>, _Balloc> byte_string;
	typedef basic_string<_Elem, char_traits<_Elem>, _Walloc> wide_string;
	typedef typename _Codecvt::state_type state_type;
	typedef typename wide_string::traits_type::int_type int_type;

	wstring_convert()
		: _Has_berr(false), _Has_werr(false), _Has_state(false)
		{	
		_Init();
		}

	wstring_convert(const _Codecvt *_Pcvt_arg)
		: _Has_berr(false), _Has_werr(false), _Has_state(false)
		{	
		_Init(_Pcvt_arg);
		}

	wstring_convert(const _Codecvt *_Pcvt_arg, state_type _State_arg)
		: _Has_berr(false), _Has_werr(false), _Has_state(true)
		{	
		_Init(_Pcvt_arg);
		_State = _State_arg;
		}

	wstring_convert(const byte_string& _Berr_arg)
		: _Has_berr(true), _Has_werr(false), _Has_state(false),
			_Berr(_Berr_arg)
		{	
		_Init();
		}

	wstring_convert(const byte_string& _Berr_arg,
		const wide_string& _Werr_arg)
		: _Has_berr(true), _Has_werr(true), _Has_state(false),
			_Berr(_Berr_arg), _Werr(_Werr_arg)
		{	
		_Init();
		}

	virtual ~wstring_convert() throw ()
		{	
		}

	size_t converted() const
		{	
		return (_Nconv);
		}

	state_type state() const
		{	
		return (_State);
		}

	wide_string from_bytes(char _Byte)
		{	
		return (from_bytes(&_Byte, &_Byte + 1));
		}

	wide_string from_bytes(const char *_Ptr)
		{	
		return (from_bytes(_Ptr, _Ptr + strlen(_Ptr)));
		}

	wide_string from_bytes(const byte_string& _Bstr)
		{	
		const char *_Ptr = _Bstr.c_str();
		return (from_bytes(_Ptr, _Ptr + _Bstr.size()));
		}

	wide_string from_bytes(const char *_First, const char *_Last)
		{	
		static state_type _State0;
		wide_string _Wbuf, _Wstr;
		const char *_First_sav = _First;

		if (!_Has_state)
			_State = _State0;	
		_Wbuf.append((:: size_t)_BUF_INC, (_Elem)'\0');
		for (_Nconv = 0; _First != _Last; _Nconv = _First - _First_sav)
			{	
			_Elem *_Dest = &*_Wbuf.begin();
			_Elem *_Dnext;

			switch (_Pcvt->in(_State,
				_First, _Last, _First,
				_Dest, _Dest + _Wbuf.size(), _Dnext))
				{	
			case _Codecvt::partial:
			case _Codecvt::ok:
				if (_Dest < _Dnext)
					_Wstr.append(_Dest, (:: size_t)(_Dnext - _Dest));
				else if (_Wbuf.size() < _BUF_MAX)
					_Wbuf.append((:: size_t)_BUF_INC, '\0');
				else if (_Has_werr)
					return (_Werr);
				else
					throw range_error("bad conversion");
				break;

			case _Codecvt::noconv:
				for (; _First != _Last; ++_First)
					_Wstr.append((:: size_t)1,
						(_Elem)(unsigned char)*_First);
				break;	

			default:
				if (_Has_werr)
					return (_Werr);
				else
					throw range_error("bad conversion");
				}
			}
		return (_Wstr);
		}

	byte_string to_bytes(_Elem _Char)
		{	
		return (to_bytes(&_Char, &_Char + 1));
		}

	byte_string to_bytes(const _Elem *_Wptr)
		{	
		const _Elem *_Next = _Wptr;
		for (; (int_type)*_Next != 0; ++_Next)
			;
		return (to_bytes(_Wptr, _Next));
		}

	byte_string to_bytes(const wide_string& _Wstr)
		{	
		const _Elem *_Wptr = _Wstr.c_str();
		return (to_bytes(_Wptr, _Wptr + _Wstr.size()));
		}

	byte_string to_bytes(const _Elem *_First, const _Elem *_Last)
		{	
		static state_type _State0;
		byte_string _Bbuf, _Bstr;
		const _Elem *_First_sav = _First;

		if (!_Has_state)
			_State = _State0;	
		_Bbuf.append((:: size_t)_BUF_INC, '\0');
		for (_Nconv = 0; _First != _Last; _Nconv = _First - _First_sav)
			{	
			char *_Dest = &*_Bbuf.begin();
			char *_Dnext;

			switch (_Pcvt->out(_State,
				_First, _Last, _First,
				_Dest, _Dest + _Bbuf.size(), _Dnext))
				{	
			case _Codecvt::partial:
			case _Codecvt::ok:
				if (_Dest < _Dnext)
					_Bstr.append(_Dest, (:: size_t)(_Dnext - _Dest));
				else if (_Bbuf.size() < _BUF_MAX)
					_Bbuf.append((:: size_t)_BUF_INC, '\0');
				else if (_Has_berr)
					return (_Berr);
				else
					throw range_error("bad conversion");
				break;

			case _Codecvt::noconv:
				for (; _First != _Last; ++_First)
					_Bstr.append((:: size_t)1,
						(char)(int_type)*_First);
				break;	

			default:
				if (_Has_berr)
					return (_Berr);
				else
					throw range_error("bad conversion");
				}
			}
		return (_Bstr);
		}

private:
	const _Codecvt *_Pcvt;	
	locale _Loc;	
	byte_string _Berr;
	wide_string _Werr;
	state_type _State;	
	bool _Has_state;
	bool _Has_berr;
	bool _Has_werr;
	size_t _Nconv;
	};
}
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 519 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocbuf"
#line 520 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocbuf"





#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\locale"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocmes"

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

namespace std {
		
 #pragma warning(push)
 #pragma warning(disable: 4275)

struct messages_base
	: public locale::facet
	{	
	typedef int catalog;

	explicit messages_base(size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		}
	};

 #pragma warning(pop)

		
template<class _Elem>
	class messages
		: public messages_base
	{	
public:
	typedef _Elem char_type;
	typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
		string_type;

	catalog open(const string& _Catname, const locale& _Loc) const
		{	
		return (do_open(_Catname, _Loc));
		}

	string_type get(catalog _Catval, int _Set, int _Message,
		const string_type& _Dflt) const
		{	
		return (do_get(_Catval, _Set, _Message, _Dflt));
		}

	void close(catalog _Catval) const
		{	
		do_close(_Catval);
		}

	  static locale::id id;	

	explicit messages(size_t _Refs = 0)
		: messages_base(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	messages(const _Locinfo& _Lobj, size_t _Refs = 0)
		: messages_base(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new messages<_Elem>(
				_Locinfo(_Ploc->c_str()));
		return (6);
		}

protected:
	messages(const char *_Locname, size_t _Refs = 0)
		: messages_base(_Refs)
		{	
		{ _Locinfo _Lobj(_Locname);
			_Init(_Lobj);
		}
		}

	virtual  ~messages() throw ()
		{	
		}

	void _Init(const _Locinfo&)
		{	
		}

	virtual catalog  do_open(const string&, const locale&) const
		{	
		return (-1);
		}

	virtual string_type  do_get(catalog, int, int,
		const string_type& _Dflt) const
		{	
		return (_Dflt);
		}

	virtual void  do_close(catalog) const
		{	
		}
	};

		
template<class _Elem>
	 locale::id messages<_Elem>::id;

		
template<class _Elem>
	class messages_byname
		: public messages<_Elem>
	{	
public:
	explicit messages_byname(const char *_Locname, size_t _Refs = 0)
		: messages<_Elem>(_Locname, _Refs)
		{	
		}

	explicit messages_byname(const string& _Str, size_t _Refs = 0)
		: messages<_Elem>(_Str.c_str(), _Refs)
		{	
		}

protected:
	virtual  ~messages_byname() throw ()
		{	
		}
	};

 









#line 152 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocmes"
}
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocmes"
#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocmes"





#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\locale"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocmon"

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 #pragma warning(disable: 4275)

namespace std {
		
struct money_base
	: public locale::facet
	{	
	enum	{	
		symbol = '$', sign = '+', space = ' ', value = 'v', none = 'x'};
	typedef int part;

	struct pattern
		{	
		char field[4];
		};

	money_base(size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		}
	};

		
template<class _Elem>
	class _Mpunct
		: public money_base
	{	
public:
	typedef _Elem char_type;
	typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
		string_type;

	_Elem decimal_point() const
		{	
		return (do_decimal_point());
		}

	_Elem thousands_sep() const
		{	
		return (do_thousands_sep());
		}

	string grouping() const
		{	
		return (do_grouping());
		}

	string_type curr_symbol() const
		{	
		return (do_curr_symbol());
		}

	string_type positive_sign() const
		{	
		return (do_positive_sign());
		}

	string_type negative_sign() const
		{	
		return (do_negative_sign());
		}

	int frac_digits() const
		{	
		return (do_frac_digits());
		}

	pattern pos_format() const
		{	
		return (do_pos_format());
		}

	pattern neg_format() const
		{	
		return (do_neg_format());
		}

	explicit _Mpunct(size_t _Refs, bool _Intl)
		: money_base(_Refs), _International(_Intl)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	_Mpunct(const _Locinfo& _Lobj, size_t _Refs, bool _Intl,
		bool _Isdef = false)
		: money_base(_Refs), _International(_Intl)
		{	
		_Init(_Lobj, _Isdef);
		}

protected:
	_Mpunct(const char *_Locname, size_t _Refs,
		bool _Intl, bool _Isdef = false)
		: money_base(_Refs), _International(_Intl)
		{	
		{ _Locinfo _Lobj(_Locname);
			_Init(_Lobj, _Isdef);
		}
		}

	virtual  ~_Mpunct() throw ()
		{	
		_Tidy();
		}

	template<class _Elem2>
		void _Getvals(_Elem2, const lconv *_Ptr)
		{	
		_Currencysign = _Maklocstr(_International ? _Ptr->int_curr_symbol : _Ptr->currency_symbol, (_Elem2 *)0, _Cvt);
#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocmon"
		_Plussign = _Maklocstr(4 < (unsigned int)_Ptr->p_sign_posn ? "" : _Ptr->positive_sign, (_Elem2 *)0, _Cvt);
#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocmon"
		_Minussign = _Maklocstr(4 < (unsigned int)_Ptr->n_sign_posn ? "-" : _Ptr->negative_sign, (_Elem2 *)0, _Cvt);
#line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocmon"
		_Decimalpoint = _Maklocchr(_Ptr->mon_decimal_point[0], (_Elem2 *)0, _Cvt);
		_Kseparator = _Maklocchr(_Ptr->mon_thousands_sep[0], (_Elem2 *)0, _Cvt);
		}

	template<>
		void _Getvals(wchar_t, const lconv *_Ptr)
		{	
		_Currencysign = (const _Elem *)_Maklocwcs(_International
			? _Ptr->_W_int_curr_symbol : _Ptr->_W_currency_symbol);
		_Plussign = (const _Elem *)_Maklocwcs(
			4 < (unsigned int)_Ptr->p_sign_posn
				? L"" : _Ptr->_W_positive_sign);
		_Minussign = (const _Elem *)_Maklocwcs(
			4 < (unsigned int)_Ptr->n_sign_posn
				? L"-" : _Ptr->_W_negative_sign);
		_Decimalpoint = (_Elem)_Ptr->_W_mon_decimal_point[0];
		_Kseparator = (_Elem)_Ptr->_W_mon_thousands_sep[0];
		}

	void _Init(const _Locinfo& _Lobj, bool _Isdef = false)
		{	
		_Cvt = _Lobj._Getcvt();
		const lconv *_Ptr = _Lobj._Getlconv();

		_Grouping = 0;
		_Currencysign = 0;
		_Plussign = 0;
		_Minussign = 0;

		try {
		_Grouping = _Maklocstr(_Ptr->mon_grouping, (char *)0, _Cvt);
		_Getvals((_Elem)0, _Ptr);
		} catch (...) {
		_Tidy();
		throw;
		}

		_Fracdigits = _International ? _Ptr->int_frac_digits
			: _Ptr->frac_digits;
		if (_Fracdigits < 0 || 127 <= _Fracdigits)
			_Fracdigits = 0;

		_Makpat(_Plusformat, _Ptr->p_sep_by_space,
			_Ptr->p_cs_precedes, _Ptr->p_sign_posn);
		_Makpat(_Minusformat, _Ptr->n_sep_by_space,
			_Ptr->n_cs_precedes, _Ptr->n_sign_posn);

		if (_Isdef)
			{	
			memcpy(&_Plusformat, "$+xv", 4);
			memcpy(&_Minusformat, "$+xv", 4);
			}
		}

	virtual _Elem  do_decimal_point() const
		{	
		return (_Decimalpoint);
		}

	virtual _Elem  do_thousands_sep() const
		{	
		return (_Kseparator);
		}

	virtual string  do_grouping() const
		{	
		return (string(_Grouping));
		}

	virtual string_type  do_curr_symbol() const
		{	
		return (string_type(_Currencysign));
		}

	virtual string_type  do_positive_sign() const
		{	
		return (string_type(_Plussign));
		}

	virtual string_type  do_negative_sign() const
		{	
		return (string_type(_Minussign));
		}

	virtual int  do_frac_digits() const
		{	
		return (_Fracdigits);
		}

	virtual pattern  do_pos_format() const
		{	
		return (_Plusformat);
		}

	virtual pattern  do_neg_format() const
		{	
		return (_Minusformat);
		}

private:
	void _Makpat(pattern& _Pattern, unsigned int _Sepbyspace,
		unsigned int _Symbolprecedes, unsigned int _Signposition)
		{	
		const char *_Ptr = _International || 2 < _Sepbyspace
			|| 1 < _Symbolprecedes || 4 < _Signposition
				? "$+xv"	
				: &(
				"+v$x" "+v$x" "v$+x" "v+$x" "v$+x"
				"+$vx" "+$vx" "$v+x" "+$vx" "$+vx"
				"+v $" "+v $" "v $+" "v +$" "v $+"
				"+$ v" "+$ v" "$ v+" "+$ v" "$+ v"
				"+xv$" "+ v$" "v$ +" "v+ $" "v$ +"
				"+x$v" "+ $v" "$v +" "+ $v" "$ +v")
					[_Signposition * 4	
					+ _Symbolprecedes * 20	
					+ _Sepbyspace * 40];	

		::memcpy_s((_Pattern.field), (sizeof (_Pattern.field)), (_Ptr), (4));
		}

	void _Tidy()
		{	
		delete[] ((void *)_Grouping);
		delete[] ((void *)_Currencysign);
		delete[] ((void *)_Plussign);
		delete[] ((void *)_Minussign);
		}

	const char *_Grouping;	
	_Elem _Decimalpoint;	
	_Elem _Kseparator;	
	const _Elem *_Currencysign;	
	const _Elem *_Plussign;	
	const _Elem *_Minussign;	
	int _Fracdigits;	
	pattern _Plusformat;	
	pattern _Minusformat;	
	bool _International;	

	_Locinfo::_Cvtvec _Cvt;		
	};

		
template<class _Elem,
	bool _Intl = false>
	class moneypunct
		: public _Mpunct<_Elem>
	{	
public:
	  static const bool intl;	
	  static locale::id id;	

	explicit moneypunct(size_t _Refs = 0)
		: _Mpunct<_Elem>(_Refs, _Intl)
		{	
		}

	moneypunct(const _Locinfo& _Lobj, size_t _Refs = 0, bool _Isdef = false)
		: _Mpunct<_Elem>(_Lobj, _Refs, _Intl, _Isdef)
		{	
		}

	static size_t _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new moneypunct<_Elem, _Intl>(
				_Locinfo(_Ploc->c_str()), 0, true);
		return (3);
		}

protected:
	moneypunct(const char *_Locname, size_t _Refs = 0)
		: _Mpunct<_Elem>(_Locname, _Refs, _Intl)
		{	
		}

	virtual  ~moneypunct() throw ()
		{	
		}
	};

		
template<class _Elem,
	bool _Intl>
	 const bool moneypunct<_Elem, _Intl>::intl = _Intl;

		
template<class _Elem,
	bool _Intl>
	 locale::id moneypunct<_Elem, _Intl>::id;

		
template<class _Elem,
	bool _Intl = false>
	class moneypunct_byname
		: public moneypunct<_Elem, _Intl>
	{	
public:
	explicit moneypunct_byname(const char *_Locname, size_t _Refs = 0)
		: moneypunct<_Elem, _Intl>(_Locname, _Refs)
		{	
		}

	explicit moneypunct_byname(const string& _Str, size_t _Refs = 0)
		: moneypunct<_Elem, _Intl>(_Str.c_str(), _Refs)
		{	
		}

protected:
	virtual  ~moneypunct_byname() throw ()
		{	
		}
	};

		
template<class _Elem,
	class _InIt = istreambuf_iterator<_Elem, char_traits<_Elem> > >
	class money_get
		: public locale::facet
	{	
	typedef moneypunct<_Elem, false> _Mypunct0;
	typedef moneypunct<_Elem, true> _Mypunct1;

public:
	typedef _Elem char_type;
	typedef _InIt iter_type;
	typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
		string_type;

	_InIt get(_InIt _First, _InIt _Last,
		bool _Intl, ios_base& _Iosbase, ios_base::iostate& _State,
			long double& _Val) const
		{	
		return (do_get(_First, _Last, _Intl, _Iosbase, _State, _Val));
		}

	_InIt get(_InIt _First, _InIt _Last,
		bool _Intl, ios_base& _Iosbase, ios_base::iostate& _State,
			string_type& _Val) const
		{	
		return (do_get(_First, _Last, _Intl, _Iosbase, _State, _Val));
		}

	  static locale::id id;	

	explicit money_get(size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	money_get(const _Locinfo& _Lobj, size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new money_get<_Elem, _InIt>(
				_Locinfo(_Ploc->c_str()));
		return (3);
		}

protected:
	virtual  ~money_get() throw ()
		{	
		}

	void _Init(const _Locinfo&)
		{	
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		bool _Intl, ios_base& _Iosbase, ios_base::iostate& _State,
			long double& _Val) const
		{	
		_Elem _Atoms[sizeof ("0123456789-") - 1];
		string _Str = _Getmfld(_First, _Last, _Intl, _Iosbase, _Atoms);

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Str.size() == 0)
			_State |= ios_base::failbit;	
		else
			{	
			const char *_Eb = _Str.c_str();
			char *_Ep;
			int _Errno = 0;
			const long double _Ans =
				:: _Stoldx(_Eb, &_Ep, 0, &_Errno);	

			if (_Ep == _Eb || _Errno != 0)
				_State |= ios_base::failbit;
			else
				_Val = _Ans;	
			}
		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		bool _Intl, ios_base& _Iosbase, ios_base::iostate& _State,
			string_type& _Val) const
		{	
		_Elem _Atoms[sizeof ("0123456789-") - 1];
		string _Str = _Getmfld(_First, _Last, _Intl, _Iosbase, _Atoms);
		size_t _Len = _Str.size();

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Len == 0)
			_State |= ios_base::failbit;	
		else
			{	
			size_t _Idx = 0;
			_Val.resize(_Len);
			if (_Str[0] == '-')
				_Val[_Idx++] = _Atoms[10];
			for (; _Idx < _Len; ++_Idx)
				_Val[_Idx] = _Atoms[_Str[_Idx] - '0'];	
			}
		return (_First);
		}

private:
	string _Getmfld(_InIt& _First, _InIt& _Last,
		bool _Intl, ios_base& _Iosbase, _Elem *_Atoms) const
		{	
		;
		const _Mpunct<_Elem> *_Ppunct_fac;
		if (_Intl)
			_Ppunct_fac =
				&use_facet< _Mypunct1 >(_Iosbase.getloc());	
		else
			_Ppunct_fac =
				&use_facet< _Mypunct0 >(_Iosbase.getloc());	

		bool _Bad = false, _Neg = false;
		string_type _Sign;
		const money_base::pattern _Pattern = _Ppunct_fac->neg_format();
		string _Val;
		size_t _Idx;
		static const char _Src[] = {"0123456789-"};
		const ctype<_Elem>& _Ctype_fac =
			use_facet< ctype<_Elem> >(_Iosbase.getloc());
		_Ctype_fac.widen(&_Src[0], &_Src[sizeof (_Src) - 1], _Atoms);

		for (size_t _Off = 0; !_Bad && _Off < 4; ++_Off)
			switch (_Pattern.field[_Off])
				{	
			case money_base::symbol:
				{	
				string_type _Symbol = _Ppunct_fac->curr_symbol();
				typename string_type::const_iterator _Source;

				if (!(_Iosbase.flags() & ios_base::showbase)
					&& _First != _Last && *_First != *_Symbol.c_str())
					_Symbol.erase();	
				else if (_Off == 3 && _Sign.size() <= 1
					&& (_First == _Last || *_First != *_Symbol.c_str()))
					_Symbol.erase();	

				for (_Source = _Symbol.begin();
					_First != _Last && _Source != _Symbol.end()
						&& *_First == *_Source; ++_Source, ++_First)
					;	

				if (_Source != _Symbol.end())
					_Bad = true;	
				break;
				}

			case money_base::sign:	
				if (_First == _Last)
					;	
				else if (0 < (_Ppunct_fac->positive_sign()).size()
					&& _Ppunct_fac->positive_sign()[0] == *_First)
					{	
					++_First;
					_Sign = _Ppunct_fac->positive_sign();
					}
				else if (0 < (_Ppunct_fac->negative_sign()).size()
					&& _Ppunct_fac->negative_sign()[0] == *_First)
					{	
					++_First;
					_Sign = _Ppunct_fac->negative_sign();
					_Neg = true;
					}
				else if (0 == (_Ppunct_fac->positive_sign()).size())
					;
				else if (0 == (_Ppunct_fac->negative_sign()).size())
					_Neg = true;
				break;	

			case money_base::value:
				{	
				int _Fracdigseen = 0;
				int _Fracdigits = _Ppunct_fac->frac_digits();
				const string _Grouping = _Ppunct_fac->grouping();
				const _Elem _Kseparator = _Grouping.size() == 0
					? (_Elem)0 : _Ppunct_fac->thousands_sep();

				if (_Kseparator == (_Elem)0
					|| 127 <= (unsigned char)*_Grouping.c_str())
					for (; _First != _Last
						&& (_Idx = _Find_elem(_Atoms, *_First)) < 10;
						++_First)
					_Val += _Src[_Idx];	
				else
					{	
					string _Groups((size_t)1, '\0');
					size_t _Group = 0;

					for (; _First != _Last; ++_First)
						if ((_Idx = _Find_elem(_Atoms, *_First)) < 10)
							{	
							_Val += _Src[_Idx];
							if (_Groups[_Group] != 127)
								++_Groups[_Group];
							}
						else if (_Groups[_Group] == '\0'
							|| *_First != _Kseparator)
							break;	
						else
							{	
							_Groups.append((size_t)1, '\0');
							++_Group;
							}

					if (_Group == 0)
						;	
					else if ('\0' < _Groups[_Group])
						++_Group;	
					else
						_Bad = true;	

					for (const char *_Pg = _Grouping.c_str();
						!_Bad && 0 < _Group; )
						if (*_Pg == 127)
							break;	
						else if ((0 < --_Group && *_Pg != _Groups[_Group])
							|| (0 == _Group && *_Pg < _Groups[_Group]))
							_Bad = true;	
						else if ('\0' < _Pg[1])
							++_Pg;	
					if (_Bad)
						break;	
					}

				const _Elem _Point = _Ppunct_fac->decimal_point();
				if (_First != _Last
					&& _Point != (_Elem)0
					&& *_First == _Point)
					{	
					while (++_First != _Last
						&& _Fracdigseen < _Fracdigits
						&& (_Idx = _Find_elem(_Atoms, *_First)) < 10)
						_Val += _Src[_Idx], ++_Fracdigseen;

					if (_Fracdigseen < _Fracdigits)
						_Bad = true;	
					}

				if (_Val.size() == 0)
					_Bad = true;	
				else
					for (; _Fracdigseen < _Fracdigits; ++_Fracdigseen)
						_Val += '0';	
				break;
				}

			case money_base::space:
			case money_base::none:
				{	
				if (_Off == 3)
					break;	

				bool _Seen = false;

				for (; _First != _Last
					&& _Ctype_fac.is(ctype_base::space, *_First); ++_First)
					_Seen = true;	
				if (_Pattern.field[_Off] == money_base::space && !_Seen)
					_Bad = true;	
				}
				}

		if (!_Bad && 1 < _Sign.size())
			{	
			typename string_type::const_iterator _Source;

			for (_Source = _Sign.begin(); ++_Source != _Sign.end()
				&& _First != _Last && *_First == *_Source; ++_First)
				;
			if (_Source != _Sign.end())
				_Bad = true;	
			}

		if (_Bad)
			_Val.erase();	
		else if (_Neg)
			_Val.insert((size_t)0, (size_t)1, '-');	
		return (_Val);
		}
	};

		
template<class _Elem,
	class _InIt>
	 locale::id money_get<_Elem, _InIt>::id;

		
template<class _Elem,
	class _OutIt = ostreambuf_iterator<_Elem, char_traits<_Elem> > >
	class money_put
		: public locale::facet
	{	
	typedef moneypunct<_Elem, false> _Mypunct0;
	typedef moneypunct<_Elem, true> _Mypunct1;

public:
	typedef _Elem char_type;
	typedef _OutIt iter_type;
	typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
		string_type;

	_OutIt put(_OutIt _Dest,
		bool _Intl, ios_base& _Iosbase, _Elem _Fill,
			long double _Val) const
		{	
		return (do_put(_Dest, _Intl, _Iosbase, _Fill, _Val));
		}

	_OutIt put(_OutIt _Dest,
		bool _Intl, ios_base& _Iosbase, _Elem _Fill,
			const string_type& _Val) const
		{	
		return (do_put(_Dest, _Intl, _Iosbase, _Fill, _Val));
		}

	  static locale::id id;	

	explicit money_put(size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	money_put(const _Locinfo& _Lobj, size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new money_put<_Elem, _OutIt>(
				_Locinfo(_Ploc->c_str()));
		return (3);
		}

protected:
	virtual  ~money_put() throw ()
		{	
		}

	void _Init(const _Locinfo&)
		{	
		}

	virtual _OutIt  do_put(_OutIt _Dest,
		bool _Intl, ios_base& _Iosbase, _Elem _Fill,
			long double _Val) const
		{	
		bool _Negative = false;
		if (_Val < 0)
			_Negative = true, _Val = -_Val;

		size_t _Exp;
		for (_Exp = 0; 1e35 <= _Val && _Exp < 5000; _Exp += 10)
			_Val /= 1e10;	

		char _Buf[40];

		int _Count = :: sprintf_s(_Buf, sizeof (_Buf), "%.0Lf",
			_Val);	

		if (_Count < 0)
			return (_Dest);	

		const ctype<_Elem>& _Ctype_fac =
			use_facet< ctype<_Elem> >(_Iosbase.getloc());
		const _Elem _E0 = _Ctype_fac.widen('0');

		string_type _Val2(_Count, (_Elem)0);
		_Ctype_fac.widen(&_Buf[0], &_Buf[_Count], &_Val2[0]);
		_Val2.append(_Exp, _E0);	
		return (_Putmfld(_Dest, _Intl, _Iosbase, _Fill,
			_Negative, _Val2, _E0));
		}

	virtual _OutIt  do_put(_OutIt _Dest,
		bool _Intl, ios_base& _Iosbase, _Elem _Fill,
			const string_type& _Val) const
		{	
		static const char _Src[] = {"0123456789-"};
		_Elem _Atoms[sizeof (_Src) - 1];
		const ctype<_Elem>& _Ctype_fac =
			use_facet< ctype<_Elem> >(_Iosbase.getloc());
		_Ctype_fac.widen(&_Src[0], &_Src[sizeof (_Src) - 1], _Atoms);

		bool _Negative = false;
		size_t _Idx0 = 0;
		if (!_Val.empty() && _Val[0] == _Atoms[10])
			_Negative = true, ++_Idx0;	

		size_t _Size = _Val.size();
		size_t _Idx = _Idx0;
		for (; _Idx < _Size && _Find_elem(_Atoms, _Val[_Idx]) < 10; ++_Idx)
			;	
		string_type _Val2(&_Val[_Idx0], (size_t)(_Idx - _Idx0));
		if (_Val2.empty())	
			_Val2.append((size_t)1, _Atoms[0]);

		return (_Putmfld(_Dest, _Intl, _Iosbase, _Fill,
			_Negative, _Val2, _Atoms[0]));
		}

private:
	_OutIt _Putmfld(_OutIt _Dest,
		bool _Intl, ios_base& _Iosbase, _Elem _Fill,
			bool _Neg, string_type _Val, _Elem _E0) const
		{	
		;
		const _Mpunct<_Elem> *_Ppunct_fac;
		if (_Intl)
			_Ppunct_fac =
				&use_facet< _Mypunct1 >(_Iosbase.getloc());	
		else
			_Ppunct_fac =
				&use_facet< _Mypunct0 >(_Iosbase.getloc());	

		const string _Grouping = _Ppunct_fac->grouping();
		int _Ifracdigits = _Ppunct_fac->frac_digits();
		unsigned int _Fracdigits = _Ifracdigits < 0 ? -_Ifracdigits
			: _Ifracdigits;

		if (_Val.size() <= _Fracdigits)
			_Val.insert((size_t)0, _Fracdigits - _Val.size() + 1, _E0);
		else if (*_Grouping.c_str() != 127 && '\0' < *_Grouping.c_str())
			{	
			const _Elem _Kseparator = _Ppunct_fac->thousands_sep();
			const char *_Pg = _Grouping.c_str();
			size_t _Off = _Val.size() - _Fracdigits;	

			while (*_Pg != 127 && '\0' < *_Pg
				&& (size_t)*_Pg < _Off)
				{	
				_Val.insert(_Off -= *_Pg, (size_t)1, _Kseparator);
				if ('\0' < _Pg[1])
					++_Pg;	
				}
			}

		money_base::pattern _Pattern;
		string_type _Sign;
		if (_Neg)
			{	
			_Pattern = _Ppunct_fac->neg_format();
			_Sign = _Ppunct_fac->negative_sign();
			}
		else
			{	
			_Pattern = _Ppunct_fac->pos_format();
			_Sign = _Ppunct_fac->positive_sign();
			}

		string_type _Symbol;
		if (_Iosbase.flags() & ios_base::showbase)
			_Symbol = _Ppunct_fac->curr_symbol();	

		bool _Intern = false;
		size_t _Fillcount, _Off;
		for (_Fillcount = 0, _Off = 0; _Off < 4; ++_Off)
			switch (_Pattern.field[_Off])
			{	
			case money_base::symbol:	
				_Fillcount += _Symbol.size();
				break;

			case money_base::sign:	
				_Fillcount += _Sign.size();
				break;

			case money_base::value:	
				_Fillcount += _Val.size() + (0 < _Fracdigits ? 1 : 0)
					+ (_Val.size() <= _Fracdigits
						? _Fracdigits - _Val.size() + 1 : 0);
				break;

			case money_base::space:	
				++_Fillcount;	
				

			case money_base::none:	
				if (_Off != 3)
					_Intern = true;	
				break;
			}

		_Fillcount = _Iosbase.width() <= 0
			|| (size_t)_Iosbase.width() <= _Fillcount
				? 0 : (size_t)_Iosbase.width() - _Fillcount;

		ios_base::fmtflags _Afl =
			_Iosbase.flags() & ios_base::adjustfield;
		if (_Afl != ios_base::left
			&& (_Afl != ios_base::internal || !_Intern))
			{	
			_Dest = _Rep(_Dest, _Fill, _Fillcount);
			_Fillcount = 0;
			}

		for (_Off = 0; _Off < 4; ++_Off)
			switch (_Pattern.field[_Off])
				{	
			case money_base::symbol:	
				_Dest = _Put(_Dest, _Symbol.begin(), _Symbol.size());
				break;

			case money_base::sign:	
				if (0 < _Sign.size())
					_Dest = _Put(_Dest, _Sign.begin(), 1);
				break;

			case money_base::value:	
				if (_Fracdigits == 0)
					_Dest = _Put(_Dest, _Val.begin(),
						_Val.size());	
				else if (_Val.size() <= _Fracdigits)
					{	
					*_Dest++ = _E0;
					*_Dest++ = _Ppunct_fac->decimal_point();
					_Dest = _Rep(_Dest, _E0,
						_Fracdigits - _Val.size());	
					_Dest = _Put(_Dest, _Val.begin(), _Val.size());
					}
				else
					{	
					_Dest = _Put(_Dest, _Val.begin(),
						_Val.size() - _Fracdigits);	
					*_Dest++ = _Ppunct_fac->decimal_point();
					_Dest = _Put(_Dest, _Val.end() - _Fracdigits,
						_Fracdigits);	
					}
				break;

			case money_base::space:	
				_Dest = _Rep(_Dest, _Fill, 1);
				

			case money_base::none:	
				if (_Afl == ios_base::internal)
					{	
					_Dest = _Rep(_Dest, _Fill, _Fillcount);
					_Fillcount = 0;
					}
				}

		if (1 < _Sign.size())
			_Dest = _Put(_Dest, _Sign.begin() + 1,
				_Sign.size() - 1);	
		_Iosbase.width(0);
		return (_Rep(_Dest, _Fill, _Fillcount));	
		}

	static _OutIt _Put(_OutIt _Dest,
		typename string_type::const_iterator _Source, size_t _Count)
		{	
		for (; 0 < _Count; --_Count, ++_Dest, ++_Source)
			*_Dest = *_Source;
		return (_Dest);
		}

	static _OutIt _Rep(_OutIt _Dest,
		_Elem _Ch, size_t _Count)
		{	
		for (; 0 < _Count; --_Count, ++_Dest)
			*_Dest = _Ch;
		return (_Dest);
		}
	};

		
template<class _Elem,
	class _OutIt>
	 locale::id money_put<_Elem, _OutIt>::id;

 











































#line 982 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocmon"
}

 
 #pragma warning(pop)
 #pragma pack(pop)
#line 988 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocmon"
#line 989 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xlocmon"






#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\locale"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xloctime"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\ctime"

#pragma once










 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\time.h"















#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"







































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\time.h"



#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\time.h"






#pragma pack(push,8)


extern "C" {
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\time.h"











#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\time.h"








































typedef long clock_t;

#line 92 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\time.h"























































  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_daylight" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  int* __cdecl __daylight(void);



  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_dstbias" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  long* __cdecl __dstbias(void);



  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_timezone" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  long* __cdecl __timezone(void);



    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_tzname" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char ** __cdecl __tzname(void);


 errno_t __cdecl _get_daylight(  int * _Daylight);
 errno_t __cdecl _get_dstbias(  long * _Daylight_savings_bias);
 errno_t __cdecl _get_timezone(  long * _Timezone);
 errno_t __cdecl _get_tzname(  size_t *_ReturnValue,   char *_Buffer,   size_t _SizeInBytes,   int _Index);








  __declspec(deprecated("This function or variable may be unsafe. Consider using " "asctime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char * __cdecl asctime(  const struct tm * _Tm);

  errno_t __cdecl asctime_s(    char *_Buf,   size_t _SizeInBytes,   const struct tm * _Tm);
#line 178 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\time.h"
extern "C++" { template <size_t _Size> inline errno_t __cdecl asctime_s(  char (&_Buffer)[_Size],   const struct tm * _Time) throw() { return asctime_s(_Buffer, _Size, _Time); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ctime32_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char * __cdecl _ctime32(  const __time32_t * _Time);
 errno_t __cdecl _ctime32_s(    char *_Buf,   size_t _SizeInBytes,   const __time32_t *_Time);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _ctime32_s(  char (&_Buffer)[_Size],   const __time32_t * _Time) throw() { return _ctime32_s(_Buffer, _Size, _Time); } }

   clock_t __cdecl clock(void);
 double __cdecl _difftime32(  __time32_t _Time1,   __time32_t _Time2);

  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_gmtime32_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  struct tm * __cdecl _gmtime32(  const __time32_t * _Time);
  errno_t __cdecl _gmtime32_s(  struct tm *_Tm,   const __time32_t * _Time);

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_localtime32_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  struct tm * __cdecl _localtime32(  const __time32_t * _Time);
 errno_t __cdecl _localtime32_s(  struct tm *_Tm,   const __time32_t * _Time);

 size_t __cdecl strftime(  char * _Buf,   size_t _SizeInBytes,     const char * _Format,   const struct tm * _Tm);
 size_t __cdecl _strftime_l(    char *_Buf,   size_t _Max_size,     const char * _Format,   const struct tm *_Tm,   _locale_t _Locale);

  errno_t __cdecl _strdate_s(    char *_Buf,   size_t _SizeInBytes);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strdate_s(  char (&_Buffer)[_Size]) throw() { return _strdate_s(_Buffer, _Size); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strdate_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char * __cdecl _strdate( char *_Buffer);

  errno_t __cdecl _strtime_s(    char *_Buf ,   size_t _SizeInBytes);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strtime_s(  char (&_Buffer)[_Size]) throw() { return _strtime_s(_Buffer, _Size); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strtime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char * __cdecl _strtime( char *_Buffer);

 __time32_t __cdecl _time32(  __time32_t * _Time);
 __time32_t __cdecl _mktime32(  struct tm * _Tm);
 __time32_t __cdecl _mkgmtime32(  struct tm * _Tm);



 void __cdecl _tzset(void);

#line 213 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\time.h"

   double __cdecl _difftime64(  __time64_t _Time1,   __time64_t _Time2);
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ctime64_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char * __cdecl _ctime64(  const __time64_t * _Time);
 errno_t __cdecl _ctime64_s(  char *_Buf,   size_t _SizeInBytes,   const __time64_t * _Time);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _ctime64_s(char (&_Buffer)[_Size],   const __time64_t * _Time) throw() { return _ctime64_s(_Buffer, _Size, _Time); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_gmtime64_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  struct tm * __cdecl _gmtime64(  const __time64_t * _Time);
 errno_t __cdecl _gmtime64_s(  struct tm *_Tm,   const __time64_t *_Time);

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_localtime64_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  struct tm * __cdecl _localtime64(  const __time64_t * _Time);
 errno_t __cdecl _localtime64_s(  struct tm *_Tm,   const __time64_t *_Time);

 __time64_t __cdecl _mktime64(  struct tm * _Tm);
 __time64_t __cdecl _mkgmtime64(  struct tm * _Tm);
 __time64_t __cdecl _time64(  __time64_t * _Time);



__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "GetLocalTime" " instead. See online help for details.")) unsigned __cdecl _getsystime(  struct tm * _Tm);
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "SetLocalTime" " instead. See online help for details.")) unsigned __cdecl _setsystime(  struct tm * _Tm, unsigned _MilliSec);
#line 234 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\time.h"










































#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\time.inl"












#pragma once







#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\time.inl"




























































static __inline double __cdecl difftime(time_t _Time1, time_t _Time2)
{
    return _difftime64(_Time1,_Time2);
}
__declspec(deprecated("This function or variable may be unsafe. Consider using " "ctime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) static __inline char * __cdecl ctime(const time_t * _Time)
{
#pragma warning( push )
#pragma warning( disable : 4996 )
    return _ctime64(_Time);
#pragma warning( pop )
}

static __inline errno_t __cdecl ctime_s(char *_Buffer, size_t _SizeInBytes, const time_t * _Time)
{
    return _ctime64_s(_Buffer, _SizeInBytes, _Time);
}
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\time.inl"
__declspec(deprecated("This function or variable may be unsafe. Consider using " "gmtime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) static __inline struct tm * __cdecl gmtime(const time_t * _Time)
{
#pragma warning( push )
#pragma warning( disable : 4996 )
    return _gmtime64(_Time);
#pragma warning( pop )
}

static __inline errno_t __cdecl gmtime_s(struct tm * _Tm, const time_t * _Time)
{
    return _gmtime64_s(_Tm, _Time);
}
#line 112 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\time.inl"
__declspec(deprecated("This function or variable may be unsafe. Consider using " "localtime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) static __inline struct tm * __cdecl localtime(const time_t * _Time)
{
#pragma warning( push )
#pragma warning( disable : 4996 )
    return _localtime64(_Time);
#pragma warning( pop )
}
static __inline errno_t __cdecl localtime_s(struct tm * _Tm, const time_t * _Time)
{
    return _localtime64_s(_Tm, _Time);
}
static __inline time_t __cdecl mktime(struct tm * _Tm)
{
    return _mktime64(_Tm);
}
static __inline time_t __cdecl _mkgmtime(struct tm * _Tm)
{
    return _mkgmtime64(_Tm);
}
static __inline time_t __cdecl time(time_t * _Time)
{
    return _time64(_Time);
}
#line 136 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\time.inl"


#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\time.inl"
#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\time.inl"
#line 277 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\time.h"
#line 278 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\time.h"













__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_daylight" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  extern int daylight;
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_timezone" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  extern long timezone;
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_tzname" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  extern char * tzname[2];
#line 295 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\time.h"


__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_tzset" ". See online help for details."))  void __cdecl tzset(void);
#line 299 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\time.h"

#line 301 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\time.h"



}
#line 306 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\time.h"

#pragma pack(pop)

#line 310 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\time.h"
#line 14 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\ctime"
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\ctime"

 
namespace std {
using :: clock_t; using :: size_t;
using :: time_t; using :: tm;
using :: asctime; using :: clock; using :: ctime;
using :: difftime; using :: gmtime; using :: localtime;
using :: mktime; using :: strftime; using :: time;
}
 #line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\ctime"
#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\ctime"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xloctime"


 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 #pragma warning(disable: 4275)

namespace std {
		
struct  time_base
	: public locale::facet
	{	
	enum dateorder
		{	
		no_order, dmy, mdy, ymd, ydm};

	 time_base(size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		}

	 ~time_base() throw ()
		{	
		}
	};

		
template<class _Elem,
	class _InIt = istreambuf_iterator<_Elem, char_traits<_Elem> > >
	class time_get
		: public time_base
	{	
public:
	typedef _Elem char_type;
	typedef _InIt iter_type;
	typedef ctype<_Elem> _Ctype;

	 static locale::id id;	

	dateorder  date_order() const
		{	
		return (do_date_order());
		}

	_InIt  get_time(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State, tm *_Pt) const
		{	
		return (do_get_time(_First, _Last, _Iosbase, _State, _Pt));
		}

	_InIt  get_date(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State, tm *_Pt) const
		{	
		return (do_get_date(_First, _Last, _Iosbase, _State, _Pt));
		}

	_InIt  get_weekday(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State, tm *_Pt) const
		{	
		return (do_get_weekday(_First, _Last, _Iosbase, _State, _Pt));
		}

	_InIt  get_monthname(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State, tm *_Pt) const
		{	
		return (do_get_monthname(_First, _Last, _Iosbase, _State, _Pt));
		}

	_InIt  get_year(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State, tm *_Pt) const
		{	
		return (do_get_year(_First, _Last, _Iosbase, _State, _Pt));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State, tm *_Pt,
			char _Specifier, char _Modifier = '\0') const
		{	
		;
		;
		return (do_get(_First, _Last, _Iosbase, _State, _Pt,
			_Specifier, _Modifier));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State, tm *_Pt,
			const _Elem *_Fmtfirst, const _Elem *_Fmtlast) const
		{	
		const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Iosbase.getloc());

		;
		;
		;

		for (; _Fmtfirst != _Fmtlast; ++_Fmtfirst)
			if (_Ctype_fac.narrow(*_Fmtfirst) != '%')
				{	
				if (_Ctype_fac.is(_Ctype::space, *_Fmtfirst))
					for (; _First != _Last
						&& _Ctype_fac.is(_Ctype::space, *_First); ++_First)
						;
				else if (*_First != *_Fmtfirst)
					{	
					_State |= ios_base::failbit;
					break;
					}
				else
					++_First;
				}
			else if (++_Fmtfirst == _Fmtlast)
				{	
				if (*_First != _Fmtfirst[-1])
					_State |= ios_base::failbit;
				else
					++_First;
				break;
				}
			else
				{	
				char _Specifier = _Ctype_fac.narrow(*_Fmtfirst);
				char _Modifier = '\0';
				_Elem _Percent = _Fmtfirst[-1];

				if (_Specifier != 'E' && _Specifier != 'O'
					&& _Specifier != 'Q' && _Specifier != '#')
					;	
				else if (++_Fmtfirst == _Fmtlast)
					{	
					if (*_First != _Percent
						|| ++_First == _Last
						|| _Ctype_fac.narrow(*_First) != _Specifier)
						_State |= ios_base::failbit;
					else
						++_First;
					break;
					}
				else
					{	
					_Modifier = _Specifier;
					_Specifier = _Ctype_fac.narrow(*_Fmtfirst);
					}

				_First = do_get(_First, _Last, _Iosbase, _State, _Pt,
					_Specifier, _Modifier);	
				}
		if (_First == _Last)
			_State |= ios_base::eofbit;
		return (_First);
		}

	explicit  time_get(size_t _Refs = 0)
		: time_base(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 time_get(const _Locinfo& _Lobj, size_t _Refs = 0)
		: time_base(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new time_get<_Elem, _InIt>(
				_Locinfo(_Ploc->c_str()));
		return (5);
		}

protected:
	virtual  ~time_get() throw ()
		{	
		_Tidy();
		}

	 time_get(const char *_Locname, size_t _Refs = 0)
		: time_base(_Refs)
		{	
		{ _Locinfo _Lobj(_Locname);
			_Init(_Lobj);
		}
		}

	template<class _Elem2>
		void _Getvals(_Elem2, const _Locinfo& _Lobj)
		{	
		_Cvt = _Lobj._Getcvt();
		_Days = _Maklocstr(_Lobj._Getdays(), (_Elem *)0, _Cvt);
		_Months = _Maklocstr(_Lobj._Getmonths(), (_Elem *)0, _Cvt);
		_Ampm = _Maklocstr(":AM:am:PM:pm", (_Elem *)0, _Cvt);
		}

	template<>
		void _Getvals(wchar_t, const _Locinfo& _Lobj)
		{	
		_Cvt = _Lobj._Getcvt();
		_Days = (const _Elem *)_Maklocwcs(
			(const wchar_t *)_Lobj._W_Getdays());
		_Months = (const _Elem *)_Maklocwcs(
			(const wchar_t *)_Lobj._W_Getmonths());
		_Ampm = (const _Elem *)_Maklocwcs(L":AM:am:PM:pm");
		}

	void  _Init(const _Locinfo& _Lobj)
		{	
		_Days = 0;
		_Months = 0;
		_Ampm = 0;

		try {
		_Getvals((_Elem)0, _Lobj);

		_Dateorder = (dateorder)_Lobj._Getdateorder();

		} catch (...) {
		_Tidy();
		throw;
		}
		}

	virtual dateorder  do_date_order() const
		{	
		return (_Dateorder);
		}

	virtual _InIt  do_get_time(
		_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State, tm *_Pt) const
		{	
		;
		;
		const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Iosbase.getloc());

		_State |= _Getint(_First, _Last, 0, 23,
			_Pt->tm_hour, _Ctype_fac);

		if (_State != ios_base::goodbit || _Ctype_fac.narrow(*_First) != ':')
			_State |= ios_base::failbit;	
		else
			_State |= _Getint(++_First, _Last, 0, 59,
				_Pt->tm_min, _Ctype_fac);

		if (_State != ios_base::goodbit || _Ctype_fac.narrow(*_First) != ':')
			_State |= ios_base::failbit;	
		else
			_State |= _Getint(++_First, _Last, 0, 59,
				_Pt->tm_sec, _Ctype_fac);
		return (_First);
		}

	virtual _InIt  do_get_date(
		_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State, tm *_Pt) const
		{	
		;
		;
		const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Iosbase.getloc());

		dateorder _Dorder = date_order();
		if (_Dorder == no_order)
			_Dorder = mdy;

		if (_First == _Last)
			;
		else if (!_Ctype_fac.is(_Ctype::digit, *_First))
			{	
			_First = get_monthname(_First, _Last, _Iosbase, _State, _Pt);
			_Dorder = mdy;
			}
		else if (_Dorder == mdy)
			{	
			_State |= _Getint(_First, _Last, 1, 12,
				_Pt->tm_mon, _Ctype_fac);
			--_Pt->tm_mon;
			}
		else if (_Dorder == dmy)
			_State |= _Getint(_First, _Last, 1, 31,
				_Pt->tm_mday, _Ctype_fac);
		else	
			_First = get_year(_First, _Last, _Iosbase, _State, _Pt);

		while (_First != _Last && _Ctype_fac.is(_Ctype::space, *_First))
			++_First;	

		if (_First != _Last)
			{	
			char _Ch = _Ctype_fac.narrow(*_First);
			if (_Ch == ':' || _Ch == ',' || _Ch == '/')
				++_First;
			}
		while (_First != _Last && _Ctype_fac.is(_Ctype::space, *_First))
			++_First;	

		if (_First == _Last)
			;
		else if (!_Ctype_fac.is(_Ctype::digit, *_First))
			if (_Dorder == mdy)
				_State |= ios_base::failbit;	
			else
				{	
				_First = get_monthname(_First, _Last, _Iosbase, _State, _Pt);
				if (_Dorder == ydm)
					_Dorder = ymd;
				}
		else if (_Dorder == dmy || _Dorder == ymd)
			{	
			_State |= _Getint(_First, _Last, 1, 12,
				_Pt->tm_mon, _Ctype_fac);
			--_Pt->tm_mon;
			}
		else
			_State |= _Getint(_First, _Last, 1, 31,
				_Pt->tm_mday, _Ctype_fac);

		while (_First != _Last && _Ctype_fac.is(_Ctype::space, *_First))
			++_First;	
		if (_First != _Last)
			{	
			char _Ch = _Ctype_fac.narrow(*_First);
			if (_Ch == ':' || _Ch == ',' || _Ch == '/')
				++_First;
			}
		while (_First != _Last && _Ctype_fac.is(_Ctype::space, *_First))
			++_First;	

		if (_First == _Last)
			_State |= ios_base::failbit;	
		else if (!_Ctype_fac.is(_Ctype::digit, *_First))
			if (_Dorder != ydm)
				_State |= ios_base::failbit;	
			else
				_First = get_monthname(_First, _Last, _Iosbase, _State, _Pt);
		else if (_Dorder == ydm)
			{	
			_State |= _Getint(_First, _Last, 1, 12,
				_Pt->tm_mon, _Ctype_fac);
			--_Pt->tm_mon;
			}
		else if (_Dorder == ymd)
			_State |= _Getint(_First, _Last, 1, 31,
				_Pt->tm_mday, _Ctype_fac);
		else	
			_First = get_year(_First, _Last, _Iosbase, _State, _Pt);

		if (_First == _Last)
			_State |= ios_base::eofbit;
		return (_First);
		}

	virtual _InIt  do_get_weekday(
		_InIt _First, _InIt _Last,
		ios_base&, ios_base::iostate& _State, tm *_Pt) const
		{	
		;
		;
		int _Num = _Getloctxt(_First, _Last, (size_t)0, _Days);

		if (_Num < 0)
			_State |= ios_base::failbit;
		else
			_Pt->tm_wday = _Num >> 1;	
		return (_First);
		}

	virtual _InIt  do_get_monthname(
		_InIt _First, _InIt _Last,
		ios_base&, ios_base::iostate& _State, tm *_Pt) const
		{	
		;
		;
		int _Num = _Getloctxt(_First, _Last, (size_t)0, _Months);

		if (_Num < 0)
			_State |= ios_base::failbit;
		else
			_Pt->tm_mon = _Num >> 1;	
		return (_First);
		}

	virtual _InIt  do_get_year(
		_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State, tm *_Pt) const
		{	
		;
		;
		const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Iosbase.getloc());

		int _Ans = 0;
		_State |= _Getint(_First, _Last, 0, 2035,
			_Ans, _Ctype_fac);

		if (!(_State & ios_base::failbit))
			{	
			if (1900 <= _Ans)
				_Ans -= 1900;	
			else if (2035 - 1900 < _Ans)
				_State |= ios_base::failbit;
			_Pt->tm_year = _Ans;	
			}
		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State, tm *_Pt,
		char _Specifier, char = 0) const
		{	
		const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Iosbase.getloc());
		int _Ans = 0;

		switch (_Specifier)
			{	
		case 'a':
		case 'A':
			_First = get_weekday(_First, _Last, _Iosbase, _State, _Pt);
			break;

		case 'b':
		case 'B':
		case 'h':
			_First = get_monthname(_First, _Last, _Iosbase, _State, _Pt);
			break;

		case 'c':
			_First = _Getfmt(_First, _Last, _Iosbase, _State, _Pt,
				"%b %d %H : %M : %S %Y");
			break;

		case 'C':
			_State |= _Getint(_First, _Last, 0, 99,
				_Ans, _Ctype_fac);
			if (!(_State & ios_base::failbit))
				_Pt->tm_year = _Ans * 100 - 1900;	
			break;

		case 'd':
		case 'e':
			_State |= _Getint(_First, _Last, 1, 31,
				_Pt->tm_mday, _Ctype_fac);
			break;

		case 'D':
			_First = _Getfmt(_First, _Last, _Iosbase, _State, _Pt,
				"%m / %d / %y");
			break;

		case 'H':
			_State |= _Getint(_First, _Last, 0, 23,
				_Pt->tm_hour, _Ctype_fac);
			break;

		case 'I':
			_State |= _Getint(_First, _Last, 0, 11,
				_Pt->tm_hour, _Ctype_fac);
			break;

		case 'j':
			_State |= _Getint(_First, _Last, 1, 366,
				_Pt->tm_yday, _Ctype_fac);
			break;

		case 'm':
			_State |= _Getint(_First, _Last, 1, 12,
				_Ans, _Ctype_fac);
			if (!(_State & ios_base::failbit))
				_Pt->tm_mon = _Ans - 1;
			break;

		case 'M':
			_State |= _Getint(_First, _Last, 0, 59,
				_Pt->tm_min, _Ctype_fac);
			break;

		case 'n':
		case 't':
			_First = _Getfmt(_First, _Last, _Iosbase, _State, _Pt,
				" ");
			break;

		case 'p':
			_Ans = _Getloctxt(_First, _Last, (size_t)0, ":AM:am:PM:pm");
			if (_Ans < 0)
				_State |= ios_base::failbit;
			else
				_Pt->tm_hour += _Ans * 12;
			break;

		case 'r':
			_First = _Getfmt(_First, _Last, _Iosbase, _State, _Pt,
				"%I : %M : %S %p");
			break;

		case 'R':
			_First = _Getfmt(_First, _Last, _Iosbase, _State, _Pt,
				"%H : %M");
			break;

		case 'S':
			_State |= _Getint(_First, _Last, 0, 59,
				_Pt->tm_sec, _Ctype_fac);
			break;

		case 'T':
		case 'X':
			_First = _Getfmt(_First, _Last, _Iosbase, _State, _Pt,
				"%H : %M : S");
			break;

		case 'U':
			_State |= _Getint(_First, _Last, 0, 53,
				_Pt->tm_yday, _Ctype_fac);
			break;

		case 'w':
			_State |= _Getint(_First, _Last, 0, 6,
				_Pt->tm_wday, _Ctype_fac);
			break;

		case 'W':
			_State |= _Getint(_First, _Last, 0, 53,
				_Pt->tm_yday, _Ctype_fac);
			break;

		case 'x':
			_First = _Getfmt(_First, _Last, _Iosbase, _State, _Pt,
				"%d / %m / %y");
			break;

		case 'y':
			_State |= _Getint(_First, _Last, 0, 99,
				_Ans, _Ctype_fac);
			if (!(_State & ios_base::failbit))
				_Pt->tm_year = _Ans < 69 ? _Ans + 100 : _Ans;
			break;

		case 'Y':
			_First = get_year(_First, _Last, _Iosbase, _State, _Pt);
			break;

		default:
			_State |= ios_base::failbit;	
			}

		if (_First == _Last)
			_State |= ios_base::eofbit;
		return (_First);
		}

	_InIt  _Getfmt(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State, tm *_Pt,
			const char *_Fmtfirst) const
		{	
		const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Iosbase.getloc());

		for (; *_Fmtfirst != '\0'; ++_Fmtfirst)
			if (*_Fmtfirst == '%')
				_First = do_get(_First, _Last, _Iosbase, _State, _Pt,
					*++_Fmtfirst);	
			else if (*_Fmtfirst == ' ')
				for (; _First != _Last
					&& _Ctype_fac.is(_Ctype::space, *_First); ++_First)
					;
			else if (_Ctype_fac.narrow(*_First) != *_Fmtfirst)
				{	
				_State |= ios_base::failbit;
				break;
				}
			else
				++_First;
		if (_First == _Last)
			_State |= ios_base::eofbit;
		return (_First);
		}

private:
	ios_base::iostate __cdecl _Getint(
		_InIt& _First, _InIt& _Last,
		int _Lo, int _Hi, int& _Val,
		const _Ctype& _Ctype_fac) const
		{	
		char _Ac[32], *_Ep;
		char *_Ptr = _Ac;
		char _Ch;

		if (_First == _Last)
			;
		else if ((_Ch = _Ctype_fac.narrow(*_First)) == '+')
			*_Ptr++ = '+', ++_First;	
		else if (_Ch ==  '-')
			*_Ptr++ = '-', ++_First;	

		bool _Seendigit = false;
		while (_First != _Last && _Ctype_fac.narrow(*_First) == '0')
			_Seendigit = true, ++_First;	
		if (_Seendigit)
			*_Ptr++ = '0';	

		for (char *const _Pe = &_Ac[32 - 1]; _First != _Last
			&& '0' <= (_Ch = _Ctype_fac.narrow(*_First)) && _Ch <= '9';
			_Seendigit = true, ++_First)
			{	
			*_Ptr = _Ch;
			if (_Ptr < _Pe)
				++_Ptr;	
			}

		if (!_Seendigit)
			_Ptr = _Ac;
		*_Ptr = '\0';
		int _Errno = 0;
		const long _Ans = :: _Stolx(_Ac, &_Ep, 10, &_Errno);
		ios_base::iostate _State = ios_base::goodbit;

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Ep == _Ac || _Errno != 0 || _Ans < _Lo || _Hi < _Ans)
			_State |= ios_base::failbit;	
		else
			_Val = _Ans;	
		return (_State);
		}

	void  _Tidy()
		{	
		delete[] ((void *)_Days);
		delete[] ((void *)_Months);
		delete[] ((void *)_Ampm);
		}

	const _Elem *_Days;	
	const _Elem *_Months;	
	const _Elem *_Ampm;	
	dateorder _Dateorder;
	_Locinfo::_Cvtvec _Cvt;		
	};

		
template<class _Elem,
	class _InIt>
	 locale::id time_get<_Elem, _InIt>::id;

		
template<class _Elem,
	class _InIt = istreambuf_iterator<_Elem, char_traits<_Elem> > >
	class time_get_byname
		: public time_get<_Elem, _InIt>
	{	
public:
	explicit time_get_byname(const char *_Locname, size_t _Refs = 0)
		: time_get<_Elem, _InIt>(_Locname, _Refs)
		{	
		}

	explicit time_get_byname(const string& _Str, size_t _Refs = 0)
		: time_get<_Elem, _InIt>(_Locinfo(_Str.c_str()), _Refs)
		{	
		}

protected:
	virtual  ~time_get_byname() throw ()
		{	
		}
	};

		
template<class _Elem,
	class _OutIt = ostreambuf_iterator<_Elem, char_traits<_Elem> > >
	class time_put
		: public locale::facet
	{	
public:
	typedef _Elem char_type;
	typedef _OutIt iter_type;
	typedef ctype<_Elem> _Ctype;

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, const tm *_Pt,
			const _Elem *_Fmtfirst, const _Elem *_Fmtlast) const
		{	
		;
		;
		const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Iosbase.getloc());

		for (; _Fmtfirst != _Fmtlast; ++_Fmtfirst)
			if (_Ctype_fac.narrow(*_Fmtfirst) != '%')
				*_Dest++ = *_Fmtfirst;	
			else if (++_Fmtfirst == _Fmtlast)
				{	
				*_Dest++ = _Fmtfirst[-1];
				break;
				}
			else
				{	
				char _Specifier = _Ctype_fac.narrow(*_Fmtfirst);
				char _Modifier = '\0';
				_Elem _Percent = _Fmtfirst[-1];

				if (_Specifier != 'E' && _Specifier != 'O'
					&& _Specifier != 'Q' && _Specifier != '#')
					;	
				else if (++_Fmtfirst == _Fmtlast)
					{	
					*_Dest++ = _Percent;
					*_Dest++ = _Specifier;
					break;
					}
				else
					{	
					_Modifier = _Specifier;
					_Specifier = _Ctype_fac.narrow(*_Fmtfirst);
					}

				_Dest = do_put(_Dest, _Iosbase, _Fill, _Pt,
					_Specifier, _Modifier);	
				}
		return (_Dest);
		}

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, const tm *_Pt,
		char _Specifier, char _Modifier = '\0') const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Pt, _Specifier, _Modifier));
		}

	 static locale::id id;	

	explicit  time_put(size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 time_put(const _Locinfo& _Lobj, size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new time_put<_Elem, _OutIt>(
				_Locinfo(_Ploc->c_str()));
		return (5);
		}

protected:
	virtual  ~time_put() throw ()
		{	
		}

	void  _Init(const _Locinfo& _Lobj)
		{	
		_Tnames = _Lobj._Gettnames();
		}

	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base&, _Elem, const tm *_Pt,
			char _Specifier, char _Modifier = '\0') const
		{	
		;
		;

		char _Fmt[5] = "!%x\0";	
		size_t _Count, _Num;
		string _Str;

		if (_Modifier == '\0')
			_Fmt[2] = _Specifier;
		else
			{	
			_Fmt[2] = _Modifier;
			_Fmt[3] = _Specifier;
			}

		for (_Num = 16; ; _Num *= 2)
			{	
			_Str.append(_Num, '\0');
			if (0 < (_Count = _Strftime(&*_Str.begin(), _Str.size(),
				_Fmt, _Pt, _Tnames._Getptr())))
				break;
			}
		return (::std:: copy(&_Str[1], &_Str[_Count], _Dest));
		}

private:
	_Locinfo::_Timevec _Tnames;	
	};

		
template<class _Elem,
	class _OutIt>
	 locale::id time_put<_Elem, _OutIt>::id;

		

template<class _OutIt>
	class  time_put<wchar_t, _OutIt>
		: public locale::facet
	{	
public:
	typedef wchar_t _Elem;
	typedef _Elem char_type;
	typedef _OutIt iter_type;
	typedef ctype<_Elem> _Ctype;

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, const tm *_Pt,
			const _Elem *_Fmtfirst, const _Elem *_Fmtlast) const
		{	
		;
		;
		const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Iosbase.getloc());

		for (; _Fmtfirst != _Fmtlast; ++_Fmtfirst)
			if (_Ctype_fac.narrow(*_Fmtfirst) != '%')
				*_Dest++ = *_Fmtfirst;	
			else if (++_Fmtfirst == _Fmtlast)
				{	
				*_Dest++ = _Fmtfirst[-1];
				break;
				}
			else
				{	
				char _Specifier = _Ctype_fac.narrow(*_Fmtfirst);
				char _Modifier = '\0';
				_Elem _Percent = _Fmtfirst[-1];

				if (_Specifier != 'E' && _Specifier != 'O'
					&& _Specifier != 'Q' && _Specifier != '#')
					;	
				else if (++_Fmtfirst == _Fmtlast)
					{	
					*_Dest++ = _Percent;
					*_Dest++ = _Specifier;
					break;
					}
				else
					{	
					_Modifier = _Specifier;
					_Specifier = _Ctype_fac.narrow(*_Fmtfirst);
					}

				_Dest = do_put(_Dest, _Iosbase, _Fill, _Pt,
					_Specifier, _Modifier);	
				}
		return (_Dest);
		}

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, const tm *_Pt,
		char _Specifier, char _Modifier = '\0') const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Pt, _Specifier, _Modifier));
		}

	 static locale::id id;	

	explicit  time_put(size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 time_put(const _Locinfo& _Lobj, size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new time_put<_Elem, _OutIt>(
				_Locinfo(_Ploc->c_str()));
		return (5);
		}

protected:
	virtual  ~time_put() throw ()
		{	
		}

	 time_put(const char *_Locname, size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		{ _Locinfo _Lobj(_Locname);
			_Init(_Lobj);
		}
		}

	void  _Init(const _Locinfo& _Lobj)
		{	
		_Tnames = _Lobj._W_Gettnames();
		}

	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base&, _Elem, const tm *_Pt,
			char _Specifier, char _Modifier = '\0') const
		{	
		;
		;

		wchar_t _Fmt[5] = L"!%x\0";	
		size_t _Count, _Num;
		wstring _Str;

		if (_Modifier == '\0')
			_Fmt[2] = (_Elem)_Specifier;	
		else
			{	
			_Fmt[2] = (_Elem)_Modifier;
			_Fmt[3] = (_Elem)_Specifier;
			}

		for (_Num = 16; ; _Num *= 2)
			{	
			_Str.append(_Num, '\0');
			if (0 < (_Count = _Wcsftime(&*_Str.begin(), _Str.size(),
				_Fmt, _Pt, _Tnames._Getptr())))
				break;
			}
		return (::std:: copy(&_Str[1], &_Str[_Count], _Dest));
		}

private:
	_Locinfo::_Timevec _Tnames;	
	};

		
template<class _OutIt>
	 locale::id time_put<wchar_t, _OutIt>::id;

 














































































































































		
template<class _Elem,
	class _OutIt = ostreambuf_iterator<_Elem, char_traits<_Elem> > >
	class time_put_byname
		: public time_put<_Elem, _OutIt>
	{	
public:
	explicit time_put_byname(const char *_Locname, size_t _Refs = 0)
		: time_put<_Elem, _OutIt>(_Locname, _Refs)
		{	
		}

	explicit time_put_byname(const string& _Str, size_t _Refs = 0)
		: time_put<_Elem, _OutIt>(_Str.c_str(), _Refs)
		{	
		}

protected:
	virtual  ~time_put_byname() throw ()
		{	
		}
	};

 



















#line 1139 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xloctime"
}

 
 #pragma warning(pop)
 #pragma pack(pop)
#line 1145 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xloctime"
#line 1146 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\xloctime"






#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\locale"

 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 #pragma warning(disable: 4275)

namespace std {
		
template<class _Elem>
	class collate
		: public locale::facet
	{	
public:
	typedef _Elem char_type;
	typedef basic_string<_Elem, char_traits<_Elem>,
		allocator<_Elem> > string_type;

	int compare(const _Elem *_First1, const _Elem *_Last1,
		const _Elem *_First2, const _Elem *_Last2) const
		{	
		return (do_compare(_First1, _Last1, _First2, _Last2));
		}

	string_type transform(const _Elem *_First, const _Elem *_Last) const
		{	
		return (do_transform(_First, _Last));
		}

	long hash(const _Elem *_First, const _Elem *_Last) const
		{	
		return (do_hash(_First, _Last));
		}

	  static locale::id id;	

	explicit collate(size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	collate(const _Locinfo& _Lobj, size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new collate<_Elem>(
				_Locinfo(_Ploc->name().c_str()));
		return (1);
		}

protected:
	 ~collate() throw ()
		{	
		free(_Coll._LocaleName);
		}

protected:
	collate(const char *_Locname, size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		{ _Locinfo _Lobj(_Locname);
			_Init(_Lobj);
		}
		}

	void _Init(const _Locinfo& _Lobj)
		{	
		_Coll = _Lobj._Getcoll();
		}

	virtual int  do_compare(const _Elem *_First1, const _Elem *_Last1,
		const _Elem *_First2, const _Elem *_Last2) const
		{	
		;
		;
		int _Ans = _LStrcoll(_First1, _Last1, _First2, _Last2, &_Coll);
		return (_Ans < 0 ? -1 : _Ans == 0 ? 0 : +1);
		}

	virtual string_type  do_transform(const _Elem *_First,
		const _Elem *_Last) const
		{	
		;
		size_t _Count;
		string_type _Str;

		for (_Count = _Last - _First; 0 < _Count; )
			{	
			_Str.resize(_Count);
			if ((_Count = _LStrxfrm(&*_Str.begin(),
				&*_Str.begin() + _Str.size(),
					_First, _Last, &_Coll)) <= _Str.size())
				break;
			}
		_Str.resize(_Count);
		return (_Str);
		}

	virtual long  do_hash(const _Elem *_First,
		const _Elem *_Last) const
		{	
		;
		return ((long)_Hash_seq((const unsigned char *)_First,
			(_Last - _First) * sizeof (_Elem)));
		}

private:
	_Locinfo::_Collvec _Coll;	
	};

		
template<class _Elem>
	 locale::id collate<_Elem>::id;

 









#line 147 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\locale"

		
template<class _Elem>
	class collate_byname
		: public collate<_Elem>
	{	
public:
	explicit collate_byname(const char *_Locname, size_t _Refs = 0)
		: collate<_Elem>(_Locname, _Refs)
		{	
		}

	explicit collate_byname(const string& _Str, size_t _Refs = 0)
		: collate<_Elem>(_Locinfo(_Str.c_str()), _Refs)
		{	
		}

protected:
	virtual  ~collate_byname() throw ()
		{	
		}
	};

		

  

template<class _Facet> inline
	bool has_facet(const locale& _Loc) throw ()
	{	
	{ ::std:: _Lockit _Lock(0);	
		size_t _Id = _Facet::id;
		return (_Loc._Getfacet(_Id) != 0
			|| _Facet::_Getcat() != (size_t)(-1));
	}
	}

		
template<class _Elem> inline
	bool (isalnum)(_Elem _Ch, const locale& _Loc)
	{	
	return (use_facet< ctype<_Elem> >(_Loc).is(ctype_base::alnum, _Ch));
	}

template<class _Elem> inline
	bool (isalpha)(_Elem _Ch, const locale& _Loc)
	{	
	return (use_facet< ctype<_Elem> >(_Loc).is(ctype_base::alpha, _Ch));
	}

template<class _Elem> inline
	bool (isblank)(_Elem _Ch, const locale& _Loc)
	{	
	return (use_facet< ctype<_Elem> >(_Loc).is(ctype_base::blank, _Ch));
	}

template<class _Elem> inline
	bool (iscntrl)(_Elem _Ch, const locale& _Loc)
	{	
	return (use_facet< ctype<_Elem> >(_Loc).is(ctype_base::cntrl, _Ch));
	}

template<class _Elem> inline
	bool (isdigit)(_Elem _Ch, const locale& _Loc)
	{	
	return (use_facet< ctype<_Elem> >(_Loc).is(ctype_base::digit, _Ch));
	}

template<class _Elem> inline
	bool (isgraph)(_Elem _Ch, const locale& _Loc)
	{	
	return (use_facet< ctype<_Elem> >(_Loc).is(ctype_base::graph, _Ch));
	}

template<class _Elem> inline
	bool (islower)(_Elem _Ch, const locale& _Loc)
	{	
	return (use_facet< ctype<_Elem> >(_Loc).is(ctype_base::lower, _Ch));
	}

template<class _Elem> inline
	bool (isprint)(_Elem _Ch, const locale& _Loc)
	{	
	return (use_facet< ctype<_Elem> >(_Loc).is(ctype_base::print, _Ch));
	}

template<class _Elem> inline
	bool (ispunct)(_Elem _Ch, const locale& _Loc)
	{	
	return (use_facet< ctype<_Elem> >(_Loc).is(ctype_base::punct, _Ch));
	}

template<class _Elem> inline
	bool (isspace)(_Elem _Ch, const locale& _Loc)
	{	
	return (use_facet< ctype<_Elem> >(_Loc).is(ctype_base::space, _Ch));
	}

template<class _Elem> inline
	bool (isupper)(_Elem _Ch, const locale& _Loc)
	{	
	return (use_facet< ctype<_Elem> >(_Loc).is(ctype_base::upper, _Ch));
	}

template<class _Elem> inline
	bool (isxdigit)(_Elem _Ch, const locale& _Loc)
	{	
	return (use_facet< ctype<_Elem> >(_Loc).is(ctype_base::xdigit, _Ch));
	}

template<class _Elem> inline
	_Elem (tolower)(_Elem _Ch, const locale& _Loc)
	{	
	return (use_facet< ctype<_Elem> >(_Loc).tolower(_Ch));
	}

template<class _Elem> inline
	_Elem (toupper)(_Elem _Ch, const locale& _Loc)
	{	
	return (use_facet< ctype<_Elem> >(_Loc).toupper(_Ch));
	}
}
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 273 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\locale"
#line 274 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\locale"





#line 24 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format.hpp"
#line 25 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/detail/compat_workarounds.hpp"
































namespace boost {
    namespace io {

        
        
        template<class Tr>
        class CompatTraits; 

        
        
        
        template<class Alloc>
        class CompatAlloc; 
    } 
}


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/detail/config_macros.hpp"

























#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/detail/config_macros.hpp"



#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/detail/workarounds_gcc-2_95.hpp"

































































































































































#line 163 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/detail/workarounds_gcc-2_95.hpp"
#line 34 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/detail/config_macros.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/detail/workarounds_stlport.hpp"



















#line 21 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/detail/workarounds_stlport.hpp"










#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/detail/workarounds_stlport.hpp"





#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/detail/workarounds_stlport.hpp"




#line 43 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/detail/workarounds_stlport.hpp"
#line 35 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/detail/config_macros.hpp"



#line 39 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/detail/config_macros.hpp"





#line 47 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/detail/config_macros.hpp"



#line 51 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/detail/config_macros.hpp"




#line 56 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/detail/config_macros.hpp"






























namespace boost { namespace io { namespace detail {

    typedef ::std:: locale locale_t;


#line 92 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/detail/config_macros.hpp"
} } }




#line 98 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/detail/config_macros.hpp"
#line 51 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/detail/compat_workarounds.hpp"
   




#line 57 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/detail/compat_workarounds.hpp"




#line 62 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/detail/compat_workarounds.hpp"



namespace boost {
    namespace io {

        
        template<class Tr>
        class CompatTraits
        {        
        public:
            typedef Tr  compatible_type;
        };

        
        template<class Alloc>
        class CompatAlloc
        {        
        public:
            typedef Alloc  compatible_type;
        };

    } 
} 
#line 87 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/detail/compat_workarounds.hpp"
#line 28 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format.hpp"






#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/format_fwd.hpp"




















namespace boost {

    template <class Ch, 

    
        class Tr = ::std:: char_traits<Ch>, class Alloc = std::allocator<Ch> > 


#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/format_fwd.hpp"
    class basic_format;

    typedef basic_format<char >     format;


    typedef basic_format<wchar_t >  wformat;
#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/format_fwd.hpp"

    namespace io {
        enum format_error_bits { bad_format_string_bit = 1, 
                                 too_few_args_bit = 2, too_many_args_bit = 4,
                                 out_of_range_bit = 8,
                                 all_error_bits = 255, no_error_bits=0 };
                  
    } 

} 

#line 50 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/format_fwd.hpp"
#line 35 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/internals_fwd.hpp"



















namespace boost {
namespace io {

namespace detail {
  template<class Ch, class Tr> struct stream_format_state;
    template<class Ch, class Tr, class Alloc> struct format_item;


  
  
  
    template<class Ch, class Tr, class Alloc, class T> 
    basic_format<Ch, Tr, Alloc>&  
    modify_item_body (basic_format<Ch, Tr, Alloc>& self, 
                      int itemN, T manipulator);

    template<class Ch, class Tr, class Alloc, class T> 
    basic_format<Ch, Tr, Alloc>&  
    bind_arg_body (basic_format<Ch, Tr, Alloc>& self,
                   int argN, const T& val);

    
    template<class Ch, class Tr, class T> 
    void apply_manip_body (stream_format_state<Ch, Tr>& self,
                           T manipulator);

    
    template<class Ch, class Tr, class Alloc, class T> 
    void distribute (basic_format<Ch,Tr, Alloc>& self, T x);

    template<class Ch, class Tr, class Alloc, class T> 
    basic_format<Ch, Tr, Alloc>& 
    feed (basic_format<Ch,Tr, Alloc>& self, T x);
 
} 

} 
} 


#line 61 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/internals_fwd.hpp"
#line 36 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/internals.hpp"


















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"


































#line 36 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"













#line 50 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\assert.h"




















#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"







































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\assert.h"










extern "C" {
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\assert.h"

 void __cdecl _wassert(  const wchar_t * _Message,   const wchar_t *_File,   unsigned _Line);


}
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\assert.h"



#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\assert.h"
#line 51 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"

#line 53 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"











#line 65 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"













#line 79 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"
  




































  



#line 121 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"











#line 133 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"



#line 137 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"
#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/internals.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/optional.hpp"














#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/optional/optional.hpp"





















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"


































#line 36 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"













#line 50 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\assert.h"




















#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"







































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\assert.h"










extern "C" {
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\assert.h"

 void __cdecl _wassert(  const wchar_t * _Message,   const wchar_t *_File,   unsigned _Line);


}
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\assert.h"



#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\assert.h"
#line 51 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"

#line 53 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"











#line 65 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"













#line 79 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"
  




































  



#line 121 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"











#line 133 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"



#line 137 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"
#line 23 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/optional/optional.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/has_nothrow_constructor.hpp"











#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/has_trivial_constructor.hpp"

















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"













#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"



























#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"


































#line 50 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"






#line 57 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



#line 61 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



#line 65 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



































































































































#line 197 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"
#line 19 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/has_trivial_constructor.hpp"

namespace boost {

namespace detail {

template <typename T>
struct has_trivial_ctor_impl
{

   static const bool value = (::boost::type_traits::ice_or< ::boost::is_pod<T>::value, __has_trivial_constructor(T) >::value);
#line 33 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/has_trivial_constructor.hpp"






#line 40 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/has_trivial_constructor.hpp"
};

} 

template< typename T > struct has_trivial_constructor : public ::boost::integral_constant<bool,::boost::detail::has_trivial_ctor_impl<T>::value> { public:   }; 
template< typename T > struct has_trivial_default_constructor : public ::boost::integral_constant<bool,::boost::detail::has_trivial_ctor_impl<T>::value> { public:   }; 

} 

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_undef.hpp"




























#line 50 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/has_trivial_constructor.hpp"

#line 52 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/has_trivial_constructor.hpp"
#line 13 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/has_nothrow_constructor.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"













#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"



























#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"


































#line 50 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"






#line 57 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



#line 61 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



#line 65 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



































































































































#line 197 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"
#line 16 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/has_nothrow_constructor.hpp"

namespace boost {

namespace detail{

template <class T>
struct has_nothrow_constructor_imp{

   static const bool value = (__has_nothrow_constructor(T) || ::boost::has_trivial_constructor<T>::value);


#line 28 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/has_nothrow_constructor.hpp"
};

}

template< typename T > struct has_nothrow_constructor : public ::boost::integral_constant<bool,::boost::detail::has_nothrow_constructor_imp<T>::value> { public:   }; 
template< typename T > struct has_nothrow_default_constructor : public ::boost::integral_constant<bool,::boost::detail::has_nothrow_constructor_imp<T>::value> { public:   }; 

template<> struct has_nothrow_constructor< void > : public ::boost::integral_constant<bool,false> { public:   };

template<> struct has_nothrow_constructor< void const > : public ::boost::integral_constant<bool,false> { public:   };
template<> struct has_nothrow_constructor< void const volatile > : public ::boost::integral_constant<bool,false> { public:   };
template<> struct has_nothrow_constructor< void volatile > : public ::boost::integral_constant<bool,false> { public:   };
#line 41 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/has_nothrow_constructor.hpp"

template<> struct has_nothrow_default_constructor< void > : public ::boost::integral_constant<bool,false> { public:   };

template<> struct has_nothrow_default_constructor< void const > : public ::boost::integral_constant<bool,false> { public:   };
template<> struct has_nothrow_default_constructor< void const volatile > : public ::boost::integral_constant<bool,false> { public:   };
template<> struct has_nothrow_default_constructor< void volatile > : public ::boost::integral_constant<bool,false> { public:   };
#line 48 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/has_nothrow_constructor.hpp"

} 

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_undef.hpp"




























#line 52 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/has_nothrow_constructor.hpp"

#line 54 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/has_nothrow_constructor.hpp"
#line 26 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/optional/optional.hpp"






#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/reference_content.hpp"



















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/has_nothrow_copy.hpp"











#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/has_trivial_copy.hpp"




















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"













#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"



























#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"


































#line 50 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"






#line 57 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



#line 61 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



#line 65 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



































































































































#line 197 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"
#line 22 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/has_trivial_copy.hpp"

namespace boost {

namespace detail {

template <typename T>
struct has_trivial_copy_impl
{

   static const bool value = (__has_trivial_copy(T)|| ( ::boost::is_pod<T>::value && !::boost::is_volatile<T>::value));






#line 39 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/has_trivial_copy.hpp"
};

} 

template< typename T > struct has_trivial_copy : public ::boost::integral_constant<bool,::boost::detail::has_trivial_copy_impl<T>::value> { public:   }; 
template< typename T > struct has_trivial_copy_constructor : public ::boost::integral_constant<bool,::boost::detail::has_trivial_copy_impl<T>::value> { public:   }; 

template<> struct has_trivial_copy< void > : public ::boost::integral_constant<bool,false> { public:   };

template<> struct has_trivial_copy< void const > : public ::boost::integral_constant<bool,false> { public:   };
template<> struct has_trivial_copy< void const volatile > : public ::boost::integral_constant<bool,false> { public:   };
template<> struct has_trivial_copy< void volatile > : public ::boost::integral_constant<bool,false> { public:   };
#line 52 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/has_trivial_copy.hpp"

template<> struct has_trivial_copy_constructor< void > : public ::boost::integral_constant<bool,false> { public:   };

template<> struct has_trivial_copy_constructor< void const > : public ::boost::integral_constant<bool,false> { public:   };
template<> struct has_trivial_copy_constructor< void const volatile > : public ::boost::integral_constant<bool,false> { public:   };
template<> struct has_trivial_copy_constructor< void volatile > : public ::boost::integral_constant<bool,false> { public:   };
#line 59 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/has_trivial_copy.hpp"

} 

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_undef.hpp"




























#line 63 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/has_trivial_copy.hpp"

#line 65 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/has_trivial_copy.hpp"
#line 13 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/has_nothrow_copy.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"













#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"



























#line 30 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"

#line 32 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/template_arity_spec.hpp"
#line 15 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"


































#line 50 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"






#line 57 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



#line 61 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



#line 65 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"



































































































































#line 197 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_def.hpp"
#line 16 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/has_nothrow_copy.hpp"

namespace boost {

namespace detail{

template <class T>
struct has_nothrow_copy_imp{

   static const bool value = (__has_nothrow_copy(T) || ::boost::has_trivial_copy<T>::value);


#line 28 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/has_nothrow_copy.hpp"
};

}

template< typename T > struct has_nothrow_copy : public ::boost::integral_constant<bool,::boost::detail::has_nothrow_copy_imp<T>::value> { public:   }; 
template< typename T > struct has_nothrow_copy_constructor : public ::boost::integral_constant<bool,::boost::detail::has_nothrow_copy_imp<T>::value> { public:   }; 

template<> struct has_nothrow_copy< void > : public ::boost::integral_constant<bool,false> { public:   };

template<> struct has_nothrow_copy< void const > : public ::boost::integral_constant<bool,false> { public:   };
template<> struct has_nothrow_copy< void const volatile > : public ::boost::integral_constant<bool,false> { public:   };
template<> struct has_nothrow_copy< void volatile > : public ::boost::integral_constant<bool,false> { public:   };
#line 41 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/has_nothrow_copy.hpp"

template<> struct has_nothrow_copy_constructor< void > : public ::boost::integral_constant<bool,false> { public:   };

template<> struct has_nothrow_copy_constructor< void const > : public ::boost::integral_constant<bool,false> { public:   };
template<> struct has_nothrow_copy_constructor< void const volatile > : public ::boost::integral_constant<bool,false> { public:   };
template<> struct has_nothrow_copy_constructor< void volatile > : public ::boost::integral_constant<bool,false> { public:   };
#line 48 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/has_nothrow_copy.hpp"

} 

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/detail/bool_trait_undef.hpp"




























#line 52 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/has_nothrow_copy.hpp"

#line 54 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/type_traits/has_nothrow_copy.hpp"
#line 21 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/reference_content.hpp"



#line 25 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/reference_content.hpp"



namespace boost {

namespace detail {






template <typename RefT>
class reference_content
{
private: 

    RefT content_;

public: 

    ~reference_content()
    {
    }

    reference_content(RefT r)
        : content_( r )
    {
    }

    reference_content(const reference_content& operand)
        : content_( operand.content_ )
    {
    }

private: 

    reference_content& operator=(const reference_content&);

public: 

    RefT get() const
    {
        return content_;
    }

};







template <typename T = mpl::void_> struct make_reference_content;



template <typename T>
struct make_reference_content
{
    typedef T type;
};

template <typename T>
struct make_reference_content< T& >
{
    typedef reference_content<T&> type;
};













#line 108 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/reference_content.hpp"

template <>
struct make_reference_content< mpl::void_ >
{
    template <typename T>
    struct apply
        : make_reference_content<T>
    {
    };

    typedef mpl::void_ type;
};

} 







template <typename T>
struct has_nothrow_copy<
      ::boost::detail::reference_content< T& >
    >
    : mpl::true_
{
};

#line 138 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/reference_content.hpp"

} 

#line 142 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/detail/reference_content.hpp"
#line 33 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/optional/optional.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/none.hpp"














#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/none_t.hpp"














namespace boost {

namespace detail { struct none_helper{}; }

typedef int detail::none_helper::*none_t ;

} 

#line 24 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/none_t.hpp"

#line 16 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/none.hpp"





namespace boost {

none_t const none = (static_cast<none_t>(0)) ;

} 

#line 28 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/none.hpp"

#line 34 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/optional/optional.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/compare_pointees.hpp"
















namespace boost {










template<class OptionalPointee>
inline
bool equal_pointees ( OptionalPointee const& x, OptionalPointee const& y )
{
  return (!x) != (!y) ? false : ( !x ? true : (*x) == (*y) ) ;
}

template<class OptionalPointee>
struct equal_pointees_t : std::binary_function<OptionalPointee,OptionalPointee,bool>
{
  bool operator() ( OptionalPointee const& x, OptionalPointee const& y ) const
    { return equal_pointees(x,y) ; }
} ;










template<class OptionalPointee>
inline
bool less_pointees ( OptionalPointee const& x, OptionalPointee const& y )
{
  return !y ? false : ( !x ? true : (*x) < (*y) ) ;
}

template<class OptionalPointee>
struct less_pointees_t : std::binary_function<OptionalPointee,OptionalPointee,bool>
{
  bool operator() ( OptionalPointee const& x, OptionalPointee const& y ) const
    { return less_pointees(x,y) ; }
} ;

} 

#line 68 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/compare_pointees.hpp"

#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/optional/optional.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/detail/in_place_factory_prefix.hpp"


































#line 36 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/detail/in_place_factory_prefix.hpp"

#line 17 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"

namespace boost {

class in_place_factory_base {} ;



#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"














#line 16 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/bounds/lower1.hpp"











#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/slot/detail/shared.hpp"














































#line 48 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/slot/detail/shared.hpp"





















#line 70 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/slot/detail/shared.hpp"





















#line 92 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/slot/detail/shared.hpp"





















#line 114 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/slot/detail/shared.hpp"





















#line 136 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/slot/detail/shared.hpp"





















#line 158 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/slot/detail/shared.hpp"





















#line 180 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/slot/detail/shared.hpp"





















#line 202 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/slot/detail/shared.hpp"





















#line 224 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/slot/detail/shared.hpp"





















#line 246 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/slot/detail/shared.hpp"


#line 13 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/bounds/lower1.hpp"


































#line 48 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/bounds/lower1.hpp"





















#line 70 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/bounds/lower1.hpp"





















#line 92 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/bounds/lower1.hpp"



#line 96 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/bounds/lower1.hpp"

#line 98 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/bounds/lower1.hpp"

#line 100 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/bounds/lower1.hpp"
#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/bounds/upper1.hpp"











#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/slot/detail/shared.hpp"














































#line 48 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/slot/detail/shared.hpp"





















#line 70 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/slot/detail/shared.hpp"





















#line 92 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/slot/detail/shared.hpp"





















#line 114 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/slot/detail/shared.hpp"





















#line 136 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/slot/detail/shared.hpp"





















#line 158 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/slot/detail/shared.hpp"





















#line 180 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/slot/detail/shared.hpp"





















#line 202 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/slot/detail/shared.hpp"



#line 206 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/slot/detail/shared.hpp"

















#line 224 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/slot/detail/shared.hpp"





















#line 246 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/slot/detail/shared.hpp"


#line 13 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/bounds/upper1.hpp"


































#line 48 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/bounds/upper1.hpp"



#line 52 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/bounds/upper1.hpp"

















#line 70 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/bounds/upper1.hpp"





















#line 92 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/bounds/upper1.hpp"



#line 96 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/bounds/upper1.hpp"



#line 100 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/bounds/upper1.hpp"
#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"















#line 36 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"








#line 45 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"



































#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"
class in_place_factory0
  : 
  public in_place_factory_base
{
public:

  explicit in_place_factory0
      (  )


#line 48 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"
  {}

  template<class T>
  void* apply(void* address
      ) const
  {
    return new(address) T(  );
  }

  template<class T>
  void* apply(void* address, std::size_t n
      ) const
  {
    for(char* next = address = this->template apply<T>(address);
        !! --n;)
      this->template apply<T>(next = next+sizeof(T));
    return address; 
  }

  
};









#line 79 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"
inline in_place_factory0 in_place()
{
  return in_place_factory0();
}
#line 84 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"


#line 87 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"
#line 88 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"

#line 48 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"

#line 50 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"


































template<  class A0 >
#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"
class in_place_factory1
  : 
  public in_place_factory_base
{
public:

  explicit in_place_factory1
      (  A0 const& a0 )

    :  m_a0 ( a0 )
#line 48 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"
  {}

  template<class T>
  void* apply(void* address
      ) const
  {
    return new(address) T(  m_a0 );
  }

  template<class T>
  void* apply(void* address, std::size_t n
      ) const
  {
    for(char* next = address = this->template apply<T>(address);
        !! --n;)
      this->template apply<T>(next = next+sizeof(T));
    return address; 
  }

  A0 const& m_a0;
};


template<  class A0 >
inline in_place_factory1<  A0 >
in_place(  A0 const& a0 )
{
  return in_place_factory1<  A0 >
      (  a0 );
}





#line 84 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"


#line 87 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"
#line 88 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"

#line 53 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"

#line 55 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"


































template<  class A0 , class A1 >
#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"
class in_place_factory2
  : 
  public in_place_factory_base
{
public:

  explicit in_place_factory2
      (  A0 const& a0 , A1 const& a1 )

    :  m_a0 ( a0 ) , m_a1 ( a1 )
#line 48 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"
  {}

  template<class T>
  void* apply(void* address
      ) const
  {
    return new(address) T(  m_a0 , m_a1 );
  }

  template<class T>
  void* apply(void* address, std::size_t n
      ) const
  {
    for(char* next = address = this->template apply<T>(address);
        !! --n;)
      this->template apply<T>(next = next+sizeof(T));
    return address; 
  }

  A0 const& m_a0; A1 const& m_a1;
};


template<  class A0 , class A1 >
inline in_place_factory2<  A0 , A1 >
in_place(  A0 const& a0 , A1 const& a1 )
{
  return in_place_factory2<  A0 , A1 >
      (  a0 , a1 );
}





#line 84 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"


#line 87 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"
#line 88 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"

#line 58 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"

#line 60 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"


































template<  class A0 , class A1 , class A2 >
#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"
class in_place_factory3
  : 
  public in_place_factory_base
{
public:

  explicit in_place_factory3
      (  A0 const& a0 , A1 const& a1 , A2 const& a2 )

    :  m_a0 ( a0 ) , m_a1 ( a1 ) , m_a2 ( a2 )
#line 48 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"
  {}

  template<class T>
  void* apply(void* address
      ) const
  {
    return new(address) T(  m_a0 , m_a1 , m_a2 );
  }

  template<class T>
  void* apply(void* address, std::size_t n
      ) const
  {
    for(char* next = address = this->template apply<T>(address);
        !! --n;)
      this->template apply<T>(next = next+sizeof(T));
    return address; 
  }

  A0 const& m_a0; A1 const& m_a1; A2 const& m_a2;
};


template<  class A0 , class A1 , class A2 >
inline in_place_factory3<  A0 , A1 , A2 >
in_place(  A0 const& a0 , A1 const& a1 , A2 const& a2 )
{
  return in_place_factory3<  A0 , A1 , A2 >
      (  a0 , a1 , a2 );
}





#line 84 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"


#line 87 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"
#line 88 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"

#line 63 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"

#line 65 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"


































template<  class A0 , class A1 , class A2 , class A3 >
#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"
class in_place_factory4
  : 
  public in_place_factory_base
{
public:

  explicit in_place_factory4
      (  A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 )

    :  m_a0 ( a0 ) , m_a1 ( a1 ) , m_a2 ( a2 ) , m_a3 ( a3 )
#line 48 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"
  {}

  template<class T>
  void* apply(void* address
      ) const
  {
    return new(address) T(  m_a0 , m_a1 , m_a2 , m_a3 );
  }

  template<class T>
  void* apply(void* address, std::size_t n
      ) const
  {
    for(char* next = address = this->template apply<T>(address);
        !! --n;)
      this->template apply<T>(next = next+sizeof(T));
    return address; 
  }

  A0 const& m_a0; A1 const& m_a1; A2 const& m_a2; A3 const& m_a3;
};


template<  class A0 , class A1 , class A2 , class A3 >
inline in_place_factory4<  A0 , A1 , A2 , A3 >
in_place(  A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 )
{
  return in_place_factory4<  A0 , A1 , A2 , A3 >
      (  a0 , a1 , a2 , a3 );
}





#line 84 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"


#line 87 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"
#line 88 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"

#line 68 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"

#line 70 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"


































template<  class A0 , class A1 , class A2 , class A3 , class A4 >
#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"
class in_place_factory5
  : 
  public in_place_factory_base
{
public:

  explicit in_place_factory5
      (  A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 )

    :  m_a0 ( a0 ) , m_a1 ( a1 ) , m_a2 ( a2 ) , m_a3 ( a3 ) , m_a4 ( a4 )
#line 48 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"
  {}

  template<class T>
  void* apply(void* address
      ) const
  {
    return new(address) T(  m_a0 , m_a1 , m_a2 , m_a3 , m_a4 );
  }

  template<class T>
  void* apply(void* address, std::size_t n
      ) const
  {
    for(char* next = address = this->template apply<T>(address);
        !! --n;)
      this->template apply<T>(next = next+sizeof(T));
    return address; 
  }

  A0 const& m_a0; A1 const& m_a1; A2 const& m_a2; A3 const& m_a3; A4 const& m_a4;
};


template<  class A0 , class A1 , class A2 , class A3 , class A4 >
inline in_place_factory5<  A0 , A1 , A2 , A3 , A4 >
in_place(  A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 )
{
  return in_place_factory5<  A0 , A1 , A2 , A3 , A4 >
      (  a0 , a1 , a2 , a3 , a4 );
}





#line 84 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"


#line 87 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"
#line 88 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"

#line 73 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"

#line 75 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"


































template<  class A0 , class A1 , class A2 , class A3 , class A4 , class A5 >
#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"
class in_place_factory6
  : 
  public in_place_factory_base
{
public:

  explicit in_place_factory6
      (  A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 )

    :  m_a0 ( a0 ) , m_a1 ( a1 ) , m_a2 ( a2 ) , m_a3 ( a3 ) , m_a4 ( a4 ) , m_a5 ( a5 )
#line 48 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"
  {}

  template<class T>
  void* apply(void* address
      ) const
  {
    return new(address) T(  m_a0 , m_a1 , m_a2 , m_a3 , m_a4 , m_a5 );
  }

  template<class T>
  void* apply(void* address, std::size_t n
      ) const
  {
    for(char* next = address = this->template apply<T>(address);
        !! --n;)
      this->template apply<T>(next = next+sizeof(T));
    return address; 
  }

  A0 const& m_a0; A1 const& m_a1; A2 const& m_a2; A3 const& m_a3; A4 const& m_a4; A5 const& m_a5;
};


template<  class A0 , class A1 , class A2 , class A3 , class A4 , class A5 >
inline in_place_factory6<  A0 , A1 , A2 , A3 , A4 , A5 >
in_place(  A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 )
{
  return in_place_factory6<  A0 , A1 , A2 , A3 , A4 , A5 >
      (  a0 , a1 , a2 , a3 , a4 , a5 );
}





#line 84 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"


#line 87 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"
#line 88 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"

#line 78 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"

#line 80 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"


































template<  class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 >
#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"
class in_place_factory7
  : 
  public in_place_factory_base
{
public:

  explicit in_place_factory7
      (  A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 )

    :  m_a0 ( a0 ) , m_a1 ( a1 ) , m_a2 ( a2 ) , m_a3 ( a3 ) , m_a4 ( a4 ) , m_a5 ( a5 ) , m_a6 ( a6 )
#line 48 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"
  {}

  template<class T>
  void* apply(void* address
      ) const
  {
    return new(address) T(  m_a0 , m_a1 , m_a2 , m_a3 , m_a4 , m_a5 , m_a6 );
  }

  template<class T>
  void* apply(void* address, std::size_t n
      ) const
  {
    for(char* next = address = this->template apply<T>(address);
        !! --n;)
      this->template apply<T>(next = next+sizeof(T));
    return address; 
  }

  A0 const& m_a0; A1 const& m_a1; A2 const& m_a2; A3 const& m_a3; A4 const& m_a4; A5 const& m_a5; A6 const& m_a6;
};


template<  class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 >
inline in_place_factory7<  A0 , A1 , A2 , A3 , A4 , A5 , A6 >
in_place(  A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 )
{
  return in_place_factory7<  A0 , A1 , A2 , A3 , A4 , A5 , A6 >
      (  a0 , a1 , a2 , a3 , a4 , a5 , a6 );
}





#line 84 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"


#line 87 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"
#line 88 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"

#line 83 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"

#line 85 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"


































template<  class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 >
#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"
class in_place_factory8
  : 
  public in_place_factory_base
{
public:

  explicit in_place_factory8
      (  A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 )

    :  m_a0 ( a0 ) , m_a1 ( a1 ) , m_a2 ( a2 ) , m_a3 ( a3 ) , m_a4 ( a4 ) , m_a5 ( a5 ) , m_a6 ( a6 ) , m_a7 ( a7 )
#line 48 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"
  {}

  template<class T>
  void* apply(void* address
      ) const
  {
    return new(address) T(  m_a0 , m_a1 , m_a2 , m_a3 , m_a4 , m_a5 , m_a6 , m_a7 );
  }

  template<class T>
  void* apply(void* address, std::size_t n
      ) const
  {
    for(char* next = address = this->template apply<T>(address);
        !! --n;)
      this->template apply<T>(next = next+sizeof(T));
    return address; 
  }

  A0 const& m_a0; A1 const& m_a1; A2 const& m_a2; A3 const& m_a3; A4 const& m_a4; A5 const& m_a5; A6 const& m_a6; A7 const& m_a7;
};


template<  class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 >
inline in_place_factory8<  A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 >
in_place(  A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 )
{
  return in_place_factory8<  A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 >
      (  a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 );
}





#line 84 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"


#line 87 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"
#line 88 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"

#line 88 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"

#line 90 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"


































template<  class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 >
#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"
class in_place_factory9
  : 
  public in_place_factory_base
{
public:

  explicit in_place_factory9
      (  A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 )

    :  m_a0 ( a0 ) , m_a1 ( a1 ) , m_a2 ( a2 ) , m_a3 ( a3 ) , m_a4 ( a4 ) , m_a5 ( a5 ) , m_a6 ( a6 ) , m_a7 ( a7 ) , m_a8 ( a8 )
#line 48 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"
  {}

  template<class T>
  void* apply(void* address
      ) const
  {
    return new(address) T(  m_a0 , m_a1 , m_a2 , m_a3 , m_a4 , m_a5 , m_a6 , m_a7 , m_a8 );
  }

  template<class T>
  void* apply(void* address, std::size_t n
      ) const
  {
    for(char* next = address = this->template apply<T>(address);
        !! --n;)
      this->template apply<T>(next = next+sizeof(T));
    return address; 
  }

  A0 const& m_a0; A1 const& m_a1; A2 const& m_a2; A3 const& m_a3; A4 const& m_a4; A5 const& m_a5; A6 const& m_a6; A7 const& m_a7; A8 const& m_a8;
};


template<  class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 >
inline in_place_factory9<  A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 >
in_place(  A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 )
{
  return in_place_factory9<  A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 >
      (  a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 );
}





#line 84 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"


#line 87 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"
#line 88 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"

#line 93 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"

#line 95 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"


































template<  class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 >
#line 37 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"
class in_place_factory10
  : 
  public in_place_factory_base
{
public:

  explicit in_place_factory10
      (  A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 )

    :  m_a0 ( a0 ) , m_a1 ( a1 ) , m_a2 ( a2 ) , m_a3 ( a3 ) , m_a4 ( a4 ) , m_a5 ( a5 ) , m_a6 ( a6 ) , m_a7 ( a7 ) , m_a8 ( a8 ) , m_a9 ( a9 )
#line 48 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"
  {}

  template<class T>
  void* apply(void* address
      ) const
  {
    return new(address) T(  m_a0 , m_a1 , m_a2 , m_a3 , m_a4 , m_a5 , m_a6 , m_a7 , m_a8 , m_a9 );
  }

  template<class T>
  void* apply(void* address, std::size_t n
      ) const
  {
    for(char* next = address = this->template apply<T>(address);
        !! --n;)
      this->template apply<T>(next = next+sizeof(T));
    return address; 
  }

  A0 const& m_a0; A1 const& m_a1; A2 const& m_a2; A3 const& m_a3; A4 const& m_a4; A5 const& m_a5; A6 const& m_a6; A7 const& m_a7; A8 const& m_a8; A9 const& m_a9;
};


template<  class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 >
inline in_place_factory10<  A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 >
in_place(  A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 )
{
  return in_place_factory10<  A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 >
      (  a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9 );
}





#line 84 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"


#line 87 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"
#line 88 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"

#line 98 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"

#line 100 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 105 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 110 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 115 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 120 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 125 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 130 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 135 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 140 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 145 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 150 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 155 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 160 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 165 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 170 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 175 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 180 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 185 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 190 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 195 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 200 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 205 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 210 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 215 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 220 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 225 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 230 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 235 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 240 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 245 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 250 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 255 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 260 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 265 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 270 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 275 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 280 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 285 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 290 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 295 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 300 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 305 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 310 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 315 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 320 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 325 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 330 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 335 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 340 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 345 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 350 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 355 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 360 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 365 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 370 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 375 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 380 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 385 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 390 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 395 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 400 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 405 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 410 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 415 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 420 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 425 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 430 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 435 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 440 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 445 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 450 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 455 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 460 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 465 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 470 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 475 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 480 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 485 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 490 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 495 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 500 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 505 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 510 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 515 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 520 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 525 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 530 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 535 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 540 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 545 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 550 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 555 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 560 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 565 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 570 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 575 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 580 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 585 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 590 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 595 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 600 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 605 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 610 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 615 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 620 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 625 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 630 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 635 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 640 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 645 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 650 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 655 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 660 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 665 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 670 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 675 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 680 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 685 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 690 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 695 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 700 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 705 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 710 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 715 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 720 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 725 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 730 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 735 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 740 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 745 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 750 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 755 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 760 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 765 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 770 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 775 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 780 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 785 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 790 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 795 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 800 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 805 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 810 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 815 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 820 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 825 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 830 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 835 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 840 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 845 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 850 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 855 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 860 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 865 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 870 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 875 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 880 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 885 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 890 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 895 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 900 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 905 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 910 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 915 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 920 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 925 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 930 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 935 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 940 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 945 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 950 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 955 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 960 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 965 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 970 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 975 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 980 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 985 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 990 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 995 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1000 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1005 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1010 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1015 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1020 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1025 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1030 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1035 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1040 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1045 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1050 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1055 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1060 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1065 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1070 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1075 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1080 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1085 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1090 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1095 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1100 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1105 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1110 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1115 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1120 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1125 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1130 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1135 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1140 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1145 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1150 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1155 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1160 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1165 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1170 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1175 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1180 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1185 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1190 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1195 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1200 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1205 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1210 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1215 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1220 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1225 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1230 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1235 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1240 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1245 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1250 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1255 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1260 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1265 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1270 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1275 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1280 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1285 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1290 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1295 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1300 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1305 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1310 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1315 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1320 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1325 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"




#line 1330 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"
#line 1331 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/preprocessor/iteration/detail/iter/forward1.hpp"













#line 25 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"

} 

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/detail/in_place_factory_suffix.hpp"





















#line 23 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/detail/in_place_factory_suffix.hpp"

#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"

























































#line 87 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"
#line 88 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/utility/in_place_factory.hpp"

#line 38 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/optional/optional.hpp"

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/optional/optional_fwd.hpp"

















namespace boost {

template<class T> class optional ;

template<class T> void swap ( optional<T>& , optional<T>& ) ;

template<class T> struct optional_swap_should_use_default_constructor ;

} 

#line 29 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/optional/optional_fwd.hpp"

#line 40 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/optional/optional.hpp"











#line 52 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/optional/optional.hpp"








#line 61 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/optional/optional.hpp"







#line 69 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/optional/optional.hpp"




#line 74 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/optional/optional.hpp"









#line 85 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/optional/optional.hpp"







#line 94 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/optional/optional.hpp"





namespace boost_optional_detail
{
  template <class T, class Factory>
  inline void construct(Factory const& factory, void* address)
  {
    factory.template apply<T>(address);
  }
}


namespace boost {

class in_place_factory_base ;
class typed_in_place_factory_base ;


template<class T> void swap ( optional<T>& x, optional<T>& y );

namespace optional_detail {





template <class T>
class aligned_storage
{
    
    union
    


#line 132 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/optional/optional.hpp"
    dummy_u
    {
        char data[ sizeof(T) ];
        typename type_with_alignment<
          ::boost::alignment_of<T>::value >::type aligner_;
    } dummy_ ;

  public:




#line 145 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/optional/optional.hpp"
    void const* address() const { return dummy_.data; }
    void      * address()       { return dummy_.data; }
#line 148 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/optional/optional.hpp"
} ;

template<class T>
struct types_when_isnt_ref
{
  typedef T const& reference_const_type ;
  typedef T &      reference_type ;
  typedef T const* pointer_const_type ;
  typedef T *      pointer_type ;
  typedef T const& argument_type ;
} ;
template<class T>
struct types_when_is_ref
{
  typedef typename remove_reference<T>::type raw_type ;

  typedef raw_type& reference_const_type ;
  typedef raw_type& reference_type ;
  typedef raw_type* pointer_const_type ;
  typedef raw_type* pointer_type ;
  typedef raw_type& argument_type ;
} ;

struct optional_tag {} ;

template<class T>
class optional_base : public optional_tag
{
  private :

    typedef

    typename
#line 182 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/optional/optional.hpp"
    ::boost::detail::make_reference_content<T>::type internal_type ;

    typedef aligned_storage<internal_type> storage_type ;

    typedef types_when_isnt_ref<T> types_when_not_ref ;
    typedef types_when_is_ref<T>   types_when_ref   ;

    typedef optional_base<T> this_type ;

  protected :

    typedef T value_type ;

    typedef mpl::true_  is_reference_tag ;
    typedef mpl::false_ is_not_reference_tag ;

    typedef typename is_reference<T>::type is_reference_predicate ;

  public:
    typedef typename mpl::if_<is_reference_predicate,types_when_ref,types_when_not_ref>::type types ;

  protected:
    typedef bool (this_type::*unspecified_bool_type)() const;

    typedef typename types::reference_type       reference_type ;
    typedef typename types::reference_const_type reference_const_type ;
    typedef typename types::pointer_type         pointer_type ;
    typedef typename types::pointer_const_type   pointer_const_type ;
    typedef typename types::argument_type        argument_type ;

    
    
    optional_base()
      :
      m_initialized(false) {}

    
    
    optional_base ( none_t )
      :
      m_initialized(false) {}

    
    
    optional_base ( argument_type val )
      :
      m_initialized(false)
    {
      construct(val);
    }

    
    
    optional_base ( bool cond, argument_type val )
      :
      m_initialized(false)
    {
      if ( cond )
        construct(val);
    }

    
    
    optional_base ( optional_base const& rhs )
      :
      m_initialized(false)
    {
      if ( rhs.is_initialized() )
        construct(rhs.get_impl());
    }


    
    
    
    template<class Expr>
    explicit optional_base ( Expr const& expr, Expr const* tag )
      :
      m_initialized(false)
    {
      construct(expr,tag);
    }



    
    ~optional_base() { destroy() ; }

    
    void assign ( optional_base const& rhs )
    {
      if (is_initialized())
      {
        if ( rhs.is_initialized() )
             assign_value(rhs.get_impl(), is_reference_predicate() );
        else destroy();
      }
      else
      {
        if ( rhs.is_initialized() )
          construct(rhs.get_impl());
      }
    }

    
    template<class U>
    void assign ( optional<U> const& rhs )
    {
      if (is_initialized())
      {
        if ( rhs.is_initialized() )
             assign_value(static_cast<value_type>(rhs.get()), is_reference_predicate() );
        else destroy();
      }
      else
      {
        if ( rhs.is_initialized() )
          construct(static_cast<value_type>(rhs.get()));
      }
    }

    
    void assign ( argument_type val )
    {
      if (is_initialized())
           assign_value(val, is_reference_predicate() );
      else construct(val);
    }

    
    
    void assign ( none_t ) { destroy(); }


    template<class Expr>
    void assign_expr ( Expr const& expr, Expr const* tag )
      {
        if (is_initialized())
             assign_expr_to_initialized(expr,tag);
        else construct(expr,tag);
      }
#line 324 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/optional/optional.hpp"

  public :

    
    
    void reset() { destroy(); }

    
    void reset ( argument_type val ) { assign(val); }

    
    
    
    pointer_const_type get_ptr() const { return m_initialized ? get_ptr_impl() : 0 ; }
    pointer_type       get_ptr()       { return m_initialized ? get_ptr_impl() : 0 ; }

    bool is_initialized() const { return m_initialized ; }

  protected :

    void construct ( argument_type val )
     {
       new (m_storage.address()) internal_type(val) ;
       m_initialized = true ;
     }


    
    template<class Expr>
    void construct ( Expr const& factory, in_place_factory_base const* )
     {
       static_assert(::boost::mpl::not_<is_reference_predicate>::value, "::boost::mpl::not_<is_reference_predicate>::value") ;
       boost_optional_detail::construct<value_type>(factory, m_storage.address());
       m_initialized = true ;
     }

    
    template<class Expr>
    void construct ( Expr const& factory, typed_in_place_factory_base const* )
     {
       static_assert(::boost::mpl::not_<is_reference_predicate>::value, "::boost::mpl::not_<is_reference_predicate>::value") ;
       factory.apply(m_storage.address()) ;
       m_initialized = true ;
     }

    template<class Expr>
    void assign_expr_to_initialized ( Expr const& factory, in_place_factory_base const* tag )
     {
       destroy();
       construct(factory,tag);
     }

    
    template<class Expr>
    void assign_expr_to_initialized ( Expr const& factory, typed_in_place_factory_base const* tag )
     {
       destroy();
       construct(factory,tag);
     }
#line 384 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/optional/optional.hpp"

    
    
    
    
    template<class Expr>
    void construct ( Expr const& expr, void const* )
     {
       new (m_storage.address()) internal_type(expr) ;
       m_initialized = true ;
     }

    
    
    
    
    template<class Expr>
    void assign_expr_to_initialized ( Expr const& expr, void const* )
     {
       assign_value(expr, is_reference_predicate());
     }




























    void assign_value ( argument_type val, is_not_reference_tag ) { get_impl() = val; }
    void assign_value ( argument_type val, is_reference_tag     ) { construct(val); }

    void destroy()
    {
      if ( m_initialized )
        destroy_impl(is_reference_predicate()) ;
    }

    unspecified_bool_type safe_bool() const { return m_initialized ? &this_type::is_initialized : 0 ; }

    reference_const_type get_impl() const { return dereference(get_object(), is_reference_predicate() ) ; }
    reference_type       get_impl()       { return dereference(get_object(), is_reference_predicate() ) ; }

    pointer_const_type get_ptr_impl() const { return cast_ptr(get_object(), is_reference_predicate() ) ; }
    pointer_type       get_ptr_impl()       { return cast_ptr(get_object(), is_reference_predicate() ) ; }

  private :

    












#line 466 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/optional/optional.hpp"
    internal_type const* get_object() const { return static_cast<internal_type const*>(m_storage.address()); }
    internal_type *      get_object()       { return static_cast<internal_type *>     (m_storage.address()); }
#line 469 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/optional/optional.hpp"

    
    reference_const_type dereference( internal_type const* p, is_not_reference_tag ) const { return *p ; }
    reference_type       dereference( internal_type*       p, is_not_reference_tag )       { return *p ; }
    reference_const_type dereference( internal_type const* p, is_reference_tag     ) const { return p->get() ; }
    reference_type       dereference( internal_type*       p, is_reference_tag     )       { return p->get() ; }



#line 479 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/optional/optional.hpp"
    void destroy_impl ( is_not_reference_tag ) { get_ptr_impl()->T::~T() ; m_initialized = false ; }
#line 481 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/optional/optional.hpp"

    void destroy_impl ( is_reference_tag     ) { m_initialized = false ; }

    
    
    
    pointer_const_type cast_ptr( internal_type const* p, is_not_reference_tag ) const { return p ; }
    pointer_type       cast_ptr( internal_type *      p, is_not_reference_tag )       { return p ; }
    pointer_const_type cast_ptr( internal_type const* p, is_reference_tag     ) const { return &p->get() ; }
    pointer_type       cast_ptr( internal_type *      p, is_reference_tag     )       { return &p->get() ; }

    bool m_initialized ;
    storage_type m_storage ;
} ;

} 

template<class T>
class optional : public optional_detail::optional_base<T>
{
    typedef optional_detail::optional_base<T> base ;

    typedef typename base::unspecified_bool_type  unspecified_bool_type ;

  public :

    typedef optional<T> this_type ;

    typedef typename base::value_type           value_type ;
    typedef typename base::reference_type       reference_type ;
    typedef typename base::reference_const_type reference_const_type ;
    typedef typename base::pointer_type         pointer_type ;
    typedef typename base::pointer_const_type   pointer_const_type ;
    typedef typename base::argument_type        argument_type ;

    
    
    optional() : base() {}

    
    
    optional( none_t none_ ) : base(none_) {}

    
    
    optional ( argument_type val ) : base(val) {}

    
    
    optional ( bool cond, argument_type val ) : base(cond,val) {}


    

    
    
    
    template<class U>
    explicit optional ( optional<U> const& rhs )
      :
      base()
    {
      if ( rhs.is_initialized() )
        this->construct(rhs.get());
    }
#line 547 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/optional/optional.hpp"


    
    
    
    
    
    
    
    
    
    template<class Expr>
    explicit optional ( Expr const& expr ) : base(expr,boost::addressof(expr)) {}
#line 561 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/optional/optional.hpp"

    
    
    optional ( optional const& rhs ) : base( static_cast<base const&>(rhs) ) {}

   
    ~optional() {}


    
    
    template<class Expr>
    optional& operator= ( Expr const& expr )
      {
        this->assign_expr(expr,boost::addressof(expr));
        return *this ;
      }
#line 579 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/optional/optional.hpp"



    
    
    
    template<class U>
    optional& operator= ( optional<U> const& rhs )
      {
        this->assign(rhs);
        return *this ;
      }
#line 592 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/optional/optional.hpp"

    
    
    
    optional& operator= ( optional const& rhs )
      {
        this->assign( static_cast<base const&>(rhs) ) ;
        return *this ;
      }

    
    
    optional& operator= ( argument_type val )
      {
        this->assign( val ) ;
        return *this ;
      }

    
    
    
    optional& operator= ( none_t none_ )
      {
        this->assign( none_ ) ;
        return *this ;
      }

    void swap( optional & arg )
      {
        
        using boost::swap;
        swap(*this, arg);
      }


    
    
    
    reference_const_type get() const { (void)( (!!(this->is_initialized())) || (_wassert(L"this->is_initialized()", L"C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/optional/optional.hpp", 630), 0) ) ; return this->get_impl(); }
    reference_type       get()       { (void)( (!!(this->is_initialized())) || (_wassert(L"this->is_initialized()", L"C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/optional/optional.hpp", 631), 0) ) ; return this->get_impl(); }

    
    reference_const_type get_value_or ( reference_const_type v ) const { return this->is_initialized() ? get() : v ; }
    reference_type       get_value_or ( reference_type       v )       { return this->is_initialized() ? get() : v ; }

    
    
    
    pointer_const_type operator->() const { (void)( (!!(this->is_initialized())) || (_wassert(L"this->is_initialized()", L"C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/optional/optional.hpp", 640), 0) ) ; return this->get_ptr_impl() ; }
    pointer_type       operator->()       { (void)( (!!(this->is_initialized())) || (_wassert(L"this->is_initialized()", L"C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/optional/optional.hpp", 641), 0) ) ; return this->get_ptr_impl() ; }

    
    
    
    reference_const_type operator *() const { return this->get() ; }
    reference_type       operator *()       { return this->get() ; }

    
    
    operator unspecified_bool_type() const { return this->safe_bool() ; }

    
    
    bool operator!() const { return !this->is_initialized() ; }
} ;


template<class T>
inline
optional<T> make_optional ( T const& v  )
{
  return optional<T>(v);
}


template<class T>
inline
optional<T> make_optional ( bool cond, T const& v )
{
  return optional<T>(cond,v);
}



template<class T>
inline
typename optional<T>::reference_const_type
get ( optional<T> const& opt )
{
  return opt.get() ;
}

template<class T>
inline
typename optional<T>::reference_type
get ( optional<T>& opt )
{
  return opt.get() ;
}



template<class T>
inline
typename optional<T>::pointer_const_type
get ( optional<T> const* opt )
{
  return opt->get_ptr() ;
}

template<class T>
inline
typename optional<T>::pointer_type
get ( optional<T>* opt )
{
  return opt->get_ptr() ;
}



template<class T>
inline
typename optional<T>::reference_const_type
get_optional_value_or ( optional<T> const& opt, typename optional<T>::reference_const_type v )
{
  return opt.get_value_or(v) ;
}

template<class T>
inline
typename optional<T>::reference_type
get_optional_value_or ( optional<T>& opt, typename optional<T>::reference_type v )
{
  return opt.get_value_or(v) ;
}



template<class T>
inline
typename optional<T>::pointer_const_type
get_pointer ( optional<T> const& opt )
{
  return opt.get_ptr() ;
}

template<class T>
inline
typename optional<T>::pointer_type
get_pointer ( optional<T>& opt )
{
  return opt.get_ptr() ;
}









template<class T>
inline
bool operator == ( optional<T> const& x, optional<T> const& y )
{ return equal_pointees(x,y); }

template<class T>
inline
bool operator < ( optional<T> const& x, optional<T> const& y )
{ return less_pointees(x,y); }

template<class T>
inline
bool operator != ( optional<T> const& x, optional<T> const& y )
{ return !( x == y ) ; }

template<class T>
inline
bool operator > ( optional<T> const& x, optional<T> const& y )
{ return y < x ; }

template<class T>
inline
bool operator <= ( optional<T> const& x, optional<T> const& y )
{ return !( y < x ) ; }

template<class T>
inline
bool operator >= ( optional<T> const& x, optional<T> const& y )
{ return !( x < y ) ; }





template<class T>
inline
bool operator == ( optional<T> const& x, T const& y )
{ return equal_pointees(x, optional<T>(y)); }

template<class T>
inline
bool operator < ( optional<T> const& x, T const& y )
{ return less_pointees(x, optional<T>(y)); }

template<class T>
inline
bool operator != ( optional<T> const& x, T const& y )
{ return !( x == y ) ; }

template<class T>
inline
bool operator > ( optional<T> const& x, T const& y )
{ return y < x ; }

template<class T>
inline
bool operator <= ( optional<T> const& x, T const& y )
{ return !( y < x ) ; }

template<class T>
inline
bool operator >= ( optional<T> const& x, T const& y )
{ return !( x < y ) ; }





template<class T>
inline
bool operator == ( T const& x, optional<T> const& y )
{ return equal_pointees( optional<T>(x), y ); }

template<class T>
inline
bool operator < ( T const& x, optional<T> const& y )
{ return less_pointees( optional<T>(x), y ); }

template<class T>
inline
bool operator != ( T const& x, optional<T> const& y )
{ return !( x == y ) ; }

template<class T>
inline
bool operator > ( T const& x, optional<T> const& y )
{ return y < x ; }

template<class T>
inline
bool operator <= ( T const& x, optional<T> const& y )
{ return !( y < x ) ; }

template<class T>
inline
bool operator >= ( T const& x, optional<T> const& y )
{ return !( x < y ) ; }






template<class T>
inline
bool operator == ( optional<T> const& x, none_t )
{ return equal_pointees(x, optional<T>() ); }

template<class T>
inline
bool operator < ( optional<T> const& x, none_t )
{ return less_pointees(x,optional<T>() ); }

template<class T>
inline
bool operator != ( optional<T> const& x, none_t y )
{ return !( x == y ) ; }

template<class T>
inline
bool operator > ( optional<T> const& x, none_t y )
{ return y < x ; }

template<class T>
inline
bool operator <= ( optional<T> const& x, none_t y )
{ return !( y < x ) ; }

template<class T>
inline
bool operator >= ( optional<T> const& x, none_t y )
{ return !( x < y ) ; }





template<class T>
inline
bool operator == ( none_t , optional<T> const& y )
{ return equal_pointees(optional<T>() ,y); }

template<class T>
inline
bool operator < ( none_t , optional<T> const& y )
{ return less_pointees(optional<T>() ,y); }

template<class T>
inline
bool operator != ( none_t x, optional<T> const& y )
{ return !( x == y ) ; }

template<class T>
inline
bool operator > ( none_t x, optional<T> const& y )
{ return y < x ; }

template<class T>
inline
bool operator <= ( none_t x, optional<T> const& y )
{ return !( y < x ) ; }

template<class T>
inline
bool operator >= ( none_t x, optional<T> const& y )
{ return !( x < y ) ; }

namespace optional_detail {

template<bool use_default_constructor> struct swap_selector;

template<>
struct swap_selector<true>
{
    template<class T>
    static void optional_swap ( optional<T>& x, optional<T>& y )
    {
        const bool hasX = !!x;
        const bool hasY = !!y;

        if ( !hasX && !hasY )
            return;

        if( !hasX )
            x = boost::in_place();
        else if ( !hasY )
            y = boost::in_place();

        
        boost::swap(x.get(),y.get());

        if( !hasX )
            y = boost::none ;
        else if( !hasY )
            x = boost::none ;
    }
};

template<>
struct swap_selector<false>
{
    template<class T>
    static void optional_swap ( optional<T>& x, optional<T>& y )
    {
        const bool hasX = !!x;
        const bool hasY = !!y;

        if ( !hasX && hasY )
        {
            x = y.get();
            y = boost::none ;
        }
        else if ( hasX && !hasY )
        {
            y = x.get();
            x = boost::none ;
        }
        else if ( hasX && hasY )
        {
            
            boost::swap(x.get(),y.get());
        }
    }
};

} 

template<class T>
struct optional_swap_should_use_default_constructor : has_nothrow_default_constructor<T> {} ;

template<class T> inline void swap ( optional<T>& x, optional<T>& y )
{
    optional_detail::swap_selector<optional_swap_should_use_default_constructor<T>::value>::optional_swap(x, y);
}

} 

#line 992 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/optional/optional.hpp"

#line 16 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/optional.hpp"

#line 18 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/optional.hpp"

#line 21 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/internals.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/alt_sstream.hpp"





















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"


































#line 36 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"













#line 50 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\assert.h"




















#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"







































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\assert.h"










extern "C" {
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\assert.h"

 void __cdecl _wassert(  const wchar_t * _Message,   const wchar_t *_File,   unsigned _Line);


}
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\assert.h"



#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\assert.h"
#line 51 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"

#line 53 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"











#line 65 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"













#line 79 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"
  




































  



#line 121 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"











#line 133 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"



#line 137 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"
#line 23 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/alt_sstream.hpp"

namespace boost {
    namespace io {

        template<class Ch, class Tr=::std::char_traits<Ch>, 
                 class Alloc=::std::allocator<Ch> >
        class basic_altstringbuf;

        template<class Ch, class Tr =::std::char_traits<Ch>, 
                 class Alloc=::std::allocator<Ch> >
        class basic_oaltstringstream;


        template<class Ch, class Tr, class Alloc>
        class basic_altstringbuf 
            : public ::std::basic_streambuf<Ch, Tr>
        {
            typedef ::std::basic_streambuf<Ch, Tr>  streambuf_t;
            typedef typename CompatAlloc<Alloc>::compatible_type compat_allocator_type;
            typedef typename CompatTraits<Tr>::compatible_type   compat_traits_type;
        public:
            typedef Ch     char_type;
            typedef Tr     traits_type;
            typedef typename compat_traits_type::int_type     int_type;
            typedef typename compat_traits_type::pos_type     pos_type;
            typedef typename compat_traits_type::off_type     off_type;
            typedef Alloc                     allocator_type;
            typedef ::std::basic_string<Ch, Tr, Alloc> string_type;
            typedef typename string_type::size_type    size_type;

            typedef ::std::streamsize streamsize;


            explicit basic_altstringbuf(std::ios_base::openmode mode
                                        = std::ios_base::in | std::ios_base::out)
                : putend_(0), is_allocated_(false), mode_(mode) 
                {}
            explicit basic_altstringbuf(const string_type& s,
                                        ::std::ios_base::openmode mode
                                        = ::std::ios_base::in | ::std::ios_base::out)
                : putend_(0), is_allocated_(false), mode_(mode) 
                { dealloc(); str(s); }
            virtual ~basic_altstringbuf() 
                { dealloc(); }
            using streambuf_t::pbase;
            using streambuf_t::pptr;
            using streambuf_t::epptr;
            using streambuf_t::eback;
            using streambuf_t::gptr;
            using streambuf_t::egptr;
    
            void clear_buffer();
            void str(const string_type& s);

            
            Ch * begin() const; 
            size_type size() const;
            size_type cur_size() const; 
            Ch * pend() const 
                { return ((putend_ < pptr()) ? pptr() : putend_); }
            size_type pcount() const 
                { return static_cast<size_type>( pptr() - pbase()) ;}

            
            string_type str() const 
                { return string_type(begin(), size()); }
            string_type cur_str() const 
                { return string_type(begin(), cur_size()); }
        protected:
            explicit basic_altstringbuf (basic_altstringbuf * s,
                                         ::std::ios_base::openmode mode 
                                         = ::std::ios_base::in | ::std::ios_base::out)
                : putend_(0), is_allocated_(false), mode_(mode) 
                { dealloc(); str(s); }

            virtual pos_type seekoff(off_type off, ::std::ios_base::seekdir way, 
                                     ::std::ios_base::openmode which 
                                     = ::std::ios_base::in | ::std::ios_base::out);
            virtual pos_type seekpos (pos_type pos, 
                                      ::std::ios_base::openmode which 
                                      = ::std::ios_base::in | ::std::ios_base::out);
            virtual int_type underflow();
            virtual int_type pbackfail(int_type meta = compat_traits_type::eof());
            virtual int_type overflow(int_type meta = compat_traits_type::eof());
            void dealloc();
        private:
            enum { alloc_min = 256}; 

            Ch *putend_;  
            bool is_allocated_;
            ::std::ios_base::openmode mode_;
            compat_allocator_type alloc_;  
        };



        template <class Ch, class Tr, class Alloc>
        class basic_oaltstringstream 
            : private base_from_member< shared_ptr< basic_altstringbuf< Ch, Tr, Alloc> > >,
              public ::std::basic_ostream<Ch, Tr>
        {
            class No_Op { 
                
            public: 
                template<class T>
                const T & operator()(const T & arg) { return arg; }
            };
            typedef ::std::basic_ostream<Ch, Tr> stream_t;
            typedef boost::base_from_member<boost::shared_ptr<
                basic_altstringbuf<Ch,Tr, Alloc> > > 
                pbase_type;
            typedef ::std::basic_string<Ch, Tr, Alloc>  string_type;
            typedef typename string_type::size_type     size_type;
            typedef basic_altstringbuf<Ch, Tr, Alloc>   stringbuf_t;
        public:
            typedef Alloc  allocator_type;
            basic_oaltstringstream() 
                : pbase_type(new stringbuf_t), stream_t(rdbuf()) 
                { }
            basic_oaltstringstream(::boost::shared_ptr<stringbuf_t> buf) 
                : pbase_type(buf), stream_t(rdbuf()) 
                { }
            basic_oaltstringstream(stringbuf_t * buf) 
                : pbase_type(buf, No_Op() ), stream_t(rdbuf()) 
                { }
            stringbuf_t * rdbuf() const 
                { return pbase_type::member.get(); }
            void clear_buffer() 
                { rdbuf()->clear_buffer(); }

            
            Ch * begin() const 
                { return rdbuf()->begin(); }
            size_type size() const 
                { return rdbuf()->size(); }
            size_type cur_size() const 
                { return rdbuf()->cur_size(); }

            
            string_type str()     const   
                { return rdbuf()->str(); } 
            string_type cur_str() const   
                { return rdbuf()->cur_str(); }
            void str(const string_type& s) 
                { rdbuf()->str(s); }
        };

    } 
} 

#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/alt_sstream_impl.hpp"















namespace boost {
    namespace io {


        template<class Ch, class Tr, class Alloc>
        void basic_altstringbuf<Ch, Tr, Alloc>:: 
        clear_buffer () {
            const Ch * p = pptr();
            const Ch * b = pbase();
            if(p != 0 && p != b) {
                seekpos(0, ::std::ios_base::out); 
            }
            p = gptr();
            b = eback();
            if(p != 0 && p != b) {
                seekpos(0, ::std::ios_base::in); 
            }
        }

        template<class Ch, class Tr, class Alloc>
        void basic_altstringbuf<Ch, Tr, Alloc>:: 
        str (const string_type& s) {
            size_type sz=s.size();
            if(sz != 0 && mode_ & (::std::ios_base::in | ::std::ios_base::out) ) {




                Ch *new_ptr = alloc_.allocate(sz, is_allocated_? eback() : 0);
#line 46 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/alt_sstream_impl.hpp"
                
                dealloc();
                sz = s.copy(new_ptr, sz);
                putend_ = new_ptr + sz;
                if(mode_ & ::std::ios_base::in)
                    streambuf_t::setg(new_ptr, new_ptr, new_ptr + sz);
                if(mode_ & ::std::ios_base::out) {
                    streambuf_t::setp(new_ptr, new_ptr + sz);
                    if(mode_ & (::std::ios_base::app | ::std::ios_base::ate))
                        streambuf_t::pbump(static_cast<int>(sz));
                    if(gptr() == 0)
                        streambuf_t::setg(new_ptr, 0, new_ptr);
                }
                is_allocated_ = true;
            }
            else 
                dealloc();
        }
        template<class Ch, class Tr, class Alloc>
        Ch*   basic_altstringbuf<Ch, Tr, Alloc>:: 
        begin () const {
            if(mode_ & ::std::ios_base::out && pptr() != 0)
                return pbase();
            else if(mode_ & ::std::ios_base::in && gptr() != 0)
                return eback();
            return 0;
        }

        template<class Ch, class Tr, class Alloc>
        typename std::basic_string<Ch,Tr,Alloc>::size_type
        basic_altstringbuf<Ch, Tr, Alloc>:: 
        size () const { 
            if(mode_ & ::std::ios_base::out && pptr())
                return static_cast<size_type>(pend() - pbase());
            else if(mode_ & ::std::ios_base::in && gptr())
                return static_cast<size_type>(egptr() - eback());
            else 
                return 0;
        }

        template<class Ch, class Tr, class Alloc>
        typename std::basic_string<Ch,Tr,Alloc>::size_type
        basic_altstringbuf<Ch, Tr, Alloc>:: 
        cur_size () const { 
            if(mode_ & ::std::ios_base::out && pptr())
                return static_cast<streamsize>( pptr() - pbase());
            else if(mode_ & ::std::ios_base::in && gptr())
                return static_cast<streamsize>( gptr() - eback());
            else 
                return 0;
        }

        template<class Ch, class Tr, class Alloc>
        typename basic_altstringbuf<Ch, Tr, Alloc>::pos_type  
        basic_altstringbuf<Ch, Tr, Alloc>:: 
        seekoff (off_type off, ::std::ios_base::seekdir way, ::std::ios_base::openmode which) {
            if(pptr() != 0 && putend_ < pptr())
                putend_ = pptr();
            if(which & ::std::ios_base::in && gptr() != 0) {
                
                if(way == ::std::ios_base::end)
                    off += static_cast<off_type>(putend_ - gptr());
                else if(way == ::std::ios_base::beg)
                    off += static_cast<off_type>(eback() - gptr());
                else if(way != ::std::ios_base::cur || (which & ::std::ios_base::out) )
                    
                    return pos_type(off_type(-1));
                if(eback() <= off+gptr() && off+gptr() <= putend_ ) {
                    
                    streambuf_t::gbump(static_cast<int>(off));
                    if(which & ::std::ios_base::out && pptr() != 0)
                        
                        streambuf_t::pbump(static_cast<int>(gptr()-pptr()));
                }
                else
                    off = off_type(-1);
            }
            else if(which & ::std::ios_base::out && pptr() != 0) {
                
                if(way == ::std::ios_base::end)
                    off += static_cast<off_type>(putend_ - pptr());
                else if(way == ::std::ios_base::beg)
                    off += static_cast<off_type>(pbase() - pptr());
                else if(way != ::std::ios_base::beg)
                    return pos_type(off_type(-1));                    
                if(pbase() <= off+pptr() && off+pptr() <= putend_)
                    
                    streambuf_t::pbump(static_cast<int>(off)); 
                else
                    off = off_type(-1);
            }
            else 
                off = off_type(-1);
            return (pos_type(off));
        }
        

        
        template<class Ch, class Tr, class Alloc>
        typename basic_altstringbuf<Ch, Tr, Alloc>::pos_type 
        basic_altstringbuf<Ch, Tr, Alloc>:: 
        seekpos (pos_type pos, ::std::ios_base::openmode which) {
            off_type off = off_type(pos); 
            if(pptr() != 0 && putend_ < pptr())
                putend_ = pptr();
            if(off != off_type(-1)) {
                if(which & ::std::ios_base::in && gptr() != 0) {
                    
                    if(0 <= off && off <= putend_ - eback()) {
                        streambuf_t::gbump(static_cast<int>(eback() - gptr() + off));
                        if(which & ::std::ios_base::out && pptr() != 0) {
                            
                            streambuf_t::pbump(static_cast<int>(gptr()-pptr()));
                        }
                    }
                    else
                        off = off_type(-1);
                }
                else if(which & ::std::ios_base::out && pptr() != 0) {
                    
                    if(0 <= off && off <= putend_ - eback())
                        streambuf_t::pbump(static_cast<int>(eback() - pptr() + off));
                    else
                        off = off_type(-1);
                }
                else 
                    off = off_type(-1);
                return (pos_type(off));
            }
            else {
                (void)( (!!(0)) || (_wassert(L"0", L"C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/alt_sstream_impl.hpp", 176), 0) ); 
                return pos_type(off_type(-1));
            }
        }
        


        template<class Ch, class Tr, class Alloc>
        typename basic_altstringbuf<Ch, Tr, Alloc>::int_type
        basic_altstringbuf<Ch, Tr, Alloc>:: 
        underflow () {
            if(gptr() == 0) 
                return (compat_traits_type::eof()); 
            else if(gptr() < egptr())  
                return (compat_traits_type::to_int_type(*gptr())); 
            else if(mode_ & ::std::ios_base::in && pptr() != 0
                    && (gptr() < pptr() || gptr() < putend_) )
                {  
                    if(putend_ < pptr()) 
                        putend_ = pptr(); 
                    streambuf_t::setg(eback(), gptr(), putend_);
                    return (compat_traits_type::to_int_type(*gptr()));
                }
            else 
                return (compat_traits_type::eof());
        }
        


        template<class Ch, class Tr, class Alloc>
        typename basic_altstringbuf<Ch, Tr, Alloc>::int_type 
        basic_altstringbuf<Ch, Tr, Alloc>:: 
        pbackfail (int_type meta) {
            if(gptr() != 0  &&  (eback() < gptr()) 
               && (mode_ & (::std::ios_base::out)
                   || compat_traits_type::eq_int_type(compat_traits_type::eof(), meta)
                   || compat_traits_type::eq(compat_traits_type::to_char_type(meta), gptr()[-1]) ) ) { 
                streambuf_t::gbump(-1); 
                if(!compat_traits_type::eq_int_type(compat_traits_type::eof(), meta))
                    
                    *gptr() = compat_traits_type::to_char_type(meta);
                return (compat_traits_type::not_eof(meta));
            }
            else
                return (compat_traits_type::eof());  
        }
        


        template<class Ch, class Tr, class Alloc>
        typename basic_altstringbuf<Ch, Tr, Alloc>::int_type 
        basic_altstringbuf<Ch, Tr, Alloc>:: 
        overflow (int_type meta) {

#pragma warning(push)
#pragma warning(disable:4996)
#line 233 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/alt_sstream_impl.hpp"
            if(compat_traits_type::eq_int_type(compat_traits_type::eof(), meta))
                return compat_traits_type::not_eof(meta); 
            else if(pptr() != 0 && pptr() < epptr()) {
                streambuf_t::sputc(compat_traits_type::to_char_type(meta));
                return meta;
            }
            else if(! (mode_ & ::std::ios_base::out)) 
                
                return compat_traits_type::eof(); 
            else { 
                std::size_t prev_size = pptr() == 0 ? 0 : epptr() - eback();
                std::size_t new_size = prev_size;
                
                std::size_t add_size = new_size / 2;
                if(add_size < alloc_min)
                    add_size = alloc_min;
                Ch * newptr = 0,  *oldptr = eback();

                
                while (0 < add_size && ((std::numeric_limits<std::size_t>::max)()
                                        - add_size < new_size) )
                    add_size /= 2;
                if(0 < add_size) {
                    new_size += add_size;




                    newptr = alloc_.allocate(new_size, is_allocated_? oldptr : 0);
#line 263 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/alt_sstream_impl.hpp"
                }

                if(0 < prev_size)
                    compat_traits_type::copy(newptr, oldptr, prev_size);
                if(is_allocated_)
                    alloc_.deallocate(oldptr, prev_size);
                is_allocated_=true;

                if(prev_size == 0) { 
                    putend_ = newptr;
                    streambuf_t::setp(newptr, newptr + new_size);
                    if(mode_ & ::std::ios_base::in)
                        streambuf_t::setg(newptr, newptr, newptr + 1);
                    else
                        streambuf_t::setg(newptr, 0, newptr);
                }
                else { 
                    putend_ = putend_ - oldptr + newptr;
                    int pptr_count = static_cast<int>(pptr()-pbase());
                    int gptr_count = static_cast<int>(gptr()-eback());
                    streambuf_t::setp(pbase() - oldptr + newptr, newptr + new_size);
                    streambuf_t::pbump(pptr_count);
                    if(mode_ & ::std::ios_base::in)
                        streambuf_t::setg(newptr, newptr + gptr_count, pptr() + 1);
                    else
                        streambuf_t::setg(newptr, 0, newptr);
                }
                streambuf_t::sputc(compat_traits_type::to_char_type(meta));
                return meta;
            }

#pragma warning(pop)
#line 296 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/alt_sstream_impl.hpp"
        }
        

        template<class Ch, class Tr, class Alloc>
        void basic_altstringbuf<Ch, Tr, Alloc>:: dealloc() {
            if(is_allocated_)
                alloc_.deallocate(eback(), (pptr() != 0 ? epptr() : egptr()) - eback());
            is_allocated_ = false;
            streambuf_t::setg(0, 0, 0);
            streambuf_t::setp(0, 0);
            putend_ = 0;
        }

    }
} 

#line 313 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/alt_sstream_impl.hpp"

#line 174 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/alt_sstream.hpp"

#line 176 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/alt_sstream.hpp"

#line 24 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/internals.hpp"

namespace boost {
namespace io {
namespace detail {





    template<class Ch, class Tr> 
    struct stream_format_state 
    {
        typedef ::std:: basic_ios<Ch, Tr>   basic_ios;

        stream_format_state(Ch fill)                 { reset(fill); }


        void reset(Ch fill);                     
        void set_by_stream(const basic_ios& os); 
        void apply_on(basic_ios & os,            
                      boost::io::detail::locale_t * loc_default = 0) const;
        template<class T> 
        void apply_manip(T manipulator)          
            { apply_manip_body<Ch, Tr, T>( *this, manipulator) ; }

        
        std::streamsize width_;
        std::streamsize precision_;
        Ch fill_; 
        std::ios_base::fmtflags flags_;
        std::ios_base::iostate  rdstate_;
        std::ios_base::iostate  exceptions_;
        boost::optional<boost::io::detail::locale_t>  loc_;
    };  





    template<class Ch, class Tr, class Alloc>  
    struct format_item 
    {     
        enum pad_values { zeropad = 1, spacepad =2, centered=4, tabulation = 8 };
                         
                         
                         
        enum arg_values { argN_no_posit   = -1, 
                          argN_tabulation = -2, 
                          argN_ignored    = -3  
        };
        typedef ::std:: basic_ios<Ch, Tr>                    basic_ios;
        typedef detail::stream_format_state<Ch, Tr>               stream_format_state;
        typedef ::std::basic_string<Ch, Tr, Alloc>                string_type;

        format_item(Ch fill) :argN_(argN_no_posit), fmtstate_(fill), 
                              truncate_(max_streamsize()), pad_scheme_(0)  {}
        void reset(Ch fill);
        void compute_states(); 

        static std::streamsize max_streamsize() { 
            return (std::numeric_limits<std::streamsize>::max)();
        }

        
        int         argN_;  
                            
        string_type  res_;      
        string_type  appendix_; 

        stream_format_state fmtstate_;

        std::streamsize truncate_;
        unsigned int pad_scheme_;
    }; 






    template<class Ch, class Tr>
    void stream_format_state<Ch,Tr>:: apply_on (basic_ios & os,
                      boost::io::detail::locale_t * loc_default) const {
        
        if(width_ != -1)
            os.width(width_);
        if(precision_ != -1)
            os.precision(precision_);
        if(fill_ != 0)
            os.fill(fill_);
        os.flags(flags_);
        os.clear(rdstate_);
        os.exceptions(exceptions_);

        if(loc_)
            os.imbue(loc_.get());
        else if(loc_default)
            os.imbue(*loc_default);


#line 125 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/internals.hpp"
    }

    template<class Ch, class Tr>
    void stream_format_state<Ch,Tr>:: set_by_stream(const basic_ios& os) {
        
        flags_ = os.flags();
        width_ = os.width();
        precision_ = os.precision();
        fill_ = os.fill();
        rdstate_ = os.rdstate();
        exceptions_ = os.exceptions();
    }


    template<class Ch, class Tr, class T>
    void apply_manip_body( stream_format_state<Ch, Tr>& self,
                           T manipulator) {
        
        basic_oaltstringstream<Ch, Tr>  ss;
        self.apply_on( ss );
        ss << manipulator;
        self.set_by_stream( ss );
    }

    template<class Ch, class Tr> inline
    void stream_format_state<Ch,Tr>:: reset(Ch fill) {
        
        width_=0; precision_=6; 
        fill_=fill; 
        flags_ = std::ios_base::dec | std::ios_base::skipws; 
        
        exceptions_ = std::ios_base::goodbit;
        rdstate_ = std::ios_base::goodbit;
    }




    template<class Ch, class Tr, class Alloc> 
    void format_item<Ch, Tr, Alloc>:: 
    reset (Ch fill) { 
        argN_=argN_no_posit; truncate_ = max_streamsize(); pad_scheme_ =0; 
        res_.resize(0); appendix_.resize(0);
        fmtstate_.reset(fill);
    }

    template<class Ch, class Tr, class Alloc> 
    void format_item<Ch, Tr, Alloc>:: 
    compute_states() {
        
        
        if(pad_scheme_ & zeropad) {
            
            if(fmtstate_.flags_ & std::ios_base::left) {
              (void)( (!!(!(fmtstate_.flags_ &(std::ios_base::adjustfield ^std::ios_base::left)))) || (_wassert(L"!(fmtstate_.flags_ &(std::ios_base::adjustfield ^std::ios_base::left))", L"C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/internals.hpp", 179), 0) );
              
              pad_scheme_ = pad_scheme_ & (~zeropad); 
            }
            else { 
                pad_scheme_ &= ~spacepad; 
                fmtstate_.fill_='0'; 
                fmtstate_.flags_ = (fmtstate_.flags_ & ~std::ios_base::adjustfield) 
                    | std::ios_base::internal;
                
            }
        }
        if(pad_scheme_ & spacepad) {
            if(fmtstate_.flags_ & std::ios_base::showpos)
                pad_scheme_ &= ~spacepad;
        }
    }


} } } 


#line 202 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/internals.hpp"
#line 39 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/format_class.hpp"


























namespace boost {

    template<class Ch, class Tr, class Alloc>
    class basic_format 
    {
        typedef typename io::CompatTraits<Tr>::compatible_type compat_traits;  
    public:
        typedef Ch  CharT;   
        typedef std::basic_string<Ch, Tr, Alloc>              string_type;
        typedef typename string_type::size_type               size_type;
        typedef io::detail::format_item<Ch, Tr, Alloc>        format_item_t;
        typedef io::basic_altstringbuf<Ch, Tr, Alloc>         internal_streambuf_t;
        

        explicit basic_format(const Ch* str=0);
        explicit basic_format(const string_type& s);
        basic_format(const basic_format& x);
        basic_format& operator= (const basic_format& x);
        void swap(basic_format& x);


        explicit basic_format(const Ch* str, const std::locale & loc);
        explicit basic_format(const string_type& s, const std::locale & loc);
#line 51 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/format_class.hpp"
        io::detail::locale_t  getloc() const;

        basic_format& clear();       
        basic_format& clear_binds(); 
        basic_format& parse(const string_type&); 

        
        size_type   size() const;    
        string_type str()  const;    

        
        template<class T>  
        basic_format&   operator%(const T& x)
            { return io::detail::feed<CharT, Tr, Alloc, const T&>(*this,x); }
















#line 82 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/format_class.hpp"

        
        int expected_args() const
            { return num_args_; }
        
        int bound_args() const;
        
        int fed_args() const;
        
        int cur_arg() const;
        
        int remaining_args() const; 


        
        template<class T>
        basic_format&  bind_arg(int argN, const T& val) 
            { return io::detail::bind_arg_body(*this, argN, val); }
        basic_format&  clear_bind(int argN);
        template<class T> 
        basic_format&  modify_item(int itemN, T manipulator) 
            { return io::detail::modify_item_body<Ch,Tr, Alloc, T> (*this, itemN, manipulator);}

        
        unsigned char exceptions() const;
        unsigned char exceptions(unsigned char newexcept);


        


        template<class Ch2, class Tr2, class Alloc2>
        friend std::basic_ostream<Ch2, Tr2> & 
        operator<<( std::basic_ostream<Ch2, Tr2> & ,
                    const basic_format<Ch2, Tr2, Alloc2>& );





#line 126 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/format_class.hpp"

        template<class Ch2, class Tr2, class Alloc2, class T>  
        friend basic_format<Ch2, Tr2, Alloc2>&  
        io::detail::feed (basic_format<Ch2, Tr2, Alloc2>&, T);

        template<class Ch2, class Tr2, class Alloc2, class T>  friend   
        void io::detail::distribute (basic_format<Ch2, Tr2, Alloc2>&, T);
        
        template<class Ch2, class Tr2, class Alloc2, class T>  friend
        basic_format<Ch2, Tr2, Alloc2>& 
        io::detail::modify_item_body (basic_format<Ch2, Tr2, Alloc2>&, int, T);
        
        template<class Ch2, class Tr2, class Alloc2, class T> friend
        basic_format<Ch2, Tr2, Alloc2>&  
        io::detail::bind_arg_body (basic_format<Ch2, Tr2, Alloc2>&, int, const T&);

    private:
#line 144 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/format_class.hpp"
        typedef io::detail::stream_format_state<Ch, Tr>  stream_format_state;
        
        enum style_values  { ordered = 1, 
                             special_needs = 4 };     

        void make_or_reuse_data(std::size_t nbitems);

        
        std::vector<format_item_t>  items_; 
        std::vector<bool> bound_; 

        int              style_; 
        int             cur_arg_; 
        int            num_args_; 
        mutable bool     dumped_; 
        string_type      prefix_; 
        unsigned char exceptions_;
        internal_streambuf_t   buf_; 
        boost::optional<io::detail::locale_t>     loc_;
    }; 

} 


#line 169 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/format_class.hpp"
#line 42 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/exceptions.hpp"






















namespace boost {

    namespace io {



        class format_error : public std::exception
        {
        public:
            format_error()  {}
            virtual const char *what() const throw() {
                return "boost::format_error: "
                    "format generic failure";
            }
        };

        class bad_format_string : public format_error
        {
            std::size_t pos_, next_;
        public:
            bad_format_string(std::size_t pos, std::size_t size) 
                : pos_(pos), next_(size) {}
            std::size_t get_pos() const { return pos_; }
            std::size_t get_next() const { return next_; }
            virtual const char *what() const throw() {
                return "boost::bad_format_string: format-string is ill-formed";
            }
        };

        class too_few_args : public format_error
        {
            std::size_t cur_, expected_;
        public:
            too_few_args(std::size_t cur, std::size_t expected) 
                : cur_(cur), expected_(expected) {}
            std::size_t get_cur() const { return cur_; }
            std::size_t get_expected() const { return expected_; }
            virtual const char *what() const throw() {
                return "boost::too_few_args: "
                    "format-string referred to more arguments than were passed";
            }
        };

        class too_many_args : public format_error
        {
            std::size_t cur_, expected_;
        public:
            too_many_args(std::size_t cur, std::size_t expected) 
                : cur_(cur), expected_(expected) {}
            std::size_t get_cur() const { return cur_; }
            std::size_t get_expected() const { return expected_; }
            virtual const char *what() const throw() {
                return "boost::too_many_args: "
                    "format-string referred to less arguments than were passed";
            }
        };


        class  out_of_range : public format_error
        {
            int index_, beg_, end_;    
        public:
            out_of_range(int index, int beg, int end) 
                : index_(index), beg_(beg), end_(end) {}
            int get_index() const { return index_; }
            int get_beg() const { return beg_; }
            int get_end() const { return end_; }
            virtual const char *what() const throw() {
                return "boost::out_of_range: "
                    "tried to refer to an argument (or item) number which"
                    " is out of range, according to the format string";
            }
        };


    } 

} 


#line 104 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/exceptions.hpp"
#line 45 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/format_implementation.hpp"


















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"


































#line 36 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"













#line 50 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\assert.h"




















#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"







































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\assert.h"










extern "C" {
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\assert.h"

 void __cdecl _wassert(  const wchar_t * _Message,   const wchar_t *_File,   unsigned _Line);


}
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\assert.h"



#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\assert.h"
#line 51 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"

#line 53 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"











#line 65 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"













#line 79 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"
  




































  



#line 121 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"











#line 133 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"



#line 137 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"
#line 20 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/format_implementation.hpp"



namespace boost {



    template< class Ch, class Tr, class Alloc>
    basic_format<Ch, Tr, Alloc>:: basic_format(const Ch* s)
        : style_(0), cur_arg_(0), num_args_(0), dumped_(false),
          exceptions_(io::all_error_bits)
    {
        if( s)
            parse( s );
    }


    template< class Ch, class Tr, class Alloc>
    basic_format<Ch, Tr, Alloc>:: basic_format(const Ch* s, const std::locale & loc)
        : style_(0), cur_arg_(0), num_args_(0), dumped_(false),
          exceptions_(io::all_error_bits), loc_(loc)
    {
        if(s) parse( s );
    }

    template< class Ch, class Tr, class Alloc>
    basic_format<Ch, Tr, Alloc>:: basic_format(const string_type& s, const std::locale & loc)
        : style_(0), cur_arg_(0), num_args_(0), dumped_(false),
          exceptions_(io::all_error_bits), loc_(loc)
    {
        parse(s);  
    }
#line 53 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/format_implementation.hpp"
    template< class Ch, class Tr, class Alloc>
    io::detail::locale_t basic_format<Ch, Tr, Alloc>:: 
    getloc() const {
        return loc_ ? loc_.get() : io::detail::locale_t(); 
    }

    template< class Ch, class Tr, class Alloc>
    basic_format<Ch, Tr, Alloc>:: basic_format(const string_type& s)
        : style_(0), cur_arg_(0), num_args_(0), dumped_(false),
          exceptions_(io::all_error_bits)
    {
        parse(s);  
    }

    template< class Ch, class Tr, class Alloc> 
    basic_format<Ch, Tr, Alloc>:: basic_format(const basic_format& x)
        : items_(x.items_), bound_(x.bound_), style_(x.style_),
          cur_arg_(x.cur_arg_), num_args_(x.num_args_), dumped_(x.dumped_),
          prefix_(x.prefix_), exceptions_(x.exceptions_), loc_(x.loc_)
    {
    }

    template< class Ch, class Tr, class Alloc>  
    basic_format<Ch, Tr, Alloc>& basic_format<Ch, Tr, Alloc>:: 
    operator= (const basic_format& x) {
        if(this == &x)
            return *this;
        (basic_format<Ch, Tr, Alloc>(x)).swap(*this);
        return *this;
    }
    template< class Ch, class Tr, class Alloc>
    void  basic_format<Ch, Tr, Alloc>:: 
    swap (basic_format & x) {
        std::swap(exceptions_, x.exceptions_);
        std::swap(style_, x.style_); 
        std::swap(cur_arg_, x.cur_arg_); 
        std::swap(num_args_, x.num_args_);
        std::swap(dumped_, x.dumped_);

        items_.swap(x.items_);
        prefix_.swap(x.prefix_);
        bound_.swap(x.bound_);
    }

    template< class Ch, class Tr, class Alloc>
    unsigned char basic_format<Ch,Tr, Alloc>:: exceptions() const {
        return exceptions_; 
    }

    template< class Ch, class Tr, class Alloc>
    unsigned char basic_format<Ch,Tr, Alloc>:: exceptions(unsigned char newexcept) { 
        unsigned char swp = exceptions_; 
        exceptions_ = newexcept; 
        return swp; 
    }

    template<class Ch, class Tr, class Alloc>
    void basic_format<Ch, Tr, Alloc>:: 
    make_or_reuse_data (std::size_t nbitems) {

        Ch fill = ( std::use_facet< std::ctype<Ch> >(getloc()) ). widen(' ');


#line 117 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/format_implementation.hpp"
        if(items_.size() == 0)
            items_.assign( nbitems, format_item_t(fill) );
        else {
            if(nbitems>items_.size())
                items_.resize(nbitems, format_item_t(fill));
            bound_.resize(0);
            for(std::size_t i=0; i < nbitems; ++i)
                items_[i].reset(fill); 
        }
        prefix_.resize(0);
    }

    template< class Ch, class Tr, class Alloc>
    basic_format<Ch,Tr, Alloc>& basic_format<Ch,Tr, Alloc>:: 
    clear () {
        
        

        (void)( (!!(bound_.size()==0 || num_args_ == static_cast<int>(bound_.size()))) || (_wassert(L"bound_.size()==0 || num_args_ == static_cast<int>(bound_.size())", L"C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/format_implementation.hpp", 135), 0) );

        for(unsigned long i=0; i<items_.size(); ++i) {
            
            if( bound_.size()==0 || items_[i].argN_<0 || !bound_[ items_[i].argN_ ] )
                items_[i].res_.resize(0);
        }
        cur_arg_=0; dumped_=false;
        
        if(bound_.size() != 0) {
            for(; cur_arg_ < num_args_ && bound_[cur_arg_]; ++cur_arg_)
                {}
        }
        return *this;
    }

    template< class Ch, class Tr, class Alloc>
    basic_format<Ch,Tr, Alloc>& basic_format<Ch,Tr, Alloc>:: 
    clear_binds () {
        
        bound_.resize(0);
        clear();
        return *this;
    }

    template< class Ch, class Tr, class Alloc>
    basic_format<Ch,Tr, Alloc>& basic_format<Ch,Tr, Alloc>:: 
    clear_bind (int argN) {
        
        if(argN<1 || argN > num_args_ || bound_.size()==0 || !bound_[argN-1] ) {
            if( exceptions() & io::out_of_range_bit)
                boost::throw_exception(io::out_of_range(argN, 1, num_args_+1 ) ); 
            else return *this;
        }
        bound_[argN-1]=false;
        clear();
        return *this;
    }

    template< class Ch, class Tr, class Alloc>
    int basic_format<Ch,Tr, Alloc>::
    bound_args() const {
        if(bound_.size()==0)
            return 0;
        int n=0;
        for(int i=0; i<num_args_ ; ++i)
            if(bound_[i])
                ++n;
        return n;
    }

    template< class Ch, class Tr, class Alloc>
    int basic_format<Ch,Tr, Alloc>::
    fed_args() const {
        if(bound_.size()==0)
            return cur_arg_;
        int n=0;
        for(int i=0; i<cur_arg_ ; ++i)
            if(!bound_[i])
                ++n;
        return n;
    }

    template< class Ch, class Tr, class Alloc>
    int basic_format<Ch,Tr, Alloc>::
    cur_arg() const {
      return cur_arg_+1; }

    template< class Ch, class Tr, class Alloc>
    int basic_format<Ch,Tr, Alloc>::
    remaining_args() const {
        if(bound_.size()==0)
            return num_args_-cur_arg_;
        int n=0;
        for(int i=cur_arg_; i<num_args_ ; ++i)
            if(!bound_[i])
                ++n;
        return n;
    }

    template< class Ch, class Tr, class Alloc>
    typename basic_format<Ch, Tr, Alloc>::string_type 
    basic_format<Ch,Tr, Alloc>:: 
    str () const {
        if(items_.size()==0)
            return prefix_;
        if( cur_arg_ < num_args_)
            if( exceptions() & io::too_few_args_bit )
                
                boost::throw_exception(io::too_few_args(cur_arg_, num_args_)); 

        unsigned long i;
        string_type res;
        res.reserve(size());
        res += prefix_;
        for(i=0; i < items_.size(); ++i) {
            const format_item_t& item = items_[i];
            res += item.res_;
            if( item.argN_ == format_item_t::argN_tabulation) { 
                (void)( (!!(item.pad_scheme_ & format_item_t::tabulation)) || (_wassert(L"item.pad_scheme_ & format_item_t::tabulation", L"C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/format_implementation.hpp", 234), 0) );
                if( static_cast<size_type>(item.fmtstate_.width_) > res.size() )
                    res.append( static_cast<size_type>(item.fmtstate_.width_) - res.size(),
                                        item.fmtstate_.fill_ );
            }
            res += item.appendix_;
        }
        dumped_=true;
        return res;
    }
    template< class Ch, class Tr, class Alloc>
    typename std::basic_string<Ch, Tr, Alloc>::size_type  basic_format<Ch,Tr, Alloc>:: 
    size () const {

       
       
       
#pragma warning(push)
#pragma warning(disable:4267)
#line 254 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/format_implementation.hpp"
        using std::max;
        size_type sz = prefix_.size();
        unsigned long i;
        for(i=0; i < items_.size(); ++i) {
            const format_item_t& item = items_[i];
            sz += item.res_.size();
            if( item.argN_ == format_item_t::argN_tabulation)
                sz = max  (sz,
                                        static_cast<size_type>(item.fmtstate_.width_) );
            sz += item.appendix_.size();
        }
        return sz;

#pragma warning(pop)
#line 269 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/format_implementation.hpp"
    }

namespace io {
namespace detail {

    template<class Ch, class Tr, class Alloc, class T> 
    basic_format<Ch, Tr, Alloc>&  
    bind_arg_body (basic_format<Ch, Tr, Alloc>& self, int argN, const T& val) {
        
        
        if(self.dumped_) 
            self.clear(); 
        if(argN<1 || argN > self.num_args_) {
            if( self.exceptions() & io::out_of_range_bit )
                boost::throw_exception(io::out_of_range(argN, 1, self.num_args_+1 ) );
            else return self;
        }
        if(self.bound_.size()==0) 
            self.bound_.assign(self.num_args_,false);
        else 
            (void)( (!!(self.num_args_ == static_cast<signed int>(self.bound_.size()))) || (_wassert(L"self.num_args_ == static_cast<signed int>(self.bound_.size())", L"C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/format_implementation.hpp", 289), 0) );
        int o_cur_arg = self.cur_arg_;
        self.cur_arg_ = argN-1; 

        self.bound_[self.cur_arg_]=false; 
        self.operator%(val); 
    

        
        self.cur_arg_ = o_cur_arg; 
        self.bound_[argN-1]=true;
        if(self.cur_arg_ == argN-1 ) {
            
            while(self.cur_arg_ < self.num_args_ && self.bound_[self.cur_arg_])   
                ++self.cur_arg_;
        }
        
        (void)( (!!(self.cur_arg_ >= self.num_args_ || ! self.bound_[self.cur_arg_])) || (_wassert(L"self.cur_arg_ >= self.num_args_ || ! self.bound_[self.cur_arg_]", L"C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/format_implementation.hpp", 306), 0) );
        return self;
    }

    template<class Ch, class Tr, class Alloc, class T> basic_format<Ch, Tr, Alloc>&
    modify_item_body (basic_format<Ch, Tr, Alloc>& self, int itemN, T manipulator) {
        
        
        if(itemN<1 || itemN > static_cast<signed int>(self.items_.size() )) {
            if( self.exceptions() & io::out_of_range_bit ) 
                boost::throw_exception(io::out_of_range(itemN, 1, static_cast<int>(self.items_.size()) ));
            else return self;
        }
        self.items_[itemN-1].fmtstate_. template apply_manip<T> ( manipulator );
        return self;
    }

} 
} 
} 



#line 330 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/format_implementation.hpp"
#line 48 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/group.hpp"













                      














namespace boost {
namespace io {


namespace detail {



struct group0 
{
    group0()      {}
};

template <class Ch, class Tr>
inline
::std:: basic_ostream<Ch, Tr>&
operator << ( ::std:: basic_ostream<Ch, Tr>& os,
             const group0& )
{ 
   return os; 
}

template <class T1>
struct group1
{
    T1 a1_;
    group1(T1 a1)
      : a1_(a1)
      {}
private:
   group1& operator=(const group1&);
};

template <class Ch, class Tr, class T1>
inline
::std:: basic_ostream<Ch, Tr>&
operator << (::std:: basic_ostream<Ch, Tr>& os,
             const group1<T1>& x)
{ 
   os << x.a1_;  
   return os; 
}




template <class T1,class T2>
struct group2
{
    T1 a1_;
    T2 a2_;
    group2(T1 a1,T2 a2)
      : a1_(a1),a2_(a2)
      {}
private:
   group2& operator=(const group2&);
};

template <class Ch, class Tr, class T1,class T2>
inline
::std:: basic_ostream<Ch, Tr>&
operator << (::std:: basic_ostream<Ch, Tr>& os,
             const group2<T1,T2>& x)
{ 
   os << x.a1_<< x.a2_;  
   return os; 
}

template <class T1,class T2,class T3>
struct group3
{
    T1 a1_;
    T2 a2_;
    T3 a3_;
    group3(T1 a1,T2 a2,T3 a3)
      : a1_(a1),a2_(a2),a3_(a3)
      {}
private:
   group3& operator=(const group3&);
};

template <class Ch, class Tr, class T1,class T2,class T3>
inline
::std:: basic_ostream<Ch, Tr>&
operator << (::std:: basic_ostream<Ch, Tr>& os,
             const group3<T1,T2,T3>& x)
{ 
   os << x.a1_<< x.a2_<< x.a3_;  
   return os; 
}

template <class T1,class T2,class T3,class T4>
struct group4
{
    T1 a1_;
    T2 a2_;
    T3 a3_;
    T4 a4_;
    group4(T1 a1,T2 a2,T3 a3,T4 a4)
      : a1_(a1),a2_(a2),a3_(a3),a4_(a4)
      {}
private:
   group4& operator=(const group4&);
};

template <class Ch, class Tr, class T1,class T2,class T3,class T4>
inline
::std:: basic_ostream<Ch, Tr>&
operator << (::std:: basic_ostream<Ch, Tr>& os,
             const group4<T1,T2,T3,T4>& x)
{ 
   os << x.a1_<< x.a2_<< x.a3_<< x.a4_;  
   return os; 
}

template <class T1,class T2,class T3,class T4,class T5>
struct group5
{
    T1 a1_;
    T2 a2_;
    T3 a3_;
    T4 a4_;
    T5 a5_;
    group5(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5)
      : a1_(a1),a2_(a2),a3_(a3),a4_(a4),a5_(a5)
      {}
};

template <class Ch, class Tr, class T1,class T2,class T3,class T4,class T5>
inline
::std:: basic_ostream<Ch, Tr>&
operator << (::std:: basic_ostream<Ch, Tr>& os,
             const group5<T1,T2,T3,T4,T5>& x)
{ 
   os << x.a1_<< x.a2_<< x.a3_<< x.a4_<< x.a5_;  
   return os; 
}

template <class T1,class T2,class T3,class T4,class T5,class T6>
struct group6
{
    T1 a1_;
    T2 a2_;
    T3 a3_;
    T4 a4_;
    T5 a5_;
    T6 a6_;
    group6(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6)
      : a1_(a1),a2_(a2),a3_(a3),a4_(a4),a5_(a5),a6_(a6)
      {}
};

template <class Ch, class Tr, class T1,class T2,class T3,class T4,class T5,class T6>
inline
::std:: basic_ostream<Ch, Tr>&
operator << (::std:: basic_ostream<Ch, Tr>& os,
             const group6<T1,T2,T3,T4,T5,T6>& x)
{ 
   os << x.a1_<< x.a2_<< x.a3_<< x.a4_<< x.a5_<< x.a6_;  
   return os; 
}

template <class T1,class T2,class T3,class T4,class T5,class T6,class T7>
struct group7
{
    T1 a1_;
    T2 a2_;
    T3 a3_;
    T4 a4_;
    T5 a5_;
    T6 a6_;
    T7 a7_;
    group7(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6,T7 a7)
      : a1_(a1),a2_(a2),a3_(a3),a4_(a4),a5_(a5),a6_(a6),a7_(a7)
      {}
};

template <class Ch, class Tr, class T1,class T2,class T3,class T4,class T5,class T6,class T7>
inline
::std:: basic_ostream<Ch, Tr>&
operator << (::std:: basic_ostream<Ch, Tr>& os,
             const group7<T1,T2,T3,T4,T5,T6,T7>& x)
{ 
   os << x.a1_<< x.a2_<< x.a3_<< x.a4_<< x.a5_<< x.a6_<< x.a7_;  
   return os; 
}

template <class T1,class T2,class T3,class T4,class T5,class T6,class T7,class T8>
struct group8
{
    T1 a1_;
    T2 a2_;
    T3 a3_;
    T4 a4_;
    T5 a5_;
    T6 a6_;
    T7 a7_;
    T8 a8_;
    group8(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6,T7 a7,T8 a8)
      : a1_(a1),a2_(a2),a3_(a3),a4_(a4),a5_(a5),a6_(a6),a7_(a7),a8_(a8)
      {}
};

template <class Ch, class Tr, class T1,class T2,class T3,class T4,class T5,class T6,class T7,class T8>
inline
::std:: basic_ostream<Ch, Tr>&
operator << (::std:: basic_ostream<Ch, Tr>& os,
             const group8<T1,T2,T3,T4,T5,T6,T7,T8>& x)
{ 
   os << x.a1_<< x.a2_<< x.a3_<< x.a4_<< x.a5_<< x.a6_<< x.a7_<< x.a8_;  
   return os; 
}

template <class T1,class T2,class T3,class T4,class T5,class T6,class T7,class T8,class T9>
struct group9
{
    T1 a1_;
    T2 a2_;
    T3 a3_;
    T4 a4_;
    T5 a5_;
    T6 a6_;
    T7 a7_;
    T8 a8_;
    T9 a9_;
    group9(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6,T7 a7,T8 a8,T9 a9)
      : a1_(a1),a2_(a2),a3_(a3),a4_(a4),a5_(a5),a6_(a6),a7_(a7),a8_(a8),a9_(a9)
      {}
};

template <class Ch, class Tr, class T1,class T2,class T3,class T4,class T5,class T6,class T7,class T8,class T9>
inline
::std:: basic_ostream<Ch, Tr>&
operator << (::std:: basic_ostream<Ch, Tr>& os,
             const group9<T1,T2,T3,T4,T5,T6,T7,T8,T9>& x)
{ 
   os << x.a1_<< x.a2_<< x.a3_<< x.a4_<< x.a5_<< x.a6_<< x.a7_<< x.a8_<< x.a9_;  
   return os; 
}

template <class T1,class T2,class T3,class T4,class T5,class T6,class T7,class T8,class T9,class T10>
struct group10
{
    T1 a1_;
    T2 a2_;
    T3 a3_;
    T4 a4_;
    T5 a5_;
    T6 a6_;
    T7 a7_;
    T8 a8_;
    T9 a9_;
    T10 a10_;
    group10(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6,T7 a7,T8 a8,T9 a9,T10 a10)
      : a1_(a1),a2_(a2),a3_(a3),a4_(a4),a5_(a5),a6_(a6),a7_(a7),a8_(a8),a9_(a9),a10_(a10)
      {}
};

template <class Ch, class Tr, class T1,class T2,class T3,class T4,class T5,class T6,class T7,class T8,class T9,class T10>
inline
::std:: basic_ostream<Ch, Tr>&
operator << (::std:: basic_ostream<Ch, Tr>& os,
             const group10<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>& x)
{ 
   os << x.a1_<< x.a2_<< x.a3_<< x.a4_<< x.a5_<< x.a6_<< x.a7_<< x.a8_<< x.a9_<< x.a10_;  
   return os; 
}




template <class T1,class T2>
inline
group1<T1> 
group_head( group2<T1,T2> const& x)
{
   return group1<T1> (x.a1_); 
}

template <class T1,class T2>
inline
group1<T2> 
group_last( group2<T1,T2> const& x)
{
   return group1<T2> (x.a2_); 
}



template <class T1,class T2,class T3>
inline
group2<T1,T2> 
group_head( group3<T1,T2,T3> const& x)
{
   return group2<T1,T2> (x.a1_,x.a2_); 
}

template <class T1,class T2,class T3>
inline
group1<T3> 
group_last( group3<T1,T2,T3> const& x)
{
   return group1<T3> (x.a3_); 
}



template <class T1,class T2,class T3,class T4>
inline
group3<T1,T2,T3> 
group_head( group4<T1,T2,T3,T4> const& x)
{
   return group3<T1,T2,T3> (x.a1_,x.a2_,x.a3_); 
}

template <class T1,class T2,class T3,class T4>
inline
group1<T4> 
group_last( group4<T1,T2,T3,T4> const& x)
{
   return group1<T4> (x.a4_); 
}



template <class T1,class T2,class T3,class T4,class T5>
inline
group4<T1,T2,T3,T4> 
group_head( group5<T1,T2,T3,T4,T5> const& x)
{
   return group4<T1,T2,T3,T4> (x.a1_,x.a2_,x.a3_,x.a4_); 
}

template <class T1,class T2,class T3,class T4,class T5>
inline
group1<T5> 
group_last( group5<T1,T2,T3,T4,T5> const& x)
{
   return group1<T5> (x.a5_); 
}



template <class T1,class T2,class T3,class T4,class T5,class T6>
inline
group5<T1,T2,T3,T4,T5> 
group_head( group6<T1,T2,T3,T4,T5,T6> const& x)
{
   return group5<T1,T2,T3,T4,T5> (x.a1_,x.a2_,x.a3_,x.a4_,x.a5_); 
}

template <class T1,class T2,class T3,class T4,class T5,class T6>
inline
group1<T6> 
group_last( group6<T1,T2,T3,T4,T5,T6> const& x)
{
   return group1<T6> (x.a6_); 
}



template <class T1,class T2,class T3,class T4,class T5,class T6,class T7>
inline
group6<T1,T2,T3,T4,T5,T6> 
group_head( group7<T1,T2,T3,T4,T5,T6,T7> const& x)
{
   return group6<T1,T2,T3,T4,T5,T6> (x.a1_,x.a2_,x.a3_,x.a4_,x.a5_,x.a6_); 
}

template <class T1,class T2,class T3,class T4,class T5,class T6,class T7>
inline
group1<T7> 
group_last( group7<T1,T2,T3,T4,T5,T6,T7> const& x)
{
   return group1<T7> (x.a7_); 
}



template <class T1,class T2,class T3,class T4,class T5,class T6,class T7,class T8>
inline
group7<T1,T2,T3,T4,T5,T6,T7> 
group_head( group8<T1,T2,T3,T4,T5,T6,T7,T8> const& x)
{
   return group7<T1,T2,T3,T4,T5,T6,T7> (x.a1_,x.a2_,x.a3_,x.a4_,x.a5_,x.a6_,x.a7_); 
}

template <class T1,class T2,class T3,class T4,class T5,class T6,class T7,class T8>
inline
group1<T8> 
group_last( group8<T1,T2,T3,T4,T5,T6,T7,T8> const& x)
{
   return group1<T8> (x.a8_); 
}



template <class T1,class T2,class T3,class T4,class T5,class T6,class T7,class T8,class T9>
inline
group8<T1,T2,T3,T4,T5,T6,T7,T8> 
group_head( group9<T1,T2,T3,T4,T5,T6,T7,T8,T9> const& x)
{
   return group8<T1,T2,T3,T4,T5,T6,T7,T8> (x.a1_,x.a2_,x.a3_,x.a4_,x.a5_,x.a6_,x.a7_,x.a8_); 
}

template <class T1,class T2,class T3,class T4,class T5,class T6,class T7,class T8,class T9>
inline
group1<T9> 
group_last( group9<T1,T2,T3,T4,T5,T6,T7,T8,T9> const& x)
{
   return group1<T9> (x.a9_); 
}



template <class T1,class T2,class T3,class T4,class T5,class T6,class T7,class T8,class T9,class T10>
inline
group9<T1,T2,T3,T4,T5,T6,T7,T8,T9> 
group_head( group10<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> const& x)
{
   return group9<T1,T2,T3,T4,T5,T6,T7,T8,T9> (x.a1_,x.a2_,x.a3_,x.a4_,x.a5_,x.a6_,x.a7_,x.a8_,x.a9_); 
}

template <class T1,class T2,class T3,class T4,class T5,class T6,class T7,class T8,class T9,class T10>
inline
group1<T10> 
group_last( group10<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> const& x)
{
   return group1<T10> (x.a10_); 
}





} 






inline detail::group1< detail::group0 >  
group() { return detail::group1< detail::group0 > ( detail::group0() ); }

template  <class T1, class Var> 
inline
detail::group1< detail::group2<T1, Var const&> >
  group(T1 a1, Var const& var)
{ 
   return detail::group1< detail::group2<T1, Var const&> >
                   ( detail::group2<T1, Var const&> 
                        (a1, var) 
                  );
}

template  <class T1,class T2, class Var> 
inline
detail::group1< detail::group3<T1,T2, Var const&> >
  group(T1 a1,T2 a2, Var const& var)
{ 
   return detail::group1< detail::group3<T1,T2, Var const&> >
                   ( detail::group3<T1,T2, Var const&> 
                        (a1,a2, var) 
                  );
}

template  <class T1,class T2,class T3, class Var> 
inline
detail::group1< detail::group4<T1,T2,T3, Var const&> >
  group(T1 a1,T2 a2,T3 a3, Var const& var)
{ 
   return detail::group1< detail::group4<T1,T2,T3, Var const&> >
                   ( detail::group4<T1,T2,T3, Var const&> 
                        (a1,a2,a3, var) 
                  );
}

template  <class T1,class T2,class T3,class T4, class Var> 
inline
detail::group1< detail::group5<T1,T2,T3,T4, Var const&> >
  group(T1 a1,T2 a2,T3 a3,T4 a4, Var const& var)
{ 
   return detail::group1< detail::group5<T1,T2,T3,T4, Var const&> >
                   ( detail::group5<T1,T2,T3,T4, Var const&> 
                        (a1,a2,a3,a4, var) 
                  );
}

template  <class T1,class T2,class T3,class T4,class T5, class Var> 
inline
detail::group1< detail::group6<T1,T2,T3,T4,T5, Var const&> >
  group(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5, Var const& var)
{ 
   return detail::group1< detail::group6<T1,T2,T3,T4,T5, Var const&> >
                   ( detail::group6<T1,T2,T3,T4,T5, Var const&> 
                        (a1,a2,a3,a4,a5, var) 
                  );
}

template  <class T1,class T2,class T3,class T4,class T5,class T6, class Var> 
inline
detail::group1< detail::group7<T1,T2,T3,T4,T5,T6, Var const&> >
  group(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6, Var const& var)
{ 
   return detail::group1< detail::group7<T1,T2,T3,T4,T5,T6, Var const&> >
                   ( detail::group7<T1,T2,T3,T4,T5,T6, Var const&> 
                        (a1,a2,a3,a4,a5,a6, var) 
                  );
}

template  <class T1,class T2,class T3,class T4,class T5,class T6,class T7, class Var> 
inline
detail::group1< detail::group8<T1,T2,T3,T4,T5,T6,T7, Var const&> >
  group(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6,T7 a7, Var const& var)
{ 
   return detail::group1< detail::group8<T1,T2,T3,T4,T5,T6,T7, Var const&> >
                   ( detail::group8<T1,T2,T3,T4,T5,T6,T7, Var const&> 
                        (a1,a2,a3,a4,a5,a6,a7, var) 
                  );
}

template  <class T1,class T2,class T3,class T4,class T5,class T6,class T7,class T8, class Var> 
inline
detail::group1< detail::group9<T1,T2,T3,T4,T5,T6,T7,T8, Var const&> >
  group(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6,T7 a7,T8 a8, Var const& var)
{ 
   return detail::group1< detail::group9<T1,T2,T3,T4,T5,T6,T7,T8, Var const&> >
                   ( detail::group9<T1,T2,T3,T4,T5,T6,T7,T8, Var const&> 
                        (a1,a2,a3,a4,a5,a6,a7,a8, var) 
                  );
}

template  <class T1,class T2,class T3,class T4,class T5,class T6,class T7,class T8,class T9, class Var> 
inline
detail::group1< detail::group10<T1,T2,T3,T4,T5,T6,T7,T8,T9, Var const&> >
  group(T1 a1,T2 a2,T3 a3,T4 a4,T5 a5,T6 a6,T7 a7,T8 a8,T9 a9, Var const& var)
{ 
   return detail::group1< detail::group10<T1,T2,T3,T4,T5,T6,T7,T8,T9, Var const&> >
                   ( detail::group10<T1,T2,T3,T4,T5,T6,T7,T8,T9, Var const&> 
                        (a1,a2,a3,a4,a5,a6,a7,a8,a9, var) 
                  );
}











































































































} 

} 


#line 685 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/group.hpp"
#line 49 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/feed_args.hpp"

















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"


































#line 36 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"













#line 50 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\assert.h"




















#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"







































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\assert.h"










extern "C" {
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\assert.h"

 void __cdecl _wassert(  const wchar_t * _Message,   const wchar_t *_File,   unsigned _Line);


}
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\assert.h"



#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\assert.h"
#line 51 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"

#line 53 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"











#line 65 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"













#line 79 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"
  




































  



#line 121 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"











#line 133 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"



#line 137 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"
#line 19 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/feed_args.hpp"




#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/detail/msvc_disambiguater.hpp"




















































#line 55 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/detail/msvc_disambiguater.hpp"

#line 57 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/detail/msvc_disambiguater.hpp"
#line 24 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/feed_args.hpp"

namespace boost {
namespace io {
namespace detail {

    template<class Ch, class Tr, class Alloc>
    void mk_str( std::basic_string<Ch,Tr, Alloc> & res, 
                 const Ch * beg,
                 typename std::basic_string<Ch,Tr,Alloc>::size_type size,
                 std::streamsize w, 
                 const Ch fill_char,
                 std::ios_base::fmtflags f, 
                 const Ch prefix_space, 
                 bool center) 
    
    
    {
        typedef typename std::basic_string<Ch,Tr,Alloc>::size_type size_type;
        res.resize(0);
        if(w<=0 || static_cast<size_type>(w) <=size) {
            
            res.reserve(size + !!prefix_space);
            if(prefix_space) 
              res.append(1, prefix_space);
            if (size)
              res.append(beg, size);
        }
        else { 
            std::streamsize n=static_cast<std::streamsize>(w-size-!!prefix_space);
            std::streamsize n_after = 0, n_before = 0; 
            res.reserve(static_cast<size_type>(w)); 
            if(center) 
                n_after = n/2, n_before = n - n_after; 
            else 
                if(f & std::ios_base::left)
                    n_after = n;
                else
                    n_before = n;
            
            if(n_before) res.append(static_cast<size_type>(n_before), fill_char);
            if(prefix_space) 
              res.append(1, prefix_space);
            if (size)  
              res.append(beg, size);
            if(n_after) res.append(static_cast<size_type>(n_after), fill_char);
        }
    } 















#line 88 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/feed_args.hpp"

    template< class Ch, class Tr, class T> inline
    void put_head (::std:: basic_ostream<Ch, Tr> &, const T& ) {
    }

    template< class Ch, class Tr, class T> inline
    void put_head( ::std:: basic_ostream<Ch, Tr> & os, const group1<T>& x ) {
        os << group_head(x.a1_); 
    }

    template< class Ch, class Tr, class T> inline
    void put_last( ::std:: basic_ostream<Ch, Tr> & os, const T& x ) {
        os << x ;
    }

    template< class Ch, class Tr, class T> inline
    void put_last( ::std:: basic_ostream<Ch, Tr> & os, const group1<T>& x ) {
        os << group_last(x.a1_); 
    }











#line 119 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/feed_args.hpp"


    template< class Ch, class Tr, class Alloc, class T> 
    void put( T x, 
              const format_item<Ch, Tr, Alloc>& specs, 
              typename basic_format<Ch, Tr, Alloc>::string_type& res, 
              typename basic_format<Ch, Tr, Alloc>::internal_streambuf_t & buf,
              io::detail::locale_t *loc_p = 0)
    {

       
       
       
#pragma warning(push)
#pragma warning(disable:4267)
#line 135 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/feed_args.hpp"
        
        

        typedef typename basic_format<Ch, Tr, Alloc>::string_type   string_type;
        typedef typename basic_format<Ch, Tr, Alloc>::format_item_t format_item_t;
        typedef typename string_type::size_type size_type;

        basic_oaltstringstream<Ch, Tr, Alloc>  oss( &buf);
        specs.fmtstate_.apply_on(oss, loc_p);

        
        put_head( oss, x );
        
        

        const std::ios_base::fmtflags fl=oss.flags();
        const bool internal = (fl & std::ios_base::internal) != 0;
        const std::streamsize w = oss.width();
        const bool two_stepped_padding= internal && (w!=0);
      
        res.resize(0);
        if(! two_stepped_padding) {
            if(w>0) 
                oss.width(0);
            put_last( oss, x);
            const Ch * res_beg = buf.pbase();
            Ch prefix_space = 0;
            if(specs.pad_scheme_ & format_item_t::spacepad)
                if(buf.pcount()== 0 || 
                   (res_beg[0] !=oss.widen('+') && res_beg[0] !=oss.widen('-')  ))
                    prefix_space = oss.widen(' ');
            size_type res_size = (std::min)(
                static_cast<size_type>(specs.truncate_ - !!prefix_space), 
                buf.pcount() );
            mk_str(res, res_beg, res_size, w, oss.fill(), fl, 
                   prefix_space, (specs.pad_scheme_ & format_item_t::centered) !=0 );
        }
        else  { 
            
            
            
            put_last( oss, x); 
            const Ch * res_beg = buf.pbase();
            size_type res_size = buf.pcount();
            bool prefix_space=false;
            if(specs.pad_scheme_ & format_item_t::spacepad)
                if(buf.pcount()== 0 || 
                   (res_beg[0] !=oss.widen('+') && res_beg[0] !=oss.widen('-')  ))
                    prefix_space = true;
            if(res_size == static_cast<size_type>(w) && w<=specs.truncate_ && !prefix_space) {
                
                res.assign(res_beg, res_size);
            }
            else { 
                
                
                
                res.assign(res_beg, res_size);
                res_beg=0;  
                
                
                buf.clear_buffer();
                basic_oaltstringstream<Ch, Tr, Alloc>  oss2( &buf);
                specs.fmtstate_.apply_on(oss2, loc_p);
                put_head( oss2, x );

                oss2.width(0);
                if(prefix_space)
                    oss2 << ' ';
                put_last(oss2, x );
                if(buf.pcount()==0 && specs.pad_scheme_ & format_item_t::spacepad) {
                    prefix_space =true;
                    oss2 << ' ';
                }
                
                const Ch * tmp_beg = buf.pbase();
                size_type tmp_size = (std::min)(static_cast<size_type>(specs.truncate_),
                                                buf.pcount() );
                                                    
                
                if(static_cast<size_type>(w) <= tmp_size) { 
                    
                        res.assign(tmp_beg, tmp_size);
                }
                else { 
                    
                    size_type sz = (std::min)(res_size + (prefix_space ? 1 : 0), tmp_size);
                    size_type i = prefix_space;
                    for(; i<sz && tmp_beg[i] == res[i - (prefix_space ? 1 : 0)]; ++i) {}
                    if(i>=tmp_size) i=prefix_space;
                    res.assign(tmp_beg, i);
                                        std::streamsize d = w - static_cast<std::streamsize>(tmp_size);
                                        (void)( (!!(d>0)) || (_wassert(L"d>0", L"C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/feed_args.hpp", 227), 0) );
                    res.append(static_cast<size_type>( d ), oss2.fill());
                    res.append(tmp_beg+i, tmp_size-i);
                    (void)( (!!(i+(tmp_size-i)+(std::max)(d,(std::streamsize)0) == static_cast<size_type>(w))) || (_wassert(L"i+(tmp_size-i)+(std::max)(d,(std::streamsize)0) == static_cast<size_type>(w)", L"C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/feed_args.hpp", 231), 0) );
#line 232 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/feed_args.hpp"
                    (void)( (!!(res.size() == static_cast<size_type>(w))) || (_wassert(L"res.size() == static_cast<size_type>(w)", L"C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/feed_args.hpp", 232), 0) );
                }
            }
        }
        buf.clear_buffer();

#pragma warning(pop)
#line 240 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/feed_args.hpp"
    } 


    template< class Ch, class Tr, class Alloc, class T> 
    void distribute (basic_format<Ch,Tr, Alloc>& self, T x) {
        
        if(self.cur_arg_ >= self.num_args_)  {
            if( self.exceptions() & too_many_args_bit )
                boost::throw_exception(too_many_args(self.cur_arg_, self.num_args_)); 
            else return;
        }
        for(unsigned long i=0; i < self.items_.size(); ++i) {
            if(self.items_[i].argN_ == self.cur_arg_) {
                put<Ch, Tr, Alloc, T> (x, self.items_[i], self.items_[i].res_, 
                                self.buf_, boost::get_pointer(self.loc_) );
            }
        }
    }

    template<class Ch, class Tr, class Alloc, class T> 
    basic_format<Ch, Tr, Alloc>&  
    feed (basic_format<Ch,Tr, Alloc>& self, T x) {
        if(self.dumped_) self.clear();
        distribute<Ch, Tr, Alloc, T> (self, x);
        ++self.cur_arg_;
        if(self.bound_.size() != 0) {
                while( self.cur_arg_ < self.num_args_ && self.bound_[self.cur_arg_] )
                    ++self.cur_arg_;
        }
        return self;
    }
    
} 
} 
} 


#line 278 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/feed_args.hpp"
#line 50 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format.hpp"
#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/parsing.hpp"




















#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"


































#line 36 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"













#line 50 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\assert.h"




















#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\crtdefs.h"







































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\assert.h"










extern "C" {
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\assert.h"

 void __cdecl _wassert(  const wchar_t * _Message,   const wchar_t *_File,   unsigned _Line);


}
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\assert.h"



#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\INCLUDE\\assert.h"
#line 51 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"

#line 53 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"











#line 65 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"













#line 79 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"
  




































  



#line 121 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"











#line 133 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"



#line 137 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/assert.hpp"
#line 22 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/parsing.hpp"


namespace boost {
namespace io {
namespace detail {







#line 35 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/parsing.hpp"
    template<class T>
    const T& const_or_not(const T& x) { 
        return x;
    }
#line 40 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/parsing.hpp"

    template<class Ch, class Facet> inline
    char wrap_narrow(const Facet& fac, Ch c, char deflt) {
        return const_or_not(fac).narrow(c, deflt);
    }

    template<class Ch, class Facet> inline
    bool wrap_isdigit(const Facet& fac, Ch c) {

        return fac.is(std::ctype<Ch>::digit, c);




#line 55 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/parsing.hpp"
    }
 
    template<class Iter, class Facet> 
    Iter wrap_scan_notdigit(const Facet & fac, Iter beg, Iter end) {
        using namespace std;
        for( ; beg!=end && wrap_isdigit(fac, *beg); ++beg) ;
        return beg;
    }


    
    
    
    
    template<class Res, class Iter, class Facet>
    Iter str2int (const Iter & start, const Iter & last, Res & res, 
                 const Facet& fac) 
    {
        using namespace std;
        Iter it;
        res=0;
        for(it=start; it != last && wrap_isdigit(fac, *it); ++it ) {
            char cur_ch = wrap_narrow(fac, *it, 0); 
            res *= 10;
            res += cur_ch - '0'; 
        }
        return it;
    }

    
    
    
    
    
    template<class Iter, class Facet>
    Iter skip_asterisk(Iter start, Iter last, const Facet& fac) 
    {
        using namespace std;
        ++ start;
        start = wrap_scan_notdigit(fac, start, last);
        if(start!=last && *start== const_or_not(fac).widen( '$') )
            ++start;
        return start;
    }


    
    
    
    inline void maybe_throw_exception(unsigned char exceptions, 
                                      std::size_t pos, std::size_t size)
    {
        if(exceptions & io::bad_format_string_bit)
            boost::throw_exception(io::bad_format_string(pos, size) );
    }
    

    
    
    
    
    
    
    
    
    
    
    template<class Ch, class Tr, class Alloc, class Iter, class Facet>
    bool parse_printf_directive(Iter & start, const Iter& last, 
                                detail::format_item<Ch, Tr, Alloc> * fpar,
                                const Facet& fac,
                                std::size_t offset, unsigned char exceptions)
    {
        typedef typename basic_format<Ch, Tr, Alloc>::format_item_t format_item_t;

        fpar->argN_ = format_item_t::argN_no_posit;  
        bool precision_set = false;
        bool in_brackets=false;
        Iter start0 = start;
        std::size_t fstring_size = last-start0+offset;

        if(start>= last) { 
                maybe_throw_exception(exceptions, start-start0 + offset, fstring_size);
                return false;
        }          
          
        if(*start== const_or_not(fac).widen( '|')) {
            in_brackets=true;
            if( ++start >= last ) {
                maybe_throw_exception(exceptions, start-start0 + offset, fstring_size);
                return false;
            }
        }

        
        if(*start== const_or_not(fac).widen( '0')) 
            goto parse_flags;

        
        if(wrap_isdigit(fac, *start)) {
            int n;
            start = str2int(start, last, n, fac);
            if( start >= last ) {
                maybe_throw_exception(exceptions, start-start0+offset, fstring_size);
                return false;
            }
            
            
            if( *start ==  const_or_not(fac).widen( '%') ) {
                fpar->argN_ = n-1;
                ++start;
                if( in_brackets) 
                    maybe_throw_exception(exceptions, start-start0+offset, fstring_size); 
                
                else
                    return true;
            }

            if ( *start== const_or_not(fac).widen( '$') ) {
                fpar->argN_ = n-1;
                ++start;
            } 
            else {
                
                fpar->fmtstate_.width_ = n;
                fpar->argN_  = format_item_t::argN_no_posit;
                goto parse_precision;
            }
        }
    
      parse_flags: 
        
        while ( start != last) { 
            
            switch ( wrap_narrow(fac, *start, 0)) {
            case '\'' : break; 
            case 'l':
            case 'h':  
                break;
            case '-':
                fpar->fmtstate_.flags_ |= std::ios_base::left;
                break;
            case '=':
                fpar->pad_scheme_ |= format_item_t::centered;
                break;
            case '_':
                fpar->fmtstate_.flags_ |= std::ios_base::internal;
                break;
            case ' ':
                fpar->pad_scheme_ |= format_item_t::spacepad;
                break;
            case '+':
                fpar->fmtstate_.flags_ |= std::ios_base::showpos;
                break;
            case '0':
                fpar->pad_scheme_ |= format_item_t::zeropad;
                
                
                break;
            case '#':
                fpar->fmtstate_.flags_ |= std::ios_base::showpoint | std::ios_base::showbase;
                break;
            default:
                goto parse_width;
            }
            ++start;
        } 

        if( start>=last) {
            maybe_throw_exception(exceptions, start-start0+offset, fstring_size);
            return true; 
        }
      parse_width:
        
        
        if(*start == const_or_not(fac).widen( '*') )
            start = skip_asterisk(start, last, fac); 
        if(start!=last && wrap_isdigit(fac, *start))
            start = str2int(start, last, fpar->fmtstate_.width_, fac);

      parse_precision:
        if( start>= last) { 
            maybe_throw_exception(exceptions, start-start0+offset, fstring_size);
            return true;
        }
        
        if (*start== const_or_not(fac).widen( '.')) {
            ++start;
            if(start != last && *start == const_or_not(fac).widen( '*') )
                start = skip_asterisk(start, last, fac); 
            if(start != last && wrap_isdigit(fac, *start)) {
                start = str2int(start, last, fpar->fmtstate_.precision_, fac);
                precision_set = true;
            }
            else
                fpar->fmtstate_.precision_ =0;
        }
    
        
        while( start != last && ( *start== const_or_not(fac).widen( 'l') 
                                  || *start== const_or_not(fac).widen( 'L') 
                                  || *start== const_or_not(fac).widen( 'h')) )
            ++start;
        if( start>=last) {
            maybe_throw_exception(exceptions, start-start0+offset, fstring_size);
            return true;
        }

        if( in_brackets && *start== const_or_not(fac).widen( '|') ) {
            ++start;
            return true;
        }
        switch ( wrap_narrow(fac, *start, 0) ) {
        case 'X':
            fpar->fmtstate_.flags_ |= std::ios_base::uppercase;
        case 'p': 
        case 'x':
            fpar->fmtstate_.flags_ &= ~std::ios_base::basefield;
            fpar->fmtstate_.flags_ |= std::ios_base::hex;
            break;

        case 'o':
            fpar->fmtstate_.flags_ &= ~std::ios_base::basefield;
            fpar->fmtstate_.flags_ |=  std::ios_base::oct;
            break;

        case 'E':
            fpar->fmtstate_.flags_ |=  std::ios_base::uppercase;
        case 'e':
            fpar->fmtstate_.flags_ &= ~std::ios_base::floatfield;
            fpar->fmtstate_.flags_ |=  std::ios_base::scientific;

            fpar->fmtstate_.flags_ &= ~std::ios_base::basefield;
            fpar->fmtstate_.flags_ |=  std::ios_base::dec;
            break;
      
        case 'f':
            fpar->fmtstate_.flags_ &= ~std::ios_base::floatfield;
            fpar->fmtstate_.flags_ |=  std::ios_base::fixed;
        case 'u':
        case 'd':
        case 'i':
            fpar->fmtstate_.flags_ &= ~std::ios_base::basefield;
            fpar->fmtstate_.flags_ |=  std::ios_base::dec;
            break;

        case 'T':
            ++start;
            if( start >= last)
                maybe_throw_exception(exceptions, start-start0+offset, fstring_size);
            else
                fpar->fmtstate_.fill_ = *start;
            fpar->pad_scheme_ |= format_item_t::tabulation;
            fpar->argN_ = format_item_t::argN_tabulation; 
            break;
        case 't': 
            fpar->fmtstate_.fill_ = const_or_not(fac).widen( ' ');
            fpar->pad_scheme_ |= format_item_t::tabulation;
            fpar->argN_ = format_item_t::argN_tabulation; 
            break;

        case 'G':
            fpar->fmtstate_.flags_ |= std::ios_base::uppercase;
            break;
        case 'g': 
            fpar->fmtstate_.flags_ &= ~std::ios_base::basefield;
            fpar->fmtstate_.flags_ |=  std::ios_base::dec;

            
            fpar->fmtstate_.flags_ &= ~std::ios_base::floatfield; 
            break;

        case 'C':
        case 'c': 
            fpar->truncate_ = 1;
            break;
        case 'S':
        case 's': 
            if(precision_set) 
                fpar->truncate_ = fpar->fmtstate_.precision_;
            fpar->fmtstate_.precision_ = 6; 
            break;
        case 'n' :  
            fpar->argN_ = format_item_t::argN_ignored;
            break;
        default: 
            maybe_throw_exception(exceptions, start-start0+offset, fstring_size);
        }
        ++start;

        if( in_brackets ) {
            if( start != last && *start== const_or_not(fac).widen( '|') ) {
                ++start;
                return true;
            }
            else  maybe_throw_exception(exceptions, start-start0+offset, fstring_size);
        }
        return true;
    }
    

    template<class String, class Facet>
    int upper_bound_from_fstring(const String& buf, 
                                 const typename String::value_type arg_mark,
                                 const Facet& fac, 
                                 unsigned char exceptions) 
    {
        
        
        using namespace boost::io;
        typename String::size_type i1=0;
        int num_items=0;
        while( (i1=buf.find(arg_mark,i1)) != String::npos ) {
            if( i1+1 >= buf.size() ) {
                if(exceptions & bad_format_string_bit)
                    boost::throw_exception(bad_format_string(i1, buf.size() )); 
                else {
                  ++num_items;
                  break;
                }
            }
            if(buf[i1+1] == buf[i1] ) {
                i1+=2; continue; 
            }

            ++i1;
            
            i1 = detail::wrap_scan_notdigit(fac, buf.begin()+i1, buf.end()) - buf.begin();
            if( i1 < buf.size() && buf[i1] == arg_mark )
                ++i1;
            ++num_items;
        }
        return num_items;
    }
    template<class String> inline
    void append_string(String& dst, const String& src, 
                       const typename String::size_type beg, 
                       const typename String::size_type end) {

        dst.append(src.begin()+beg, src.begin()+end);


#line 398 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/parsing.hpp"
    }

} 
} 






    template<class Ch, class Tr, class Alloc>
    basic_format<Ch, Tr, Alloc>& basic_format<Ch, Tr, Alloc>:: 
    parse (const string_type& buf) {
        
        using namespace std;

        const std::ctype<Ch> & fac = std::use_facet< std::ctype<Ch> >(getloc());



#line 419 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/parsing.hpp"

        const Ch arg_mark = io::detail::const_or_not(fac).widen( '%');
        bool ordered_args=true; 
        int max_argN=-1;

        
        int num_items = io::detail::upper_bound_from_fstring(buf, arg_mark, fac, exceptions());
        make_or_reuse_data(num_items);

        
        num_items=0;
        typename string_type::size_type i0=0, i1=0;
        typename string_type::const_iterator it;
        bool special_things=false;
        int cur_item=0;
        while( (i1=buf.find(arg_mark,i1)) != string_type::npos ) {
            string_type & piece = (cur_item==0) ? prefix_ : items_[cur_item-1].appendix_;
            if( buf[i1+1] == buf[i1] ) { 
                io::detail::append_string(piece, buf, i0, i1+1);
                i1+=2; i0=i1;
                continue; 
            }
            (void)( (!!(static_cast<unsigned int>(cur_item) < items_.size() || cur_item==0)) || (_wassert(L"static_cast<unsigned int>(cur_item) < items_.size() || cur_item==0", L"C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/parsing.hpp", 441), 0) );

            if(i1!=i0) {
                io::detail::append_string(piece, buf, i0, i1);
                i0=i1;
            }
            ++i1;
            it = buf.begin()+i1;
            bool parse_ok = io::detail::parse_printf_directive(
                it, buf.end(), &items_[cur_item], fac, i1, exceptions());
            i1 = it - buf.begin();
            if( ! parse_ok ) 
                continue; 
            i0=i1;
            items_[cur_item].compute_states(); 

            int argN=items_[cur_item].argN_;
            if(argN == format_item_t::argN_ignored)
                continue;
            if(argN ==format_item_t::argN_no_posit)
                ordered_args=false;
            else if(argN == format_item_t::argN_tabulation) special_things=true;
            else if(argN > max_argN) max_argN = argN;
            ++num_items;
            ++cur_item;
        } 
        (void)( (!!(cur_item == num_items)) || (_wassert(L"cur_item == num_items", L"C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/parsing.hpp", 467), 0) );
    
        
        {
            string_type & piece = (cur_item==0) ? prefix_ : items_[cur_item-1].appendix_;
            io::detail::append_string(piece, buf, i0, buf.size());
        }
    
        if( !ordered_args) {
            if(max_argN >= 0 ) {  
                if(exceptions() & io::bad_format_string_bit)
                    boost::throw_exception(io::bad_format_string(max_argN, 0));
                
            }
            
            int non_ordered_items = 0;
            for(int i=0; i< num_items; ++i)
                if(items_[i].argN_ == format_item_t::argN_no_posit) {
                    items_[i].argN_ = non_ordered_items;
                    ++non_ordered_items;
                }
            max_argN = non_ordered_items-1;
        }
    
        
        items_.resize(num_items, format_item_t(io::detail::const_or_not(fac).widen( ' ')) );

        if(special_things) style_ |= special_needs;
        num_args_ = max_argN + 1;
        if(ordered_args) style_ |=  ordered;
        else style_ &= ~ordered;
        return *this;
    }

} 


#line 505 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/parsing.hpp"
#line 51 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format.hpp"


#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/free_funcs.hpp"


















namespace boost {

    template<class Ch, class Tr, class Alloc> inline 
    std::basic_string<Ch, Tr, Alloc> str(const basic_format<Ch, Tr, Alloc>& f) {
        
        return f.str();
    }
    namespace io {
         using ::boost::str; 
    }   


        template<class Ch, class Tr, class Alloc>
        std::basic_ostream<Ch, Tr> & 
        operator<<( std::basic_ostream<Ch, Tr> & os,
                    const basic_format<Ch, Tr, Alloc>& f)





#line 41 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/free_funcs.hpp"
        
    {
        typedef boost::basic_format<Ch, Tr, Alloc>   format_t;
        if(f.items_.size()==0) 
            os << f.prefix_;
        else {
            if(f.cur_arg_ < f.num_args_)
                if( f.exceptions() & io::too_few_args_bit )
                    
                    boost::throw_exception(io::too_few_args(f.cur_arg_, f.num_args_)); 
            if(f.style_ & format_t::special_needs) 
                os << f.str();
            else {
                
                os << f.prefix_;
                for(unsigned long i=0; i<f.items_.size(); ++i) {
                    const typename format_t::format_item_t& item = f.items_[i];
                    os << item.res_;
                    os << item.appendix_;
                }
            }
        }
        f.dumped_=true;
        return os;
    }

} 


#line 71 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/free_funcs.hpp"
#line 54 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format.hpp"



#line 1 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/detail/unset_macros.hpp"















#line 17 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/detail/unset_macros.hpp"





#line 23 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format/detail/unset_macros.hpp"












#line 58 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format.hpp"

#line 60 "C:\\Users\\Alvaro\\Development\\boost_1_54_0_msvc_12\\boost/format.hpp"
#line 23 "c:\\users\\alvaro\\development\\open-airbus-cockpit\\oacsd\\liboac-commons\\include\\liboac\\format.h"




namespace oac {

inline
std::string format(boost::format& fmt)
{
   return str(fmt);
}

template <typename T, typename... Args>
std::string format(
      boost::format& fmt, const T& t, const Args&... args)
{
   return format(fmt % t, args...);
}

template <typename... Args>
std::string format(
      const char* fmt, const Args&... args)
{
   return format(boost::format(fmt), args...);
}

} 

#line 52 "c:\\users\\alvaro\\development\\open-airbus-cockpit\\oacsd\\liboac-commons\\include\\liboac\\format.h"
#line 28 "C:\\Users\\Alvaro\\Development\\open-airbus-cockpit\\oacsd\\liboac-commons\\include\\liboac\\exception.h"

#pragma warning( disable : 4290 )

namespace oac {





class exception : public std::exception
{
public:

   exception(const exception& e)
      : _source(e._source),
        _msg(e._msg),
        _cause(e._cause)
   {}

   virtual ~exception() {}

   


   std::string message() const
   { return _msg; }

   



   std::string report() const
   {
      if (_cause)
      {
         auto oac_cause = dynamic_cast<exception*>(_cause.get());
         return format(
               "in %s, %s; caused by:\n%s",
               _source,
               _msg,
               oac_cause ? oac_cause->report() : _cause->what());
      }
      else
         return format("in %s, %s", _source, _msg);
   }

   


   std::weak_ptr<std::exception> cause() const
   { return std::weak_ptr<std::exception>(_cause); }

   virtual const char* what() const throw()
   { return _msg.c_str(); }

protected:

   exception()
      : _source("unknown source"),
        _msg("Unknown error"),
        _cause(nullptr)
   {}

   template <typename... Args>
   exception(const char* fmt, const Args&... args)
      : _source("unknown source"),
        _msg(format(fmt, args...)),
        _cause(nullptr)
   {}

   template <typename Exception, typename... Args>
   exception(const Exception& cause, const char* fmt, const Args&... args)
      : _source("unknown source"),
        _msg(format(fmt, args...)),
        _cause(std::make_shared<Exception>(cause))
   {}

   void _set_source(const std::string& source)
   { _source = source; }

   void _set_message(const std::string& msg)
   { _msg = msg; }

   template <typename Exception>
   void _set_cause(const Exception& cause)
   { _cause = std::make_shared<Exception>(cause); }

private:

   std::string _source;
   std::string _msg;
   std::shared_ptr<std::exception> _cause;
};

































































































































template <typename Enum>
class enum_out_of_range_error : public oac::exception { public: enum_out_of_range_error( const Enum& value  ) : oac::exception("invalid value %d out of range of enumeration", int(value)),  _value (value)   {} template <typename Exception> enum_out_of_range_error(  const Enum& value  , const Exception& cause) : oac::exception(cause, "invalid value %d out of range of enumeration", int(value)),  _value (value)   {} const Enum& get_value() const { return _value; }   enum_out_of_range_error& set_source(const std::string& source) { _set_source(source); return *this; } private: Enum _value;   };
#line 254 "C:\\Users\\Alvaro\\Development\\open-airbus-cockpit\\oacsd\\liboac-commons\\include\\liboac\\exception.h"

} 

#line 258 "C:\\Users\\Alvaro\\Development\\open-airbus-cockpit\\oacsd\\liboac-commons\\include\\liboac\\exception.h"
#line 23 "exception-test.cpp"

using namespace oac;



struct abstract_exception : ::oac::exception { abstract_exception(const abstract_exception& e) : ::oac::exception(e) {} protected: template <typename... Args> abstract_exception(const char* fmt, const Args&... args) : ::oac::exception(fmt, args...) {} template <typename Exception, typename... Args> abstract_exception( const Exception& cause, const char* fmt, const Args&... args) : ::oac::exception(cause, fmt, args...) {} template <typename Exception> abstract_exception(const Exception& cause) : ::oac::exception(cause) {} };

namespace SimpleException { static boost::unit_test::ut_detail::auto_test_unit_registrar SimpleException_registrar30( "SimpleException" );

class simple_exception : public abstract_exception { public: simple_exception() : abstract_exception(("Simple error occurred")) {} template <typename Exception> simple_exception(const Exception& cause) : abstract_exception(cause, ("Simple error occurred")) {} simple_exception& set_source(const std::string& source) { _set_source(source); return *this; } };
#line 36 "exception-test.cpp"

class other_simple_exception : public abstract_exception { public: other_simple_exception() : abstract_exception(("Other simple error occurred")) {} template <typename Exception> other_simple_exception(const Exception& cause) : abstract_exception(cause, ("Other simple error occurred")) {} other_simple_exception& set_source(const std::string& source) { _set_source(source); return *this; } };
#line 41 "exception-test.cpp"

struct MustHonorErrorMessage : public BOOST_AUTO_TEST_CASE_FIXTURE { void test_method(); }; static void MustHonorErrorMessage_invoker() { MustHonorErrorMessage t; t.test_method(); } struct MustHonorErrorMessage_id {}; static boost::unit_test::ut_detail::auto_test_unit_registrar MustHonorErrorMessage_registrar42( boost::unit_test::make_test_case( &MustHonorErrorMessage_invoker, "MustHonorErrorMessage" ), boost::unit_test::ut_detail::auto_tc_exp_fail< MustHonorErrorMessage_id>::instance()->value() ); void MustHonorErrorMessage::test_method()
{
   try { throw (simple_exception()) .set_source(format("%s:%d", "exception-test.cpp", 44)); }
   catch (simple_exception& e)
   {
      do { ::boost::unit_test::unit_test_log.set_checkpoint( boost::unit_test::const_string( "exception-test.cpp", sizeof( "exception-test.cpp" ) - 1 ), static_cast<std::size_t>(49) ); ::boost::test_tools::tt_detail::check_frwd( ::boost::test_tools::tt_detail::equal_impl_frwd(), ::boost::unit_test::lazy_ostream::instance() << "", boost::unit_test::const_string( "exception-test.cpp", sizeof( "exception-test.cpp" ) - 1 ), static_cast<std::size_t>(49), ::boost::test_tools::tt_detail::CHECK, ::boost::test_tools::tt_detail::CHECK_EQUAL , "Simple error occurred" , "\"Simple error occurred\"" , e.message() , "e.message()"   ); } while( ::boost::test_tools::dummy_cond );
#line 50 "exception-test.cpp"
   }
}

struct MustReportErrorMessageWhenMissingCause : public BOOST_AUTO_TEST_CASE_FIXTURE { void test_method(); }; static void MustReportErrorMessageWhenMissingCause_invoker() { MustReportErrorMessageWhenMissingCause t; t.test_method(); } struct MustReportErrorMessageWhenMissingCause_id {}; static boost::unit_test::ut_detail::auto_test_unit_registrar MustReportErrorMessageWhenMissingCause_registrar53( boost::unit_test::make_test_case( &MustReportErrorMessageWhenMissingCause_invoker, "MustReportErrorMessageWhenMissingCause" ), boost::unit_test::ut_detail::auto_tc_exp_fail< MustReportErrorMessageWhenMissingCause_id>::instance()->value() ); void MustReportErrorMessageWhenMissingCause::test_method()
{
   try { throw (simple_exception()) .set_source(format("%s:%d", "exception-test.cpp", 55)); }
   catch (simple_exception& e)
   {
      do { ::boost::unit_test::unit_test_log.set_checkpoint( boost::unit_test::const_string( "exception-test.cpp", sizeof( "exception-test.cpp" ) - 1 ), static_cast<std::size_t>(64) ); ::boost::test_tools::tt_detail::check_frwd( ::boost::test_tools::tt_detail::equal_impl_frwd(), ::boost::unit_test::lazy_ostream::instance() << "", boost::unit_test::const_string( "exception-test.cpp", sizeof( "exception-test.cpp" ) - 1 ), static_cast<std::size_t>(64), ::boost::test_tools::tt_detail::CHECK, ::boost::test_tools::tt_detail::CHECK_EQUAL , format( "in %s:%d, %s", "exception-test.cpp", (64 + (-9)), "Simple error occurred") , "format( \"in %s:%d, %s\", \"exception-test.cpp\", (64 + (-9)), \"Simple error occurred\")" , e.report() , "e.report()"   ); } while( ::boost::test_tools::dummy_cond );
#line 65 "exception-test.cpp"
   }
}

struct MustReportWhenItHasCause : public BOOST_AUTO_TEST_CASE_FIXTURE { void test_method(); }; static void MustReportWhenItHasCause_invoker() { MustReportWhenItHasCause t; t.test_method(); } struct MustReportWhenItHasCause_id {}; static boost::unit_test::ut_detail::auto_test_unit_registrar MustReportWhenItHasCause_registrar68( boost::unit_test::make_test_case( &MustReportWhenItHasCause_invoker, "MustReportWhenItHasCause" ), boost::unit_test::ut_detail::auto_tc_exp_fail< MustReportWhenItHasCause_id>::instance()->value() ); void MustReportWhenItHasCause::test_method()
{
   try { throw (simple_exception()) .set_source(format("%s:%d", "exception-test.cpp", 70)); }
   catch (simple_exception& e1)
   {
      try { throw (other_simple_exception(e1)) .set_source(format("%s:%d", "exception-test.cpp", 73)); }
      catch (other_simple_exception& e2)
      {
         auto msg1 = format(
               "in %s:%d, %s",
               "exception-test.cpp",
               (79 + (-6)),
               "Other simple error occurred");
         auto msg2 = format(
               "in %s:%d, %s",
               "exception-test.cpp",
               (84 + (-14)),
               "Simple error occurred");
         do { ::boost::unit_test::unit_test_log.set_checkpoint( boost::unit_test::const_string( "exception-test.cpp", sizeof( "exception-test.cpp" ) - 1 ), static_cast<std::size_t>(88) ); ::boost::test_tools::tt_detail::check_frwd( ::boost::test_tools::tt_detail::equal_impl_frwd(), ::boost::unit_test::lazy_ostream::instance() << "", boost::unit_test::const_string( "exception-test.cpp", sizeof( "exception-test.cpp" ) - 1 ), static_cast<std::size_t>(88), ::boost::test_tools::tt_detail::CHECK, ::boost::test_tools::tt_detail::CHECK_EQUAL , format("%s; caused by:\n%s", msg1, msg2) , "format(\"%s; caused by:\\n%s\", msg1, msg2)" , e2.report() , "e2.report()"   ); } while( ::boost::test_tools::dummy_cond );
#line 89 "exception-test.cpp"
      }
   }
}

static boost::unit_test::ut_detail::auto_test_unit_registrar end_suite93_registrar93( 1 ); }



namespace ComplexException { static boost::unit_test::ut_detail::auto_test_unit_registrar ComplexException_registrar97( "ComplexException" );

class complex_exception : public oac::exception { public: complex_exception( const std::string& name , const int& number  ) : oac::exception("Complex error with number %d and name %s", number, name),  _name (name) , _number (number)   {} template <typename Exception> complex_exception(  const std::string& name , const int& number  , const Exception& cause) : oac::exception(cause, "Complex error with number %d and name %s", number, name),  _name (name) , _number (number)   {} const std::string& get_name() const { return _name; } const int& get_number() const { return _number; }   complex_exception& set_source(const std::string& source) { _set_source(source); return *this; } private: std::string _name; int _number;   };
#line 103 "exception-test.cpp"

struct MustHoldParameters : public BOOST_AUTO_TEST_CASE_FIXTURE { void test_method(); }; static void MustHoldParameters_invoker() { MustHoldParameters t; t.test_method(); } struct MustHoldParameters_id {}; static boost::unit_test::ut_detail::auto_test_unit_registrar MustHoldParameters_registrar104( boost::unit_test::make_test_case( &MustHoldParameters_invoker, "MustHoldParameters" ), boost::unit_test::ut_detail::auto_tc_exp_fail< MustHoldParameters_id>::instance()->value() ); void MustHoldParameters::test_method()
{
   try
   {
      complex_exception e("apv", 7);
      throw (e) .set_source(format("%s:%d", "exception-test.cpp", 109));
   }
   catch (const complex_exception& e)
   {
      do { ::boost::unit_test::unit_test_log.set_checkpoint( boost::unit_test::const_string( "exception-test.cpp", sizeof( "exception-test.cpp" ) - 1 ), static_cast<std::size_t>(113) ); ::boost::test_tools::tt_detail::check_frwd( ::boost::test_tools::tt_detail::equal_impl_frwd(), ::boost::unit_test::lazy_ostream::instance() << "", boost::unit_test::const_string( "exception-test.cpp", sizeof( "exception-test.cpp" ) - 1 ), static_cast<std::size_t>(113), ::boost::test_tools::tt_detail::CHECK, ::boost::test_tools::tt_detail::CHECK_EQUAL , "apv" , "\"apv\"" , e.get_name() , "e.get_name()"   ); } while( ::boost::test_tools::dummy_cond );
      do { ::boost::unit_test::unit_test_log.set_checkpoint( boost::unit_test::const_string( "exception-test.cpp", sizeof( "exception-test.cpp" ) - 1 ), static_cast<std::size_t>(114) ); ::boost::test_tools::tt_detail::check_frwd( ::boost::test_tools::tt_detail::equal_impl_frwd(), ::boost::unit_test::lazy_ostream::instance() << "", boost::unit_test::const_string( "exception-test.cpp", sizeof( "exception-test.cpp" ) - 1 ), static_cast<std::size_t>(114), ::boost::test_tools::tt_detail::CHECK, ::boost::test_tools::tt_detail::CHECK_EQUAL , 7 , "7" , e.get_number() , "e.get_number()"   ); } while( ::boost::test_tools::dummy_cond );
   }
}

struct MustReportExpectedMessage : public BOOST_AUTO_TEST_CASE_FIXTURE { void test_method(); }; static void MustReportExpectedMessage_invoker() { MustReportExpectedMessage t; t.test_method(); } struct MustReportExpectedMessage_id {}; static boost::unit_test::ut_detail::auto_test_unit_registrar MustReportExpectedMessage_registrar118( boost::unit_test::make_test_case( &MustReportExpectedMessage_invoker, "MustReportExpectedMessage" ), boost::unit_test::ut_detail::auto_tc_exp_fail< MustReportExpectedMessage_id>::instance()->value() ); void MustReportExpectedMessage::test_method()
{
   try
   {
      throw (complex_exception("apv", 7)) .set_source(format("%s:%d", "exception-test.cpp", 122));
   }
   catch (complex_exception& e)
   {
      do { ::boost::unit_test::unit_test_log.set_checkpoint( boost::unit_test::const_string( "exception-test.cpp", sizeof( "exception-test.cpp" ) - 1 ), static_cast<std::size_t>(132) ); ::boost::test_tools::tt_detail::check_frwd( ::boost::test_tools::tt_detail::equal_impl_frwd(), ::boost::unit_test::lazy_ostream::instance() << "", boost::unit_test::const_string( "exception-test.cpp", sizeof( "exception-test.cpp" ) - 1 ), static_cast<std::size_t>(132), ::boost::test_tools::tt_detail::CHECK, ::boost::test_tools::tt_detail::CHECK_EQUAL , format( "in %s:%d, %s", "exception-test.cpp", (132 + (-10)), "Complex error with number 7 and name apv") , "format( \"in %s:%d, %s\", \"exception-test.cpp\", (132 + (-10)), \"Complex error with number 7 and name apv\")" , e.report() , "e.report()"   ); } while( ::boost::test_tools::dummy_cond );
#line 133 "exception-test.cpp"
   }
}

static boost::unit_test::ut_detail::auto_test_unit_registrar end_suite136_registrar136( 1 ); }
